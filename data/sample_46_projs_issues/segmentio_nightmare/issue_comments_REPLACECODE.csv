issue_num,datetime,body,login,close_date
1061,2017-03-27 19:43:04," I am entering a value into a text box and then clicking on an anchor to submit data. When I do this Electron closes automatically.

How do I keep Electron open and force it to follow the click to the new page?",snraets,
1060,2017-03-27 16:18:03,"The <S_CODE_TOKEN> object which is set on the window object, it contains the whole electron ipcRenderer on it, and it can be accessed by any website if they only want, every website have access to core electron features.

Furthermore just a deletion of the <S_CODE_TOKEN> (set it to null in the websites code) will freeze the evaluate method.

https://github.com/electron/electron/blob/master/docs/tutorial/security.md
https://github.com/electron/electron/issues/7929

",aight8,
1060,2017-03-27 18:41:22,"Maybe update the README.md with that link? 
I feel like this is a same concern as 'eval bash install scripts' you find online. 
Trust your source before you execute against it.",chtrinh,
1059,2017-03-26 21:05:06,"Hi! 
I'd like to be able to control the ""download as"" popup to select the filename for a downloaded file. I read that it's possible by listening to 'will-download' event. Is it supported by Nightmare?",lolownia,
1059,2017-03-26 23:33:53,exactly the same problem.,aight8,
1059,2017-03-27 21:09:50,[`nightmare-download-manager`](https://github.com/rosshinkley/nightmare-download-manager) or [`nightmare-inline-download`](https://github.com/rosshinkley/nightmare-inline-download) might help you solve this.,rosshinkley,
1058,2017-03-24 12:03:19,"<S_CODE_TOKEN>



i can get console.log(1) without console.log(x)
if i something wrong?
how can i made this code to running out console.log(x)?
THX!",ShuraChow,
1058,2017-03-27 21:07:03,"Two questions: one, why are you using `.use()`, and two, what is `x`?",rosshinkley,
1057,2017-03-24 03:38:01,"The page will load if I have the browser open, but then Electron is forced to close and wait() is ignored.

If I disable JavaScript, the site remains open.

Looks like the site is redirecting itself, and I need to follow the redirection.

Also is it possible to spoof another browser, some sites are expecting me to enter a captcha value when I arrive.


Thanks",snraets,2017-03-24 17:03:15
1056,2017-03-23 15:16:30,"Would be nice if in this case wait would fail my tests. In my case I moved some code so that the variable in .wait argument became undefined. After that change, tests were passing without actually testing anything any more. So it is easy to render your tests useless with some small mistakes.",jakoivis,
1055,2017-03-23 03:33:18,"In case of show: true, the electron window is always on top.
I checked for related issues and couldn't find anything. Is there a reason to keep it this way?
If no, shouldn't it be 'alwaysOnTop: false' by default, or shouldn't there be a way to deactivate it?
",quiuquio,2017-03-27 21:02:08
1055,2017-03-27 21:02:08,"See #434 and #452.  It has to do with preventing virtual desktop switching.

You can deactivate `alwaysOnTop: false` by passing it in as an option.  I'd leave the default as `true` there as it does fix a known problem.",rosshinkley,2017-03-27 21:02:08
1054,2017-03-20 09:04:32,"Hi,

I try to render the page http://mar.mil.br/ which contains this html:

<S_CODE_TOKEN>

However I have a `wait(5000)` in my code and it never ends. Which doesn't happen if I use `wait(800)`.

Logs with wait 800:

<S_CODE_TOKEN>

And with wait 1000:

<S_CODE_TOKEN>

I don't put the whole log because it never ends. I also tried to set `waitTimeout` to 1200, but my wait doesn't timeout.

The code I'm using is able to render plenty of other pages without any problem. This is the first time I have this issue with a wait being ignored.",Khady,
1054,2017-03-27 21:16:58,"I'm betting you have a race condition with your `.evaluate()` - since the page is refreshing every 1s (per the `meta` block), your `.evaluate()` call may be executing against elements that don't exist (anymore or yet).

Do you have a `.catch()` block?  If so, what does it say?",rosshinkley,
1054,2017-03-28 01:47:26,"My evaluate is

<S_CODE_TOKEN>

I have a catch block, but it doesn't reach this block. It loops forever.",Khady,
1053,2017-03-20 02:16:29,"Is it possible for Nightmare (or by any other means E.g. JavaScript) to manipulate (inline or external) CSS styles, either before or after loading a web page?

Below is an example of what I'm looking to achieve. If a CSS rule contains the `custom-property` I'd like to duplicate or alter the property name to become `new-property`.

<S_CODE_TOKEN>

<S_CODE_TOKEN>",adamdyson,
1053,2017-03-27 20:47:00,"The short answer is yes - you could certainly use `.evaluate()` and use `document.querySelector()` to get the DOM element, then you have the entirety of CSS to play with.  Off the cuff:

<S_CODE_TOKEN>
(What I can't recall off the top of my head is if `delete` will actually delete the inline style.  You might want to have a look at MDN.)

Alternatively, you could also use `.inject()` to pull in, say, jQuery to do the same.",rosshinkley,
1052,2017-03-19 18:27:45,"Version:
`""nightmare"": ""^2.10.0"",`

**Problem**:
I'm clicking button continue, after which I should be redirected, this works sometimes, but sometimes I see next error:
<S_CODE_TOKEN>
my code part:
<S_CODE_TOKEN>",mymtwcom,
1052,2017-03-27 18:47:43,"Open the electron browser and run it a couple of times like so: 
<S_CODE_TOKEN>

You probably have to wait for form element to be loaded before you can actually type into the fields. 
More like than not there some lag and your nightmare execution is faster and it skips all the way to the wait action. 

or better yet just wait for each field before your type()
<S_CODE_TOKEN>
",chtrinh,
1052,2017-03-27 19:00:41,"@chtrinh I **waited already after click on submit for new element on page**

> or better yet just wait for each field before your type()

Not relevant to the issue
",mymtwcom,
1052,2017-03-27 20:34:07,This smells like a captcha.  Have you used `show: true` or `.url()` to verify you're getting redirected to the same place every time?,rosshinkley,
1052,2017-03-27 20:38:51,"What @rosshinkley said might be the issue.

> I waited already after click on submit for new element on page

@mymtwcom: Is the form async loaded? That is what i was referring to. DOM elements might not be settled and you need to wait for it. 

",chtrinh,
1052,2017-03-27 21:54:50,"@rosshinkley yes, I used `show: true`. I used asserts that to know, that I'm currently on page that I need.
`CAPTCHA`: No there no was captcha, cuz I used `show: true` that to make sure.
read again plz my **problem** from issue:

I'm clicking button continue, after which I should be
 redirected, **this works sometimes, but sometimes I see** next **error**

Maybe my code will help to anybody reproduce the issue, there are used temporary proxy server also(I will disable him if issue will be reproduced).
<S_CODE_TOKEN>
code: 
<S_CODE_TOKEN>",mymtwcom,
1052,2017-03-27 21:56:03,@chtrinh trouble not in registration form. Trouble with waiting for new page DOM loading,mymtwcom,
1052,2017-03-27 23:23:36,"@mymtwcom: again... `.wait('#ap_customer_name')` sometimes your form will load before you execute `type()`and since `type()` doesn't raise an exception you'll just hit `.wait('.nav-line-1')` and timeout. Nowhere in the code snippet are you waiting for the `<form>` to be load on the DOM. 

So sometimes you get lucky and sometimes you don't and your test fails.. which is the behavior you are seeing. 
",chtrinh,
1051,2017-03-19 03:40:57,"Hi.

I have several network interfaces with various IP addresses. How can I make requests to site through these IPs?

I can easily make request through proxy:
<S_CODE_TOKEN>

But how can I do this with the network interface IP that I need?",privilio,
1050,2017-03-17 18:00:18,"There is a website, where I want to type credentials using `nightmare`, log in and then click a button.

<S_CODE_TOKEN>

The problem is: button that should be clicked at the end (`#deal-of-the-day > div > div > div.dotd-main-book-summary.float-left > div.dotd-main-book-form.cf > div.float-left.free-ebook > a`) is not being clicked. It's probably because page needs some time to load. That's why I used this line:
<S_CODE_TOKEN>
To wait until it loads. But it doesn't work. If I use
<S_CODE_TOKEN>
it works properly, but this solution doesn't satisfy me. The page doesn't have to load within two seconds and sometimes it might take more.

Am I using this method wrong way? How can I run code immadiately after page load?",piotrek-k,
1050,2017-03-23 10:10:56,I had this very same problem and what helped me was setting `pollInterval` to `50` in the nightmare config. I'm not sure if this is a bug or some weird timing issue.,sbacic,
1050,2017-03-23 10:44:40,"I've only played with nightmare for a very short while, but I got the impression `click(selector)` will automatically wait for that selector to be available (I assumed with the same global timeout-value as wait() has). Seems verbose to have to place an identical `wait(selector_a)` before each and every `click(selector_a)`",ippa,
1050,2017-03-23 16:53:36,I'm sure about your exact problem but wait(selector) or wait(fn) was not working properly for me until I adjusted the pollInterval. I'm reasonably sure that you don't have to call wait() before click() unless the click() selector is loaded dynamically.,sbacic,
1050,2017-03-24 20:03:50,"To add to my original post - I've gone over the tests and found this little gem:
https://github.com/segmentio/nightmare/blob/master/test/index.js#L341

Apparently, wait can be made more reliable by adding a longer softTimeout value (I've been using 1000ms) as the second argument, eg: wait('a', 1000). Not sure why this isn't mentioned in the documentation.",sbacic,
1050,2017-03-27 18:50:22,"@sbacic: good find, didn't know about that option",chtrinh,
1049,2017-03-17 13:42:24,"I am trying the following code to take PDF of a page.

<S_CODE_TOKEN>

But I am getting the following PDF which does not have styling in it. What am I doing wrong ....
[gmail.pdf](https://github.com/segmentio/nightmare/files/850691/gmail.pdf)
",Vineeth-Mohan,2017-03-22 14:59:56
1049,2017-03-21 16:36:01,Nightmares PDF is simillar to printing. It will use `print` media selector. Try printing (or preview) your page on chrome and you'll see the same result.,iget-master,2017-03-22 14:59:56
1049,2017-03-22 14:59:56,Thanks @iget-master - I got a different direction to solve the issue.,Vineeth-Mohan,2017-03-22 14:59:56
1048,2017-03-17 09:57:39,"My setup is: 
<S_CODE_TOKEN>
to start the script, I run `npm test` 

to get that to run on headless linux, had to install Xvfb and run this command: 

<S_CODE_TOKEN>

So then the test runs successfully.  However, for some reason when I call it from motherapp.js as a spawned child process the test fails when nightmare is supposed to start, and exits without erro just ""npm ERR!""
Here is how motherapp.js spawns it: 
<S_CODE_TOKEN>
And package.json runs test like this: 
<S_CODE_TOKEN>
Any tips or suggestions to summon nightmare in this setup; or perhaps more generally - has anyone run nightmare successfully in a spawn on a headless (Linux) server? 

additional headless discussion: 
https://github.com/segmentio/nightmare/issues/224",drschwabe,2017-03-20 03:32:48
1048,2017-03-20 03:32:48,"Turns out, child exec is an event emitter.  So instead of using spawn, I solved this with: 

<S_CODE_TOKEN>

Not sure why spawn doesn't play nice with xfvb-run but exec works as shown above so all good. ",drschwabe,2017-03-20 03:32:48
1047,2017-03-16 23:53:11,And thank you for a great project!,simonweil,
1047,2017-03-17 20:55:24,I'm trying to do the same thing. I'm using a dropzone and can't seem to get images to upload. I've tried using nightmare-upload but that has failed as well.,brotzky,
1046,2017-03-15 21:16:06,"Hi,

I'm trying to save a page as PDF, everything works fine except for the size: even choosing A4 size, my output pdf looks like zoomed-in.

<S_CODE_TOKEN>

When I print the same example on Chrome, it scale is fine.
I'm pretty sure that I've seen a issue of this, but cannot found anymore!",iget-esoares,
1046,2017-03-17 03:01:49,Can you provide a sample page where you see this issue?,rosshinkley,
1045,2017-03-15 19:05:37,"Hi,

I'm trying to run nightmare.js over an PHP Script executed by nginx/PHP-FPM.
Running the same command as root or any non www-data user works as expected.
But when running over www-data user, if fails since www-data user don't have a home directory:

<S_CODE_TOKEN>

So I've tried changing Electron's path configuration as described to a folder that www-data has permissions (it's owner and 0777 chmod for testing), but the same error occurs, like my settings was not being used.

Here the relevant part of my script:

<S_CODE_TOKEN>

I'm running it over xvfb using this command:

<S_CODE_TOKEN>

If I run the same script with my own user, it works fine.
",iget-esoares,
1045,2017-03-15 19:29:32,@iget-esoares As documented [here](https://github.com/electron/electron/blob/master/docs/api/app.md#appgetpathname) there are both `home` and `appData` valid values for the paths option.  From the error you provided - `Error: Failed to get 'appData' path` - it seems like you might need to set that `appData` value in addition/instead of `home`.,johnferro,
1045,2017-03-15 19:36:39,"@johnferro I've tried both. My current -attempt- script now is:

<S_CODE_TOKEN>

",iget-esoares,
1045,2017-03-15 19:56:35,"Looking at line 122 of nightmare.js:

<S_CODE_TOKEN>

Seems like the arguments are only set after electron being initialized, so electron try to write at home directory and fails before nightmare set the home directory...",iget-esoares,
1045,2017-03-15 20:05:27,"Hmmmm, yeah looks like the paths are being set in the [runner](https://github.com/segmentio/nightmare/blob/master/lib/runner.js#L39) which would be after electron gets initialized.",johnferro,
1045,2017-03-15 20:16:09,"This can be workaround by changing php execution user or adding permissions to www-data user access /var/www. But this is a workaround, looks like a bad idea giving www-data user access to www folder.",iget-esoares,
1045,2017-03-15 20:42:26,@iget-esoares Here's an [issue](https://github.com/electron/electron/pull/5237) to be aware of. I would think judging by that fix the initialization wouldn't be an issue but not 100% sure about that. Have you tried also explicitly setting the `userData` value to something else?,johnferro,
1045,2017-03-15 20:45:34,"I've found a way to solve this:

Overriding the `$HOME` before calling nightmarejs:

<S_CODE_TOKEN>

So electron with try to write at this home path, not at user's home path.

**Note:** This still being an issue since the path's set are not being used.",iget-esoares,
1044,2017-03-14 19:56:16,"So, I know why it actually doesn't fire one after the other but I can't find how to make it work this way :L
 
I would like to: 
- get data from the page (evaluate)
- do some calculations (with external node libs)
- act on the the scroll for ex (window.scrollTo()) // I know this feature exists, just an example

I've seen many examples from @rosshinkley, read the source code and also read a lot of issues but I'm still missing something.

<S_CODE_TOKEN>

And the call :

<S_CODE_TOKEN>

The behavior with the code above is the following:
- go to duckduckgo.com
- wait 2000ms
- fire the first test()
- display scrollHeight
- fire the second test()
- display scrollHeight
- display ""It worked. Maybe"" fomr the then()

If you're able to take a little bit of time to give me some clues, it would be amazing ;)",gahabeen,2017-03-16 17:18:39
1044,2017-03-16 09:29:28,"So, it works in the way that I'm able to **scrollTo** but I can't get the following actions to work. It get stucks at the first **test()**. Any idea why?",gahabeen,2017-03-16 17:18:39
1044,2017-03-16 16:45:59,"Ok so, after some long hours of frustration and a couple of days, I just needed a couple of words from @rosshinkley to see what was wrong with my code.

Let me explain how to extend Nightmare's features using co generator and even directly through Nightmare.prototypes.

Standard way, using **nighmare.action(actionName, fn [, fn])**
<S_CODE_TOKEN>

Seems pretty neat and simple and it is - when you finally get out it works. As Nightmare is then-abled, it simply needs to get returned the **co promise**. And to specify that your action is done, simply call **done()** (and remember to add it to your arguments, at the end).

Now, if you're like me and want to extend Nightmare by inheritance, you might want to includes new methods right into the class. To do so, it's actually pretty similar than previously. We actually do manually what the **Nightmare.action()** method does => queue our action when called.

<S_CODE_TOKEN>

To do so, I simply **created an action() function** inside my method with the script and then add it to the queue and **return Nightmare** via **this**.

Oh well, this looks so easy once you get it :2

Hope this helps you!",gahabeen,2017-03-16 17:18:39
1043,2017-03-14 18:03:40,"I'm trying to debug the follow script, it works perfect till getting the download link but then fails.
Please help! The same thing using the chrome / firefox browser works perfectly fine

<S_CODE_TOKEN>",SantoshSrinivas79,2017-03-15 03:50:48
1043,2017-03-15 03:50:48,"Solved! There was target ""new"" that was triggering the open box. solved using evaluate function ... example below:

<S_CODE_TOKEN>",SantoshSrinivas79,2017-03-15 03:50:48
1042,2017-03-13 09:00:25,"hi guys, the issue is about creating a custom preload script to hook alert message or confirm dialog from browser.
main.js :
<S_CODE_TOKEN>

alertMessage.js (not do anything yet):
<S_CODE_TOKEN>

However, i got an error like:
<S_CODE_TOKEN>

Any ideas, I am appreciated.
Thanks,",nquoctuan,2017-03-27 20:31:00
1042,2017-03-15 08:13:33,"Use `path` module to solve your issue. The reason is your preload script is not getting proper paths while running in the browser unless specified.

<S_CODE_TOKEN>",entrptaher,2017-03-27 20:31:00
1042,2017-03-15 10:02:11,"hi  @entrptaher,

Thanks for your reply. Actually, the source code is to simplify the path. The thing is the script is able to load but get some issue with 'nightmare' which is inside the <S_CODE_TOKEN>

Any other idea, thanks.",nquoctuan,2017-03-27 20:31:00
1042,2017-03-15 10:04:19,"Well, I just gave you the idea. Simplify the path and it'll load without errors.",entrptaher,2017-03-27 20:31:00
1042,2017-03-15 19:19:42,"I'm going to second @entrptaher's solution.  The preload option gets passed as an option to the initialization of electron's browser window.  As documented [here](https://github.com/electron/electron/blob/master/docs/api/browser-window.md#new-browserwindowoptions): ""The value should be the absolute file path to the script.""  While it may appear that the script is loading properly because the error is showing up in the electron console, no script is getting loaded which breaks nightmare since it is requiring those two lines of preload script.",johnferro,2017-03-27 20:31:00
1042,2017-03-27 20:31:00,Closing this as it seems resolved.,rosshinkley,2017-03-27 20:31:00
1041,2017-03-12 16:15:59,"I have complex code inside evaluate, console.log is not useful inside evaluate.",iwxfer,
1041,2017-03-15 09:46:43,"Maybe something like this might be helpful. Maybe there is something we still have to explore. Maybe it's there but just not documented. :)

![2017-03-15 15_44_47](https://cloud.githubusercontent.com/assets/8284972/23942403/63aa83c2-0996-11e7-882b-f9b580f6e538.png)

Then Each time I update the `runMe` file, it get's executed on that page in isolation. After I'm satisfied with results, I can change the codes into evaluate.

![2017-03-15 15_44_56-example domain](https://cloud.githubusercontent.com/assets/8284972/23942431/7cd31d28-0996-11e7-9a82-597e6ece6d5e.png)

Code: https://gist.github.com/entrptaher/57752da677dda4af90b8565b1969aa37",entrptaher,
1040,2017-03-10 23:54:29,,meesg,2017-03-17 11:06:56
1040,2017-03-17 03:04:51,"""Before the page is fully loaded"" may be a bit misleading.  Before `dom-ready`? No.  Before client-side scripts have finished rendering the page? Possibly.  What are you trying to do?",rosshinkley,2017-03-17 11:06:56
1039,2017-03-10 10:00:35,"nightmare fails when image files are there for a web page on headless linux. When <img> tags removed it works normally.

So for continuous integration  i am using <S_CODE_TOKEN> . 

Any better way or configuration to solve this problem.",aptro,
1039,2017-03-10 20:12:46,Could you supply a repro or a minimum case for what you're trying to do?,rosshinkley,
1038,2017-03-09 06:00:53,"When I makes many nightmares, they are on one process, so I end one, they all end.",canhongpoxiao,2017-03-20 04:59:09
1038,2017-03-10 20:20:06,You could use multiple Nightmare instances instead.  Using one instance for multiple concurrent operations  is not supported.,rosshinkley,2017-03-20 04:59:09
1037,2017-03-08 23:16:48,"I am getting this error, is it possible to get more information where it happens?",iwxfer,2017-03-17 04:37:07
1037,2017-03-09 20:19:48,"I just discovered I can debug with `set DEBUG=nightmare & node spider.js`, but already don't have enough information to fix the issue. Any ideas?

       nightmare queuing process start +0ms                                                                                        
       nightmare queueing action ""goto"" for http://www.google.com +10ms                                                            
       nightmare queueing action ""type"" +23ms                                                                                      
       nightmare queueing action ""click"" +0ms                                                                                      
       nightmare queueing action ""wait"" +1ms                                                                                       
       nightmare queueing action ""evaluate"" +0ms                                                                                   
       nightmare running +1ms                                                                                                      
       nightmare electron child process exited with code 0: success! +5s                                                           
     (node:7912) UnhandledPromiseRejectionWarning: Unhandled promise rejection (rejection id: 1): Cannot read property 'focus' of null                                                                                                                           ",iwxfer,2017-03-17 04:37:07
1037,2017-03-10 03:49:16,"usually happens when you select something that doesn't exist / can't be ""focused"" on. You also didn't have a catch clause after your then.

Would be much better if you post code instead of just the error. It's trivial. We can help you more if we see some snippets.",jekku,2017-03-17 04:37:07
1037,2017-03-10 04:44:32,"In your JS console, on this very page, try:

<S_CODE_TOKEN>",jekku,2017-03-17 04:37:07
1037,2017-03-12 00:41:15,"`type` was calling `focus`, I realized that because I run an example and make it fail on wait, evaluate, click, type and goto. I got the focus error when `type` error was introduced. So, my problem is solved, but I don't know how I can see the full stack trace, it would have helped a lot. ",iwxfer,2017-03-17 04:37:07
1037,2017-03-17 04:37:07,"Two things: One, you might want to execute with `DEBUG=*`.  That will give you more helpful errors.  Two, the problem here is there _won't_ be a ""full stack trace"".  The function that does the evaluation is created, serialized, and reconstituted in the Electron instance, and as such, is sort-of-kind-of out of band.

That said, there was a conversation sort of on this topic a while back in #646.  Might be worth a read and +1. :)

Closing this issue for now as the issue seems resolved.",rosshinkley,2017-03-17 04:37:07
1036,2017-03-08 17:08:52,"When I enter:

`npm install nightmare`

in an empty directory, I get this error:

`npm WARN enoent ENOENT: no such file or directory, open <directory_I'm_in/package.json>`.

Why is this happening?",owenauch,2017-03-08 17:17:21
1035,2017-03-08 12:12:37,"http://paste.ubuntu.com/24138046/

Trying to type something here but not working because that input has not any id value.Possible to type without using id value ? I did try this,


 .type('#inputEmail', 'gggggggggmail@gmail.com')

but no luck.",b3mb4m,2017-03-09 09:34:29
1034,2017-03-08 04:29:03,"When I type ""npm install nightmare"", installation is stuck like this and never proceed:

<S_CODE_TOKEN>

I almost wait 20 minutes, but nothing changed. I removed whole node_module and retried, but still same.

I'm using
- node v6.9.2
- npm v3.10.9",rico345100,
1034,2017-03-08 08:23:36,"Nah, it just working now. Looks like some kind of network issue.",rico345100,
1034,2017-03-08 08:40:37,"Sorry, I just re-run the install, same issues happens again. When I forcely stop install and re-install, it saids:

> Electron failed to install correctly, please delete node_modules/electron and try installing again

So remove node_modules and npm install, same problem continues.

Oh, I forgot to mention it, I'm using MacOS 10.11.3 El Capitan.",rico345100,
1034,2017-03-15 10:00:17,"Can you try the following code and see when it's getting stuck?
 - `npm install --verbose --save nightmare`

Also, you can try other package managers/wrappers like `yarn` 
and run either of the following commands, 
 - `yarn add nightmare`
 - `yarn add --verbose nightmare`

You don't have to share the whole log directly, you can see where it gets stuck and tell us.",entrptaher,
1033,2017-03-07 21:28:36,subj,dimkir,2017-03-07 21:31:57
1033,2017-03-07 21:31:50,thanks!,reinpk,2017-03-07 21:31:57
1032,2017-03-06 22:40:25,"I'm trying to capture screenshots for multiple pages from a node container. to test it out I have been running this code:

<S_CODE_TOKEN>

it works perfectly on my local machine. in docker I don't even get an error. it does nothing. I'm running on the official node:6.3.0 image. could this be some type of networking issue?
",clement360,2017-03-13 15:08:41
1032,2017-03-10 04:05:26,The resolution to the screenshot issue in docker instance is found here: [https://github.com/segmentio/nightmare/issues/224#issuecomment-267195843](https://github.com/segmentio/nightmare/issues/224#issuecomment-267195843),mstraughan86,2017-03-13 15:08:41
1031,2017-03-05 15:07:11,"I have a code:
<S_CODE_TOKEN>
The element with selector `s1` is not present on the page when the `wait` is called, the `fn` each time it polls returns `false`. Then, when the element with `s1` selector added, `fn` returns `true` and poll for `fn` stops, but after that the `wait` fails with timeout. I expected that after `fn` return `true` the `wait` will continue successfully. Same with `wait(s1)`.",novoxudonoser,
1031,2017-03-17 03:20:45,"That's how it should work, and I cannot recreate the behavior you're seeing.  Can you provide a minimum repro?",rosshinkley,
1030,2017-03-04 05:08:04,"Not quite an issue per se, but this popped up in my headless env that I had to make accommodations for when rebuilding my docker images tonight.

I started to get hangs complaining with `DEBUG=nightmare` that `127: command not found - you may not have electron installed correctly`.

Further digging with `DEBUG=*` revealed electron was trying to load `libX11-xcb`, so I had to manually add that to my Dockerfile's `apt-get install` list.",adityabansod,
1029,2017-03-03 19:11:48,"I am opening 2 instances under the same ""partition"" string, note I am not using persist: but reading nightmare and electron docs, equal partition should be enough to share session

What's happening is - If I print cookies I see both share the same cookies, but If I do something like adding to cart in an ecommerce website:

**What I expect**: both windows to show item in cart, like if I had 2 chrome tabs on the same ecommerce website

**What I get**: even though on the same partition, one window shows the item in cart, the other shows an empty cart


<S_CODE_TOKEN>

If it helps the 2 browsers aren't being created at the same time, but with a few minutes difference. 

I'd appreciate any feedback if anyone has some, thanks",shmatt05,
1029,2017-03-07 17:30:08,"Too many bugs stating the same problem, yet not fixed properly,
https://github.com/segmentio/nightmare/issues?utf8=%E2%9C%93&q=persist, https://github.com/segmentio/nightmare/issues/1024 and more.

I'm replying with additional test information on par with the OP provided details.

<S_CODE_TOKEN>

This code is supposed to persist, but the first window returns the desired output, second one remains empty.
",entrptaher,
1029,2017-03-08 19:24:35,also getting the same issues with similar code,yeeezy,
1029,2017-03-17 04:22:16,"#1024 is different, for what it's worth: that's talking about a child window.  Popups are, for now, not going to work (unless you create the windows yourself, like with `nightmare-window-manager`).  See #593.

Memory serving, partitioning has never worked particularly reliably, but I _thought_ that in your case @entrptaher that the `browser1` instance had to end to write the session to disk to then consequently get picked up by `browser2`?  Also, what, exactly, would be getting persisted?  The login cookie?",rosshinkley,
1029,2017-03-17 07:26:33,"Okay, so I tried this and it did not work. Yes, the whole session and cookies was supposed to work.

Tried putting them into separate files. Did not work, tried in same file, did not work.
<S_CODE_TOKEN>

result

<S_CODE_TOKEN>

It might be a bug?",entrptaher,
1028,2017-03-01 08:33:50,"Now that node natively supports async/await (!) we can probably remove the internal queueing system and just have the actions return promises.

This would definitely be a breaking change but *should* allow for more concurrency, so you could do things like this:

<S_CODE_TOKEN>",matthewmueller,
1028,2017-03-17 04:13:56,"This would introduce an awful lot of lifting that the internal queue currently takes care of - two things that come to mind off the top of my head.  One, starting Electron is a queued action, meaning the instance does not start Electron until the first action is called as a part of the queue, and we get that for (more or less) free.  Wouldn't your approach mean all functions would have to check that?  Two, custom action creation is injected as a part of the queue after the Electron instance is started and the browser window sugar is propped up but before any of the user-queued actions are executed.  How would that work?",rosshinkley,
1027,2017-03-01 00:25:01,"So I'm trying out nightmare with the included test script, and and I keep getting stuck at on this point, TypeError: Cannot read property 'dock of undefined.
Could not find any other similair issues.

<S_CODE_TOKEN>
I am thinking that the issue is with electron, with the line const app = require('electron').app because the issue pops up when app.dock gets called.

Any ideas on how to resolve the issue?

Running on Mac 10.9, node v7.6.0, npm 4.3.0
",djmbritt,2017-03-01 02:15:09
1027,2017-03-01 02:15:09,"I managed to fix it, I'm not completely sure why it's working now.
But when I was playing around with the options: show and frame for setting up the nightmare instance it started working properly.",djmbritt,2017-03-01 02:15:09
1026,2017-02-28 18:27:02,"I'm working on an app that automates logins. I've noticed that when nightmare/electron navigates to Zapier, https://zapier.com/app/login, the renderer process continues to increase its memory use, even when there is no navigation, and the process should be idling.

Nightmare v2.9.1. I've run it both with the prebuilt electron binary and manually setting the electronPath to a new version, but the issue persists.

I don't know whether this is a Nightmare issue or an Electron issue, so I'd be interested to hear whether anyone can provide some insight into it, and whether it can be replicated.",micahsmith,2017-03-09 17:32:12
1026,2017-02-28 18:53:42,"I've had similar issues with Chromium (and Chrome for that matter) bleeding memory.  Slack and Gmail have traditionally been my go-to examples of this - leave them open for any extended period of time, and eventually the browser process will gobble up all of the available memory.  I haven't had a real chance to dig into if it's a Chromium bug or a product bug, but I suspect Zapier may have a similar problem.",rosshinkley,2017-03-09 17:32:12
1026,2017-02-28 19:31:03,"The same issue doesn't seem to happen in Chrome. I should also note that the bleed is quite fast: the usage seems to grow ~100M every few seconds. Is there any good workaround for this issue, or is it just the case that some sites are going to suck?

I mean, worst case scenario, I can arrange to kill any electron processes that get to memory hungry, but I would prefer something more elegant.

Thanks for the quick response, by the way. I really appreciate all the work you've done on this project!",micahsmith,2017-03-09 17:32:12
1026,2017-02-28 19:40:08,">The same issue doesn't seem to happen in Chrome. 

Mmm, that's troubling.

>I should also note that the bleed is quite fast: the usage seems to grow ~100M every few seconds.

That's even more troubling.  When I've seen memory leaks, I'm talking on the order of megabytes an hour (if that), not an instant gobble.  My knee-jerk would be to say ""try Electron's latest,"" but you've already tried that.

A quick gander through Electron's issues yielded electron/electron#8051 and electron/electron#7350 which seem close-ish?  Are either of those close to your case?

Also, is a minimum repro case possible?  I'm a glutton for punishment and would like to see this myself.

>Thanks for the quick response, by the way.

No problem.  Trying to get better about it, so far so good.

>I really appreciate all the work you've done on this project!

D'aw.  I can't take hardly any credit, but thank you anyway.

",rosshinkley,2017-03-09 17:32:12
1026,2017-03-01 15:03:01,"I tried to reproduce the effect yesterday after AWS went down, but was not able. Then I tried again this morning, and I could reproduce it. I've tried changing some of the options, namely, turning `show` and  `offscreen` to false, but the leak persists. Nevertheless, I'm going to include my default options, just for completeness.

<S_CODE_TOKEN>",micahsmith,2017-03-09 17:32:12
1026,2017-03-08 14:45:11,"I take it that you haven't been able to replicate, and after having tried to replicate it for several days in a row without success, I'm about to give up.

My inclination at this point is to let Nightmare/Electron run every once in a while, and periodically check to see if the leak reoccurs. I would welcome any thoughts on best methods to log and debug any leaks in the future.",micahsmith,2017-03-09 17:32:12
1026,2017-03-09 17:32:12,Haven't been able to reproduce. I'm going to go ahead and close this.,micahsmith,2017-03-09 17:32:12
1025,2017-02-28 17:44:40,"Enable confirm dialog to return default response or true if default response is undefined.
In browser, confirm dialog default selection is 'ok' so makes sense that true should be returned by default.",rjanicek,
1024,2017-02-28 07:46:39,"The window opened by parent webpage are not inherited the proxy and authentication settings the parent has, so 401 is shown.

        nightmare
	      .authentication(username, password)
	      .goto(url + '/Login.aspx')
		  .click('#MenuReport')
		  .click('#MenuMain_lbRpt')
		  .wait(2000)
		  .type('#ucDateFrom_txtDate','01-08-2016')
		  .type('#ucDateTo_txtDate','31-08-2016')
		  .click('#btnGenerate')
          .catch(done)

The popup has return 401.",zerg000000,
1024,2017-03-17 04:24:59,"Popups are not directly supported by Nightmare, and while I am certain the `preload` script doesn't get inherited with popup windows, I would not be surprised if other settings such as proxy are also not inherited.",rosshinkley,
1023,2017-02-27 22:02:23,"Just ran into this today. Would be interested in providing a solution if I could get some guidance from the dev team on where to look for a root cause.

My issue is that after compiling my code with webpack nightmare.exists, nightmare.wait, nightmare.evaluate etc just hangs with no timeout. I guess something must be clashing in the way ipc is handled in webpack and in nightmare.js, because I can trace the events with the javascript function inside all the way to IPC emit, but nothing happens afterwards. Nightmare.goto works since it requires no javascript to run in the page context.

I added a console.log to ipc.js to be able to see what are the latest events happening.
<S_CODE_TOKEN>

This is the code I ran:
<S_CODE_TOKEN>
The last line is never executed so I never know if the button was found. If I run this without webpack, it works though.

These are the last messages logged:
<S_CODE_TOKEN>


My nightmare app is compiled using target:electron in webpack since I'm using electron to run nightmare anyway. This works fine, there are no issues starting the app, only on nightmare.exists, wait, evaluate etc as mentioned above.

Any help is appreciated on how I could troubleshoot this further.

From my package json:
<S_CODE_TOKEN>

This is my webpack config:
<S_CODE_TOKEN>

And a super simple webpack.loader.js:
<S_CODE_TOKEN>

",tgemes,
1022,2017-02-27 10:02:12,"https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/nightmare/index.d.ts

Who, Update, Help!",CatsMiaow,2017-03-27 21:10:23
1022,2017-02-28 04:25:05,"This seems like an issue you should open with the `DefinitelyTyped` project, as we don't have any control over their typedefs.",stephenmathieson,2017-03-27 21:10:23
1022,2017-03-27 21:10:23,Closing as this is a `DefinitelyTyped` issue.,rosshinkley,2017-03-27 21:10:23
1021,2017-02-26 22:07:07,"First off, I have to thank everyone who has worked on nightmare! Coming from phantom, it's been such a relief and pleasure to use so far.

I'm currently working a project that performs a kind of breadth-first graph traversal to find broken links. I am creating (for now) eight Nightmare instances that make parallel/concurrent requests to perform the traversal. It works very well at the beginning, visiting about 210-220 links per minute. It pretty evenly slows down from there until about 800 links have been traversed. Around 800 links, even though the instances are explicitly created with `show: false`, the processes begin to show (windows pop up), and once the windows pop up, those Nightmare instances seem to be hung.

First, I create workers:

<S_CODE_TOKEN>

Then I define a `login` function:

<S_CODE_TOKEN>

Then I put it all together:

<S_CODE_TOKEN>

I'm assuming that this is a memory issue. However, I thought that creating the Nightmare instances a single time at the beginning would prevent this kind of issue. Is this issue related to the fact that all of the instances share a single partition? Perhaps the accumulated cookies/local storage becomes too much to handle? If that's the case, is there a better way to handle the initial login and/or partitioning? Would it be helpful to, every so often, call `end()` on the Nightmare instances and create new ones? I'm new to `electron` and`nightmare`, so any help moving forward would be much appreciated!",louisscruz,2017-03-01 04:37:36
1021,2017-02-26 22:35:53,"I just ran another test. When I use 20 workers, I get significantly further, but the processes all eventually hang. This time I got to this point (in my custom logs):

<S_CODE_TOKEN>

Looking at activity monitor, I'm going from about 7gb of used memory to 14gb of used memory by the end (out of my total of 16gb). This seems to confirm that it is indeed a memory issue.",louisscruz,2017-03-01 04:37:36
1021,2017-02-27 01:46:03,"@louisscruz I'm just curious - what happens if you use different partitions? In your code, e.g.:

<S_CODE_TOKEN>

Would this consume more memory, or will it actually cause some speed up due to a separation of shared storages?",jekku,2017-03-01 04:37:36
1021,2017-02-27 06:58:46,@jekku When the partition name doesn't match the partition name of the initial login instance it can't proceed.,louisscruz,2017-03-01 04:37:36
1021,2017-02-28 06:09:44,"This might be a different kind of issue. Here's an update:

I've completely refactored my code and simultaneously set it so that the workers `end()` after a certain number of requests and are replaced by new instances. I figured that this would help out if there were some kind of a memory issue. However, it definitely didn't. Even when it is the case that there are fewer links and/or the ordering of the traversal changes, I can't make it through the traversal. It tends to hang around this point:

<S_CODE_TOKEN>

The last time I ran it, it appeared that when the windows pop up, there are some dialogues for selecting a download location for zip files. Some of the links that are traversed are apparently links for zip downloads. Is there any way to configure Nightmare to ignore these sorts of URLs? Or is that something that has to be done manually in my algorithm? I'd really like to test this out...

By the way, I haven't even had a chance to really optimize my crawler yet, but I'm getting about 280 - 300 link traversals per minute without distribution. Nightmare is fast!",louisscruz,2017-03-01 04:37:36
1021,2017-02-28 07:26:55,I am very interested in your crawler with Electron/Nightmare . Do you share your code?,LeMoussel,2017-03-01 04:37:36
1021,2017-02-28 19:54:58,"I haven't had a chance to dig into load testing Nightmare recently, and now you have me curious.  I'll see if I can carve out some time to tinker with this at some point soon.  I suspect you're _probably_ right, that this is a memory issue, but I haven't seen Nightmare start popping up windows unless they're generated from the site, and even then, I can't remember exactly the last time I saw that behavior.

I'd be curious if you set up something like [`nightmare-crash-reporter`](https://github.com/rosshinkley/nightmare-crash-reporter) if that might yield any useful information.  (I kind of doubt it, but hey, can't hurt to look.)

>  Some of the links that are traversed are apparently links for zip downloads. Is there any way to configure Nightmare to ignore these sorts of URLs?

If it would help, [`nightmare-download-manager`](https://github.com/rosshinkley/nightmare-download-manager) has an `ignoreDownloads` option that might help you skirt downloads specifically.  Is that what you're after?

",rosshinkley,2017-03-01 04:37:36
1021,2017-02-28 20:16:33,@LeMoussel Here's my project: https://github.com/louisscruz/hub-crawl,louisscruz,2017-03-01 04:37:36
1021,2017-02-28 20:17:01,@rosshinkley Thanks for that! I'll give that a shot later today.,louisscruz,2017-03-01 04:37:36
1021,2017-03-01 04:37:36,"@rosshinkley Wow, your `nightmare-download-manager` did it! It no longer hangs with the `ignoreDownloads: true`.

There is still a drastic slowdown in performance throughout my crawler's run. With 24 workers, my last run, which was about 10 minutes long, started around 240 links per minute and ended at 110 links per minute. I'm curious how the shared session/partition affects this.

Anyways, my original issue is cleared up. I hope this helps someone else!",louisscruz,2017-03-01 04:37:36
1020,2017-02-26 21:21:50,"Is there any way to take s screenshot in jpg format returning to buffer? It is possible to specify format in path, but I don't want to save screenshot on disk. ",novoxudonoser,2017-02-27 16:12:09
1020,2017-02-26 23:28:50,"It say how right in the doc.
https://github.com/segmentio/nightmare#user-content-screenshotpath-clip",jfmmm,2017-02-27 16:12:09
1020,2017-02-27 15:51:08,"> If path is provided, it saves the image to the disk

>> I don't want to save screenshot on disk",novoxudonoser,2017-02-27 16:12:09
1020,2017-02-27 16:03:07,"JPGs are not supported yet, pending #950.

If you want a PNG buffer, don't pass the path parameter.  Something like:

<S_CODE_TOKEN>

_edit:_ spelling error",rosshinkley,2017-02-27 16:12:09
1020,2017-02-27 20:46:41,"> If path is provided, it saves the image to the disk. **Otherwise it returns a Buffer of the image data.**",jfmmm,2017-02-27 16:12:09
1019,2017-02-26 18:49:25,"I'm trying to send a pdf back as a buffer throught an express route, but I get an error and I'm pretty sure I'm doing this correctly.

here my code:

<S_CODE_TOKEN>

<S_CODE_TOKEN>

If I look inside actions.js it seem like it should go throught the second condition and set path as undefined and then this should call done() with a buffer instead of calling fs.writeFile and return and error because path is undefined.

Is it an error or am I missing something?


",jfmmm,2017-02-28 04:12:50
1019,2017-02-26 19:35:44,"don't know if it's a premise thing, but there a function in the third parameter. If I log arguments I get three thing even tho I'm only passing 2.

<S_CODE_TOKEN>

I fixed it for now by passing false as a third parameter so it push that weird function.

<S_CODE_TOKEN>
<S_CODE_TOKEN>",jfmmm,2017-02-28 04:12:50
1019,2017-02-27 16:00:37,"I think the documentation is a little misleading here: the Nightmare `.pdf()` function does not take a callback as the second parameter.  In your initial example, Nightmare is treating the options object you're passing in as the path, and the function you're passing in as the internal `done` callback.  In the second, it's treating the options object correctly, but treating the function as the internal `done` callback.  This will almost certainly hang and not continue.

If you want the PDF as a buffer, try something like the following:

<S_CODE_TOKEN>",rosshinkley,2017-02-28 04:12:50
1019,2017-02-27 18:19:56,"Make sense, thanks for the help.

I'll close this later after testing it.",jfmmm,2017-02-28 04:12:50
1018,2017-02-25 15:33:21,"By default, Nightmare does not want to use the existing process.

This issue concerns the following issues,
https://github.com/segmentio/nightmare/pull/967
https://github.com/segmentio/nightmare/issues/856
https://github.com/segmentio/nightmare/issues/835

## What is the issue?
If installed in the dist folder to run from an electron app,
Nightmare runs fine under electron upto a certain electron version. 
If different electron path is specified, then runs perfectly.

## Explanation
Host electron can be any version but the guest electron version works only if it's electron prebuilt (ie, 1.2.5).
nightmare version 2.7.0 runs fine from within an electron app.
later versions where electron were used instead of electron prebuilt, does not work at all.

## Screenshot:
 - Nightmare with electron prebuilt works,
![](http://i.imgur.com/rysXOVz.png)

 - And, nightmare with electron does not work. Shows **bad argument**.
![](http://i.imgur.com/aM6GaeR.png)

## Workarounds and Their Problems

### Case 1
In later versions, If we specify a different electron path, then nightmare runs fine. Assuming we are running electron using `npm start` command, whereas the start command is `""start"": ""./node_modules/.bin/electron .""`, 

Works! Even though it's using the same electron package.
<S_CODE_TOKEN>

### Case 2
If we put the nightmare as an app inside a electron resources/app folder, similar behavior can be seen.

Works! 
<S_CODE_TOKEN>

Does not work! 
<S_CODE_TOKEN>

![](http://i.imgur.com/YJfselm.png)",entrptaher,
1018,2017-03-07 16:11:00,"Another solution is:
<S_CODE_TOKEN>
Add or remove `remote` if you are using nightmare in the renderer or just in the main process.

---

I've been looking around with the console, and apparently what gets loaded by `require('electron')` is the electron object, and not the electron path.
As the docs said, if you're calling electron from the Electron App, you won't get the electron .exe path, but the object, which is a case not considered in Nightmare constructor.
See https://github.com/electron-userland/electron-prebuilt#programmatic-usage

A quick fix would be:
- Check if the `electronPath` passed is a string or an Object.
- If Object, check if it's remote (renderer) or not (main) and get the electron .exe path as I've explained above.

Otherwise leave this job to the user, but it would be better specify it in the Nightmare docs.",tomsotte,
1018,2017-03-26 15:28:25,"Just confirming that this works great, thanks! Simple example code to make it easy for others to test:

<S_CODE_TOKEN>",josephrocca,
1017,2017-02-25 00:14:36,"for the last 15 + minutes, nothing is updating or changing . 

![image](https://cloud.githubusercontent.com/assets/1026325/23325720/849d795c-fac5-11e6-91e1-d91d7fc1ab91.png)


![image](https://cloud.githubusercontent.com/assets/1026325/23325729/8eb6f102-fac5-11e6-81f2-d85096407d52.png)
",jpca999,2017-02-27 17:31:12
1017,2017-02-27 17:31:11,"i had this same issue on an airplane, worked fine once i was on low-latency ground internet. definitely an electron issue though, not a nightmare issue.",reinpk,2017-02-27 17:31:12
1017,2017-02-28 02:48:32,yes it strated working  thx ,jpca999,2017-02-27 17:31:12
1016,2017-02-24 21:35:02,"I am getting this error the when visiting certain sites like:

http://www.footlocker.com/product/model:236830/sku:S80686/adidas-ultra-boost-womens/
http://www.basspro.com/Lowrance-Hook4-Fishfinder/Chartplotter-with-Nautic-Insight-Pro-and-Cover/product/175348/
",snraets,2017-02-27 16:14:59
1016,2017-02-24 21:37:46,"Hm, can you provide more information?  Is the Nightmare script running on a box behind a firewall or anything else that would prevent network requests?  If not, could you provide a minimum repro script?",rosshinkley,2017-02-27 16:14:59
1016,2017-02-24 21:54:39,"It's strange.  I can visit the sites using Chrome, or Firefox.

The error is this:

earch failed: { message: 'navigation error',
  code: -138,
  details: 'ERR_NETWORK_ACCESS_DENIED',
  url: 'http://www.footlocker.com/product/model:236830/sku:S80686/adidas-ultra-boost-womens/' }",snraets,2017-02-27 16:14:59
1016,2017-02-24 21:58:01,"Other sites work.

https://www.bedbathandbeyond.com/store/product/samsonite-reg-aspire-xlite-21-5-inch-spinner-in-black/1060001276?categoryId=12325",snraets,2017-02-27 16:14:59
1016,2017-02-24 23:38:16,I think this is our network @ work.  I tried at home and had no problem.  Thanks for responding so quickly.,snraets,2017-02-27 16:14:59
1016,2017-02-27 16:14:59,Closing for the moment.  Feel free to reopen/open a new issue if this crops up again.,rosshinkley,2017-02-27 16:14:59
1015,2017-02-24 17:26:10,"Hi, I'm new with Nightmare and I need a help.

I have a feature in my website that load more posts, 5 in 5. I need a way to click the button that load more posts, until it hide from my screen. Everytime that I click, it load more 5 posts. After all posts are loaded, it hide from my screen.

Is it possible to simulate this feature?

Thanks",marcelinhov2,2017-03-17 04:15:36
1015,2017-02-24 17:35:33,"This is _very_ similar to #625.  Modified from that issue slightly, and probably _way_ oversimplified:

<S_CODE_TOKEN>

Note this carries the same stipulations:  This is _very_ naive, and if you're not careful, could end up causing a hang.",rosshinkley,2017-03-17 04:15:36
1014,2017-02-24 01:16:19,"Rather than having to grant folks permissions, let's just let CI handle the `npm publish` stuff.

I've added our [Segment's] default npm key as an env var, so everything should Just Work™",stephenmathieson,2017-02-24 01:56:31
1013,2017-02-23 14:56:17,"OS Centos
node version 4.0.0-pre
nightmarejs latest version

`# DEBUG=nightmare:*,electron:* node --harmony example.js`
`**electron:stderr /tmp/phantomjs/phantomjs-2.1.1-linux-x86_64/node_modules/nightmare/node_modules/electron/dist/electron: error while loading shared libraries: libXss.so.1: cannot open shared object file: No such file or directory +0ms**
`

How do I fix this error?",StanleyMilligan,2017-03-27 21:10:36
1013,2017-02-24 01:35:20,"It looks like you're missing `libxss`?  It looks like Atom also [had this problem](https://github.com/atom/atom/issues/13176), do any of the solutions there work?",rosshinkley,2017-03-27 21:10:36
1012,2017-02-23 10:56:57,[Please see this stackoverflow question](http://stackoverflow.com/questions/42398621/handle-multiple-users-requests-to-multiple-remote-web-forms-using-phantomjs?noredirect=1#comment71969732_42398621),geethrsn,2017-02-27 07:05:26
1012,2017-02-24 01:32:26,"Based on the example you posted, you're trying to re-use the same Nightmare instance across multiple requests.  This won't work as if you have multiple requests come in, the actions for the later requests will be added to the currently executing context.  This is further complicated because you're also `.end()`ing the instance, rendering the Nightmare instance unusable after the initial request.

If you move the Nightmare instantiation into the Express `post` method, you will likely have better luck, but be careful: this method will not scale particularly well.

(I'll cross-post this answer on SO.)",rosshinkley,2017-02-27 07:05:26
1012,2017-02-27 07:05:26,It works. Thank you.,geethrsn,2017-02-27 07:05:26
1011,2017-02-22 19:23:24,"**What are you trying to achieve?**

There are some actions that I need to execute after running all tests in a feature.
I am wondering if we already have something like ""beforeFeature / afterFeature"".

**What do you get instead?**

I've already analyzed the codeceptjs options _before/after_ and the _beforeSuite/afterSuite_. The first one doesn't work for my case because it executes once for each scenario. The second doesn't have access to the browser.

So, basically, I want a command that behaves like before/after but runs only once at the and of the feature execution.

Talking to codeceptjs' devs, they suggested me the following:

> You can start it manually:
> Consider using beforeSuite with manualStart: true option enabled.
> Then you will need to create a custom method like I.startBrowser():
> 
> <S_CODE_TOKEN>
> And this should work in beforeSuite context:
> 
> <S_CODE_TOKEN>
> Also add restart: false option, to keep browser up between tests.

**So, the final question:
Is there something like **this.helpers[""WebDriverIO""]._startBrowser()** for Nightmare?**


**Details**

CodeceptJS version: 0.4.8
NodeJS Version: 6.2.1
Operating System: IOS
Nightmare version: 2.7.0",nayaramoura,
1010,2017-02-22 17:53:56,"I'm trying to diagnose an error on our continuous build server, and seeing the Electron console would really help. It appears that Nightmare allows listening for these events, but unfortunately they don't seem to be firing for any of the errors I'm seeing.

I'd expect to see the 'BROWSER EVENT' line in my terminal a few times, one line each for those HTTP, websocket, and source map errors in the screen shot below. However in fact I'm not seeing the `page` event ever being fired.

<S_CODE_TOKEN>

<img width=""468"" alt=""screen shot 2017-02-22 at 12 48 31 pm"" src=""https://cloud.githubusercontent.com/assets/7430512/23224784/aa6e6a20-f8fd-11e6-9cf4-8072277cefdc.png"">
",keithkml,2017-02-24 19:20:27
1010,2017-02-24 02:23:43,"Hm, I _think_ the `page` event - specifically with errors - is for on-page javascript errors (I can't remember offhand if it's parsing and uncaught exceptions or just uncaught exceptions).  I don't think it will capture sourcemap parsing issues or websocket connection issues.

For the `WebSocket`, I'm not sure you'll be able to capture the error short of writing a wrapper you can load up with preload, kind of akin to how `console` et al is handled.  Nothing jumps out at me in the Electron docs.  (Someone else out there happen to know?)  The sourcemap errors seem like they _should_ cause something to get called, but again, nothing jumps out at me.

Pondering out loud, have you given the Electron [`debugger`](http://electron.atom.io/docs/api/debugger/) a look?  You might be able to use `debugger.on('message')` to capture those problem events using a custom action.
",rosshinkley,2017-02-24 19:20:27
1010,2017-02-24 19:17:04,Wow thank you for doing so much research. I'll look into debugger. Feel free to close this since it sounds like it's not an issue with nightmare itself.,keithkml,2017-02-24 19:20:27
1010,2017-02-24 19:20:27,"@keithkml If you come up with a custom action using the debugger, I'd be _very_ interested in seeing it.

Also, I neglected to mention - if you go this route, you will likely not be able to use the debugger tray (or you'll have to be _very_ judicious about opening and closing it) as Chromium only allows one attachment to the debugger at any given time.  I don't know that you'd hit that, but I thought I'd say it out loud to prevent you from head+desk.

Closing for the moment.",rosshinkley,2017-02-24 19:20:27
1009,2017-02-22 17:42:34,I noticed this issue while reading the docs,keithkml,2017-02-24 00:49:43
1009,2017-02-24 00:49:40,"Nice catch, thanks!",stephenmathieson,2017-02-24 00:49:43
1008,2017-02-20 14:07:44,"previous link is 404, replace it with correct link address",suniaoo,2017-02-24 00:48:38
1008,2017-02-24 00:48:34,"Nice, thanks!",stephenmathieson,2017-02-24 00:48:38
1007,2017-02-20 10:52:07,"I have CentOs7 running in Windows 10 via Virtualbox, and trying to install nightmare is giving me this error. 


<S_CODE_TOKEN>

And here is the error log: 
<S_CODE_TOKEN>

I can't tell what the issue issue, as I am new to installing JS libraries from npm/yarn registry ",samayo,
1007,2017-02-21 02:24:02,"I can't get why you have to install it globally, tho. Can you try installing electron globally first, THEN install nightmare globally after - if you're in to the kind of stuff. I feel it's 'kinky' hehe. I just install it on the local folder of the app, always.",jekku,
1007,2017-02-21 02:24:50,"BTW this also happens to me before when office internet is slow (third world here). Perhaps a problem in the VMs connection bridge to the host, too.",jekku,
1007,2017-02-21 02:26:25,"Because in nodejs, ECONNRESET most probably means that the npm's end of the request/response cycle abruptly got closed on your local machine. Put simply, a connection problem.",jekku,
1007,2017-02-21 15:57:03,"So, what is the solution? Install electron separately? 
",samayo,
1007,2017-02-22 07:39:42,Could be. I'm not too sure. But I really think it's between your VM's connection and npmjs.org,jekku,
1007,2017-02-22 08:05:21,"It can't be a connection problem as I can download pakckages like vue, bulma, font-awesome in the same way with no issues.

let's just hope someone chimes in",samayo,
1006,2017-02-20 04:54:21,"I am making a bot that uses a proxy for each electron instance. I want to run them all in a background and when an instance reaches a certain page, it opens an electron window, so a user can make selections before the program continues. So how would I switch between show: false and true without losing cookies and other data?
I was thinking of running multiple sessions in the background, then closing and reopening them with show: true.",MajorHAX,
1006,2017-02-24 03:46:10,"You could define a custom action for this.  Try something like...

```js
var Nightmare = require('nightmare');

Nightmare.action('show',
  function(name, options, parent, win, renderer, done) {
    parent.respondTo('show', function(done) {
      win.show();
      done();
    });
    done();
  },
  function(done) {
    this.child.call('show', done);
  });

Nightmare.action('hide',
  function(name, options, parent, win, renderer, done) {
    parent.respondTo('hide', function(done) {
      win.hide();
      done();
    });
    done();
  },
  function(done) {
    this.child.call('hide', done);
  });


var nightmare = Nightmare({
  show: false
});

nightmare.goto('http://example.org')
  .show()
  .wait(3000) //<-- here is where you'd want whatever your actions are, here i'm just using a wait
  .hide()
  .end()
  .then()",rosshinkley,
1005,2017-02-20 02:07:58,"I am using nightmarejs to visit this url: 

http://www.pinbet88.com/en/

and then got this error: 

""Uncaught TypeError: Cannot read property 'stack' of null"" from preload.js line 7.",tinyesp,
1005,2017-02-24 03:55:47,"This sounds like an error from the javascript on the page - the page errors get bubbled up from Electron through the preload script. 

There is an edge case, though, where I suppose the error could get emitted without an error with a stacktrace.  I _thought_ there was a PR to account for this issue,but it's entirely possible my memory is faulty.  It looks like that may be what you're hitting.  To check that's what the problem is, you could override the preload with a custom event listener on `'error'`.",rosshinkley,
1005,2017-02-24 04:04:56,"Thanks for the replying. I tried to override the event listener and found it is a 'Script error'. However, I do not have this exception when using Chrome or Electron. Thanks.",tinyesp,
1004,2017-02-17 06:04:02,"I remember I did this on accident before but I can't seem to figure that out again.

It was something like: 

<S_CODE_TOKEN>

Or something like that. Does anyone know how to do this?",pfftdammitchris,2017-03-17 04:30:44
1004,2017-02-17 08:58:01,How did you get arrLinks???? ,jekku,2017-03-17 04:30:44
1004,2017-02-17 16:07:25,"I forgot since I did like a million changes. But I found out how to recursively iterate through links now. This is the code for anyone who is interested:

<S_CODE_TOKEN>",pfftdammitchris,2017-03-17 04:30:44
1004,2017-02-17 17:10:32,"But now it freezes sometimes after the first iteration of the function Iterate_Containers() 

Why does it execute the first one fine but freezes on the rest of the iterations?",pfftdammitchris,2017-03-17 04:30:44
1004,2017-02-24 02:56:53,"First things first: go read [Asynchronous Operations and Loops](https://github.com/rosshinkley/nightmare-examples/blob/master/docs/common-pitfalls/async-operations-loops.md).  Your original post is a similar use case.

As for why it freezes: I guess my first question would be, how many containers are there, and second, how are you ending the Nightmare instance?

Finally, your recursion approach _could_ work, and you're already pretty close.  From the hip, I think if you rearrange it a little, like this:

<S_CODE_TOKEN>
...you may have better luck.",rosshinkley,2017-03-17 04:30:44
1003,2017-02-16 21:06:05,"Perhaps I'm doing something wrong. I'm not able to get console logs using nightmare.

Take for example a webpage that outputs:  
<S_CODE_TOKEN>

In nightmare:
<S_CODE_TOKEN>
The output will be:
`>client logs: log this string`
`>client logs: undefined`

",keyscores,2017-02-16 21:09:48
1002,2017-02-15 17:12:01,Fix link to electron events documentation,busysumm3r,
1001,2017-02-13 22:37:22,"Hi there,

Thank you for having such a great tool! I added a right-click menu (see video: https://kitchen.codebuffet.co/index.php/s/vyPPrgO8uH0icGA) that will allow you to select and inspect elements on the spot. I found this especially helpful when trying to test and slightly adjust your automated interaction with different pages. Hope all is well, have a nice day!",peterwilli,
1001,2017-02-15 11:17:42,"Would be nice to fix the tests, and to write tests for this change as well",jekku,
1001,2017-02-15 15:33:31,"@jekku just saw the checks have failed, thanks for noticing. I was a away to an event yesterday :) I'll get on it.",peterwilli,
1000,2017-02-12 18:02:09,"When I try to wait or type in a field with a colon symbol on the id, I receive the error:

<S_CODE_TOKEN>

And indeed my selector id is #numeroFormatDecorate:numero_format ... I tried to copy from chrome and the selector is #numeroFormatDecorate\3a numero_format .. But it also does not work. 

Any idea for this issue? (Sorry if I'm posting on the wrong channel but I could not find any community related to nightmarejs)",leordev,2017-02-12 18:03:20
1000,2017-02-12 18:03:20,oops... tried #numeroFormatDecorate\\3a numero_format and it worked... sorry!,leordev,2017-02-12 18:03:20
999,2017-02-10 12:06:43,"Hello! I'd like to ask if what I written on the title is possible. Currently I cannot run the nightmare instance without the `.end()` attached to it, so I was unable to try what I wanted to do.

Just to help: I'm creating a slack bot that calls the browser instance with arguments passed to it, fill a page with it, submit, take a screenshot, post the image on slack ( **captcha** ), get another user input, fill the captcha, take another screenshot and that's it!

I was wondering how to ""pause"" the instance to get the second user input?",tloriato,2017-02-10 19:25:50
999,2017-02-10 12:14:41,"Would something like:

`.wait(askUserInput[path_of_the_captcha.png)`

<S_CODE_TOKEN>
works?",tloriato,2017-02-10 19:25:50
999,2017-02-10 14:02:14,"Alright, I got it to **almost work**.

The problem is that when requesting the screenshot to capture, the code always get the **previous** one, as it seems that:

- or the screenshot it's only saved after the `.end()`
- or it takes a whole lot of time to save the screenshot

Can someone **help me?**

<S_CODE_TOKEN>",tloriato,2017-02-10 19:25:50
998,2017-02-09 16:58:41,"Is there any way to wait for event happen dynamically?
Here's the scenario.

1) page loads
2) after page loads, you do authentication.
3) when you submit, page finishes loading (dom-ready), but the website itself is really complicated and it also loads other things dynamically (ajax calls inside iframes, other script loads another script and so on), which I have no clue how to wait for.

wait(ms) is not acceptable, cause it might give non accurate results often.

The way I'm doing is that is following:

<S_CODE_TOKEN>

is there any way to do that or some other workarounds?",overflowz,2017-02-10 10:29:55
998,2017-02-09 21:18:02,"since I hurry and having not much knowledge about internal stuff, does this action seems good (well, it would be much better with timeouts as well, but dunno how to do it).

<S_CODE_TOKEN>

I ask because I get logs such as:
`nightmare:ipc Replacing responder named ""waitForResource"" +13ms`",overflowz,2017-02-10 10:29:55
998,2017-02-10 01:53:49,"What you have is fine. You could probably accomplish a close approximation using the [asynchronous form of `.wait()`](https://github.com/segmentio/nightmare#evaluatefn-arg1-arg2).  Waiting for a resource like you have it would be kind of tough without the action as you have it written, though.

Answering your second question: that usually happens when you attach an action to Nightmare multiple times.  That error was put there as a warning in case there were naming collisions for actions, which adding the same action multiple times would certainly cause.",rosshinkley,2017-02-10 10:29:55
998,2017-02-10 10:29:55,"well, I dag in documentation / examples and this action now works fine! (it is just missing timeouts though).

<S_CODE_TOKEN>",overflowz,2017-02-10 10:29:55
997,2017-02-09 10:08:20,"throw new Error('Electron failed to install correctly, please delete node_modules/' + path.basename(__dirname) + ' and try installing again');",cucygh,
997,2017-02-14 21:28:33,"once I had the same question.
But after a certain time with a nightmare, I realized that he was not processed through webpack.
If you want to make your code is not clear, you need to look for other solutions.",vshvydky,
996,2017-02-09 00:23:25,"You know when you visit a page in a website and view the source code, sometimes you see an element execute a javascript function? For example:

`<button type=""button"" id=""chocolate"" onclick=""EditShipment()"">Click me</button>`

Can I use nightmare to visit this page and execute EditShipment() ? And if so, is it possible to pass in our own arguments to that function's argument? ",pfftdammitchris,2017-02-10 02:20:21
996,2017-02-09 01:49:00,"Sure. If the code on the site is defined and written exactly as in your description, then we can assume that `EditShipment` exists within the global namespace. If that's really the case, you should be able to call `EditShipment` from within a normal nightmare `evaluate` function.

Here's an example:

<S_CODE_TOKEN>",urlysses,2017-02-10 02:20:21
996,2017-02-10 02:20:21,"Looks good to me.  Considering this issue closed.  If you have any more qusetions, feel free to reopen/open a new issue.",rosshinkley,2017-02-10 02:20:21
995,2017-02-07 12:43:48,,itomas,2017-02-09 14:18:25
995,2017-02-09 10:16:30,Why though?,jekku,2017-02-09 14:18:25
995,2017-02-10 03:14:29,"Wouldn't hurt to keep up on the Electron version, especially if the tests pass. I'd be open to this.",rosshinkley,2017-02-09 14:18:25
994,2017-02-07 11:36:05,"Hi ! 
I would like to get the last action done or should be done when my script timeout to be able to now what's wrong. And if possible do something before the timeout (like take a screenshot).

Is this possible ?

Thanks for this awesome library !",GautierT,2017-02-08 12:44:05
993,2017-02-06 21:13:01,"**_The code (taken from example):_**
<S_CODE_TOKEN>


_**Output:**_
<S_CODE_TOKEN>

**_How to deal with that?_**",tloriato,2017-02-10 12:15:03
993,2017-02-10 03:29:53,"It looks like that site's SSL certificate is not valid.  You can direct Nightmare to ignore bad certs, although it's not recommended.  Try:

<S_CODE_TOKEN>

_edit:_ ctrl-enter is the worst.",rosshinkley,2017-02-10 12:15:03
993,2017-02-10 03:35:27,"Thank you @rosshinkley . 
I'm gonna try it first thing in the morning, have to go right now (2am)

Yes, apparently my government doesn't like spending money on certificates. (go brazil!) 

**It worked!**",tloriato,2017-02-10 12:15:03
992,2017-02-06 02:04:52,"Native ES6 Promises are nice, but libraries like [Bluebird](npmjs.com/package/bluebird) offer a lot of nice additional features. I'd like to be able to specify which Promise library/factory nightmare uses internally to wrap return values from `.then()` and `.catch()` *(inspired by [mongoose.Promise](http://mongoosejs.com/docs/promises.html#plugging-in-your-own-promises-library))*

## Use Case
<S_CODE_TOKEN>

The problem here is the `Promise#isFulfilled()` method that is a Bluebird-only method, forcing me to wrap `Nightmare#then()` in an awkward `Promise.resolve(...)`.

## Solution
With the ability to specify the internal `Promise` library/factory, I could have nightmare return a Bluebird Promise:
<S_CODE_TOKEN>

Please review my code & consider it for inclusion in the next release. `nightmare` is one of my favorite & most-used NPM packages, and I think this feature would be a really, really useful addition!",itsjustcon,2017-02-24 00:51:57
992,2017-02-22 07:44:17,LGTM :),jekku,2017-02-24 00:51:57
992,2017-02-24 00:51:51,Awesome work dude! Thanks!,stephenmathieson,2017-02-24 00:51:57
991,2017-02-05 02:41:09,,TheLastTech,2017-02-10 03:38:45
991,2017-02-10 03:38:45,"It does run on Windows, to the best of my knowledge.  Closing until more information is given.",rosshinkley,2017-02-10 03:38:45
990,2017-02-04 13:16:40,"The newest version of Nightmare (2.9.1) stops `nightmare.useragent('my-agent')` from working (i.e. you cannot override the default useragent).

Downgraded to 2.9.0 and it works again.",schickling,
990,2017-02-04 19:33:05,"hmmm, in my nm 2.9.1 on windows action useragent works",vshvydky,
990,2017-02-07 05:48:17,2.9.1 on archlinux latest works for me. It helps maybe if you can add details like your Operating system and its version :),jekku,
990,2017-02-07 10:07:39,Weird. I've tested it twice and removed `node_modules` each time. I'm on MacOS Sierra.,schickling,
990,2017-02-10 03:55:18,"More bizarre still, I don't think `.userAgent()` has been touched in some time (almost a year!).  I'd say it might be an Electron issue, but there's not a version difference between 2.9.0 and 2.9.1.

Anyone else with a Mac out there that can validate this issue?",rosshinkley,
989,2017-02-03 18:50:30,"I have checked that Nightmare follows 3xx redirections transparently (reporting 200 as status code). I think this behavior is right most part of the time. However, it would be useful if this behavior could be disabled optionally.

AFAIK it's not possible to disable it right now, isn't it?. So, is there a workaround for this?. My use case is for a web site analyzer. However, I think it could also be useful for web testing.

Thank you very much.",d3ce1t,2017-02-04 13:36:07
989,2017-02-03 20:59:56,"Actually you can solve it by using the **events**.

<S_CODE_TOKEN>

the result might be as follows:
<S_CODE_TOKEN>

Learn more about this here, 
 - https://github.com/segmentio/nightmare#onevent-callback
 - and here, https://github.com/electron/electron/blob/master/docs/api/web-contents.md#event-did-get-redirect-request

You can add multiple events before goto and make it prepare for something beforehand.",entrptaher,2017-02-04 13:36:07
989,2017-02-04 13:32:55,"Thank you very much for your response. I think this is what I was looking for. It works perfectly :).

P.S: I close this issue because by using this approach I can implement the described behavior.",d3ce1t,2017-02-04 13:36:07
988,2017-02-01 15:08:51,Almost for sure users that want to try the example test snippet are going to run into issues with the default mocha timeout in the CLI,sanbor,
988,2017-02-03 07:17:18,@sanbor that is not the only case where test engineers should increase the mocha timeout for nightmare.js. It could also be possible that the operations being done on the browser are intentionally taking long.,jekku,
988,2017-02-03 17:12:53,@jekku Right. Does that means that you think that it's a good idea to mention this but with a different wording? Thanks.,sanbor,
988,2017-02-13 05:25:14,@sanbor yes,jekku,
987,2017-01-31 21:57:14,"Hi everyone,
I'm trying to extract data from the url below. What am I doing wrong. 

Please help me. 
Any help would be appreciated

`var Nightmare = require('nightmare'),
  nightmare = Nightmare(/*{ show: true }*/)

/* nightmare.inject('js', 'node_modules/jquery/dist/jquery.js'); */
nightmare.goto('https://goo.gl/9z0sZv')
  .evaluate(function(){
	var arr = [], 
	linkler = $(""a[href^='https://goo.gl/nY5ey1']"").each(function(){
		  $(this).attr(""href"");
	});
	for(var i=0; i<linkler.length; i++) {
	  arr.push(linkler[i].href);
	}
	alert(arr);
  }).end()
  .then(function(result){
    console.log(result);
  })`",gencharitaci,
987,2017-02-01 10:28:12,<S_CODE_TOKEN>,vshvydky,
986,2017-01-31 13:22:57,"Hey guys.

Does nightmare have any monitoring capabilities? I need to export the requests/responses as HAR, but can't seem to find any docs in how to.

Regards!",lucaswxp,2017-02-09 19:34:15
986,2017-02-07 21:30:10,"You'll need the `nightmare-har-plugin`. Then you can something like the following ([source](https://gist.github.com/justinph/0ffd7b7a443b82e4941636b65067ad1a)).

<S_CODE_TOKEN>
",IronistM,2017-02-09 19:34:15
986,2017-02-07 22:32:09,Ahh thanks!,lucaswxp,2017-02-09 19:34:15
986,2017-02-08 19:40:32,"Sorry to bother, but I'm getting this from the console:

""Not allowed to load local resource: chrome://version/?get-har""

The script runs successfully, but should I worry about this error?",lucaswxp,2017-02-09 19:34:15
986,2017-02-08 19:56:34,"I only noticed now, but HAR is not correct.

I have the following entry: 

<S_CODE_TOKEN>

Where is the body? It says it's 310 bytes, but no body is present?",lucaswxp,2017-02-09 19:34:15
986,2017-02-09 19:34:15,"So for anyone stumbling into this, I have decided to use browsermob to capture my har content:
https://github.com/lightbody/browsermob-proxy

It acts as a proxy, produce reliable HAR and I can still use Nightmare if you loke.",lucaswxp,2017-02-09 19:34:15
985,2017-01-31 12:32:03,"Hello. Please help. I do not understand what the problem is a nightmare. The essence of the application logic is as follows: in the database has a list of tasks for a nightmare, when measuring state is generated by the initialization process of a nightmare.
The problem sludyuschem, at some point in time copies of a nightmare to stop responding and hang. On the counters in the database it can be seen that they can work for longer than specified in the timeout settings nightmare.
Please tell me what could be the problem and how it can be combated.
Check the status and run:
<S_CODE_TOKEN>
An exemplary process for the code of a nightmare:
processParse:
<S_CODE_TOKEN>
Example statistics (RUNTIME IN SECS):
<S_CODE_TOKEN>",vshvydky,
985,2017-02-01 11:42:05,"use a temporary solution, it is not like this.
<S_CODE_TOKEN>",vshvydky,
985,2017-02-10 04:06:41,"How are your Nightmare instances getting created?  It looks like the instance isn't ever created based on your source.  Also, what version are you using?  Are you getting errors for the instances that are hanging?

",rosshinkley,
985,2017-02-10 07:52:51,"Hi, Rosshinkley.
For each job created another instance through let nightmare = Nightmare(config). Every nightmare is an instance of a large list of tasks, including the creation of screenshots, download files. I guess there are jobs that can potentially lock code on the browser side, after which the connection between the processes is terminated. I used .halt method, but it does not always help. I came to the idea to explicitly use fkill electron off (nightmare.proc.pid). Separately, I note that the assignments that I give not block browser evalyuate.
In addition, I note that there is no electron closing event, if the electron close the arms, the nightmare did not know about it. But this is the problem of the above does not apply, a further observation.",vshvydky,
985,2017-02-10 07:55:11,"parsing error in the example given probation, I react to all exceptions nightmare if they occur. In my situation, the process is sometimes just stops without reference to a fault block.",vshvydky,
984,2017-01-30 07:33:18,"Hi ,

I am trying to load http://justmoviesonline.com/play.php?id=0Bx80UYxFGc5E0VqpWQ_hgz1ujPp/ inside Nightmare and the Problem is it is not executing the embedded Javascript which depends on the library that needs to be loaded before.

Here is the Final HTML that gets loaded inside Nightmare:


<S_CODE_TOKEN>

In browser it loads up the final HTML after executing the script in <p> tag.
But in nightmare it occasionally loads up the final page but most of the time just loads up the above mentioned HTML body.
Is there a way to wait for the Library to load and then execute script?
Any help is appreciated highly.

",chattes,
984,2017-01-31 19:18:26,You can use the method to wait,vshvydky,
984,2017-02-03 21:20:39,"Here is how you can do it simply,
<S_CODE_TOKEN>",entrptaher,
983,2017-01-28 22:15:40,,amilajack,
983,2017-02-13 05:57:18,"I'm still a little on edge about this one. There will be a difference between

<S_CODE_TOKEN>

and

<S_CODE_TOKEN>

due to changes introduced by the latest versions of babel about the default export.

Kindly double check which one of these would work with the example, the one we are presenting here could or could not be the faulty one.",jekku,
983,2017-02-24 00:57:22,"@jekku Babel inserts a function to handle this for us:

<S_CODE_TOKEN>",stephenmathieson,
983,2017-02-24 00:58:52,"I do not see the benefit in this change. It seems like unnecessary cosmetic stuff, as functionally every example code block will work exactly the same.",stephenmathieson,
983,2017-02-24 03:50:18,"@stephenmathieson thanks for teaching me that. :)

For me though, there could be some benefit on the es6 examples change - but it has subtle drawbacks as well. 

For people who need to be convinced to use this open source repository, it should be 'plug and play' as much as possible. Since not all ES6 features are available yet on the native engine without transpiling it from ES6 to ES5, they'd still add a layer of configuration above it to allow this example. I think they could figure out the cosmetic code changes on their own AFTER they are convinced to use nightmare.js.",jekku,
982,2017-01-28 14:49:48,"… Nightmares

modified:   lib/nightmare.js

* Check typeof callback and set blank function if needed",noahtkeller,
981,2017-01-28 10:27:48,"I'm getting the following exception:

<S_CODE_TOKEN>

When running the following concurrent test (The game is built so it only starts when 3 concurrent users login):

<S_CODE_TOKEN>

When I observe the behavior on Atom using `show: true`, I see that indeed 3 browsers open, login with different usernames, and everything is as expected (except the test failing).",ripper234,2017-01-29 15:54:19
981,2017-01-28 14:45:49,"This is occurring because it is attempting to execute the callback provided in the run block without a safety check. For a temporary work-around you can pass blank callbacks and it should work.

<S_CODE_TOKEN>",noahtkeller,2017-01-29 15:54:19
981,2017-01-28 16:59:30,"Awesome, thanks for the quick workaround + fix.",ripper234,2017-01-29 15:54:19
980,2017-01-28 08:19:14,,ripper234,2017-01-28 16:52:26
980,2017-01-28 16:52:26,"Sorry, irrelevant, I missed the link on the top.",ripper234,2017-01-28 16:52:26
979,2017-01-28 07:50:07,"The main page does not mention the run() method.
However several examples around the web, including #226 use run() as **the** way to run Nightmare tests.

Can you add some doc to the readme about when to use it / not use it, and what are its limitations (e.g. I believe you can't call `run()` twice?)",ripper234,2017-02-10 04:29:14
979,2017-02-10 04:29:14,"TL;DR: don't use `.run()`.  It's a holdover from Nightmare 1.x.  Use `.then()` instead.

For a more protracted conversation with more information/links, see #575.  Also, this [example](https://github.com/rosshinkley/nightmare-examples/blob/master/docs/beginner/callbacks.md) in `nightmare-examples` may be of some use.

Merging with #575.",rosshinkley,2017-02-10 04:29:14
978,2017-01-27 19:57:35,"I have the very simple code here

<S_CODE_TOKEN>

When run with [Jest](https://facebook.github.io/jest) this is the terminal output I receive:

<S_CODE_TOKEN>

It doesn't matter which function I use after the `goto` they give the same `TypeError: nightmare.someApiFunction is not a function`.

This is exactly the package I need but it doesn't seem to work in my environment.

Help 😫",ericadamski,
978,2017-02-03 21:25:21,"Perhaps it's because you are not calling `.then()` after `.end()`
<S_CODE_TOKEN>

",entrptaher,
978,2017-02-06 14:21:03,Thank you @entrptaher I will try this out,ericadamski,
978,2017-02-07 14:05:45,This still says that screenshot isn't a function. 😞 ,ericadamski,
978,2017-02-07 22:47:59,"Here is how I did this.

package.json
<S_CODE_TOKEN>

nightmare.test.js
<S_CODE_TOKEN>

nightmare.js
<S_CODE_TOKEN>

The result:
![](https://i.imgur.com/X2ACH7M.png)",entrptaher,
978,2017-02-10 03:12:31,@ericadamski how are you running async/await?  Node 7 or Babel or...?,rosshinkley,
978,2017-02-10 13:44:51,"@rosshinkley I am using both Node 7, but also babel mostly for jsx and generators",ericadamski,
977,2017-01-27 16:57:13,"Instead of requesting a live page it would be ideal to push a locally generated html string to have electron render it. This will mainly be useful for css regression testing though a test runner like jest.

I am very willing to help implement this but am unsure where to start.",ericadamski,2017-02-07 14:07:30
977,2017-02-06 18:31:46,"I can't test if this works with nightmare at the moment but maybe [data URIs](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs) already function?

Something like:
<S_CODE_TOKEN>

or (base64 converted):
<S_CODE_TOKEN>",urlysses,2017-02-07 14:07:30
977,2017-02-07 13:53:51,@urlysses I will give this a try thank you!,ericadamski,2017-02-07 14:07:30
977,2017-02-07 14:07:30,@urlysses using a plain string data uri works! Thank you for the suggestion!,ericadamski,2017-02-07 14:07:30
977,2017-02-07 14:08:35,Thanks for checking @ericadamski. Glad I could help :--),urlysses,2017-02-07 14:07:30
976,2017-01-27 15:31:31,"Can we use all actions within a Nightmare custom action?

I'm attempting to define a generic login action as the code is reused many times. Here is my custom action:

<S_CODE_TOKEN>

And an example of it being used in a test:

<S_CODE_TOKEN>

The action goes ahead as expected, and it even calls the callback in `then()` (i.e `login action done` is printed to terminal), but the chain of events stops there. The second `then()` callback, in the test suite, never gets called.

I'm sure I'm missing something simple here - or perhaps custom actions were not designed for this purpose?
",shennan,
976,2017-02-21 14:37:10,Sounds like it might be the same as #959 -- see the discussion after the initial ticket,ysimonson,
976,2017-02-24 03:36:45,"Related, yes, but not the same. I think it's closer to #859 - the TL;DR is you shouldn't use `.action()` for defining custom chains.  Use `.use()`.",rosshinkley,
975,2017-01-26 22:11:59,"The link in [this section](https://github.com/segmentio/nightmare#onevent-callback). I could not find the real one.
",nknapp,
975,2017-01-26 22:29:37,"Here: https://github.com/electron/electron/blob/v1.4.4/docs/api/web-contents.md#instance-events

Take note that not all events works.
There just a few binded (12 or something like that)",navossoc,
974,2017-01-26 18:44:02,"Been scowering for a solution for 3 days now, none of theses worked or asisted:

- [534](https://github.com/segmentio/nightmare/issues/534)
- [953](https://github.com/segmentio/nightmare/issues/953)
- [185](https://github.com/segmentio/nightmare/issues/185)

I have compiled the electron binary in an ec2 instance and given its path to the electronPath config option, but I still recieve a `{ [Error: spawn EACCES] code: 'EACCES', errno: 'EACCES', syscall: 'spawn' }`.

Any ideas on how to get this running?",diit,
974,2017-03-24 11:50:30,"+1 I'm also interested in knowing how to set this up. I'm getting `nightmare electron child process exited with code 126: permission problem or command is not an executable - you may not have all the necessary dependencies for electron`

@diit Did you ever figure this out?",sweinertjr,
974,2017-03-24 12:34:22,"Perhaps this is helpful:

https://gist.github.com/dimkir/f4afde77366ff041b66d2252b45a13db",sweinertjr,
973,2017-01-25 20:43:14,"Hello,
I've found out nightmare library yesterday and I find as a great tool. It's much simplier and faster than phantomjs. 

The biggest problem for me was creating many separate requests in easy way so I've created very small integration with nightmare https://github.com/itemsapi/website-to-json.

It works like:

<S_CODE_TOKEN>

It is also easy to make many separate requests using promises:

<S_CODE_TOKEN>

Hope it can be useful for you in some scenarios (i.e. website extraction, higher level automated tests)",cigolpl,
972,2017-01-25 18:08:15,"Hi. May I ask is that just me or anyone may face similar issue, I was trying to run nightmare code in my app but the following error returned : 

<S_CODE_TOKEN>
I am using webpack under electron, version of nightmare is ""2.9.1"". Any idea? Thanks.",ryderlee,
971,2017-01-25 15:18:21,"Are there any plans to support coverage reporting? It would be neat if it supported sourcemaps and such. I've seen one place where someone was able to get code coverage [here](http://stackoverflow.com/questions/27156047/nightmare-js-and-code-coverage), but it seemed like a hack and pretty fragile.",ksmithut,
970,2017-01-25 00:43:27,"I'm running nightmare with on linux with `xvfb-run` and I'm able to get electron running but I get the following error after a page is loaded: `nightmare:log crashed [{},false] +0ms`.

I'm starting the process with the following command: `DEBUG=nightmare:*,electron:* xvfb-run -a node index.js`. On OS X everything works as expected (without `xvfb-run`).

And here's the logs (partially truncated):
<S_CODE_TOKEN>

Note that the process crashes after the `did-stop-loading` event is received. Is there a way to get more info on why the nightmare crashes?

Thanks.",Chris911,2017-01-25 00:46:37
970,2017-01-25 00:46:37,Duplicate of https://github.com/segmentio/nightmare/issues/836,Chris911,2017-01-25 00:46:37
969,2017-01-24 17:45:03,"Sorry about a high level question, but can I use this on web apps for mobile ?

I currently use agousti ( golang) with different web drivers.

So I am trying to work out how that and this fit together architecturally. So I am hoping you don't mind giving a quick explanation.",joeblew99,
969,2017-02-10 04:37:51,"Presumably, yes?  It depends on what your needs are, but you can certainly set up the viewport and useragent to mimic a mobile device.  Beyond that, Electron is more or less a full Chromium instance, so there may be some storage differences with what you see no the mobile (I can't think of one offhand, but it wouldn't surprise me).  I don't feel like that necessarily answers your question - what are you trying to test/do?",rosshinkley,
968,2017-01-24 08:40:12,"Facing a strange issue with this particular url. Almost every other Url I have tested is working.
**.goto(url) is stuck , specified gotoTimeout does not work, default gotoTimeout of 30 sec also does not work, high memory used by Electron processes**: 

Here's the code outline:

let pageurl = ""http://www.gamestop.com/pc/consoles/alienware-steam-machine-i7-1tb/121863""

// wrapped in promise -- 
return nightmare
      .goto(pageurl)
      .wait(waitInMs) 
      .evaluate(function () {
        return {
            // will return what is needed  here including html
        }
      })
      .end()
      .then(function (value) {
          // console.log( "" -- made it past goto() ---   // * does not make it to this point 
         // return value  and kill nightmare.
          resolve(value)
       })
        . catch ( (err) => { 
         //  kill nightmare  and resolve( ) or reject( ) 
     })

Note: I have tried passing gotoTimeout : 5000   //ms in the nightmare constructor - but it does not seem to work either.
Default timeout of 30 sec also does not seem to be working. 
The process simply stops at .goto() and memory usage by electron goes to 12gb on my mac.

Here's the error message when process is manually terminated:
Failed: Error: Evaluation timed out after 30000msec.  Are you calling done() or resolving your promises?
    at Timeout._onTimeout (........./node_modules/nightmare/lib/actions.js:509:10)
    at ontimeout (timers.js:365:14)
    at tryOnTimeout (timers.js:237:5)
    at Timer.listOnTimeout (timers.js:207:5)

Thanks.
",kdgit1,
968,2017-01-24 09:48:41," .. and nothing useful when run with DEBUG:


  nightmare queuing process start +4ms
  nightmare queueing action ""goto"" for http://www.gamestop.com/pc/consoles/alienware-steam-machine-i7-1tb/121863 +0ms
  nightmare queueing action ""wait"" +1ms
  nightmare queueing action ""evaluate"" +0ms
  nightmare running +0ms

( and it stays at this point - while memory usage continues to rise ) 

All I am looking for is an automated way for nightmare to exit out / kill itself after waiting for 15 seconds or so if there is no success in fetching the url.

thanks a lot for any pointers.
",kdgit1,
968,2017-01-24 10:39:25,"Same here...
Windows 10 x64 + Nightmare 2.9.1 + Electron 1.4.15

For now, I think you can try to create some workaround with:
`.on(""did-start-loading"". ...);`

And
`nightmare.halt()`;

It seems the electron renderer process hangs.
",navossoc,
968,2017-01-24 11:03:06,"Just a tip for anyone who wants to fix this bug later.

If you open electron.exe and type on the console:
`window.location = ""http://www.gamestop.com/pc/consoles/alienware-steam-machine-i7-1tb/121863""`

The browser didn't hang and load the page correctly.
So, maybe it's a startup switch flag or something with nightmare + IPC itself waiting for the ""did-finish-load"" event.

--- EDIT ---

Well, I backtracked the problem to here:
https://github.com/segmentio/nightmare/commit/58983ee73393010425f1159aa6e3df34447fbc7d

That binding is preventing the page from being ""fully load"".
Not sure why that was added, but probably solves another kind of problem.

I can not help much more, I started using the nightmare only just a few days ago.
So I have to stop here. Someone with more experience on the project should take over.
",navossoc,
968,2017-01-24 17:15:36,"Thanks **navossoc** - I'll try the workaround per your suggestion.
Meanwhile - if anyone has dealt with this issue in the past / better approach / fix - that would certainly help.

",kdgit1,
968,2017-01-31 19:25:37,"I also have lost an electron and sometimes hangs in the memory. complete nightmare at the same time does not work. I tried to change all the timeouts, without results.",vshvydky,
968,2017-02-10 04:16:22,"@navossoc the _unload_ bindings are preventing the page from fully loading?  o_O

That particular chunk was added so if you attempt to navigate away from a page, it prevents an unclickable modal dialog from cropping up, which would cause Nightmare to freeze.  (Same goes for `alert`, `confirm`, etc.)

Under Nightmare 2.9.1, I could not recreate the behavior you're seeing.  Out of curiosity, what are you returning from `.evaluate()`?",rosshinkley,
968,2017-02-10 11:01:43,"@rosshinkley As far I have tested it, yes...

My script was pretty simple, just a goto(), nothing more than that.

I think @kdgit1 can give you more details about the issue.

[]'s",navossoc,
968,2017-02-28 10:28:09,"I have the same problem. I have to add code: setTimout(()= { nightmare.halt() , 600000} , but this can not solve the problem from base.",albus01,
968,2017-03-20 10:05:36,I can also reproduce the issue if needed.,Khady,
967,2017-01-22 17:24:02,"This allows nightmare to run under an already executing electron application.
Resolves #393.",Timer,
967,2017-01-23 01:37:43,How do we test for isomorphism? Is it possible to write a test for this?,jekku,
967,2017-01-23 01:56:06,@jekku I'm sure it's possible to test for isomorphism -- we'd just need to run the tests under electron in addition to node.,Timer,
967,2017-01-23 02:00:28,"Unfortunately, I don't have time right now to explore adding tests for this.

I'm currently working on an application where time-to-market is critical and I needed nightmare to work under electron. This PR works for me and I have not explored all the caveats of using this method, but we can explore those at a later date.

This PR was mainly opened for those individuals following #393 and who need a solution before segmentio explores official support for running under `electron`.",Timer,
967,2017-02-14 17:40:56,"@Timer please, how did you make it work on electron app? do you have some public electron app, that uses your fork?

I tried something like this:
<S_CODE_TOKEN>
It returns a Promise and it never resolves. I just get 2 outputs:
<S_CODE_TOKEN>

Do I have to setup something more?",FrantisekGazo,
967,2017-02-14 18:13:49,"@FrantisekGazo it works for me with just that patch, are you running it from the main process? It needs to be on the main process not the renderer.

Alternatively you can try my published version (which I depend on in prod), `eramthgin@2.9.3` and make sure you switch your require from `nightmare` to `eramthgin`.",Timer,
967,2017-02-15 18:26:35,"yes, that was the problem - I ran it from a renderer process.
thanks @Timer 

But in the end I managed to do what I needed with [xray](https://github.com/lapwinglabs/x-ray).",FrantisekGazo,
967,2017-02-15 18:35:53,"Ah, neat. I need javascript etc to be executed so I can't switch. :(",Timer,
967,2017-02-23 06:38:12,"Hey @Timer 

I'am using your module `eramthgin`, I think I'm in the same case as you... works great.

My question is do you see a flicker on your main window ? Even with `show:false` ... there's clearly a window that show and immediatly hides. Don't know if it's a dev-env problem, if this window is the dev-tools for the nightmare window ... don't know! Do you see something ? Or maybe you use it with show:true ?

",marcelfalliere,
967,2017-02-23 12:31:27,I use show false but I've never seen a flicker. I'm not sure what's causing that.,Timer,
967,2017-02-24 09:30:25,"It opens up the devtools for a brief time ... like for 800ms or so, the time for the nightmare.js to do its business. 

How I know ? Made a screen recording, and going image by image I see something this :
![screen shot 2017-02-24 at 10 25 59](https://cloud.githubusercontent.com/assets/388180/23297985/05e62f08-fa7c-11e6-8e05-8e5e575df80e.png)
- background is the console
- the green on the right is the actuall electron app main window
- the already open devtools are the one for this main window
- the status bar in the middle is displayed and hidden in a flash ... voila

Will check if it also pops up when building the app. 
",marcelfalliere,
966,2017-01-21 03:59:28,"I want to go back to previous page but I found that Nightmare does not load the previous page from disk cache. Instead it sends the previous page request to server which produces different results compared with Google Chrome.

Clicking back in Google Chrome to load previous page:
Status Code: 200 OK (from disk cache)

Calling `back` in Nightmare to load previous page:
Status Code: 200 OK

Can I enable Nightmare to load from disk cache when I call `back`?",ericksli,
965,2017-01-20 23:10:26,"I want to make a rest service what will do nightmare actions on rest call. Is it ok to make new nightmare instanse with `nightmare = Nightmare();` on rest call? Do I need to end it somehow, or `nightmare.end()` will be ok?

Is there any way to have for example pull of 10 redy to render pages and use them while requests are coming?",novoxudonoser,2017-03-17 03:25:25
965,2017-02-27 16:22:53,"There are multiple questions here, I think.

> Can Nightmare do multiple requests in parallel?

No.  Think of a Nightmare instance as a single tab on a web browser - it wouldn't make much sense to ask a tab to go to multiple locations at once, for example.

>  Is it ok to make new nightmare instanse with nightmare = Nightmare(); on rest call?

Sure.

>  Do I need to end it somehow, or nightmare.end() will be ok?

Yes, you'll need to end the Nightmare instance.  I doubt you'll want to reuse Nightmare instances across requests.

The one thing you'll need to keep in mind for the last two of the above answers: load.  Nightmare is a _bit_ of a resource hog.  If you expect your load to be fairly low and the Nightmare script is fairly quick, a new instance per request is probably reasonable.  Otherwise, you'll need to put together some sort of resource management.

> Is there any way to have for example pull of 10 redy to render pages and use them while requests are coming?

Not exactly sure what you're asking here - are you asking if Nightmare could prerender pages for a request?  Can you expand on this a bit?",rosshinkley,2017-03-17 03:25:25
965,2017-03-02 04:44:05,"> Not exactly sure what you're asking here - are you asking if Nightmare could prerender pages for a request? Can you expand on this a bit?

Is it a good practice to reuse nightmare ? First time I create Instance `nightmare = Nightmare();` and then I just use it for some work, after done I don't end it with `nightmare.end()` , I wait for new task, and then again. Will this be ok? Any problems like memory leaks?",novoxudonoser,2017-03-17 03:25:25
965,2017-03-02 06:51:37,"@novoxudonoser See issue ""Multiple processes: windows open and hang"" #1021 & @louisscruz Project [hub-crawl](https://github.com/louisscruz/hub-crawl)

",LeMoussel,2017-03-17 03:25:25
965,2017-03-17 03:25:25,"> Is it a good practice to reuse nightmare ?

You can, but be mindful of ending the instance and sharing session/partition data.  The way you have it set up, though, you're not reusing the same instance but creating a new instance every time, which is also fine.

> Any problems like memory leaks?

Great question, and the answer is probably.  It largely depends on how careful the site you're hitting is about cleaning up resources in client-side javascript.

I'm going to go ahead and close this issue for now.  Feel free to open a new issue if you have more questions.",rosshinkley,2017-03-17 03:25:25
964,2017-01-20 15:52:11,"Sometimes when using screenshot method in top left corner a small dot is visible on captured image.
After a short research I found out that a call to `DOM.highlightRect` command [here](https://github.com/segmentio/nightmare/blob/master/lib/frame-manager.js#L99) causes the problem.",ri0ter,
964,2017-01-20 20:04:32,"This is (kind of) by design - using `highlightRect` as opposed to touching the DOM directly solves a _lot_ more problems than it creates (see #927 and the issues referenced there).

I wonder if the `HIGHLIGHT_STYLE` could be determined at runtime to mimic the top left pixel, or if this is a case where the highlighted pixel isn't fully rendered at screenshot time?  Might be worth some experimentation.

/cc @Mr0grog, as he is way closer to this than I am, and might have more ideas.",rosshinkley,
964,2017-01-20 21:34:45,"> I wonder if the HIGHLIGHT_STYLE could be determined at runtime to mimic the top left pixel

I unfortunately can’t think of a reliable way to do this, BUT… we I think we could hold the callback until after the `DOM.hideHighlight` call is complete. Actually, I’m not sure why I didn’t do that to begin with.",Mr0grog,
964,2017-01-20 22:50:24,I’m pretty sure the fix for this is the same fix as for #955 and will depend on the work being done in #945.,Mr0grog,
964,2017-01-23 01:03:48,"I'm kind new to this topic but what about using `invalidate()` method? As the documentation says it generates new frame and it seems to be the easiest solution. Is there anything wrong with it?
I don't know how about other cases  but I did tested it with my own and it seems to work.",ri0ter,
964,2017-01-23 06:18:21,"> I'm kind new to this topic but what about using `invalidate()` method?

`invalidate()` only works when offline rendering is used (literally, it does nothing if not using offline rendering). It was explored in this changeset: https://github.com/segmentio/nightmare/commit/53dee8a2ad88ea656d2b48504dbe66ff5287d0ab

That approach was thrown out because it comes with a whole host of other issues and downsides (if your goal is solely to make screenshots of webpages, it’s great; otherwise it may not work well at all). There wasn’t much discussion of it, so no worries for not knowing about it.",Mr0grog,
963,2017-01-19 12:57:26,"This is a suggestion for the ability to directly paste content in a field, instead of typing it out letter by letter.",coyotte508,
963,2017-01-20 01:52:46,"You mean to trigger a ctrl + v keypress? You can do that using existing functions in the API.

If typing out letter by letter annoys you, you can use nightmare.insert(<String>).",jekku,
963,2017-01-20 02:05:50,I think tho this would be useful in making tests for a webpage that disallows pasting to fields. A PR would be nice! :),jekku,
963,2017-01-20 15:55:54,"Didn't know about `insert`...

I tried it (replaced `type` with it) and it doesn't work, maybe I'm not selecting the precise selector and `.insert` would need that level of detail, or maybe it needs a `paste` or `keyboard event` (quite the custom design on the `input` in question...).",coyotte508,
963,2017-01-20 20:07:18,@coyotte508 do you have a small example of your problem?,rosshinkley,
963,2017-01-20 21:47:25,"@rosshinkley Sorry, not a small one...

https://gist.github.com/coyotte508/7bffdd66e251917c003bebe94ce343e3

It's inside a payment page. `.type` works but not `.insert`. I use the `nightmare-iframe-manager` plugin. The field itself is inside an iframe, maybe it's due to that too.

The selector used for `.type` is the precise selector for the input (`#number`), not a parent.",coyotte508,
962,2017-01-18 23:40:44,How can I run custom code while nightmare goes? For example I wan to make the extrnal rest call or call a script.,novoxudonoser,
962,2017-01-20 20:21:06,"Depends on where you need to make the call from.  Are you trying to make the call from the Electron client (from the loaded page) or from your script?

From your script, you could use `.then()`:
<S_CODE_TOKEN>

Doing so from the client is marginally more complicated, but you could easily inject something that handles HTTP requests for you (like jQuery, for example).",rosshinkley,
962,2017-01-20 23:04:07,"I also found god examle [here](http://stackoverflow.com/questions/37857545/nightmare-js-conditional-browsing):
<S_CODE_TOKEN>

Mabe add this too examples? It will be useful for beginners.",novoxudonoser,
961,2017-01-18 22:26:39,"<S_CODE_TOKEN>

the page that I'm on is currently the file I need to save.... 
my-data.xml just returns html ",thebetterjort,2017-03-24 18:13:34
961,2017-01-20 20:16:30,"I _think_ that Electron will display XML data rendered with the pretty XML rendering guts built into Chromium, which would explain the ""rendered"" view you're getting with `document`.

Try selecting out `webkit-xml-viewer-source-xml` - something like:

<S_CODE_TOKEN>",rosshinkley,2017-03-24 18:13:34
961,2017-03-24 18:13:20,"<S_CODE_TOKEN>

Worked for me. Thank you.",thebetterjort,2017-03-24 18:13:34
960,2017-01-18 10:35:49,"The Readme states
<S_CODE_TOKEN>

Is there a way to get console output from an injected function?",stuikomma,2017-03-07 15:43:05
960,2017-03-07 15:21:31,"Maybe I am missing something?

# Case 1

`app.js`
<S_CODE_TOKEN>

`inject.js`
<S_CODE_TOKEN>

Returns:
<S_CODE_TOKEN>

# Case 2

Running a function from within `.evaluate()`
<S_CODE_TOKEN>

Returns:

<S_CODE_TOKEN>

So, am I missing something?",entrptaher,2017-03-07 15:43:05
960,2017-03-07 15:43:05,"True, I must have been doing something wrong. Thanks a lot for your examples!",stuikomma,2017-03-07 15:43:05
959,2017-01-16 16:37:59,"Code from here: https://github.com/segmentio/nightmare/issues/887#issuecomment-269412280

<S_CODE_TOKEN>

And i have error: 
<S_CODE_TOKEN>
Why dont works? This is like example from main wiki ""Defining a custom action with an Electron method""",necromind,
959,2017-01-16 16:58:32,"Solved. done must be first: 
<S_CODE_TOKEN>

But this code anyway dont send press right key event.",necromind,
959,2017-01-18 10:16:37,"<S_CODE_TOKEN>

This code from examples dont work too! App sleeps at clearCache point. HOW can i get access to **win.webContents** for using sendInputEvent. Help me pls.",necromind,
959,2017-01-20 20:43:34,"Your `clearCache` method takes a `message` parameter, but you're not passing anything to the call in your Nightmare chain.  What happens if you try changing `function(message, done)` to just `function(done)`?",rosshinkley,
959,2017-01-23 21:52:29,"i have the same problem with the custom actions. 
I'm using the 2.9.1 and still have the problem for me.
I try to use the example in the home page, but appears a error to me: ""Unhandled promise rejection (rejection id: 1): Nothing responds to ""clearCache"".",gneccao,
959,2017-02-07 14:59:46,"+1. No custom action works for me either if it involves interacting with electron.

I can't even get the `clearCache` custom action from [the documentation](https://github.com/segmentio/nightmare#nightmareactionname-electronactionelectronnamespace-actionnamespace) to work.

Here's a test script (copy-pasted clearCache from doc):
<S_CODE_TOKEN>

What happens when I run `node actionstest.js`: a blank electron window opens up. Nightmare then stalls on the white page until I quit the script via `ctrl-c`.

Full output for `DEBUG=nightmare:*,electron:* node actionstest.js` (it stalls immediately after):

<S_CODE_TOKEN>

Nightmare verision `2.9.1`.
Electron version `1.5.0`.
Unlikely related but: macOS Sierra 10.12.2.

Any help here would be greatly appreciated.

The bug, whatever it is, renders all custom actions useless, including [kyungw00k/nightmare-webrequest-addon](https://github.com/kyungw00k/nightmare-webrequest-addon) and [rosshinkley/nightmare-load-filter](https://github.com/rosshinkley/nightmare-load-filter).",contobob,
959,2017-02-10 03:36:20,"@contobob What you have there will almost certainly not work: `win.webContents.session` does not exist until you navigate away from `default:blank`.  (Why would you try to clear a session cache before it exists?)

If you're having problems with those plugins, i would encourage you to open issues there.",rosshinkley,
959,2017-02-10 14:30:31,Thanks for the reply @rosshinkley. Does that mean the docs in README.md should be updated? My test code was mainly a copy-paste of what can be found [here](https://github.com/segmentio/nightmare#nightmareactionname-electronactionelectronnamespace-actionnamespace) in the `clearCache` example. The doc puts `clearCache` before `goto`.,contobob,
959,2017-02-13 19:54:39,"Having the same issue. This is almost a copy-paste from the readme:

<S_CODE_TOKEN>

However, it works fine if you remove the bits that call/declare the action:

<S_CODE_TOKEN>",ysimonson,
959,2017-02-14 14:36:49,"It's not an issue strictly with the placement of `clearCache` - granted that's probably wrong, even though it's in the readme. If you call `goto` before `clearCache`, it'll never get past `clearCache` - i.e. in this example, it'll print A, but not B or C.

<S_CODE_TOKEN>

IIRC, I saw the same issue w/ @rosshinkley's nightmare-upload. FWIW, on nightmare 2.9.1 as well.",ysimonson,
959,2017-02-24 03:05:32,"@ysimonson It _does_ print B and C, just not to `stdout` of the node process.  Instead, those get printed (rightfully) to Electron's `stdout`.  Consider your above script, but instead of running with `node example.js` you run with `DEBUG=electron* node example.js`.  You'll see the following output:

<S_CODE_TOKEN>

... which is precisely what you would expect to see.  `B` when the action is created on the instance, followed by `A` when the action is called, followed by `C` when the action responds to the call.",rosshinkley,
959,2017-02-24 03:14:54,"Bah, I realized I didn't answer the question of why it's not calling back: It looks like the clearCache callback isn't getting called.  I'll dig into that.",rosshinkley,
959,2017-03-12 17:04:28,"@rosshinkley Have a look into this, its been several months since we've found such issue. Nothing responds to such actions. :/ 

![screenshot from 2017-03-12 22-59-35](https://cloud.githubusercontent.com/assets/8284972/23833958/328e77b4-0778-11e7-8106-fe6d1e8287a6.png)

",entrptaher,
959,2017-03-17 04:07:43,"In this particular case, it looks like `webContents.session.clearCache` never calls back, and it's not immediately clear why.  I'm inclined to say this is a bug with Electron: the source for [`clearCache`](https://github.com/electron/electron/blob/7f7df5a6dd083117bfa8175bf3ce1d52771eea6a/atom/renderer/api/atom_api_web_frame.cc#L236-L241) does not have a callback call, at least in my cursory look.  For contrast, compare that to [`clearStorage`](https://github.com/electron/electron/blob/bad130f623d1ed0de1a61bc3e82ae553fbf46364/atom/browser/api/atom_api_session.cc#L505) that does.

If you move the `done` call to the line after `clearCache`, does the cache actually clear?  This may be worth opening with Electron.  Thoughts?

",rosshinkley,
959,2017-03-27 01:14:54,Please fix. Is this package deprecated?,aight8,
959,2017-03-27 03:09:15,"@rosshinkley If you create custom actions, almost same kind of error happens no matter the callback.",entrptaher,
959,2017-03-27 03:39:41,"**IMPORTANT** I hope I can help - spend some hours on it now.
- the action registration must be **BEFORE** you create your nightmare instance.
- if you access for example the <S_CODE_TOKEN> property you must call the plugin after a page is loaded (means for example **AFTER** the <S_CODE_TOKEN>) - @entrptaher in your code this could be the problem how I see on the screen shot. The problem is that it fails silently because exceptions are not reported which are throwed electron side. (see below to improve this)

To this package to improve:

- <S_CODE_TOKEN> calls in ""children function"" (which run on electron children process) should be redirected also to the main process output - it's hard to debug otherwise if you don't know that <S_CODE_TOKEN> exists, also it depends on the DEBUG var - don't forget it (<S_CODE_TOKEN>)
- Exceptions on electron side should be catched and redirected to the client and throwed there again with a note that it happened on electron side. Currently it crashes without infos.
- The <S_CODE_TOKEN> interface to register action is weird because of it's (name[, childFn], parentFn) signature. It must be clarified what the ""child"" and ""parent"" process are - and the optional value should be at the end - I can imagine the reason was the order, whyever - it's really more confusing. I just say:

<S_CODE_TOKEN>

- The API documentation has following flaws:
   - definitely missing of an overview - a simply TOC could help so much for orientation
   - document the rest of the members of the nightmare object
- I saw that <S_CODE_TOKEN> is currently on version 1.6, older than 2 years. This package has over 11k stars. No TS users here? I wrote the whole definition, very neat and complete. I will spend some time to prepare and publish it on @types if there are people who are interested for it, but if there are 12k js only users its okey.
",aight8,
959,2017-03-27 03:49:21,"Custom actions worked if I used it after a goto, but sometimes you need actions to do before going to any url. But what more important is that **all examples** from the docs are not working properly. Any action after goto works and any action before goto simply fails.",entrptaher,
959,2017-03-27 03:51:23,"Yes I know they should be removed all, temporarily. Currently not examples but broken code.",aight8,
959,2017-03-27 03:59:40,"This is what I had to do with all `done()` functions to make it working.
Example code: https://gist.github.com/entrptaher/870246d824c10317edf72a0d4b86760e 


done inside parent, done inside the action and also done in the callbacks. It's a done-strophic problem :D ",entrptaher,
959,2017-03-27 21:50:54,">Custom actions worked if I used it after a goto, but sometimes you need actions to do before going to any url.

I think I understand what the problem is now after seeing your example.  When `Nightmare.action()` (on the prototype) is called, there's an action put on the prototypal queue to execute action methods on all created instances.  Looking at your gist, it occurs to me there might be a bug when immediately calling a plugin method.  Poking around in the unit tests for Nightmare, I don't think this particular case is tested for and is probably worth adding to at least prove out that's not the problem.

> Exceptions on electron side should be catched and redirected to the client and throwed there again with a note that it happened on electron side. Currently it crashes without infos.

This is a somewhat complicated topic.  See #646.

> ...and the optional value should be at the end - I can imagine the reason was the order, whyever...

This is because `.action()` already existed, and I wanted to have as much backwards compatibility with previous versions as possible.

> The API documentation has following flaws:

You missed a few. ;)  Kidding aside, this has been on my backburner for a long time - it's why [`nightmare-examples`](https://github.com/rosshinkley/nightmare-examples) exists.  I'd _like_ for this to all be wrapped up on github pages, but I haven't made it that far yet.

>I saw that @types/nightmare is currently on version 1.6, older than 2 years.

PR DefinitelyTyped?

> If you create custom actions, almost same kind of error happens no matter the callback.

I don't think that's true as there are a _lot_ of plugin libraries that use this.  That said, I'm _almost positive_ you've hit a bug with either how caching works in Electron and/or with how actions are created on the instance after Electron is started.



",rosshinkley,
958,2017-01-16 13:46:11,"I have a really weird problem while using NightmareJS to print PDF:

A table header is repeated on the top of **the same page** where it's original (""source"") occurrence, and not on the **next page** like expected.

The Chrome print preview for this page doesn't show this behaviour.

The table is properly defined with a `thead` etc. and is inside a `div.page` which has `page-break-after: always`.

I can probably workaround this by using an opaque strip on the top of the page to hide this orphan table header but it's hacky and I wonder whether someone had encountered a better solution.

Also asked on SO: http://stackoverflow.com/q/41677785/36821",krulik,
958,2017-03-08 14:36:22,"I have the same problem
![captura](https://cloud.githubusercontent.com/assets/11091851/23708041/de2fac9e-0414-11e7-8e89-b08add4dba66.PNG)
",beastmike1,
957,2017-01-15 21:21:23,"I want to get a list of all network requests the page makes, specifically a list of all the images that are downloaded. Here is my attempt at getting network request data, but I'm very lost.

<S_CODE_TOKEN>",jineshshah36,2017-02-10 03:43:26
957,2017-01-19 07:37:10,"Something similar to the PhantomJS event ""onResourceRequested"". See http://phantomjs.org/network-monitoring.html",scottmas,2017-02-10 03:43:26
957,2017-01-19 15:28:25,Isn't that what `win.WebRequest.onCompleted` does? I'm more just confused about how to make it work in nightmare.js,jineshshah36,2017-02-10 03:43:26
957,2017-01-20 20:28:40,"Depending on what your needs are, you _might_ want to have a look at [`onBeforeRequest`](https://github.com/electron/electron/blob/master/docs/api/web-request.md#webrequestonbeforerequestfilter-listener) instead.  You may also want to have a look at [`nightmare-load-filter`](https://github.com/rosshinkley/nightmare-load-filter) as it might get you closer to what you're after.

Are you planning on doing an action with the images downloaded, or are you just trying to log them?",rosshinkley,2017-02-10 03:43:26
957,2017-01-24 15:56:05,"Interesting, I'll take a look, thanks!",jineshshah36,2017-02-10 03:43:26
957,2017-02-05 01:37:24,I don't know anything about the requests. But you can log all of the responses. I have just commented that in https://github.com/segmentio/nightmare/issues/784#issuecomment-277490918.,d3ce1t,2017-02-10 03:43:26
957,2017-02-10 03:43:26,"Considering this resolved for the moment.  If you have any more problems, feel free to reopen/open a new issue.",rosshinkley,2017-02-10 03:43:26
956,2017-01-15 18:42:50,"I am using nightmarejs in my meteor project. I am using it inside my meteor methods in server. So, Its running fine. 

But i need jquery injected into the website. I placed the `jquery.js` in `/public/js/jquery.js` I can access this file using http://localhost:3000/js/jquery

So, I used below:

<S_CODE_TOKEN>
But it seems that jquery is not working properly.

Anyway, you guys have done a great job in developing this package 👍 ",Nisthar,2017-01-20 20:23:40
956,2017-01-16 05:59:39,"Ok, I managed to locate the builded `jquery.js` file in `./../web.browser/app/js/jquery.js`.

But don't know if there are any disadvantages in doing this way?",Nisthar,2017-01-20 20:23:40
956,2017-01-16 06:00:05,Its working now. Can close if there is no other solution.,Nisthar,2017-01-20 20:23:40
956,2017-01-20 20:23:40,"That is one way, another is using a CDN instead.  Going to go ahead and close for now.",rosshinkley,2017-01-20 20:23:40
955,2017-01-12 05:28:51,"In a recent Nightmare script, I was consistently getting timeouts occurring and wound up writing #945 to resolve timeouts not cleaning up after themselves properly. This issue is mostly for @Mr0grog so they can debug issues on triggering frames in the said script. I made a minimal example here:

https://gist.github.com/twolfson/b666177b87ae339f3ab2183c2be77690

Things I noticed:

- Removing the `wait(100)` will cause it to start passing
- Removing 1 screenshot call will cause it to start passing
- Moving from `getbootstrap.com` to `google.com` will cause it to start passing

Best of luck on your debugging!

/cc @Mr0grog ",twolfson,
955,2017-01-20 22:49:06,"OK! Sorry I let this fall off my radar. #964 reminded me of it—and it turns out this issue and that one are related!

It appears to be possible that the `DOM.highlightRect` and `DOM.hideHighlight` debugger calls can happen in rapid enough succession that no frames are generated (both operations happen before generating a frame, so nothing has “changed” visually, and so no frame is rendered).

There also seems to be an issue where the synchronous call to detach the debugger immediately after the `DOM.hideHighlight` call prevents the `hideHighlight` operation from ever running—so on the second screenshot, the call to `DOM.highlightRect` isn’t actually changing anything.

Anyway, I think the solution to both this and #964 is to:
1. Call `DOM.highlightRect`
2. Wait for a frame
3. Call `DOM.hideHighlight`
4. Wait for a frame
5. Detach the debugger
6. Dispatch a `data` event from `FrameManager`

This will probably be easiest if I wait for #945 to be complete, since it’ll be messing around in the same area of the codebase.",Mr0grog,
954,2017-01-11 16:52:57,"How could I achieve passing arguments to a custom preload script?

[This issue](https://github.com/electron/electron/issues/6504) on the electron repo suggests to send in query parameters to the visited url and then retrieve them from the preloaded script. I would like to avoid this approach as it would allow the scripts in the page to read those query parameters, not just me.

Can I maybe use IPC to do it? How could I go about that?",ale316,
954,2017-01-11 22:57:52,"Uuuhf, I had almost given up. I found a way to pass arguments to the preload.js, it is far from elegant.

You can define an electron action which defines an ipc listener for 'set-screen-params' on the renderer object, that returns whatever data you want to whoever send the 'set-screen-params' event.
<S_CODE_TOKEN>

Then in your preload file:
<S_CODE_TOKEN>
",ale316,
954,2017-01-20 20:39:55,"There isn't a _real_ clean way to pass arguments to the preload, I made a passing attempt at doing something like this in #374 (if I'm reading what you want correctly).

I'm also not real clear on what you're trying to do: why are you using events for sending data from preload to your action?",rosshinkley,
954,2017-03-19 21:04:21,"I would like to have this option too, url params don't work for me, provided here action too. I ended up writing new script every time I open new session. In my case I have to initialize several options for the window object + local storage.",maksimlikharev,
953,2017-01-11 14:09:16,"Hi!

I am having some issue trying to use nightmare inside an AWS Lambda.

My code works great locally, but when I deploy (I use browserify to bundle my lambda package, otherwise it would be 150MB), I receive this error:

`Electron failed to install correctly, please delete node_modules/electron and try installing again`

Did you manage to run it on this environment? thanks

cheers

R",riccardo-89,
953,2017-01-11 14:37:05,"I couldn't get it to deploy because of electron's file size. I tried going back pre version 2.0 (before electron is used), but it didn't work either for me. I was going to try other scrapers, this looked feasible: http://casperjs.org

Try this: https://github.com/narainsagar/node-casperjs-aws-lambda",ajagnanan,
953,2017-01-12 09:07:29,"thanks a lot @ajagnanan I will have a look into that, hope anyway that nightmare can be run somehow inside lambdas and that as solution is already out there :D thanks",riccardo-89,
952,2017-01-11 11:36:52,"So I managed to get nightmarejs up and running and it was working perfectly for a while and now it just works sometimes and with some websites not at all..
I didn't change anything in the code, they just started appearing the next day, I already rebooted, they still persist.

Here is some output of the example:

      root@docker-512mb-fra1-01:~/node# xvfb-run --server-args=""-screen 0 1024x768x24"" node index.js
      https://github.com/segmentio/nightmare
      root@docker-512mb-fra1-01:~/node# xvfb-run --server-args=""-screen 0 1024x768x24"" node index.js
      https://github.com/segmentio/nightmare
      root@docker-512mb-fra1-01:~/node# xvfb-run --server-args=""-screen 0 1024x768x24"" node index.js
      Search failed: Error: .wait() timed out after 30000msec
          at Timeout._onTimeout (/root/node/node_modules/nightmare/lib/actions.js:453:10)
          at ontimeout (timers.js:365:14)
          at tryOnTimeout (timers.js:237:5)
          at Timer.listOnTimeout (timers.js:207:5)
      root@docker-512mb-fra1-01:~/node# xvfb-run --server-args=""-screen 0 1024x768x24"" node index.js
      https://github.com/segmentio/nightmare
      root@docker-512mb-fra1-01:~/node# xvfb-run --server-args=""-screen 0 1024x768x24"" node index.js
      Search failed: Error: .wait() timed out after 30000msec
          at Timeout._onTimeout (/root/node/node_modules/nightmare/lib/actions.js:453:10)
          at ontimeout (timers.js:365:14)
          at tryOnTimeout (timers.js:237:5)
          at Timer.listOnTimeout (timers.js:207:5)

And yes the server has a perfect internet connection stability, so it's not that.",harso121,
952,2017-01-11 19:20:37,I had this issue  with lubuntu. I installed a new version of chrome and it fixed.,leoalves,
952,2017-01-11 19:23:55,"I don't even have chrome installed though, as I'm just using the console",harso121,
952,2017-01-12 04:54:20,Is this on sudo? Why?,jekku,
952,2017-01-12 10:34:08,"Someone said that it worked for him putting it on sudo, so I was trying it here, but the output is the same whether sudo or not..",harso121,
952,2017-01-15 20:09:57,"Same here. Doesn't happen all the time but in 1/3 cases. Any idea? This problem didn't occur in the past.

Here is a docker image with our setup: https://github.com/graphcool/prep/blob/master/docker/Dockerfile",schickling,
952,2017-01-31 19:35:04,"all have the same problem, and developers are silent.",vshvydky,
952,2017-02-10 04:01:47,Did something change on the source site?,rosshinkley,
952,2017-02-10 12:49:29,same problem :( anybody know how to fix ?,mekasan,
952,2017-02-14 07:41:50,"@rosshinkley no, it did not.",harso121,
952,2017-02-14 07:44:15,"My problem was, when proxy die or site blocked this proxy in process.. ",mekasan,
952,2017-03-02 20:10:49,"I'm having the same issue.

I extracted the HTML when the test fails, and the item I'm looking for is indeed present on the page. Anybody had any luck figuring this problem out?",gretro,
951,2017-01-11 04:10:10,"Is there a way to lookup multiple values and have them all be returned to the ending promise/callback? I find myself wanting to do things like this for succinctness:

<S_CODE_TOKEN>

Or is there another terse-ish way to do this?",ianstormtaylor,2017-01-11 07:46:45
951,2017-01-11 07:12:37,"I rarely end up like this because I usually use async-await or generators. They look something like this:

When wrapped in a generator function:
<S_CODE_TOKEN>

When wrapped in an async function:
<S_CODE_TOKEN>",jekku,2017-01-11 07:46:45
951,2017-01-11 07:46:45,"Thank you @jekku that's a much better API, I didn't realize that was possible!",ianstormtaylor,2017-01-11 07:46:45
951,2017-01-11 08:19:53,@ianstormtaylor please tell me if it worked. You can use babel for es6 and es7. :),jekku,2017-01-11 07:46:45
951,2017-01-11 18:12:10,"@jekku yup it worked! Thanks
",ianstormtaylor,2017-01-11 07:46:45
951,2017-01-12 03:31:21,Alright! Happy hacking to Golden State - from Asia! :),jekku,2017-01-11 07:46:45
950,2017-01-09 23:14:10,"Hi, ive added support for a toJPEG() to nightmare since electron supports it too.
for consistency ive added a toPNG(), while the current `screenshot()` is an alias of it.

runner.js:
added toJPEG

Action.js
* added toJPEG
* alias screenshot with toPNG
* Theres another change on the `toPNG` where if clip is a function, i check if the path is an object instead of checking if its a string when i am assigning to a clip, so if i accidentally pass a number like a do to a `toJPEG` for the compression the value will get ignored.

Thank you",kennuzzo,
950,2017-01-10 00:00:09,"Looks good, I would follow #135 though and just parse the file path and add an optional parameter for JPEG output quality (0-100). If no file extension then default to PNG for full backwards compatibility.",jimmaay,
950,2017-01-12 12:19:21,"As suggested, moved back everything into `.screenshot()` which behave the same for `png` and `jpeg`,  similar to the `png` `.screenshot()` if we want the jpeg version, we need to pass a compression `.screenshot(90)`.
Also added mime check on the tests to make sure that the buffer is an `image/jpeg` or `image/png`",kennuzzo,
949,2017-01-09 22:10:10,"Theres an ID to other elements like #btnMyWL that is easy to target and click on, but there is a button ""Save"" that has no id or class name to it. I can't target it to get it clicked.... I even did Array.from(document.querySelectorAll) and selected the specific save button (indexed 14), returned it from my evaluate function to my then function and tried to do the .click on it inside the then function but it doesnt click. Is there any way I can click an ""anonymous"" button like that?  

    var w = Nightmare({
        width: 1600,
        height: 900,
        waitTimeout: 8000 // 8 secs no answer, stop the script
    });
    w
    .goto(anondefault)
    .insert(""#UserName"", ""*censored*"")
    .insert(""Password"", '*censored*')
    .click(""#btnLogin"")
    .wait(""#btnMyWL"") // wait 1.5 secs
    .click(""#btnMyWL"") // clicks WL
    .wait(""#txtBookNbrs"")  
    .click(""#txtBookNbrs"") // add container # field
    .insert(""#txtBookNbrs"", 'TCLU7777777')
    .evaluate(function () {
        let r = Array.from(document.querySelectorAll(""button""));
        let s = r; //  
        return $(""button"")[14];
    })
    .end()
    .then(z => {  // z  = save watchlist button
        console.log(z);  // returns ""jQuery43249238324"" or something--it is the save button
        w.click(z)
    })
    .catch(error => {
        console.log(error);
    });",pfftdammitchris,2017-01-20 21:01:47
949,2017-01-10 05:27:23,"LADIES AND GENTLEMEN I FINALLY DID IT there was a attribute ng-click on it with SaveWatchList()  so I did:

 .click(""button[type=\""submit\""][ng-click=\""SaveWatchList()\""]"")

Impossible modals no more!",pfftdammitchris,2017-01-20 21:01:47
949,2017-01-20 21:01:47,Sounds fixed. :)  Closing.,rosshinkley,2017-01-20 21:01:47
948,2017-01-09 14:47:04,"In this code text ""OK OK OK"" appears in console at start script. How can make ""use""-functions with rich logic within it. How i see ""then"" in ""use""-function is wrong way.

<S_CODE_TOKEN>",necromind,
947,2017-01-09 13:03:34,"Hello,

I'm trying to create a function that creates the nightmare instance and does some work (I need it to always go to a site and run some script before running). So I've create a method the generates and returns a promise where it should return the working nightmare instance.

However for some reason when passing the nightmare instance through the resolve it gets `undefined` on the other end.

See repro:
<S_CODE_TOKEN>
Prints in the log:
<S_CODE_TOKEN>

Changing the line res(nightmare) to res(5) prints (obviously)
<S_CODE_TOKEN>",aml11,2017-03-10 20:27:24
947,2017-02-07 18:30:15,I've also see same phenomenon.,JumpeiArashi,2017-03-10 20:27:24
947,2017-02-09 03:38:06,"can you actually check what 'this' and 'nightmare' are inside that 'then' clause? my short speculation is that within that function, 'this' is actually 'nightmare', instead of 'nightmare'.",jekku,2017-03-10 20:27:24
947,2017-02-10 02:19:28,"Isn't this because the Nightmare instance is a `.then()`able itself?  If you're resolving nightmare after it's run a chain, it's trying to resolve the now-currently-empty action chain, which will resolve to `undefined`.

Try wrapping the instance in an object literal, like `res({nightmare:nightmare})`.  Would something like that work?
",rosshinkley,2017-03-10 20:27:24
947,2017-02-10 04:53:08,"Wrapping the nightmare like that is how I've been using it for awhile, it
does indeed work around the problem.
On Fri, 10 Feb 2017 at 4:19 Ross Hinkley <notifications@github.com> wrote:

> Isn't this because the Nightmare instance is a .then()able itself? If
> you're resolving nightmare after it's run a chain, it's trying to resolve
> the now-currently-empty action chain, which will resolve to undefined.
>
> Try wrapping the instance in an object literal, like
> res({nightmare:nightmare}). Would something like that work?
>
> —
> You are receiving this because you authored the thread.
> Reply to this email directly, view it on GitHub
> <https://github.com/segmentio/nightmare/issues/947#issuecomment-278839273>,
> or mute the thread
> <https://github.com/notifications/unsubscribe-auth/AM_RxyOjanMpmFSAw1C3bYhhZ0K-1MFBks5ra8kzgaJpZM4LePHs>
> .
>
",aml11,2017-03-10 20:27:24
947,2017-03-05 12:44:46,wow! OK I'll try to wrap an object literal. thanks.,JumpeiArashi,2017-03-10 20:27:24
947,2017-03-07 15:38:16,"Can't you just do this?
<S_CODE_TOKEN>

Or this,

<S_CODE_TOKEN>

Or even this,
<S_CODE_TOKEN>",entrptaher,2017-03-10 20:27:24
947,2017-03-07 15:45:12,"I'm trying to have a single nightmare instance and use it in all kinds of scenarios during my program's lifecycle.
So I have a single ""getInstance"" which acts as a lazy getter to a static nightmare instance which needs to initialize only once, since nightmare takes time to initialize I return a promise.",aml11,2017-03-10 20:27:24
947,2017-03-07 15:56:25,"Oh, that?
You can do it this way, 
Declare nightmare variable first, then update the variable.

<S_CODE_TOKEN>

Or, like this,

<S_CODE_TOKEN>

There are always several ways to do the same thing.

# A final example of everything combined

<S_CODE_TOKEN>

Result:
![image](https://cloud.githubusercontent.com/assets/8284972/23666670/e07d57ba-0385-11e7-9387-3469fde367ba.png)


",entrptaher,2017-03-10 20:27:24
947,2017-03-10 20:27:24,"@entrptaher Isn't that effectively the same thing as using (the admittedly not-well-documented) `.use()`?

Anyway, seems like this issue is resolved for the moment.  Closing.",rosshinkley,2017-03-10 20:27:24
946,2017-01-07 20:59:42,"I have a piece of code, which grabs a page and saves it as a pdf. This works perfectly fine on my local machine (windows 10 with an I7 cpu). But when I run the app in windows server 2008 R2, electron.exe starts up and hits 100% cpu. There's a small chance that the page won't time out and it will grab the page, but more times than not, it will time out (gives an error that nightmare took more than 30000 ms to get to the page). 

I'm an absolute programming n00b, and it's entirely possible that I'm doing something wrong, but even when I point nightmare to google.com, electron spikes to 100%, and it still times out most of the time. 

The specs of the machine is i7-3930k, 2gb, if that makes any difference.

<S_CODE_TOKEN>",shhtephe,
946,2017-01-09 06:56:33,I'm just curious as to why you use that server and hardware. :) Following here.,jekku,
946,2017-01-09 13:27:10,"It's what they provided me with.

I was originally setup with a centOs server, but I was having a really hard time getting nightmare to work, as it needed Xvfb to function. Like I said, I'm an absolute n00b, and couldn't get it to run properly (it would silently fail without any error).

What would you recommend they spin up for a server? I can certainly pass it along, if you think it'll fix the issue :)",shhtephe,
946,2017-01-10 01:12:00,"@shhtephe lol we're both noobs but this is what I think - the containers in my Travis CI tests use Ubuntu Server edition. :) I think Xvfb or Xfce will be easier to set up there, so you can use nightmare.js. :grinning: ",jekku,
946,2017-01-10 01:33:32,"@jekku So I asked the admins to turn up the ram on the VM box, and they bumped it from 2gb to 8gb, and the issue has been solved. Electron runs speedily and doesn't go past 5%. I don't know why having low memory would tank the CPU usage, but as I said, I'm a n00b. I suppose we can consider this ""solved"" as there's a reasonable workaround?",shhtephe,
946,2017-01-10 01:46:12,"@shhtephe that's awesome :D 

if we look closely, the windows VM might have been using some kind of swap partition. Modern browsers usually take up a lot of memory but I'm not sure how electron is benchmarked.

I tried running chrome on a small box with 3gb and the processor usage is around 50 to 60 percent for 5 tabs. That sounds a bit congruent to your experience.",jekku,
945,2017-01-07 11:24:07,"I'm a new user of Nightmare but found an issue when recording multiple screenshots on a static page (i.e. one with no frame updates). I was recording multiple screenshots in series at different viewport sizes.

- Nightmare was hanging indefinitely when hidden
- Nightmare was hanging when visible until I moved my mouse over the content (thus generating a new frame for the debugger)

After some sleuthing, it looks like FrameManager has some sneaky edge cases that needed deeper testing. In this PR:

- Fixed up double subscription issue due to still using `subscribed` boolean despite no longer being used
- Added `requestedFrame` resetting on `attach` error and `timeout` so future attach errors/timeouts can get the same `null` frame
- Added tests

**Notes:**

With respect to tests, I feel like I did a quick and dirty job. The `require` chunks aren't pulled out and I added `async` despite it not being used in the rest of the repo. I mostly wanted to get feedback on the PR and how y'all would like to handle the code setup instead of stressing myself out. I will gladly make any requested changes",twolfson,
945,2017-01-09 10:26:16,Thanks for the feedback @Mr0grog =) I left :+1: on comments I will definitely take care of and feedback on other ones for longer discussions. I'm going to wait until repo owners leave comments until I take care of the :+1:'d comments though (saves me time with less context switching),twolfson,
945,2017-01-10 01:28:16,"@Mr0grog On a tangent, did we ever explore using `requestAnimationFrame` instead of trying to force a DOM redraw?",twolfson,
945,2017-01-10 01:30:40,"> @Mr0grog On a tangent, did we ever explore using requestAnimationFrame instead of trying to force a DOM redraw?

Yes. It turned out not to trigger anything—it only schedules things for the next time a frame is prepared (before drawing).",Mr0grog,
945,2017-01-10 01:32:07,"Ah, alright. Worth asking about. Thanks =)",twolfson,
945,2017-01-10 01:33:10,"Haha, no worries, I would have definitely asked the same question if I were in your position :)",Mr0grog,
945,2017-01-20 22:55:16,"The fix for two other issues (#955, #964) depends on the changes here and is also in the same area of the codebase. There’s an outline for what needs to change in #955, but I don’t really want to do that work until this PR is mostly set to go because they *will* conflict.",Mr0grog,
945,2017-03-23 09:54:33,"I'm having this an issue with nightmare 2.10.0 that I believe is related to this PR.

Specifically for taking screenshots with varying viewport sizes:

Here's a debug log on a crashed run:

<S_CODE_TOKEN>

And here's a debug log when it finished successfully:

 <S_CODE_TOKEN>

Will this PR fix my issue? If so, and idea when it might be merged?

Thanks in advance, and let me know if I can provide more detail.",cscanlin,
945,2017-03-23 10:01:07,"@cscanlin It looks similar to my problem so I would bet it would fix it. Since this PR hasn't been touched in 2 months and as @Mr0grog has previously suggested, we're probably going to be waiting for a while.

I suggest working around it in the meantime by pointing to a fork. This can be done via `git` URLs in your `package.json`:

https://docs.npmjs.com/files/package.json#git-urls-as-dependencies

https://github.com/twolfson/multi-image-mergetool/blob/1.32.1/package.json#L90",twolfson,
945,2017-03-23 10:17:41,"@twolfson That did the trick, thanks! On that note, I was also able to merge your branch with the master branch with 0 conflicts. Are there any other major roadblocks in getting this deployed? @Mr0grog, you said that this branch will actually open up the path for even more fixes (in addition to fixing this issue), so it seems like an easy win. Thoughts?",cscanlin,
945,2017-03-23 16:57:10,"@cscanlin I don’t think anybody who has commented here has any commit rights, so I dunno. It doesn’t seem like there should be any roadblocks here and I would *think* this should be high priority since it’s really easy to trigger it and hang Nightmare.

_Paging @rosshinkley…_",Mr0grog,
944,2017-01-06 04:23:19,"I want to fetch all links on a website and then sequentially visit them.

I have the following code:

<S_CODE_TOKEN>

For some reason it won't loop through the links. Can anybody give me a hint on how to solve this?",anthnyprschka,
944,2017-01-06 04:48:06,"@anthnyprschka the return of document.querySelector and document.querySelectorAll are not serializable.

You have to do seomthing like
<S_CODE_TOKEN>

recommended for closing @rosshinkley ",jekku,
944,2017-01-06 04:49:07,"Also it's weird to cast document.querySelectorAll on an ID selector, since that's only supposed to return 1 node. IDs should be unique per dom element. Are you sure about the structure of your scraping?",jekku,
944,2017-01-06 05:04:49,"Wow thanks @jekku !! The serialization was the problem. The '#id' was just for illustration, was actually selecting for a class. Sorry its late in Berlin. Thanks again for the quick help!
PS. Wasn't really an issue of nightmare.js was it",anthnyprschka,
944,2017-01-06 05:33:42,It's actually pretty common for similar questions to be asked around. Maybe you can PR to electron or nightmare so we can parse it? :))))),jekku,
944,2017-01-06 16:29:49,"@jekku Haha sure you mean a pull request? What exactly? 

And is this the only way to send back data extracted from the site to my script? Seems like a workaround no?

EDIT: Nevermind i think i got it now :) ",anthnyprschka,
944,2017-01-06 16:36:11,Btw just found this question on SO about it: http://stackoverflow.com/questions/30876927/nightmare-phantomjs-and-extracting-page-data,anthnyprschka,
943,2017-01-04 06:11:29,"Most probably due to Electron but when rendering fullpage PDF using the pageSize option, 2 pages are rendered in the PDF instead of just 1.

The code below does the following
  - Load a page
  - Get the page width and height
  - Convert sizes to micron meters
  - Resize the viewport
  - Render full page PDF

<S_CODE_TOKEN>

While it happens with facebook.com, no issues are seen when rendering github.com. Looking at the problematic PDFs, I noticed that the last few pixels of the full page is rendered on the second page.",Mins,2017-01-16 05:50:32
943,2017-01-07 19:36:22,"given that the pdf printing happens under the covers in electron, it's likely an electron issue:
https://github.com/segmentio/nightmare/blob/master/lib/runner.js#L444",reinpk,2017-01-16 05:50:32
942,2017-01-02 21:55:03,"I am trying to click an individual href element that are exactly the same as others (there are 4 total of these. Here is the element:

    <a href=""#"" ng-if=""d.AvailableStatus != 'UNKNOWN'"" ng-click=""openDialog2('popuptempl1','/ImportAvailability/GetContainerInfoByContainerNumber',{Container_Nbr:d.WLContainerNumber, Terminal_Cd:d.TerminalCode},'Container Details')"" class=""ng-binding ng-scope"">TCLUZZZZ004</a>

The problem is I do not know how to select one. None of them have a unique ID. They all share the same class names. Only the href text is unique which is 'TCLUZZZZ004' 

Thank you.
",pfftdammitchris,2017-01-07 19:37:12
942,2017-01-03 05:59:46,Use .evaluate().,jekku,2017-01-07 19:37:12
942,2017-01-04 04:58:55,"I don't know why @urlysses deleted his answer, but using the css selector is a way better option than my initial answer",jekku,2017-01-07 19:37:12
942,2017-01-05 01:59:21,I tried using evaluate() but I dont know how to get it to return the value to my click() line. Or do I use click() inside the evaluate function before it gets returned?,pfftdammitchris,2017-01-07 19:37:12
942,2017-01-05 03:46:22,"like @urlysses said, you can use css3 styled selectors.
<S_CODE_TOKEN>

not sure why he deleted his answer.",jekku,2017-01-07 19:37:12
942,2017-01-05 03:50:46,"@jekku - @urlysses' answer would only work if the HREF attribute contained the text in question, not the text element under the anchor.  In other words, the answer - while useful - didn't address the question.

From here, @pfftdammitchris, I think you have two options off the top of my head.  One: you could use `.evaluate()` and try to issue clicks directly.  Something like:

<S_CODE_TOKEN>

This clicks directly on the first element that matches text in the anchor's text, in this case, `information`.  This approach doesn't _always_ work, it depends on the JS framework you're using - in your case it looks like Angular, so your mileage may vary.

Option two: add a class to the anchor you want to click, then use the existing `.click()` machinery to issue your click.  This may work better in your situation, especially if you decide you'd rather use something like [`nightmare-real-mouse`](https://www.npmjs.com/package/nightmare-real-mouse) instead of the internal click events to Nightmare:

<S_CODE_TOKEN>",rosshinkley,2017-01-07 19:37:12
942,2017-01-05 21:10:39,"^ Those demonstrations were really helpful. If the website i'm scraping from is using the jquery library, am I able to select elements using jquery syntax? $(""#fdfsdf"").html()   etc

",pfftdammitchris,2017-01-07 19:37:12
942,2017-01-06 02:30:47,@pfftdammitchris yes. As long as you are sure that JQuery is always loaded. You can even use all the other functions of JQuery to perform interactions / manipulations within an evaluate call.,jekku,2017-01-07 19:37:12
942,2017-01-07 20:20:28,Sorry! Deleted my answer because I re-read the question and saw that I misunderstood the initial question. I should instead have edited with a more appropriate answer or update. Thanks @jekku and @rosshinkley.,urlysses,2017-01-07 19:37:12
941,2017-01-02 10:27:18,"Seems like #865 took out these lines (sorry, my fault)",rstacruz,2017-01-02 20:52:58
941,2017-01-02 20:52:54,Thanks for the update.,rosshinkley,2017-01-02 20:52:58
940,2017-01-01 09:22:16,"The following code works flawlessly without `screenshot()`, but for some reason the httpResponse is undefined when the `screenshot()` function is present.

<S_CODE_TOKEN>

Nightmare version is 2.9.0

Node version 6.9.1",Dnyg,2017-01-02 21:02:30
940,2017-01-01 13:55:04,"Thanks to Daniel for raising the bug.
I originally raised a question on StackOverflow which he answered by emitting the screenshot method.

I have updated node to 7.3.0 just in case and the issue remains. I have also removed and re0installed nightmare a couple of times.

The screenshot is rendered and then nightmare seem to stall

I have run a debug and the output is below:

Here's the code:

`var Nightmare = require('nightmare');
var nightmare = Nightmare({ show: true })

Nightmare().goto(""https://google.com"")
.screenshot(""abc.png"")
.end().then(function(httpResponse){
    console.log(httpResponse.code);
})
.catch(function(error){
    console.log('ERROR: ' + error)
})
`

`DEBUG=* node nightmaretest.js
  nightmare queuing process start +0ms
  nightmare queuing process start +3ms
  nightmare queueing action ""goto"" for https://google.com +2ms
  nightmare queueing action ""screenshot"" +0ms
  nightmare running +0ms
  nightmare:log Navigating: ""https://google.com"",
            headers: [none],
            timeout: 30000 +439ms
  nightmare:log did-start-loading +59ms [{}]
  nightmare:log did-get-redirect-request +301ms [{},""https://google.com/"",""https://www.google.co.uk/?gfe_rd=cr&ei=ZglpWPnWN6P38AehmLPoCQ"",true,302,""GET"","""",{""alt-svc"":[""quic=\"":443\""; ma=2592000; v=\""35,34\""""],""cache-control"":[""private""],""content-length"":[""262""],""content-type"":[""text/html; charset=UTF-8""],""date"":[""Sun, 01 Jan 2017 13:51:34 GMT""],""location"":[""https://www.google.co.uk/?gfe_rd=cr&ei=ZglpWPnWN6P38AehmLPoCQ""],""status"":[""302""]}]
  nightmare:log did-get-response-details +161ms [{},false,""https://www.google.co.uk/?gfe_rd=cr&ei=ZglpWPnWN6P38AehmLPoCQ"",""https://google.com/"",200,""GET"","""",{""alt-svc"":[""quic=\"":443\""; ma=2592000; v=\""35,34\""""],""cache-control"":[""private, max-age=0""],""content-encoding"":[""gzip""],""content-type"":[""text/html; charset=UTF-8""],""date"":[""Sun, 01 Jan 2017 13:51:35 GMT""],""expires"":[""-1""],""p3p"":[""CP=\""This is not a P3P policy! See https://www.google.com/support/accounts/answer/151657?hl=en for more info.\""""],""server"":[""gws""],""set-cookie"":[""NID=93=jh20qDlSaE_B2kQ68P5xXm4MGswjyFWb7_HRJivnfvIcWA4MLk1cdEF2zpALsTrHmQLimdih2TFhtqIDA4NGMzn9kBZTSR33sJYMjsKs_GRLy0t8SPOeJfzZ9DwM_p24; expires=Mon, 03-Jul-2017 13:51:35 GMT; path=/; domain=.google.co.uk; HttpOnly"",""CONSENT=WP.25b8c3; expires=Fri, 01-Jan-2038 00:00:00 GMT; path=/; domain=.google.co.uk""],""status"":[""200""],""x-frame-options"":[""SAMEORIGIN""],""x-xss-protection"":[""1; mode=block""]},""mainFrame""]
  nightmare:log did-get-response-details +128ms [{},false,""https://www.google.co.uk/logos/doodles/2017/new-years-day-2017-5644902961512448-res.png"",""https://www.google.co.uk/logos/doodles/2017/new-years-day-2017-5644902961512448-res.png"",200,""GET"",""https://www.google.co.uk/"",{""age"":[""49895""],""alt-svc"":[""quic=\"":443\""; ma=2592000; v=\""35,34\""""],""cache-control"":[""public, max-age=31536000""],""content-length"":[""2982""],""content-type"":[""image/png""],""date"":[""Sun, 01 Jan 2017 00:00:00 GMT""],""expires"":[""Mon, 01 Jan 2018 00:00:00 GMT""],""last-modified"":[""Thu, 22 Dec 2016 16:09:59 GMT""],""server"":[""sffe""],""status"":[""200""],""x-content-type-options"":[""nosniff""],""x-xss-protection"":[""1; mode=block""]},""image""]
  nightmare:log did-get-response-details +0ms [{},false,""https://www.google.co.uk/logos/doodles/2017/new-years-day-2017-5644902961512448-hp.gif"",""https://www.google.co.uk/logos/doodles/2017/new-years-day-2017-5644902961512448-hp.gif"",200,""GET"",""https://www.google.co.uk/"",{""age"":[""49895""],""alt-svc"":[""quic=\"":443\""; ma=2592000; v=\""35,34\""""],""cache-control"":[""public, max-age=31536000""],""content-length"":[""292678""],""content-type"":[""image/gif""],""date"":[""Sun, 01 Jan 2017 00:00:00 GMT""],""expires"":[""Mon, 01 Jan 2018 00:00:00 GMT""],""last-modified"":[""Thu, 22 Dec 2016 16:08:55 GMT""],""server"":[""sffe""],""status"":[""200""],""x-content-type-options"":[""nosniff""],""x-xss-protection"":[""1; mode=block""]},""image""]
  nightmare:log did-get-response-details +19ms [{},false,""https://consent.google.com/status?continue=https://www.google.co.uk&pc=s&timestamp=1483278695"",""https://consent.google.com/status?continue=https://www.google.co.uk&pc=s&timestamp=1483278695"",204,""GET"",""https://www.google.co.uk/"",{""alt-svc"":[""quic=\"":443\""; ma=2592000; v=\""35,34\""""],""cache-control"":[""no-cache, no-store, max-age=0, must-revalidate""],""content-length"":[""0""],""content-security-policy"":[""script-src 'nonce-OP99O3k3cs17E3WnibN/cBUKQKE' 'self' 'unsafe-eval' https://apis.google.com https://ssl.gstatic.com https://www.google.com https://www.gstatic.com;report-uri /_/ConsentHttp/cspreport""],""content-type"":[""text/html; charset=utf-8""],""date"":[""Sun, 01 Jan 2017 13:51:35 GMT""],""expires"":[""Mon, 01 Jan 1990 00:00:00 GMT""],""p3p"":[""CP=\""This is not a P3P policy! See https://support.google.com/accounts/answer/151657?hl=en for more info.\""""],""pragma"":[""no-cache""],""server"":[""ESF""],""set-cookie"":[""NID=93=twdvPiiYKzn4X3eXW3OAsSJLMyFYRCwGGc-_j7Qcxg0uY4msqPGNSspiMY8MC7fgzwpCo8swub1F0tICMzJe1gaqkrjNxGTfaAY44p9P0P9-uUNGLAQeCx88yrZYPc50;Domain=.google.com;Path=/;Expires=Mon, 03-Jul-2017 13:51:35 GMT;HttpOnly""],""status"":[""204""],""x-content-type-options"":[""nosniff""],""x-frame-options"":[""SAMEORIGIN""],""x-xss-protection"":[""1; mode=block""]},""image""]
  nightmare:log did-get-response-details +58ms [{},false,""https://consent.google.com/status?continue=https://www.google.co.uk&pc=s&timestamp=1483278695"",""https://consent.google.com/status?continue=https://www.google.co.uk&pc=s&timestamp=1483278695"",204,""GET"",""https://www.google.co.uk/"",{""alt-svc"":[""quic=\"":443\""; ma=2592000; v=\""35,34\""""],""cache-control"":[""no-cache, no-store, max-age=0, must-revalidate""],""content-length"":[""0""],""content-security-policy"":[""script-src 'nonce-tKCihCyNfIOByWphPLBRJTh3d4o' 'self' 'unsafe-eval' https://apis.google.com https://ssl.gstatic.com https://www.google.com https://www.gstatic.com;report-uri /_/ConsentHttp/cspreport""],""content-type"":[""text/html; charset=utf-8""],""date"":[""Sun, 01 Jan 2017 13:51:35 GMT""],""expires"":[""Mon, 01 Jan 1990 00:00:00 GMT""],""pragma"":[""no-cache""],""server"":[""ESF""],""status"":[""204""],""x-content-type-options"":[""nosniff""],""x-frame-options"":[""SAMEORIGIN""],""x-xss-protection"":[""1; mode=block""]},""image""]
  nightmare:log dom-ready +0ms [{}]
  nightmare:log did-get-response-details +19ms [{},false,""https://ssl.gstatic.com/gb/images/i2_2ec824b0.png"",""https://ssl.gstatic.com/gb/images/i2_2ec824b0.png"",200,""GET"",""https://www.google.co.uk/"",{""age"":[""52211""],""alt-svc"":[""quic=\"":443\""; ma=2592000; v=\""35,34\""""],""cache-control"":[""public, max-age=31536000""],""content-length"":[""24211""],""content-type"":[""image/png""],""date"":[""Sat, 31 Dec 2016 23:21:24 GMT""],""expires"":[""Sun, 31 Dec 2017 23:21:24 GMT""],""last-modified"":[""Mon, 12 Dec 2016 14:45:00 GMT""],""server"":[""sffe""],""status"":[""200""],""vary"":[""Origin""],""x-content-type-options"":[""nosniff""],""x-xss-protection"":[""1; mode=block""]},""image""]
  nightmare:log did-get-response-details +5ms [{},false,""https://www.google.co.uk/xjs/_/js/k=xjs.s.en.E-k8HBn4MQ0.O/m=sx,c,sb,cdos,cr,elog,hsm,jsa,r,qsm,j,p,d,csi/am=AARKHi9YAPH3EBC3iY4gNWBgUA/rt=j/d=1/t=zcms/rs=ACT90oG2tg8KG9nbmKr7z7wuMQcXuZD4Nw"",""https://www.google.co.uk/xjs/_/js/k=xjs.s.en.E-k8HBn4MQ0.O/m=sx,c,sb,cdos,cr,elog,hsm,jsa,r,qsm,j,p,d,csi/am=AARKHi9YAPH3EBC3iY4gNWBgUA/rt=j/d=1/t=zcms/rs=ACT90oG2tg8KG9nbmKr7z7wuMQcXuZD4Nw"",200,""GET"",""https://www.google.co.uk/"",{""age"":[""247456""],""alt-svc"":[""quic=\"":443\""; ma=2592000; v=\""35,34\""""],""cache-control"":[""public, max-age=31536000""],""content-encoding"":[""gzip""],""content-length"":[""143255""],""content-type"":[""text/javascript; charset=UTF-8""],""date"":[""Thu, 29 Dec 2016 17:07:19 GMT""],""expires"":[""Fri, 29 Dec 2017 17:07:19 GMT""],""last-modified"":[""Wed, 28 Dec 2016 13:03:14 GMT""],""server"":[""sffe""],""status"":[""200""],""vary"":[""Accept-Encoding""],""x-content-type-options"":[""nosniff""],""x-xss-protection"":[""1; mode=block""]},""script""]
  nightmare:log did-get-response-details +203ms [{},false,""https://www.google.co.uk/xjs/_/js/k=xjs.s.en.E-k8HBn4MQ0.O/m=sy42,sy53,em3,em1,em2,sy55,em0,sy328,aa,abd,sy82,sy81,sy80,sy83,em16,async,erh,sy85,foot,fpe,ipv6,sy152,sy185,lu,m,sf,sy49,sy131,sy178,sy271,sy226,sy286,sy225,sy283,sy44,sy179,sy270,sy287,sy290,sy284,sy281,spch,vm,sy341,sy343,sy60,sy342,sy344,sy345,sy544,udlg,sy43,sy105,sy46,sy51,sy104,sy162,sy45,sy47,sy164,em8,em9,sy41,sy52,sy106,sy161,sy163,sy165,cbin,sy400,dgm,cbhb/am=AARKHi9YAPH3EBC3iY4gNWBgUA/rt=j/d=0/t=zcms/rs=ACT90oG2tg8KG9nbmKr7z7wuMQcXuZD4Nw"",""https://www.google.co.uk/xjs/_/js/k=xjs.s.en.E-k8HBn4MQ0.O/m=sy42,sy53,em3,em1,em2,sy55,em0,sy328,aa,abd,sy82,sy81,sy80,sy83,em16,async,erh,sy85,foot,fpe,ipv6,sy152,sy185,lu,m,sf,sy49,sy131,sy178,sy271,sy226,sy286,sy225,sy283,sy44,sy179,sy270,sy287,sy290,sy284,sy281,spch,vm,sy341,sy343,sy60,sy342,sy344,sy345,sy544,udlg,sy43,sy105,sy46,sy51,sy104,sy162,sy45,sy47,sy164,em8,em9,sy41,sy52,sy106,sy161,sy163,sy165,cbin,sy400,dgm,cbhb/am=AARKHi9YAPH3EBC3iY4gNWBgUA/rt=j/d=0/t=zcms/rs=ACT90oG2tg8KG9nbmKr7z7wuMQcXuZD4Nw"",200,""GET"",""https://www.google.co.uk/"",{""age"":[""69113""],""alt-svc"":[""quic=\"":443\""; ma=2592000; v=\""35,34\""""],""cache-control"":[""public, max-age=31536000""],""content-encoding"":[""gzip""],""content-length"":[""39347""],""content-type"":[""text/javascript; charset=UTF-8""],""date"":[""Sat, 31 Dec 2016 18:39:42 GMT""],""expires"":[""Sun, 31 Dec 2017 18:39:42 GMT""],""last-modified"":[""Sat, 24 Dec 2016 22:01:56 GMT""],""server"":[""sffe""],""status"":[""200""],""vary"":[""Accept-Encoding""],""x-content-type-options"":[""nosniff""],""x-xss-protection"":[""1; mode=block""]},""script""]
  nightmare:log did-get-response-details +46ms [{},false,""https://www.gstatic.com/og/_/js/k=og.og2.en_US.oDYjzNdSXG0.O/rt=j/m=def/exm=in,fot/d=1/ed=1/rs=AA2YrTt3OYTznFuWnDoc_JnRaLQNCghyMg"",""https://www.gstatic.com/og/_/js/k=og.og2.en_US.oDYjzNdSXG0.O/rt=j/m=def/exm=in,fot/d=1/ed=1/rs=AA2YrTt3OYTznFuWnDoc_JnRaLQNCghyMg"",200,""GET"",""https://www.google.co.uk/"",{""age"":[""395248""],""alt-svc"":[""quic=\"":443\""; ma=2592000; v=\""35,34\""""],""cache-control"":[""public, max-age=31536000""],""content-encoding"":[""gzip""],""content-length"":[""47789""],""content-type"":[""text/javascript; charset=UTF-8""],""date"":[""Wed, 28 Dec 2016 00:04:07 GMT""],""expires"":[""Thu, 28 Dec 2017 00:04:07 GMT""],""last-modified"":[""Mon, 12 Dec 2016 03:57:39 GMT""],""server"":[""sffe""],""status"":[""200""],""vary"":[""Accept-Encoding, Origin""],""x-content-type-options"":[""nosniff""],""x-xss-protection"":[""1; mode=block""]},""script""]
  nightmare:log did-get-response-details +10ms [{},false,""https://www.google.com/textinputassistant/tia.png"",""https://www.google.com/textinputassistant/tia.png"",200,""GET"",""https://www.google.co.uk/"",{""age"":[""250477""],""alt-svc"":[""quic=\"":443\""; ma=2592000; v=\""35,34\""""],""cache-control"":[""public, max-age=31536000""],""content-length"":[""258""],""content-type"":[""image/png""],""date"":[""Thu, 29 Dec 2016 16:16:58 GMT""],""expires"":[""Fri, 29 Dec 2017 16:16:58 GMT""],""last-modified"":[""Thu, 08 Dec 2016 15:30:00 GMT""],""server"":[""sffe""],""status"":[""200""],""x-content-type-options"":[""nosniff""],""x-xss-protection"":[""1; mode=block""]},""image""]
  nightmare:log did-get-response-details +4s [{},false,""https://www.google.co.uk/gen_204?atyp=i&ct=&cad=&vet=10ahUKEwjPw-Ddi6HRAhXCMhoKHcQyDoYQsmQIEA..s&ei=ZwlpWI90wuVoxOW4sAg&zx=1483278695561"",""https://www.google.co.uk/gen_204?atyp=i&ct=&cad=&vet=10ahUKEwjPw-Ddi6HRAhXCMhoKHcQyDoYQsmQIEA..s&ei=ZwlpWI90wuVoxOW4sAg&zx=1483278695561"",204,""GET"",""https://www.google.co.uk/"",{""alt-svc"":[""quic=\"":443\""; ma=2592000; v=\""35,34\""""],""content-length"":[""0""],""content-type"":[""text/html; charset=UTF-8""],""date"":[""Sun, 01 Jan 2017 13:51:35 GMT""],""server"":[""gws""],""status"":[""204""],""x-frame-options"":[""SAMEORIGIN""],""x-xss-protection"":[""1; mode=block""]},""image""]
  nightmare:log did-get-response-details +93ms [{},false,""https://apis.google.com/_/scs/abc-static/_/js/k=gapi.gapi.en.FgPLF5SwqIU.O/m=gapi_iframes,googleapis_client,plusone/rt=j/sv=1/d=1/ed=1/rs=AHpOoo-9R8fkhlRsCMrG4wpDzgf1RI7BzQ/cb=gapi.loaded_0"",""https://apis.google.com/_/scs/abc-static/_/js/k=gapi.gapi.en.FgPLF5SwqIU.O/m=gapi_iframes,googleapis_client,plusone/rt=j/sv=1/d=1/ed=1/rs=AHpOoo-9R8fkhlRsCMrG4wpDzgf1RI7BzQ/cb=gapi.loaded_0"",200,""GET"",""https://www.google.co.uk/"",{""age"":[""504093""],""alt-svc"":[""quic=\"":443\""; ma=2592000; v=\""35,34\""""],""cache-control"":[""public, max-age=31536000""],""content-encoding"":[""gzip""],""content-length"":[""43225""],""content-type"":[""text/javascript; charset=UTF-8""],""date"":[""Mon, 26 Dec 2016 17:50:07 GMT""],""expires"":[""Tue, 26 Dec 2017 17:50:07 GMT""],""last-modified"":[""Fri, 02 Dec 2016 02:44:02 GMT""],""server"":[""sffe""],""status"":[""200""],""vary"":[""Accept-Encoding""],""x-content-type-options"":[""nosniff""],""x-xss-protection"":[""1; mode=block""]},""script""]
  nightmare:log did-frame-finish-load +72ms [{},true]
  nightmare:log did-finish-load +0ms [{}]
  nightmare:log page-favicon-updated +1ms [{},[""https://www.google.co.uk/images/branding/product/ico/googleg_lodp.ico""]]
  nightmare:log did-stop-loading +1ms [{}]
  nightmare:actions .screenshot() +1ms
  nightmare:log subscribing to browser window frames +1ms
  nightmare:log altering page to force rendering +0ms
  nightmare:log did-get-response-details +58ms [{},false,""https://www.google.co.uk/images/nav_logo242.png"",""https://www.google.co.uk/images/nav_logo242.png"",200,""GET"",""https://www.google.co.uk/"",{""alt-svc"":[""quic=\"":443\""; ma=2592000; v=\""35,34\""""],""cache-control"":[""private, max-age=31536000""],""content-length"":[""16786""],""content-type"":[""image/png""],""date"":[""Sun, 01 Jan 2017 13:51:40 GMT""],""expires"":[""Sun, 01 Jan 2017 13:51:40 GMT""],""last-modified"":[""Wed, 14 Dec 2016 20:30:00 GMT""],""server"":[""sffe""],""status"":[""200""],""x-content-type-options"":[""nosniff""],""x-xss-protection"":[""1; mode=block""]},""image""]
  nightmare:log did-get-response-details +0ms [{},false,""https://www.google.co.uk/gen_204?v=3&s=webhp&atyp=csi&ei=ZwlpWI90wuVoxOW4sAg&imc=4&imn=4&imp=2&adh=&xjs=init.47.21.sb.30.spch.6.p.4.foot.3.jsa.1&ima=2&rt=xjsls.51,prt.90,iml.105,dcl.93,xjses.219,jraids.249,jraide.254,xjsee.301,xjs.301,ol.4937,aft.104,wsrt.622,cst.57,dnst.23,rqst.126,rspt.49,sslt.34,rqstt.442,unt.362,cstt.385,dit.712"",""https://www.google.co.uk/gen_204?v=3&s=webhp&atyp=csi&ei=ZwlpWI90wuVoxOW4sAg&imc=4&imn=4&imp=2&adh=&xjs=init.47.21.sb.30.spch.6.p.4.foot.3.jsa.1&ima=2&rt=xjsls.51,prt.90,iml.105,dcl.93,xjses.219,jraids.249,jraide.254,xjsee.301,xjs.301,ol.4937,aft.104,wsrt.622,cst.57,dnst.23,rqst.126,rspt.49,sslt.34,rqstt.442,unt.362,cstt.385,dit.712"",204,""GET"",""https://www.google.co.uk/"",{""alt-svc"":[""quic=\"":443\""; ma=2592000; v=\""35,34\""""],""content-length"":[""0""],""content-type"":[""text/html; charset=UTF-8""],""date"":[""Sun, 01 Jan 2017 13:51:40 GMT""],""server"":[""gws""],""status"":[""204""],""x-frame-options"":[""SAMEORIGIN""],""x-xss-protection"":[""1; mode=block""]},""image""]
  nightmare:log unsubscribing from browser window frames +34ms
  nightmare:actions .screenshot() captured with length 361068 +467ms
  nightmare electron child process exited with code 0: success! +51ms
ERROR: TypeError: Cannot read property 'code' of undefined
  nightmare electron child process not started yet, skipping kill. +1ms`",TheTechy,2017-01-02 21:02:30
940,2017-01-02 16:55:07,"@Dnyg `httpResponse` is not defined because the parameters passed to `.then()` will be from the last action executed in the chain (with the exception of `.end()`) - in your case, `.screenshot()` (which doesn't return anything).  If you need the HTTP response, you can break up your chain with another `.then()` to perform logic.  Something like:

<S_CODE_TOKEN>

@TheTechy your code suffers from the same issue - the additional problem here is you're trying to access `code` off of `httpResponse` which will cause an exception.  From your trace: ` ERROR: TypeError: Cannot read property 'code' of undefined`",rosshinkley,2017-01-02 21:02:30
940,2017-01-02 19:34:34,"Hey Ross,

Thanks for your answer. The code posted by Daniel originally was mine :)
The update here works a treat and I get the then-able nature of Nightmare now.

Thanks again for your help & please close the issue.",TheTechy,2017-01-02 21:02:30
940,2017-01-02 21:02:30,"@TheTechy Ah, cool. :)  No problem, happy to help.",rosshinkley,2017-01-02 21:02:30
939,2016-12-29 13:39:01,,plcgi1,
939,2017-01-02 16:58:08,Do you mean setting the OS in `User-Agent`?  The can be set using [`.userAgent()`](https://github.com/segmentio/nightmare#useragentuseragent).  Note you'll need to set the entire user agent string.,rosshinkley,
938,2016-12-29 12:56:41,"Simple code

<S_CODE_TOKEN>

Google analytics code works on site as i need from browser - but no statistics data if i got to my site from headless nightmarejs",plcgi1,
937,2016-12-29 09:09:19,"Hi,
that's not really an issue I think but don't know where else to ask:
Coming from phantomjs (but with poor general knowledge) I tried to run the Yahoo search example in a shell, on Windows, connected to an Ubuntu Server on which nightmare resides, the Ubuntu server runs in a VM. Result: No errors, but also no console output. Only the simplest hello-world-output worked.
After hours of research I found issues regarding nightmare & vfb on Ubuntu Server. So I thought it might be a good idea to try the thing with Ubuntu Desktop VM.
Again on Windows I fired up the shell, connected to the Ubuntu VM, tried the Yahoo Search example - nothing.
Then tried the example in **a shell on the Ubuntu Desktop** - voila! Worked! :-)
Now please let me understand why it seems to work only in a shell on the Ubuntu Desktop but not in a remote shell? What can I do to get it to work in a remote shell? Thanx!
EDIT: Actually in the long term I would like to get my project to work on the Ubuntu server, without any onscreen user interactions.",R0byn,2017-01-02 17:07:23
937,2016-12-29 09:18:38,"Quick question, what does the config say? Are you setting 'show' to true? Because I'm using nightmare for tests, and is being pushed to a CI (Which is similarly, a shell ONLY env). And it works.",jekku,2017-01-02 17:07:23
937,2016-12-29 09:31:22,With <S_CODE_TOKEN> it's the same: works on the Desktop but not in the remote shell.,R0byn,2017-01-02 17:07:23
937,2016-12-29 09:59:02,"Understood. In the CI containers, I think they install Xfce / X server - something that has display capabilities. Try installing them to the shell OS and then run the nightmare script. This is called 'headless running'

You can also check:

https://github.com/segmentio/nightmare/issues/224

I suggest this issue to be closed @rosshinkley ",jekku,2017-01-02 17:07:23
937,2016-12-29 11:50:52,"Hmm... so in my case it would require to install Xfce or something similar on the Ubuntu server, right?
Is there a way to get nightmare scripts running with this combination, while developing:
- nightmare and nodejs reside on Ubuntu server with Xfce
- Putty shell (connected to that Ubuntu server) is executed on Windos
- want to manually test nightmare scripts in that Putty shell",R0byn,2017-01-02 17:07:23
937,2017-01-02 17:07:23,"@R0byn as @jekku mentioned, give #224 a read.

So starting from the top, explaining what you're seeing:

> Result: No errors, but also no console output. 

In the future, try running with `DEBUG=nightmare*,electron*` or `DEBUG=*`.  That will yield more verbose, useful output.

> Then tried the example in a shell on the Ubuntu Desktop - voila! Worked! :-)

This is because when you're under an Ubuntu desktop, you're running an X session of some flavor, meaning there's a framebuffer running.  Electron requires a framebuffer to be running to work properly.

> ... and is being pushed to a CI (Which is similarly, a shell ONLY env).

_Most_ (all?) of the CI solutions I've seen have a framebuffer of some flavor running (usually xvfb).

> Is there a way to get nightmare scripts running with this combination

Yes.  Install `Xvfb`, read through #224 and the suggestions there.  You can either have `Xvfb` always running or use `xvfb-run` to manage starting/stopping the service for you.  Your setup under that scenario should work fine.

I'm going to merge this into #224 and close this issue.

",rosshinkley,2017-01-02 17:07:23
936,2016-12-28 18:16:39,"So I am new to Nightmare, I am trying to simply run a few checks on my staging environment and for whatever reason I am getting very inconsistent results. For the following code:

<S_CODE_TOKEN>
It runs everytime however, the .click('form button#go-button') is inconsistent. Soemtimes it clicks when the button is there and soemtimes it does not. Being as this is the very start of my app I cannot test anything else without this working consistently. Any help or thoughts? 

Here is the debug logs which appears to be trying to run the click
<S_CODE_TOKEN>
Appreciate any help",dfenstermaker,
936,2016-12-29 08:32:59,Maybe try waiting for it before clicking on it? ,jekku,
936,2016-12-29 22:34:58,"@jekku I am confused, I am waiting for it before clicking:

<S_CODE_TOKEN>",dfenstermaker,
936,2017-01-02 17:12:02,"@dfenstermaker in your original post, though, you said it was not clicking on `form button#go-button`.  Is that button the problem, or is `tos-accept-button` the issue?  If it's `form button#go-button`, what happens if you have `.wait('form button#go-button')` prior to the click?

_edit:_ missed a closing apostrophe",rosshinkley,
935,2016-12-26 05:35:44,,joehua87,2016-12-30 18:28:33
935,2016-12-30 18:28:23,thanks!,reinpk,2016-12-30 18:28:33
934,2016-12-26 00:49:44,"I have an issue similar to #555, but I'm not sure it's the same cause so I'm opening a new issue. I'm using `nightmare v2.9.0`. When the following code runs, it takes the screenshot, and ""screenshot taken"" is loaded to the console - but the window is never closed, `run()` is never called. If I enter a path like `nightmare.png` instead of the callback, it works. But the callback seems to freeze Nightmare.

Should I be returning something other than `true` from my callback, or calling another method inside my `screenshot()` callback to tell Nightmare to keep moving down the chain?

I tried [one suggestion](https://github.com/bahlo/nightmare/commit/31b17abdf53931cec87cca27b5e2d1f226b611df#diff-bc4eacf94ad1a8e7c9bea8b6b6451251R53) from #555 but no dice.

My end goal from the screenshot callback is to save the screenshot to AWS S3, directly inside the callback. But the problem exists without even having any of the S3 `putObject()` code in the callback.

<S_CODE_TOKEN>",tlshaheen,
934,2016-12-29 10:10:12,"Instead of specifying the 'done' callback exclusively, specify the path and a simple callback

<S_CODE_TOKEN>

Correct me if I'm wrong, but .end(), is also a thenable which you can use to do something like:

<S_CODE_TOKEN>",jekku,
934,2016-12-29 10:10:50,Please update me. I usually use async-await / generators for nightmareJS but I hope this works for you.,jekku,
934,2017-01-02 17:19:25,"`.screenshot()` does not take a function callback (at least, not anymore).  What version of Nightmare are you using, @tlshaheen?",rosshinkley,
934,2017-01-03 07:12:12,"@rosshinkley https://github.com/segmentio/nightmare/blob/master/lib/actions.js#L600

I think the current branch still does. It just isn't documented. The top level callback is bubbled down as a callback to fs.writeFile.",jekku,
934,2017-01-05 03:21:39,"@jekku I don't think that does what you think it does, and now that you've pointed it out, I think I see the problem.  You _can_ pass a function like that, but it will do exactly what @tlshaheen said - it will prevent downstream execution of the Nightmare chain.  What that is looking for is the internal `done` callback as `.screenshot()` has optional parameters.

To make things clearer, an example might be helpful:

<S_CODE_TOKEN>

This will print `hello from screenshot callback`, but will never advance to the `.end()` because the `done` callback that tells Nightmare to move onto the next step - the one specified in the line you highlighted - is never called.

So while what i said is technically incorrect - `.screenshot()` _does_ take a callback, but it's supposed to be internal to make chaining work - I stand by my original statement.  I don't think `.screenshot()` takes a user-passable function callback as originally posted.

For completeness, if you wanted the buffer, the above example is easily fixed:

<S_CODE_TOKEN>

I'm still curious what version the original example was written against and/or where the example came from.",rosshinkley,
933,2016-12-23 01:52:55,"Run this code:
<S_CODE_TOKEN>
node this.js
<S_CODE_TOKEN>",yodfz,
933,2016-12-29 10:18:51,"What version of node are you running?

Maybe try using catch after the .then.",jekku,
932,2016-12-22 21:24:22,"I've seen several threads and issues about mimicking a user hitting the enter or delete keys, but can't find anything about arrow keys. I've already tried converting the keycode values to hex ie. `40`, which is the down arrow on a Mac, would be `\u0028` I suppose, but that is `(`. I tried every variation I could find, including a hex value I found in some Apple native API, can't find anything that works for arrow keys in Nightmare.js.

So, is this even possible? 

Also, is this still the way to go about it? This actually returns an error: `Cannot read property 'focus' of null`
````js
`.type('document', '\u000d')`",nickforddesign,
932,2017-01-02 17:29:17,"Hm, the only way I can think of off the top of my head to do this is with an [accelerator](https://github.com/electron/electron/blob/master/docs/api/accelerator.md).  Accelerators let you send keys like the arrow keys.  Out of the box, I don't think Nightmare supports accelerators, but I think you could write something with `.action()` and [`webview.sendInputEvent()`](https://github.com/electron/electron/blob/master/docs/api/web-contents.md#contentssendinputeventevent) to accomplish what you're after.",rosshinkley,
931,2016-12-21 03:19:25,"<S_CODE_TOKEN>
wait is tiemout!!!
I think wait `.js-alert` in `body`,continue next!!!please,tks!",yodfz,
931,2016-12-21 03:38:40,"I think this is a good site!!!

https://stackoverflow.com

because this is not the right place for your banters!!",jekku,
931,2017-01-02 17:33:47,"@yodfz not sure what you're expecting to happen here: if the `.js-alert` element does not exist, that function will never return, and eventually the wait timeout will be hit.  You probably want an `else` statement to call `done()`, if I had to guess.",rosshinkley,
930,2016-12-20 22:24:39,"I have updated the link to the electron documentation to match the version that is specified in [package.json](https://github.com/segmentio/nightmare/blob/master/package.json) file.

This is relevant since the electron 1.4.4 documentation describes the option of specifying a custom page size when generating PDF-files.",carlsa,2016-12-30 18:29:48
930,2016-12-30 18:29:45,thanks!,reinpk,2016-12-30 18:29:48
929,2016-12-19 21:39:35,"In certain cases in angular, if there is a select box with an event listener that has no options populated and an event if dispatched, it will trigger change detection within angular, which will throw errors and cause electron to crash/freeze.",notVitaliy,2016-12-30 19:01:46
929,2016-12-30 19:01:46,"happy to consider if there's a test case and comments on an updated PR, thanks!",reinpk,2016-12-30 19:01:46
929,2016-12-30 21:43:06,@reinpk What do you mean by test case? Like a unit-test? Or a codepen that shows the issue?,notVitaliy,2016-12-30 19:01:46
929,2016-12-31 21:10:27,"yeah a unit test that shows it breaking in the old code, and fixed in the new code :)",reinpk,2016-12-30 19:01:46
929,2017-01-05 14:43:37,"@reinpk This issue might be difficult to reproduce in a unit-test since it's an interaction between angular2 and nightmare, afaik. I'll do my best to isolate the underlying cause over the next couple weeks.",notVitaliy,2016-12-30 19:01:46
929,2017-01-06 02:02:24,👍 ,reinpk,2016-12-30 19:01:46
928,2016-12-19 14:20:54,"duplicate of #923 
Nobody replies at nightmare-download-manager repo so I'll still repost it here.",overflowz,2017-01-02 22:19:40
928,2016-12-19 14:42:31,"also here's the snippet that triggers it.

If I go directly on that url (same window) it does fine (but not in every case).
but there's situations, where javascript generates URL and I have to click on the item itself and I just can't get out of this.

<S_CODE_TOKEN>",overflowz,2017-01-02 22:19:40
928,2016-12-19 15:48:30,"Can you set the partition to be persistent then?

<S_CODE_TOKEN>",justinmchase,2017-01-02 22:19:40
928,2016-12-19 15:59:17,"It's the same.

<S_CODE_TOKEN>

or

<S_CODE_TOKEN>

Still bubbles up download dialog. I think problem is in session itself.",overflowz,2017-01-02 22:19:40
928,2016-12-19 16:18:52,"It works only when I set ""partition: null"".

Tested also this example and does not work as well (from documentation).
<S_CODE_TOKEN>

EDIT: it just hangs. Output is:
<S_CODE_TOKEN>",overflowz,2017-01-02 22:19:40
928,2017-01-02 22:19:40,Again: this is a bug with `nightmare-download-manager`.  Moving the conversation [back](https://github.com/rosshinkley/nightmare-download-manager/issues/9).,rosshinkley,2017-01-02 22:19:40
927,2016-12-16 20:08:58,"Since the initial implementation of `FrameManager`, Electron has added an API for Chromium's remote debugging protocol, which can visually highlight a portion of the page. This change uses that functionality to force a new frame to be rendered, which is much more reliable than the way Nightmare currently tries to force new frames to render by fiddling around with the DOM (see people experiencing problems with this in #555, #736, #809). It also has the benefit of not doing anything page content can observe, ensuring that any JS or CSS won't modify the page in response to Nightmare's attempt to take a screenshot.

This also adds a timeout. We should never hit it when using the debugger, but I figure it’s better to be safe than sorry here, especially after the hangs people have been experiencing.

In future versions of the remote debugging protocol, it will be possible to directly capture an image of the page, but that feature is still experimental (so it could be removed) and Electron does not yet support it anyhow. Something to keep in mind for future changes, though.

This is an alternative solution to the one in 53dee8a2ad88ea656d2b48504dbe66ff5287d0ab (currently on the `screenshot-with-offscreen-rendering` branch). That method (using Electron's new ""offscreen"" rendering mode) is *much* faster than this and vastly simplifies the code, but has more ways it can fail and has other side effects. If that approach looks better, I can submit it as a PR. We can also look into combining the two if the side effects are acceptable.",Mr0grog,2017-01-02 20:48:06
927,2016-12-16 23:50:32,"Note the offscreen rendering branch has window sizing issues as a result of an Electron bug (https://github.com/electron/electron/issues/8224), so it’s probably just untenable for now.",Mr0grog,2017-01-02 20:48:06
927,2016-12-17 03:01:22,"One question: if you're using the remote debugging protocol, doesn't that mean you can't use the debugger (or have the development tray) open at the same time?  If I'm not mistaken, this is the same issue that [`nightmare-upload`](https://github.com/rosshinkley/nightmare-upload) has.

It's also entirely possible this got fixed in a more recent version of Electron.  I guess what I'm beating around the bush and saying that either this needs to be tested for and/or should be included in the readme.  Otherwise, I'm +1 on this as it solves more problems than it creates, imho.

Thoughts?",rosshinkley,2017-01-02 20:48:06
927,2016-12-19 01:03:44,"> if you're using the remote debugging protocol, doesn't that mean you can't use the debugger (or have the development tray) open at the same time? If I'm not mistaken, this is the same issue that nightmare-upload has.

😲 I was entirely unaware of that as an issue and hadn’t tested it. The good news is that if a user has opened the local debugger before screenshotting, screenshots still work (see the `catch` clause here: https://github.com/segmentio/nightmare/pull/927/files#diff-bc4eacf94ad1a8e7c9bea8b6b6451251R83). The bad news is that users can’t open the local debugger *after* screenshotting. I’ve added another commit that detaches the debugger as soon as we’re done, which seems to resolve that.

Since you’ve seen this issue before, it’d be great if you give it a go as well, @rosshinkley.",Mr0grog,2017-01-02 20:48:06
927,2017-01-02 20:47:42,"> :astonished: I was entirely unaware of that as an issue and hadn’t tested it.

No worries.  I just knew this was a stumbling block in the past, thought I'd bring it up.

> I’ve added another commit that detaches the debugger as soon as we’re done, which seems to resolve that.

I re-read what you had done and tinkered for a bit, I'm going to go ahead and say LGTM and that this should get included.  Thanks!",rosshinkley,2017-01-02 20:48:06
927,2017-01-03 00:58:58,Sweet! Glad this can improve things a little.,Mr0grog,2017-01-02 20:48:06
926,2016-12-16 11:04:04,"Hello,

Thank you for this awesome module ! Easier and faster than other solutions I have already tried.

I have a question about nodeJS messages. Is it possible to do a `console.log` before `end()`, that will be printed in my NodeJS console?

Above, an exemple of what I would like to do:

<S_CODE_TOKEN>

Thanks!",flexbrane,2016-12-16 17:11:11
926,2016-12-16 16:43:06,"Yeah you can route logs to it via:

<S_CODE_TOKEN>",justinmchase,2016-12-16 17:11:11
926,2016-12-16 17:11:11,"Great, thank you! ",flexbrane,2016-12-16 17:11:11
925,2016-12-14 23:08:42,"I want to run evaluations with jQuery calls (way easier to grab things from DOM) but the issue is I did a 

<S_CODE_TOKEN>

This tells me if jQuery is added or not but I don't want to run the 

<S_CODE_TOKEN>

if there is already a version on because I don't need the chance that the rest of the page doesn't work.
I know I ""should"" be safe if I just use the latest version of jQuery each time, but all I need is a page to have a deprecated functions or some other support issues
",sjfricke,2016-12-29 00:45:52
925,2016-12-17 03:18:18,"You can certainly do a conditional injection.  From the hip, something like:

<S_CODE_TOKEN>
... should be close.  Is that what you had in mind?",rosshinkley,2016-12-29 00:45:52
925,2016-12-29 00:45:52,"Thanks, I didn't realize that the evaluate was passed as a parameter to the next piped instruction like that.",sjfricke,2016-12-29 00:45:52
924,2016-12-07 02:50:02,"I wrote a simple script that will set viewport and return width/height. See below:

<S_CODE_TOKEN>

It works well in Windows 7, when I test it, here's the result:
 * 1.txt
 <S_CODE_TOKEN>

 * 2.txt
 <S_CODE_TOKEN>
<hr>
But when I add a task in Windows 7 `task scheduler`, which call the same script. The result is:

  * 1.txt
 <S_CODE_TOKEN>

 * 2.txt
 <S_CODE_TOKEN>


It's weird and I have no idea what's the issue, can you help check on this issue?",martin-liu,2017-01-02 17:40:21
924,2016-12-17 03:57:39,"Is your scheduled task running as the same user?  Could he default window size be different for the user that runs the scheduled task, and that the page renders differently result in a different client size?

What are you trying to do that this is an issue?",rosshinkley,2017-01-02 17:40:21
924,2016-12-19 00:19:57,"I was using the same user. 
Actually I had a work around to achieve my requirement, but for this specific issue, I have no idea why it happens. 


> On Dec 16, 2016, at 7:57 PM, Ross Hinkley <notifications@github.com> wrote:
> 
> Is your scheduled task running as the same user? Could he default window size be different for the user that runs the scheduled task, and that the page renders differently result in a different client size?
> 
> What are you trying to do that this is an issue?
> 
> —
> You are receiving this because you authored the thread.
> Reply to this email directly, view it on GitHub, or mute the thread.
> 
",martin-liu,2017-01-02 17:40:21
924,2017-01-02 17:40:19,"Sounds like this issue is at least tentatively resolved, going to close it for now.  If this crops up again, feel free to reopen.",rosshinkley,2017-01-02 17:40:21
924,2017-01-18 09:28:41,"I also encountered a similar problem. I'm here to solve this.
<S_CODE_TOKEN>
",jeeinn,2017-01-02 17:40:21
923,2016-12-06 22:33:56,"Whenever I'm using webPreferences.partition option with random string (without 'persist:' prefix), nightmare-download-manager always asks for download path to be saved instead of handling it automatically. Even by debugging, breakpoints are never hit as well. May I ask what's the problem? Any thoughts? ",overflowz,2017-01-02 17:49:40
923,2016-12-19 13:11:34,Anyone?,overflowz,2017-01-02 17:49:40
923,2017-01-02 17:49:40,"This is a bug with `nightmare-download-manager` most likely.  I see you've already opened an [issue there](https://github.com/rosshinkley/nightmare-download-manager/issues/9), so let's move this conversation there.",rosshinkley,2017-01-02 17:49:40
922,2016-12-06 21:31:59,"Hi, 
I have a docker image with xvfb installed (https://github.com/segmentio/nightmare/issues/224#issuecomment-225887320)
And it's working.

Now when my user hit a route on my nodejs/expressjs app a function running a nightmare script is called.
<S_CODE_TOKEN>
When i call the route once it's okay. But if multiple user call the route (2-3 users) i see a lot of timeout in `nightmare.wait()` function even if i set `waitTimeout` to 3 minutes.
And a lot of script never end.
This script, when launched alone, take 30 sec to execute.

Is it possible to run multiple nightmare script on the same machine ?
I was thinking that maybe i haven't allocate enough CPU or RAM but the server (a 1 cpu, 1go RAM on DigitalOcean) never hit the 60-70%.

Any idea what i should do ?  Thanks !",GautierT,
922,2016-12-07 16:52:40,"Before the `Error: .wait() timed out after 180000msec`
nightmare report 
<S_CODE_TOKEN>
And it seems to stop/hang all other electron process running on the machine.",GautierT,
922,2016-12-17 03:49:52,"Hm, do you get any output from Electron if you run with `DEBUG=nightmare*,electron*`?

You _should_ be able to run multiple instances, but be wary of load - Nightmare is not cheap with respect to memory.  Memory serving, an instance costs ~30mb without doing anything particularly useful.

That said, I wonder if your script has a possible bug with how it handles session.  Are there any logins or cached credentials in your script?  You _might_ want to try setting up a different partition per request:

<S_CODE_TOKEN>",rosshinkley,
922,2016-12-19 11:15:11,"I will try with `DEBUG=nightmare*,electron*`.
I already tried setting a random partition name for each instance (following @Mr0grog advice here : https://github.com/segmentio/nightmare/issues/493#issuecomment-265684086)
But it doesn't change anything. 
I come back to you by the end of the week ! Thanks @rosshinkley 
",GautierT,
921,2016-12-06 14:06:33,"How to set cookies before loading the page? I need it for authtentication to load the page. If I set cookies before `.goto()` nightmare just exit process:

<S_CODE_TOKEN>",stolendog,
921,2016-12-16 00:49:21,"It does not seem possible to `cookies.set(...)` before a page has been loaded.

My workaround is to use a dummy `.goto('about:blank')` first, then setting the cookies in the following `.then()` block.

Note that you **MUST** use the `url` parameter of the cookie if you are setting a cookie that is different than the current browser URL.",ewrogers,
921,2016-12-17 03:07:38,"@ewrogers is correct: `session` is not created until after you navigate somewhere.

It might be worth having the discussion: should Nightmare navigate to `about:blank` first?  I can't think of any side effects off the top of my head, but it might be worth sandboxing to see.

Thoughts?",rosshinkley,
921,2016-12-18 23:12:34,"@rosshinkley  Navigating to `about:blank` initially would work.

Alternatively, you could have `cookies.set` check if a current `session` exists, and if not just treat it as a `.goto('about:blank').then(() => cookies.set(...))` instead.",ewrogers,
921,2017-01-21 16:08:59,"I ran into this issue as well. Although the reason I encountered it is that I could never get the partition persist under web preferences to work. Each subsequent (new) instance of Nightmare after the initial one, which was a login failed to pick up the cookies from the previous session... I'm not sure why at the moment.",thebentern,
921,2017-01-24 00:40:16,Has anyone gotten this to work yet?,tmcleroy,
921,2017-01-24 14:23:33,"@tmcleroy 
As a temporary measure, I figured out a way around the issue by subscribing to the 'did-start-loading' event and throwing my cookies. I'm sure there are cleaner solutions. In particular I couldn't figure out how to pass in the url and cookies as params into my custom action so I used the node-persist package to write and the values out:

<S_CODE_TOKEN>
To use it: 

<S_CODE_TOKEN>
If someone can help me figure out how to pass the values into the action invocation instead of relying on node-persist to write and pull them out, that would be optimal.. ",thebentern,
921,2017-01-24 23:11:43,"@thebentern
Have you tried this?

<S_CODE_TOKEN>

I was playing with cookies today and I managed to set they as this:
<S_CODE_TOKEN>

**Environment:**

> { electron: '1.4.15',
>   chrome: '53.0.2785.143',
>   nightmare: '2.9.1',
>   os: 'win32' }",navossoc,
921,2017-03-23 04:46:03,"@navossoc This seems to work, just add `url` property.",jasonmorita,
920,2016-12-06 14:00:42,"if I set custom headers here:
`.goto(url, { 'mail': 'blabla@mail.com' })`
it only used for url request, but not for other page's resources like async backend api calls.
Is there any way to set headers for external resources calls ?",stolendog,
920,2016-12-17 03:40:20,"I think this is very, very close to #521.  Is that what you're after?",rosshinkley,
920,2017-01-28 05:15:49,"I'm trying to figure out the code snippet here, my attempts fail/ breaks from jump street. 
<S_CODE_TOKEN>
Trickery, it be either beneficial to get a sample or something a little more auto-magical , cause I'm unable to get the header to work otherwise.  ",kmacpher67,
920,2017-02-10 04:33:52,"Formatting appears to be a bit weird, but it looks like you're using the error-first callback for `onBeforeSendHeaders` with an error every time.   Try passing `null` as the first parameter.

It also looks like, at least at first blush, the action callback is never called, and the Nightmare-callable function is not defined.  Is there a more complete example you can supply?",rosshinkley,
920,2017-02-12 11:55:36,"Let me see what I can do without revealing my client's details. I got the function callback to work properly in basic electron main.js sample.  But still no luck on populating the request parameters so the page has them on the request. I don't think it's like this item, cause electron does the same thing. 
So I think it has to do with the http GET request on the server, even though I'm putting the (session auth creds by the way) in the header, it might be rejecting them for security reasons. IDK. 
I'm able to do that with JMETER http GET or POSTMAN, just add the auth creds to the header. 
What is different with how electron handles the session's custom request headers? 
let me see if I can create a sample and upload. thanks.  Awesome work btw. ",kmacpher67,
919,2016-12-05 23:04:16,"The current behavior uses electron default, which creates a partition
for storage which persists between instances. This makes sense for
electron but not necessarily for primary use cases of Nightmare.

This change sets the default partition to be a non-persistent partition
but allows a user to opt back into persistence with simple configuration options.

Fixes segmentio/nightmare#916

## 4 new passing tests, all others green
<img width=""675"" alt=""screenshot 2016-12-05 16 59 20"" src=""https://cloud.githubusercontent.com/assets/10974/20906254/ba9ad368-bb0c-11e6-889e-4b83fe75aba2.png"">

## Preview of wiki changes
![screenshot 2016-12-05 16 53 50](https://cloud.githubusercontent.com/assets/10974/20906235/a8c32604-bb0c-11e6-816f-ca387fbf1b04.png)

",justinmchase,2016-12-17 06:11:00
919,2016-12-17 04:09:46,"More as a reminder to self when I pull this in: A note will need to be added to the release notes as a _possibly_ breaking change.  It's possible some folks out there are depending on this side effect, and it's probably worth mentioning.

Otherwise, looks great.  Thanks!
",rosshinkley,2016-12-17 06:11:00
918,2016-12-05 15:33:46,"I would like to build a plug-in for web page automation. The result I need to deliver is when user type a keyword on the plug-in, there will be a window popping up and showing the process of manipulating an [e-commerce website](www.taobao.com).  The target user would be ordinary people who don't use terminal.  Is it possible to run nightmare.js not through node on terminal but through other system with GUI? I am a junior programmer. Hope someone can shed me some light.",BerlinaLI,2016-12-21 04:16:20
918,2016-12-17 04:23:20,"Are you running the ecommerce site under Electron?  If not, then no, this is probably not the solution you're really after.

There are tools out there for giving site demonstrations and guidance.  I have used [Hopscotch](http://linkedin.github.io/hopscotch/) with moderate success.  (Others may have suggestions too, and if you do, please feel free to leave them!)  Is that closer to what you have in mind?",rosshinkley,2016-12-21 04:16:20
918,2016-12-21 04:16:20,"Thanks for your response. In the end, I used jQuery for the plug-in. It works quite well as well. ",BerlinaLI,2016-12-21 04:16:20
917,2016-12-05 03:33:27,"I confronted a problem when I tried to log on the account. 
There is no command on nightmare.js for sliding a bar on a web page. 
I wonder if someone could shred me some light on this.
",BerlinaLI,
917,2016-12-05 03:38:05,Can you please make the question more specific? What does the page look like? how is the sliding bar triggered? What does it look like in the DOM tree? There is almost every command you need if you use .evaluate().,jekku,
917,2016-12-05 03:58:30,"I think use js code in evaluate to ""sliding a bar "" is a proper way. Evaluate function can run any js code to manipulate the page  in the context of current page. Hope my advise helps.",duyongbo520,
917,2016-12-05 04:09:49,"This is the[ login page](https://login.taobao.com/member/login.jhtml?redirectURL=https%3A%2F%2Fwww.taobao.com%2F).  The bar shows up quite spontenously. 

![qq 20161205102637d](https://cloud.githubusercontent.com/assets/8443821/20873531/43cb38d2-bae3-11e6-8a66-4cd6996647e6.jpg)
![qq 20161205102637](https://cloud.githubusercontent.com/assets/8443821/20873532/45b40dcc-bae3-11e6-9a62-bbd2f7c0436c.jpg)

Here is how it looks in the DOM tree. 
<S_CODE_TOKEN>
",BerlinaLI,
917,2016-12-05 04:25:52,"This is simple.

Just click the span with that opens the slider

<S_CODE_TOKEN>

Once it slides out you can then fill in the following according to my findings|

<S_CODE_TOKEN>

By the way, I don't mean to be rude but these kinds of questions belong [HERE](https://www.stackoverflow.com). The issues that should be brought up here I think are architectural problems within nightmare, and how it can be improved. Please try to code first before asking a question that gets you spoon fed.",jekku,
917,2016-12-05 04:26:51,I also highly recommend that you study how to do Inspect-element. Most modern browsers have it. You can't just say 'There is no command blablabla'. This is because of a lack of trying to understand and study the technology.,jekku,
917,2016-12-05 04:31:53,"[This extension](https://chrome.google.com/webstore/detail/daydream/oajnmbophdhdobfpalhkfgahchpcoali) can also help you. It will record actions you do in the browser and turn it into a nightmare script. Hope it helps in the futre, too.",jekku,
917,2016-12-05 07:27:15,"The slide bar requires visitor to press the button then drag it to the end of the bar which is similar to ""slide to unlock"" your mobile screen. ",BerlinaLI,
916,2016-12-02 18:50:16,"<S_CODE_TOKEN>

I got burned pretty hard by the fact that I am starting and stopping the browser and there is some state that is getting stored between instances and it was affecting my tests on subsequent runs.

I would like to make a PR that automatically sets a partition by default. If a user wanted to persist state between tests they could set the partition to be `paritition: 'persist: whatever'` still to override it or `partition: null` to revert to the default.

Is there any reason why it would be good or should  actually be set to persist between browser runs? If not I will make a PR to change it. Otherwise I may just add to the front page documentation with a tip about setting the partition to prevent this issue.",justinmchase,2016-12-17 06:10:59
916,2016-12-04 16:38:45,"Same problems here. I don't want sessions to be shared across different instances. I was trying to find the 'incognito' mode too, but no luck.",overflowz,2016-12-17 06:10:59
916,2016-12-05 03:39:51,I've been doing 'nopersist' all the time in my main config to avoid Nightmare from persisting states. I use it in integration tests where tests should be initially stateless and also independent from all other tests.,jekku,2016-12-17 06:10:59
916,2016-12-05 21:57:45,@jekku Do you mean literally using the name `'nopersist'` as your partition name? I think you can use any name for the same effect but yeah that would work. I don't know of any other way to do it and you can get burned pretty hard if you don't.,justinmchase,2016-12-17 06:10:59
915,2016-12-02 01:08:47,"To put it briefly, I've got an electron project and I'd like to use nightmare instances within this project. Is this possible? Currently I'm using a `<webview>` tag and [ipc](http://electron.atom.io/docs/api/ipc-renderer/) to do all my automation but it's a bit of a mess and nightmare is just so sleek in comparison so I'm hoping this is possible.

For context, the reason I'm using electron is because it's really easy to display the results of test and scrapes live and I can use libraries like [chart.js](chartjs.org) rather than just `console.log`ing messages.

So far as I understand, nightmare just uses an electron `BrowserWindow` under the hood, so this should be quite easy? But I guess nightmare tries to create a whole new electron instance rather than just a BrowserWindow and the main electron instance doesn't like that? If that's the case, is there a way to tell a new nightmarejs instance that there's already an electron instance running, and to pass it a reference so it doesn't try create a new one?

My most minimal test was just:

<S_CODE_TOKEN>

That works fine with `node .`, but running it with `electron .` doesn't work - it just outputs 'starting' to the console.

Thanks!",josephrocca,
915,2016-12-04 11:58:06,"Please search for existing issues before creating a new one, see: https://github.com/segmentio/nightmare/issues/856",Siilwyn,
915,2016-12-04 12:23:53,"Ah, thanks. Sorry about that",josephrocca,
915,2017-03-26 15:03:22,"For the benefit of those who arrive here via search, there's another thread here with potential workarounds until this is solved: https://github.com/segmentio/nightmare/issues/1018",josephrocca,
914,2016-12-01 16:50:55,"Looks like Codeship has [xvfb installed](https://twitter.com/codeship/status/389903312398479360) but I'm getting a `ENOENT: no such file or directory` error. [Here's a gist](https://gist.github.com/kjs3/c3163728d2779f7f7f30cd453196e787) with all the output.

Is anyone else running on codeship or is there something obvious I'm missing?",kjs3,2016-12-01 18:18:56
914,2016-12-01 18:18:56,"Sadly (because it's still a mystery what was happening) this just resolved itself.

It had nothing to do with xvfb though which was actually evident from the logs.
Seems like Electron postinstall wasn't being run or hadn't finished by the time tests were run.
Tests suddenly just started working which makes me think Electron install finally finished on the VM? ¯\\_(ツ)_/¯",kjs3,2016-12-01 18:18:56
913,2016-12-01 11:35:43,"The goal of my sketch is to get product information from an e-commerce website. The code is very similar to the yahoon example code but the result is always null. I tried to put console.log to debug and realized the mistake might lay in the querySelector. 
Below is the code if someone has the time to take a look. Really appreciate it. 


<S_CODE_TOKEN>
",BerlinaLI,2016-12-17 04:13:09
913,2016-12-05 04:37:38,"[Please use this wonderful website](https://www.stackoverflow.com) Next time for these kinds of questions.

You are returning the anchor tag from your queryselector. Maybe you should return its href instead, or more meaningful string data.

<S_CODE_TOKEN>",jekku,2016-12-17 04:13:09
913,2016-12-17 04:13:09,DOM elements and DOM element lists are not serializable.  See [#567 (comment)](https://github.com/segmentio/nightmare/issues/567#issuecomment-209533871).,rosshinkley,2016-12-17 04:13:09
913,2016-12-19 04:09:20,"@rosshinkley when I use element.src it return null, it's seems not work",canhongpoxiao,2016-12-17 04:13:09
913,2016-12-19 04:59:56,"@canhongpoxiao this is not the venue for these kinds of questions. Go to Stackoverflow.

You cannot directly call the property of the DOMElement. You need to something like .getAttribute('src')",jekku,2016-12-17 04:13:09
912,2016-11-29 17:08:47,"I want to call through script  TakeHeapSnapshot

![image](https://cloud.githubusercontent.com/assets/5361668/20720163/1f23cd6c-b699-11e6-84b4-7f94e7f9a3cd.png)
",huangjianbo,2016-11-30 03:29:44
912,2016-11-30 03:29:20,https://github.com/electron/electron/issues/8094,huangjianbo,2016-11-30 03:29:44
911,2016-11-29 14:08:48,Any idea why #135 (the improved screenshot function) with multiple file formats was removed? ,jimmaay,
911,2016-12-16 00:54:26,"That feature was based on functionality in PhantomJS. In 2015, Nightmare was rewritten to use Electron, which, at the time, didn’t have built-in support for outputting formats other than PNG. It does support some others now, though (see http://electron.atom.io/docs/api/native-image/) so you could write a PR to add support back in!",Mr0grog,
911,2016-12-17 04:49:09,+1 on a PR for this.,rosshinkley,
911,2017-01-09 23:53:50,"HI, ive open PR #950 to support jpeg,  looking forward for some feedback :)",kennuzzo,
910,2016-11-29 11:24:51,"We need to override timeout length in custom `wait` methods. Is there a way how to do it now?

I don't mind providing a PR but when I opened `actions.js` and checked the `wait` method I didn't realize how does the `done` get in the arguments. Can you explain it to me?



",zatziky,2016-12-22 16:35:48
910,2016-12-17 04:53:25,"You can override the [base timeout](https://github.com/segmentio/nightmare#waittimeout-default-30s) for wait right now.  Are you trying to add a timeout per call?

`done` is always the last argument to an action - the top of the funciton has `var done = args[args.length-1];` - is that what you're asking about?

_edit:_ had a bracket the wrong way.  Price I pay for not previewing before commenting :|",rosshinkley,2016-12-22 16:35:48
910,2016-12-22 16:35:48,"Yes, that was my question. Thx you, it's solved it. :D",zatziky,2016-12-22 16:35:48
909,2016-11-28 01:08:02,,RafaelCosman,2016-12-17 06:10:27
909,2016-12-05 23:10:48,This change looks correct and very safe to merge.,justinmchase,2016-12-17 06:10:27
908,2016-11-27 10:58:09,"Electron is ignoring `session.setProxy`, there is any issue with nightmare that doesn't let me change the proxy on the fly?

Here is the action to change proxy:

<S_CODE_TOKEN>

I have tried with lots of combinations.",wiliame,
908,2016-11-27 11:13:03,"Ok, the action seems ok, I have tried it in a sandbox environment and is working ok. Electron is not ignoring `setProxy`. 

If you want change the proxy at runtime, it's enough to do:

<S_CODE_TOKEN>

",wiliame,
908,2016-11-28 07:49:46,"I'm trying now to change authentication with the same proxy. Now is not possible because the `authentication` add an `login` event, so if you don't change the proxy, the auth is not called.

I'm going to try to clean password config and do something like:

<S_CODE_TOKEN>

Electron issue:
https://github.com/electron/electron/issues/8089",wiliame,
907,2016-11-26 10:07:33,"I'd like a way to have Nightmare run headless and if a certain event happens, display the browser window. I've looked through the docs and some of the source code but can't seem to find a way. I know there is screenshot functionality, but I'd like to have the ability to interact with things. Thanks!",yourfavorite,2016-12-17 04:31:26
907,2016-11-28 08:18:44,"@yourfavorite nightmare uses electron BrowserWindow:

https://github.com/electron/electron/blob/master/docs/api/browser-window.md

There are 2 functions:

https://github.com/electron/electron/blob/master/docs/api/browser-window.md#winshow
https://github.com/electron/electron/blob/master/docs/api/browser-window.md#winhide

<S_CODE_TOKEN>

So, if you want to call them, you can extend nightmare:

<S_CODE_TOKEN>

And then:

<S_CODE_TOKEN>

There is something wrong, because after the last `.show`, the `end` is ignored. I will fix it later, for now you can start with this, the code works.
",wiliame,2016-12-17 04:31:26
907,2016-11-28 18:50:38,This is great! Thanks @wiliame ,yourfavorite,2016-12-17 04:31:26
907,2016-12-02 07:05:08,Thank you!,meeple142,2016-12-17 04:31:26
906,2016-11-26 00:02:21,"When trying to change the viewport to a large value in order to do a full screenshot of a page on a somewhat heavy website the screen goes white and nightmare stops executing. Here's the code to cause it to crash on Windows 10 x64.

<S_CODE_TOKEN>
",jimmaay,2017-01-02 18:08:41
906,2016-11-27 18:22:54,When viewport is set to 16384 it works but 16385 it stops working. So there's a limit somewhere,jimmaay,2017-01-02 18:08:41
906,2016-11-27 21:09:46,Also it happens on any website even a blank one.,jimmaay,2017-01-02 18:08:41
906,2016-11-29 16:08:48,16384 = 2^14 so doesn't seem too random. some buffer deep in electron or chromium somewhere probably has a max length,reinpk,2017-01-02 18:08:41
906,2016-11-29 16:21:30,"I tried looking through the electron source (which includes the source for chromium) for ""16384"" or ""16"" but couldn't find anything unfortunately. Do you know where in the source the limit would be?",jimmaay,2017-01-02 18:08:41
906,2016-12-17 04:44:54,"This has to do with the max texture tile size that Chromium can render - the texture tile size is limited (in general) by the hardware you're running.  It's _almost_ always 8k or 16k, and defaults to 16k.  [You can see it here for yourself.](https://cs.chromium.org/chromium/src/cc/resources/resource_provider.cc?rcl=1464366759&l=448-454)

You can also verify that if you're interested with [this gist](https://gist.github.com/rosshinkley/b5fb5061073756e926b791a66d62b24b) I threw together when I hit this same problem a while back.  I considered putting together a plugin for large format screenshots that are bigger than the texture size - something that would take small tiles and stitch them together manually, but I never got around to it.  Sounds like it might be worth doing.",rosshinkley,2017-01-02 18:08:41
906,2016-12-17 04:56:28,"That's great, you pinned it down fully. Regarding the plugin how would this work exactly? Is it a scroll based solution? Scroll based solutions will have issues with fixed elements usually",jimmaay,2017-01-02 18:08:41
906,2016-12-17 05:07:50,"@jimmaay To be honest, it never got past a doodle in my notebook.  (Ab)Using the viewport size and moving it around was going to be a first pass, but you're right - a fixed (or anchored) element would definitely throw a wrench in that.  There are other rendering problems that could crop up with any sort of responsive layout, too, which is ultimately why I tabled the idea.  Still, as a science experiment to float out, it might be worth doing to see if anyone has ideas or another approach.  Also - spitballing - I know you can hook into the frame rendering buffer directly (that's how the current incarnation of screenshots work) - I wonder if there's some raw frame buffer magic that could be pulled off?",rosshinkley,2017-01-02 18:08:41
906,2016-12-17 05:23:17,"The scroll based solution is currently what I have to rely on at the moment, I do a loop of all elements with a computed position of fixed and change it to static before scrolling but as you said there are definitely many scenarios that this still doesn't cover. 

Is there a way to get a recompiled chromium with max_texture_size_ set to something larger to work on a virtual frame buffer like xvfb? I wonder how phantomJS is able to take screenshots larger then 16384,",jimmaay,2017-01-02 18:08:41
906,2016-12-17 05:55:19,"> ...definitely many scenarios that this still doesn't cover.

Hey, if it works for your needs... :)  Beyond a doubt there are probably many we're not thinking of off the cuff.

> Is there a way to get a recompiled chromium with max_texture_size_ set to something larger to work on a virtual frame buffer like xvfb?

Oooh, good question - you'd have to patch the tilesize and get a working build of Chromium _and_ a working build of Electron off of your custom Chromium build, then patch a fork of Nightmare to use that custom Electron build.  Most likely, doing that would introduce other side effects (or break rendering altogether), but if you've got the time to burn and want to give it a shot, I'd love to see it.

> I wonder how phantomJS is able to take screenshots larger then 16384,

Another _great_ question, and full disclosure, I'm not sure.  This might be worth digging into.",rosshinkley,2017-01-02 18:08:41
906,2016-12-17 07:20:47,"If I increase max_texture_size_ it looks like I'll probably hit some hardware limit. Right off the bat PhantomJS has a completely different way of rendering which is not easily translatable to chromium. Maybe I'll look into this more when I have time later on, it's too time consuming at the moment for someone with no knowledge on chromium or webkit development.",jimmaay,2017-01-02 18:08:41
906,2017-01-02 18:08:41,"I'm going to close this issue for now as ""not fixable"" (at least without substantial effort).",rosshinkley,2017-01-02 18:08:41
905,2016-11-25 03:07:39,"你好，我想问一下，我想试一下搜索新浪微博首页的搜索框，type的时候为什么提示cannot read property 'focus' of null，我觉得应该已经拿到input那个搜索框了啊。
<S_CODE_TOKEN>",neal1991,2016-11-25 04:11:39
905,2016-11-25 03:26:46,engurish plis,jekku,2016-11-25 04:11:39
905,2016-11-25 03:26:53,English,jekku,2016-11-25 04:11:39
905,2016-11-25 03:28:03,"@neal1991 

<S_CODE_TOKEN>",jekku,2016-11-25 04:11:39
905,2016-11-25 03:30:08,"Instead of opening up issues here (Which should be architectural problem, or feature requests) that are about using this library, go to https://stackoverflow.com

I find this kind of questioning stupid and pretty idiotic. First of all, not using a common language; secondly the point I raised above.",jekku,2016-11-25 04:11:39
905,2016-11-25 03:39:30,"If I violate the rules here, I apology. But could you have the basic realization to respect each freshman. So you have the right to criticize anyone with these mean words. Who give you the right?",neal1991,2016-11-25 04:11:39
905,2016-11-25 03:41:16,Myself and my freedom of expression. I may be mean but I'm pointing you to the right place to ask questions.,jekku,2016-11-25 04:11:39
905,2016-11-25 03:58:16,"You have your freedom of expression, so do I. If you were the administrator of this, you can close this issue or reminder me. Of course, it seems not. Moreover, as a normal guy, no one will just behave like you. May it is a basic rule for a developer. It seems that you do not have this.",neal1991,2016-11-25 04:11:39
905,2016-11-25 04:04:33,Basic rule of a developer? You set the rules now?,jekku,2016-11-25 04:11:39
905,2016-11-25 04:06:22,"@neal1991 you can't say who behaves normally. Even Linus Torvalds, creator and maintainer of git and linux is more of an asshole then me.

http://thenextweb.com/dd/2015/11/02/linux-creator-linus-torvalds-had-a-meltdown-over-a-pull-request-and-it-was-awesome/",jekku,2016-11-25 04:11:39
905,2016-11-25 04:09:17,@jekku Maybe you are born like this.,neal1991,2016-11-25 04:11:39
904,2016-11-23 13:09:42,"I don't need to wait for images and assets, I need to call code at the dom-ready, but I can only listen for the event, not continue with the queue.

There is any way to change the ""done"" policy for the goto function?

It's possible to change this behaviour with a plugin? Or add a gotoDomReady function?",wiliame,
904,2016-11-24 12:13:43,"I added a new function called **gotoReady** that continues with the execution at dom-ready, without waiting for **did-stop-loading**.

I don't know exactly why, but to continue with the execution at **dom-ready** you have to emit a **did-stop-loading** event. Anyone knows why? I haven't found nothing related with **did-stop-loading**.

What I have modified from ""goto"" to ""gotoReady"":
http://i.imgur.com/zez2ldx.png

Add ""gotoReady"" action script:
https://gist.github.com/anonymous/37366335a29c85b2cde4fd810f5e4767",wiliame,
904,2016-11-24 12:50:17,"The ""gotoReady"" only affects the page you are opening. But if you click in a submit button and the page changes alone, the next one will load only in ""LOAD"" event.

Another option, is to call ""did-stop-loading"" at every ""dom-ready"". Is not the clean way to do it, but for me it's ok until I found a cleaner way to do it.

The script, you must call **loadOnDOMReady** before the **goto**:
https://gist.github.com/anonymous/6c507a0aea7e85730bacd319c08a3328

Will be nice some property in the ""goto"" function to change the load policy. Something like:

<S_CODE_TOKEN>

or...

<S_CODE_TOKEN>",wiliame,
904,2016-12-06 01:07:03,"Without this, some sites don't load, such as http://eluniversal.com.mx/
.. actually I quickly tried your loadOnDOMReady script from https://github.com/segmentio/nightmare/issues/904#issuecomment-262769328 and it doesn't seem to help in this case either.",jamie-pate,
904,2016-12-06 17:22:10,Actually it looks like I was starved for resources as several instances of electron were hung,jamie-pate,
904,2016-12-06 17:25:19,"@jamie-pate what do you mean?

Sometimes you don't need to wait for ""Load"" event if you want to use something that is ready at DomReady event.

For all my cases DomReady is the fastest method.",wiliame,
904,2016-12-06 17:53:43,"My use case is a crawler, which loops through many nightmare instances (one for each site)

Unfortunately some sites seem to hang the browser. I thought it was an issue where the site was just perpetually loading and never *did-stop-loading* but now I think it's something else. The specific case I was looking at seems to work after restarting linux (I had to hard reset because electron just wouldn't die!)",jamie-pate,
904,2016-12-06 18:02:04,"@jamie-pate google cloud instances works fine with electron. If your machine has 4 cores, sumon only 4 electron and reuse them, don't close them when finish requests so you will be consuming resources to spawn them again.

Working with async.queue (or priority queue) helps.

After crawling a webpage clear cookies, application data and goto ""about:blank"" so the next page don't get the previous referer.

Don't clear cache so next crawling in that domain will be faster.

I'm getting good results with this practices.",wiliame,
904,2016-12-06 19:41:13,"I was under the impression that the workflow had to be similar to 
<S_CODE_TOKEN>

So something like this would be better?
<S_CODE_TOKEN>
where PARALLEL is the number of concurrent instances.
(I actually found 4 instances for 4 cores to be insufficient. N = cores * 3 is better for utilization since a lot of time is spent waiting for results from the wire)",jamie-pate,
904,2016-12-06 22:51:11,"@jamie-pate right, a lot of time is spent in waiting. N maybe must be based on CPU usage.

Look, my crawler is something like this (i haven't tried the code):

<S_CODE_TOKEN>

So you don't have to call end() and close the instance.",wiliame,
904,2016-12-06 23:01:04,"Actually I handle the operations with block instructions:

![blocks](http://i.imgur.com/uUS1EIP.png)

And there is a class called BrowserManager that instanciates Browser, a wrapper of Nightmare.",wiliame,
904,2016-12-06 23:57:28,"Mk, well I'm going to run with this for now and stop hijacking the issue thread ;)

Thanks",jamie-pate,
904,2016-12-17 04:03:33,"A plugin is _probably_ the way to go here.  If memory serves, I think there are circumstances where `dom-ready` never fires, but `did-finish-load` does.  I remember having a conversation about this at one point but cannot find the issue offhand, so take that with a grain of salt. :)

For what it's worth, if you're not interested in loading assets, you could also use a load filter like [`nightmare-load-filter`](https://github.com/rosshinkley/nightmare-load-filter).",rosshinkley,
903,2016-11-22 13:58:38,"Hi-

I'm having an issue when opening an MHTML file with Electron, that was originally saved via Electron. It seems to just show me a blank white page. As an example: [Here is the MHTML for geico.com](https://s3.us-east-2.amazonaws.com/cdn.formulaic.io/uploads/html/-KX9_-osY2mLtxdct5vA-0.mhtml)

Does Electron simply not support opening it's exported MHTML files, or am I missing something? It opens fine in Chrome...

Thanks!",sweinertjr,
903,2016-12-17 04:59:17,"Looks like public access isn't granted for that asset... can you fix it?

How are you trying to open the file?  Can you provide an example?",rosshinkley,
902,2016-11-22 07:54:20,"Fixes #901 

In my understanding, all exported actions are bound to the nightmare object on instantiate. So this will work fine.

<S_CODE_TOKEN>",jekku,2016-12-15 03:09:12
902,2016-11-29 16:14:52,needs a test :),reinpk,2016-12-15 03:09:12
902,2016-11-30 04:36:56,Oooh. Couldn't find one for the .url() so I thought this wouldn't need one. :D Okay I'll study your tests and make one.,jekku,2016-12-15 03:09:12
902,2016-11-30 08:23:08,Test added. Waiting for CI results and second review. Thanks. <3,jekku,2016-12-15 03:09:12
902,2016-11-30 08:37:52,Done. :),jekku,2016-12-15 03:09:12
902,2016-12-01 09:50:04,Is there anything else that I need to add? :heart: ,jekku,2016-12-15 03:09:12
902,2016-12-05 03:22:38,Hello. Am I still missing anything? :),jekku,2016-12-15 03:09:12
902,2016-12-05 23:12:01,@jekku Maybe you could add a little section in the README for this new function also?,justinmchase,2016-12-15 03:09:12
902,2016-12-07 07:39:13,"@justinmchase added. Thanks for the headsup.

:up: ",jekku,2016-12-15 03:09:12
902,2016-12-07 08:08:09,@reinpk @rosshinkley the failing test comes from a different feature.,jekku,2016-12-15 03:09:12
902,2016-12-09 06:17:28,:up: ,jekku,2016-12-15 03:09:12
902,2016-12-12 03:08:32,:up: ,jekku,2016-12-15 03:09:12
902,2016-12-15 02:33:09,:up:,jekku,2016-12-15 03:09:12
902,2016-12-15 03:09:28,hey sorry! will do a fresh release tomorrow. thanks for the PR!,reinpk,2016-12-15 03:09:12
902,2016-12-15 03:38:08,Thank you so much :heart: ,jekku,2016-12-15 03:09:12
901,2016-11-22 07:46:43,"Sure, I can use the .evaluate() function and return window.location.path, and maybe even polyfill it as an action using .action().

But can we get something clean such as nightmare.path() ?",jekku,2016-11-29 16:14:31
901,2016-11-29 16:14:31,would welcome a pull request!,reinpk,2016-11-29 16:14:31
901,2016-11-30 04:57:32,@reinpk already active :) Just gonna add a test,jekku,2016-11-29 16:14:31
900,2016-11-20 16:30:16,Fixes #899.,rosshinkley,2016-12-17 06:11:06
900,2016-11-25 03:34:57,"Does this have breaking changes for anyone, boss?",jekku,2016-12-17 06:11:06
900,2016-12-05 23:17:12,Why not just consider it an error case to pass a function into end? How is that better / different from just chaining thens after end?,justinmchase,2016-12-17 06:11:06
900,2016-12-17 03:35:33,"@jekku  This probably should have gotten pulled in with the last release.  I'll see to it that it gets pulled in with the next one.

@justinmchase _mostly_ for previous version support/preventing breaking changes.  In the future, support could be dropped.  (This is _tangentially_ related to a conversation about `.run()` in #575.)

",rosshinkley,2016-12-17 06:11:06
899,2016-11-20 15:13:32,"Here's an example:

Working ( notice the .end() call )
<S_CODE_TOKEN>

NOT WORKING and freezing without doing anything
<S_CODE_TOKEN>

I assume because some Promise is not chained properly, I have no idea why this is happening.",saginadir,2016-12-17 06:11:06
899,2016-11-20 16:22:32,"The `.end(fn)` method calls run, which kicks off the queue.  The subsequent `.then()` is also trying to kick off the queue, but because it was cleared by the prior call to `.end(fn)`, Nightmare will immediately halt execution, causing the instance to effectively be hung.

Curiously, there's no unit tests around handling `.end()` with a callback.

I'll be fixing both problems (at least as a first pass) shortly.
",rosshinkley,2016-12-17 06:11:06
899,2016-11-21 05:13:25,"This issue is distantly related to this issue here https://github.com/segmentio/nightmare/issues/660
Seems like more control over the *end()* is what we need.",entrptaher,2016-12-17 06:11:06
898,2016-11-20 03:43:55,"action parent function only takes one argument

Fixes https://github.com/segmentio/nightmare/issues/897",mzuneska,2016-12-17 06:10:18
898,2016-12-17 06:05:06,Good eye.  Thanks!,rosshinkley,2016-12-17 06:10:18
897,2016-11-20 00:53:15,"I was just trying to recreate the [`clearCache` action in the README](https://github.com/segmentio/nightmare#extending-nightmare) and have been unable to get a simple mocha test to pass. Any help is appreciated.

using:
mocha 3.1.2
nightmare 2.8.1
node 4.2.4

Calling `DEBUG=nightmare mocha test.js` results in
<S_CODE_TOKEN>

test.js code
```
var Nightmare = require('nightmare');

Nightmare.action('clearCache',
  function(name, options, parent, win, renderer, done) {
    parent.respondTo('clearCache', function(done) {
      win.webContents.session.clearCache(done);
    });
    done();
  },
  function(message, done) {
    this.child.call('clearCache', done);
  });

describe('test a basic defined action', function() {
  this.timeout(30000);
  it('should run a simple test with clear cache', function(done) {
    Nightmare()
      .clearCache()
      .goto(""http://example.org"")
      .end()
      .then(function() {
        console.log(""done"");
        done();
      })
  });
});",mzuneska,2016-11-20 02:38:35
897,2016-11-20 02:38:35,"The second function signature is incorrect. The code should read as the following.

<S_CODE_TOKEN>
",mzuneska,2016-11-20 02:38:35
896,2016-11-19 14:27:46,"Well, hello. I'm trying to submit form, wait for page load (redirect) and continue work there, but whenever I try to click on element, nightmare does not wait for page reload, but instantly continues queued tasks.

Could someone please add something like `waitForEvent('did-finish-loading')` feature? Or how can I do that?

Thanks!",overflowz,
896,2016-11-20 15:24:54,"It depends on how the ""reload"" is happening.  For all actions, the instance should wait for [`did-stop-loading`](https://github.com/segmentio/nightmare/blob/master/lib/runner.js#L153).  I suspect your redirected-to page is finished loading, but perhaps is doing some continuing work asynchronously?  Or, it could be that the redirect is not instant - you _might_ want to add a short wait between form submission and the next task.  Alternatively, you could wait for an element to appear on the page you're redirected to.
",rosshinkley,
896,2016-11-20 15:30:15,"#481 is having exactly the same problem. While I tried the code snippet provided there, it does not help much. In examples, there's like goto(..).click(..).wait(..); <-- without this wait, it does not wait until form was submitted and does work instantly. What if I can't find pattern or I have two patterns, like authentication successful or not. What should I wait for? Anyways, I've managed it with nightmare-window-manager. calling waitWindowLoad(..) after click(..) worked fine. It would be nice to have such feature to wait for some specific events happen before executing another task (like the #481 provided). e.g: waitForEvent('dom-ready').then(...).
",overflowz,
895,2016-11-18 21:54:50,Is it possible to load a page from a HTML string instead of going to an url?,mehdyhaghy,2016-11-29 16:11:05
895,2016-11-20 16:32:18,"Depends on what you mean - do you want to load the HTML as a page?  If so, you can save the HTML as a file and have Nightmare `.goto()` that file, eg:

<S_CODE_TOKEN>
",rosshinkley,2016-11-29 16:11:05
895,2016-11-20 20:37:05,"HTML string means:
var str=""<html><head><title>sample page</title></head><body> Sample content</body></html>"";
now is there anyway to avoid disk io overhead and render this without writing it to a file?
",mehdyhaghy,2016-11-29 16:11:05
895,2016-11-29 16:11:05,"you could spin up a tiny node server at `localhost:8080` (or any other port) in the same test file that just returns the string:
http://blog.modulus.io/build-your-first-http-server-in-nodejs

and then `.goto('localhost:8080')`",reinpk,2016-11-29 16:11:05
894,2016-11-18 18:52:20,"Hello,
I tried many things to fix this (node versions, electron versions, adjusting code and so on).
Example code:
<S_CODE_TOKEN>
I created this small example so people would be able to replicate issue.
basically you log in to tumblr (I guess any heavy website would work, since tumblr has so many assets it's good example, but you need to loging) and you try to use goto to any url and it stops displaying anything you can see only white screen. However html is still there and nightmare continues doing stuff, you just can't see anything, it's not that bad but really annoying. However if you try to take screenshot while display is crashed  your whole node application will freeze, no errors nothing, like it get caught in some sort of infinite loop.
I am running linux mint (18).
running application using DEBUG=* doesn't give any valuable information, no errors, nothing.

Not sure if it's helpful but:

<S_CODE_TOKEN>

p.s. it happens in headless mode as well.",kvidzibo,2016-11-29 16:13:17
894,2016-11-18 21:02:54,"issue can be solved by installing 32bit version of electron, not sure if it's nightmare or electron issue.
",kvidzibo,2016-11-29 16:13:17
894,2016-11-29 16:13:17,quite sure this is an electron issue :/ sorry!,reinpk,2016-11-29 16:13:17
893,2016-11-18 17:29:01,"
The following code works with NightmareJS and NodeJS. However I don't want to just console.log my JSON result, but want to save my JSON result to a local file.

I am aware of the .html option within Nightmare but I don't want the entire page and I want it in JSON format. Any help on saving ticketData to a local file?

<S_CODE_TOKEN>",twclark0,2016-11-29 16:12:03
893,2016-11-20 16:45:37,"It looks like you've done all of the heavy lifting already to get the data you want out - you don't need Nightmare to save the file for you, you could do it with the Node native [`fs`](https://nodejs.org/api/fs.html#fs_fs_writefile_file_data_options_callback) module.  Something like this for a synchronous call:

<S_CODE_TOKEN>

Or the equivalent asynchronous call:

<S_CODE_TOKEN>
",rosshinkley,2016-11-29 16:12:03
892,2016-11-18 03:49:48,"Does nightmare can work on centos which has no desktop?
My system's version is Centos6.2 and node's version is  6.9.1. GCC is 4.8.5, nightmare's version is 2.8.0, electron's version is 1.2.5. When I run the yahoo's example on my centos server, it not works. I run with this cmd: 
    DEBUG=nightmare*,electron* xvfb-run --server-args=""-screen 0 1024x768x24"" node yahoo_demo.js
And the output is:
<S_CODE_TOKEN>
  I'm very sad on this, and have been struggling for many days because it has no helpful error info. I do not know how to do next.  Very much hope to get your help.",albus01,
892,2016-11-20 16:48:38,"That looks like the Electron process is never starting.  Could you paste the version of the Yahoo example you are using?
",rosshinkley,
892,2016-11-21 06:49:38,"@rosshinkley 
<S_CODE_TOKEN>
And now when I try again, it just stucks here:
""
DEBUG=nightmare*,electron* xvfb-run --server-args=""-screen 0 1024x768x24 -extension RANDR"" node yahoo_demo.js
nightmare queuing process start +0ms
  nightmare queueing action ""goto"" for http://yahoo.com +4ms
  nightmare queueing action ""type"" +2ms
  nightmare queueing action ""click"" +0ms
  nightmare queueing action ""wait"" +1ms
  nightmare queueing action ""evaluate"" +0ms
  nightmare running +0ms

  (stuck here)
""
And when I press ctrl-c comand, it outputs:
""
...(shown above)
nightmare electron child process exited with code null: undefined +6m
/usr/bin/xvfb-run: line 171: kill: (24823) - No such process
""",albus01,
892,2016-11-28 20:43:46,"same issue, was working yesterday, no significant changes to my build since then (at least not to the nightmare part). 

Unsure if this is relevant, but at some point I accidentally left `show:true` when building/running, and got the same errors. 


<S_CODE_TOKEN>

nightmare start:
<S_CODE_TOKEN>


my dockerfile:
<S_CODE_TOKEN>


entrypoint:

<S_CODE_TOKEN>",brandonmp,
892,2017-02-23 20:23:45,somebody found a workaround?,sacabuche,
892,2017-03-21 23:14:27,"A hint for debugging: 

You can try to call electron directly, which will usually yield a more detailed error message. 

In my case, the error was a missing library (libX11-xcb).",ejoebstl,
891,2016-11-16 21:05:25,"I am using this code:

<S_CODE_TOKEN>  

It is working on every 1st run after I start the node process. Every subsequent run silently ""fails"".

1st run:
nightmare queueing action ""goto"" for URL +8s
  nightmare queueing action ""wait"" +0ms
  nightmare queueing action ""evaluate"" +2ms
  nightmare running +1ms
  nightmare electron child process exited with code 0: success! +4s
SUCCESS! It is doing the logic part!

2nd run:
  nightmare queueing action ""goto"" for URL +8s
  nightmare queueing action ""wait"" +1ms
  nightmare queueing action ""evaluate"" +0ms
  nightmare running +1ms

Nothing happens after that. No errors. With show:true no window pops up. Every subsequent run is the same behaviour.",DennisKo,
891,2016-11-20 15:07:22,"After nightmare is finished running and you reached the .end() you have to create a new nightmare instance.

I had the exact same issue several days ago and I solved it by writing a small class which returns a new nightmare instance every time.

<S_CODE_TOKEN>

and then you simply call
`let nightmare = Nightmare.getnewNightmare()`

remember to set the nightmare as null after you finished working with it to prevent memory leaks if your process runs for long.

<S_CODE_TOKEN>

Last word of warning. If you run the .evaluate function the .end() function must remain empty due to a bug which I am about to submit. In that case You'll have to figure a different way to nullify the nightmare. Update: this issue: https://github.com/segmentio/nightmare/issues/899
",saginadir,
890,2016-11-15 17:14:47,,huttarichard,2016-11-15 17:16:23
889,2016-11-15 16:16:12,"I am trying to bypass CSP in order to run some eval() code or spawn web workers.

I found this issue on electron: https://github.com/electron/electron/issues/3430
which suggests using `webFrame.registerURLSchemeAsBypassingCSP(scheme)`
http://electron.atom.io/docs/api/web-frame/#webframeregisterurlschemeasbypassingcspscheme

I have tried to do that in a preloader script but it doesn't seem to affect the page's policy.

Have you ever faced this or have any clue what might be wrong or a possible solution?

Thanks!",zisismaras,
889,2016-11-20 17:02:20,"I'd be curious to see how you were trying to accomplish this with a preload.  Also, silly question - did you try setting `webSecurity` to false?
",rosshinkley,
889,2016-11-20 19:12:46,"Yes, i have `webSecurity` set to false.
About the preloader, i followed the default preloader in the repo and i have this:

<S_CODE_TOKEN>

Not sure if what i am doing makes any sense, still pretty new to electron.
I also tried to do the same on the server-side(main process?) but couldn't find a reference to the underlying electron instance in the nightmare object.
",zisismaras,
888,2016-11-14 23:26:25,"I'm writing a Chrome extension that executes some tricky navigation/interaction flows via injected content scripts.  

I know Nightmare relies on `electron`, so I'm assuming it won't run out-of-the-box in a Chrome extension environment, but is there a practical way to use some part of the API to automate a regular Chrome instance w/ Nightmare from the `background`?",brandonmp,
887,2016-11-14 16:40:11,"Is there a way to access electron instance so that we could fire keaboard events:
<S_CODE_TOKEN>

The example is from https://github.com/electron/electron/issues/2269",zatziky,2017-01-02 17:16:47
887,2016-11-20 16:56:20,"Is [`.action()`](https://github.com/segmentio/nightmare#nightmareactionname-electronactionelectronnamespace-actionnamespace) what you're after?  That gives you the ability to define custom actions on the Electron instance.
",rosshinkley,2017-01-02 17:16:47
887,2016-11-21 13:47:02,I wanted to handle an upload dialog and hoped there would be a way using electron directly. Is there another way?,zatziky,2017-01-02 17:16:47
887,2016-12-28 01:57:28,"I'd also like to be able to access the webContents of the BrowserWindow instance if this is possible? I need it for the same purpose as @zatziky (simulating real keyboard inputs).

And also simulating real pasting (but this also requires access to electron clipboard object):
<S_CODE_TOKEN>

**Edit:** Ahh, thank you @rosshinkley - I thought `.action()` only allowed javascript evaluation, but taking a proper look at the documentation I see that @zatziky and I should be able to do something like this:
<S_CODE_TOKEN>
(Haven't tested yet, based it on an example in #379 - thanks @shadowmint!)

**Edit 2:** Hmm, not working. Can anyone spot where I've went wrong? Will update this comment if I find the correct way to do this. I've also tried adding a `setTimeout` with a `keyUp` in it after the `keyDown`, but that doesn't seem to work either.

**Edit 3:** Fixed! Turns out you need to focus a window before you can `sendInputEvent` - so I've added it to the code above (my window wasn't focused because dev tools opens up after it). Reported  this need for `focus` to the [electron repo](https://github.com/electron/electron/issues/8299). Also added `keyUp` after the `keyDown` (in my actual code I put the `keyUp` in an 50ms `setTimeout` to hopefully make the simulation more accurate).",josephrocca,2017-01-02 17:16:47
887,2017-01-02 17:16:47,"@zatziky upload dialogs are _very_ tricky, requiring tapping into the debugger API.  There is a plugin for that: [`nightmare-upload`](https://github.com/rosshinkley/nightmare-upload).  Sending keyboard events to Electron for upload dialogs won't work.

@josephrocca Glad you got it figured out, and thank you for documenting your process! Highly appreciated. :)

Considering both of the above issues are covered, I'm going to go ahead and close this issue.",rosshinkley,2017-01-02 17:16:47
887,2017-01-06 14:47:51,@josephrocca I'm not able to get your action to work. Do you have a complete example? Help would be much appreciated ,ecrmnn,2017-01-02 17:16:47
887,2017-01-06 15:04:26,"@ecrmnn Here's the code with a 50ms timeout (not sure if this actually makes a difference, pretty sure it worked for me without the delay):

<S_CODE_TOKEN>

It works for me with tab and backspace, but not for enter/return (`\u000d`) for some reason. It sort of stumped me so I've moved onto another project for now. If you make any progress, please let me know! Would be really nice if nightmare had a `sendKeys` sort of thing like selenium that abstracted all this stuff away.",josephrocca,2017-01-02 17:16:47
887,2017-01-06 15:36:58,@josephrocca Thanks. I'll try it out. I'm trying to trigger left and right arrow keys. Hopefully I'll get it working,ecrmnn,2017-01-02 17:16:47
887,2017-03-16 04:49:12,"@josephrocca hey just wondering have you managed to get arrow keys working?
",export-mike,2017-01-02 17:16:47
887,2017-03-17 23:43:23,"No, sorry - bit of a mystery :/",josephrocca,2017-01-02 17:16:47
886,2016-11-12 08:38:16,"With `nightmarejs` how to enter a file in a file input and confirm it?

It's for automation of an attachment (e.g. in email). The file input I mean is this:

[![enter image description here][1]][1]


  [1]: https://i.stack.imgur.com/7Usqa.png",zatziky,2017-01-02 21:04:16
886,2016-11-16 07:15:12,"Up for this. This is important in testing websites. Unless there could be alternatives using native electron, or if nightmare exposes electron.dialog().
",jekku,2017-01-02 21:04:16
886,2016-11-20 16:51:33,"File uploads are not natively supported under Nightmare (or Electron for that matter).  You _can_ do uploads by using the debugger API, which is what [`nightmare-upload`](https://github.com/rosshinkley/nightmare-upload) does.  Does that plugin work for you?
",rosshinkley,2017-01-02 21:04:16
885,2016-11-11 16:09:08,"Hello! I was considering nightmare for a project that i will start and block in a very simple task, can you help me?

<S_CODE_TOKEN>

I wanted to wait for that progress bar to end and start evaluating stuff after that... What have i done wrong?
",bertolo1988,2016-11-20 17:04:21
885,2016-11-15 10:26:12,"The `.wait(selector)` only waits for given element to be present in the document. I assume you rather want to check if that element has expected text, using `.wait(fn)`, like this:

<S_CODE_TOKEN>
",CvX,2016-11-20 17:04:21
885,2016-11-18 00:00:49,"It did not work for me. Have you tried @CvX ?
",bertolo1988,2016-11-20 17:04:21
885,2016-11-18 00:17:40,"Yup. Just make sure to **(1)** wait for a correct string (that's ""Search complete""), and **(2)** in `evaluate()` return what you need. In example you've given you'll have to replace `.text` with `.textContent` (it's always a good idea to double-check your queries manually in DevTools 😃).
",CvX,2016-11-20 17:04:21
884,2016-11-11 05:55:34,"Hello,

I am trying to run NightmareJS on Elastic Beanstalk and I keep having an issue with Electron.

Error: EACCES: permission denied, mkdir '/tmp/deployment/application/node_modules/electron/electron-tmp-download-2233-1478789913678'

Here are the full logs: https://gist.github.com/QuentinDela/49e824c5889e14e899eafbe850d23055

Would you have any ideas on how to fix this? Thanks,",QuentinDela,2017-02-14 14:04:00
884,2017-01-09 06:59:46,"Please check the permissions of your /tmp folder.

For all I know, to work around this, you can change the temp folder to something else that you own in unix.",jekku,2017-02-14 14:04:00
883,2016-11-10 14:06:29,"Howdy!

I'm just starting on Nightmare, looks promising, but our project is stuck at node 0.12 for some dependency issues.

I'm wondering if it's possible to run it under 0.12 if you guys have some knowledge on a project that does that? I'm thinking that porting it with babel perhaps could work?",flockonus,2016-12-17 05:28:10
883,2016-11-20 17:12:26,"Nightmare depends on native Promises as well as fat-arrow functions.  Running under 0.12 isn't possible out of the box.  You _might_ be able to use Babel (possibly in tandem with something else) to roll up Nightmare as a dependency, but I personally have not tried it.
",rosshinkley,2016-12-17 05:28:10
883,2016-11-21 01:53:26,"Thank you for the response.

In this case it seems there is space for a `nightmare-babel` sort of package, but then it would be a different project. I might take some time off this December and be able to tackle it, but no guarantees atm.

Feel free to close the issue by me",flockonus,2016-12-17 05:28:10
883,2016-12-17 05:28:09,"Closing for now.  Let me know if you get that put together, I'd be highly interested to see it!",rosshinkley,2016-12-17 05:28:10
882,2016-11-10 08:09:51,it too much size,kodermax,2016-11-20 17:14:16
882,2016-11-14 04:01:56,"If what you mean is

> ""Can I use an external module of electron?""

The answer is Yes, you can.
Please consider to look at **Nightmare(options)** [options.electronpath](https://github.com/segmentio/nightmare#electronpath)
",abdihaikal,2016-11-20 17:14:16
882,2016-11-20 17:14:16,"If what you mean is

> ""Can I exclude Electron and have Nightmare still work?""

The answer is no.  Nightmare is a wrapper for Electron, and will not work without it.
",rosshinkley,2016-11-20 17:14:16
881,2016-11-08 14:25:50,"I would like to extend Nightmare with custom actions (e.g. login, load page x, etc.). I cannot understand how to do that.

I basically copied Nightmare-swiftly:

extend.js file:
<S_CODE_TOKEN>

index.js file:
<S_CODE_TOKEN>

This returns an error:
<S_CODE_TOKEN>


Could you help with that? Also, is it possible to access underlying electron object, and for example display notifications?",artuross,2016-11-08 14:49:59
881,2016-11-08 14:49:59,"Got it working.
",artuross,2016-11-08 14:49:59
881,2016-11-20 12:47:32,"Can you please state how you fixed it? I want to do the same thing.
",nick2012,2016-11-08 14:49:59
881,2017-03-16 17:40:12,"@nick2012 when you just do `require('./extend.js')`, it comes back as an object with a `login` property. nightmare.use expects a function.

the `.use` function doesn't add the function to the nightmare instance, so the use would be:

    nightmare
      .use(require('./extend').login('my-credentials'))
      .otherstuff",tforbus,2016-11-08 14:49:59
880,2016-11-08 11:26:13,I want to be able to send data from the client side to the main process. Is that possible?,IonicaBizau,2016-12-17 15:42:55
880,2016-11-20 17:18:43,"Yes, with `.evaluate()` you can return data up to the calling client.  For example:

<S_CODE_TOKEN>

Is that what you are after?

For completeness, the title of your question talks about events, and if you're wanting to capture events you can use `.on()`.  Any event emitted from Electron can be captured with that.  If you want to define your own events, you might want to check out [`nightmare-custom-event`](https://github.com/rosshinkley/nightmare-custom-event).
",rosshinkley,2016-12-17 15:42:55
880,2016-11-20 19:41:12,"I want the reverse: emitting from the client side to the main script.

For example, I'd like in the `preload.js` to have something like:

<S_CODE_TOKEN>

And in the main process:

<S_CODE_TOKEN>

I guess that should be possible using the `ipc` module, right?
",IonicaBizau,2016-12-17 15:42:55
880,2016-12-17 05:24:39,"Yeah, that's the intent of `nightmare-custom-event` - did you take a look at that?  I think that might be close to what you're after.  I don't think the Nightmare runner re-emits all events from the Electron context, so I don't think your preload example would work out of the box.  You'd have to patch together an `.action()` to do that, I think.",rosshinkley,2016-12-17 15:42:55
880,2016-12-17 15:42:54,"Ah, right! Thanks!",IonicaBizau,2016-12-17 15:42:55
879,2016-11-08 10:15:33,"when i use **plugin** in my code,i want a callback function or then function to run my code on Node. if i use callback，it doesn't work. i use then , and return nightmare.wait(),it will throw error ",dcy0701,
879,2016-11-20 17:19:50,"Can you supply an example of what you're trying to do?
",rosshinkley,
878,2016-11-08 10:12:10,"## Problem

I'm trying to send a particular element on my page an Enter keydown event with the shiftKey down and as far as I'm aware that's impossible using only the unicode control codes which the .type() action allows presently.

## Solution

Rather than forcing us to stick to predefined behaviour as per your spec, it would be great if we could instead pass our own KeyboardEvent objects into the .type() action such that any type of Keyboard or Mouse event in the case of .click() for that matter could be entirely under the user's control.

Thanks in advance.",edisch,
877,2016-11-08 09:39:47,"Hello, I am a novice, and I have some questions to ask you.

I put the logic in the configuration file in order to modify later, and here is my code:
<S_CODE_TOKEN>

And the output is: Promise { <pending> }.
Can you tell me how to solve the problem?",albus01,2016-11-09 04:21:26
877,2016-11-08 09:57:47,"nightmare.goto($path) returns a Promise object

The promise is still pending when you try this `current = current[action].apply(current, arg);` or `console.log(current);`

To fix this, wrap your for loop in a Promise resolution like so:

<S_CODE_TOKEN>

The `.end()` tells the nightmare crawler to stop crawling the page and the `.then()` resolves the Promise. This will definitely fix your Promise pending problem but there other issues to tackle with such a complex task like this one.
",edisch,2016-11-09 04:21:26
877,2016-11-08 11:49:39,"@edisch 
Thank you so much for anwser me, but it seems not work. The loop not work: `['then', function(res) { console.log('finish'); }]` not work, and `console.log(current);` also not work.
",albus01,2016-11-09 04:21:26
877,2016-11-09 04:26:15,"Solved.
",albus01,2016-11-09 04:21:26
876,2016-11-08 02:05:25,Here is a similar issue that was fixed in Casper https://github.com/casperjs/casperjs/pull/620,rcaracaus,
875,2016-11-06 21:25:46,Is any way to run Nightmare on nodejs on openshift hosting? On localhost everything work good. ,EscApp2,2017-01-02 21:40:48
875,2016-11-23 13:11:31,yeah I am also having issues trying to run Nightmare on free openshift,yunicz,2017-01-02 21:40:48
875,2017-01-02 21:40:48,I suspect this is the same issue as #224.  Merging.,rosshinkley,2017-01-02 21:40:48
874,2016-11-04 18:51:52,"This issue very similar to issue #747: Electron and thus Nightmare hang when converting circular structure to JSON.

The last version where this is not a problem is `2.4.1` then the versions `2.5.x` give the following error:
<S_CODE_TOKEN>
And up from version `2.6.0` it has the issue I described of freezing the whole process.

The following snippet will reproduce this, beware that keeping the process open for too long will cause your whole OS to hang too! :warning: 
<S_CODE_TOKEN>",Siilwyn,
873,2016-11-04 15:45:07,"Similar to what this extension does: https://chrome.google.com/webstore/detail/redirect-path/aomidfkchockcldhbkggjokdkkebmdll

",zero-master,
872,2016-11-04 02:26:02,Fixes #848.,rosshinkley,2016-12-17 06:10:11
871,2016-11-03 15:02:15,"I would like to open several Electron browser windows with a new session every time.

Like if I have Chrome open a URL and sign in a user. Then I can open Chrome in private mode and have it ask me the login details again. I just need more than just 2 windows.

Is it possible with NightmareJs? Is it even possible outside of NightmareJs and without VMs?",zatziky,2016-11-03 15:42:08
871,2016-11-03 15:42:08,"I solved it by setting a different `userData` path for every session.

<S_CODE_TOKEN>
",zatziky,2016-11-03 15:42:08
870,2016-11-03 14:44:56,"Executing `.goto([some_address].pdf)` makes Nightmare process hang:
  
<S_CODE_TOKEN>",alyrik,2016-11-05 10:43:07
870,2016-11-03 15:45:11,"And timer function in `runner.js`(197-208) is never called.
",alyrik,2016-11-05 10:43:07
870,2016-11-03 16:12:54,"All the same for pages with automatic download process, e.g. https://netbeans.org/downloads/start.html?filename=zip/netbeans-8.2-201609300101-src.zip 
",alyrik,2016-11-05 10:43:07
870,2016-11-04 02:46:35,"It would seem that downloads are now causing a dialog box to appear (that I don't think was happening before?).  This is preventing Nightmare from moving forward until the dialog box is dealt with.

As a stopgap, you could use [`nightmare-download-manager`](https://github.com/rosshinkley/nightmare-download-manager) or [`nightmare-inline-download`](https://github.com/rosshinkley/nightmare-inline-download) for the moment.  That will handle setting the save path, which prevents the dialog.

As for the timer not firing, that's strange.  It should, but it's possible there's a bug there.  It's also possible (albeit unlikely) that the modal dialog is preventing the timer function from firing.
",rosshinkley,2016-11-05 10:43:07
870,2016-11-05 10:43:07,"Ignoring downloads fixes the issue. Thank you!
",alyrik,2016-11-05 10:43:07
870,2017-01-10 17:18:05,"Why this issue has been closed? What if I don't want to ""ignore downloads""? is there a way to make it work with nightmare? E.g. I need to click on a link (which triggers a PDF download) and check the response HTTP code is 200.",anperez78,2016-11-05 10:43:07
870,2017-01-20 20:52:04,@anperez78 Did you take a look at `nightmare-download-manager` or `nightmare-inline-download`?,rosshinkley,2016-11-05 10:43:07
869,2016-11-02 22:38:33,"In Selenium, we can do it by using window_handles and switch_to_window method.

Before clicking the link first store the window handle as

`window_before = driver.window_handles[0]`
after clicking the link store the window handle of a newly opened window as

`window_after = driver.window_handles[1]
`then execute the switch to window method to move to newly opened window

`driver.switch_to_window(window_after)`

Is there any way to do it with nightmare?",zero-master,2017-01-02 21:42:38
869,2016-11-04 03:00:18,"The short answer is no, not out of the box.  New `BrowserWindow` instances are created under Electron and are not created with all of the Nightmare sugar for interaction.  (It's planned for a future release, see #593.)

In the meantime, you can use [`nightmare-window-manager`](https://github.com/rosshinkley/nightmare-window-manager) to get some _very_ basic functionality.
",rosshinkley,2017-01-02 21:42:38
868,2016-11-02 16:18:12,"I can't provide the exact code to reproduce this but I wondered if someone might know why evaluate would return a boolean rather than the expected value (I am assuming this is on the `evaluate` sender and not the `then` receiver).

I have a chain identical to the following sans actual implementation:

<S_CODE_TOKEN>`
localCollection in the `evaluateFn` is *always* as I expect it (console.log shows as much). I realise reproducibility may be an issue but if anyone can offer some guesses, I'd take that :)",neilwashere,
868,2016-11-04 03:32:14,"I gave this a try with the following script:

<S_CODE_TOKEN>

... and ran it with `for i in`seq 1 100`; do node script.js; done` to simulate running it 100 times.  I couldn't reproduce this behavior.

Does your function _always_ return `localCollection`?  Is that array actually an array, or can it possibly be something like a DOM list?
",rosshinkley,
868,2016-11-04 11:28:49,"Thanks for getting back to me. I am 100% sure the results are always an array. I am sorry that I can't provide some more concrete code but I do have some more news.

I can't hammer the site in question that I am polling but I have just run 80 requests over a period of time, in batches of 20, with and without the electron browser - so run 20 with then 20 without, repeat. The failure rate due to `evaluate` returning a boolean (or `then` thinking it has one) are as follows:

try 1 - show true: 30%
try 2 - show false: 0%
try 3 - show true: 15%
try 4 - show false: 0%

Now, I can't replicate this against a strait forward content site. The site I am scraping has all kinds of quirks and is fairly complex - one end to end request is in the region of 10 seconds (to return a very small array of results - each result is a simple object of about 7 properties with string values and to date only one result in the array).

Does that provide any more clues? could it be that the evaluate block times out somehow - returning the status of the evaluation but not the results? (I am reaching here, apologies). 

Cheers
",neilwashere,
868,2017-03-23 10:41:28,After running into several more of these it turns out the behavior is more prevalent when running concurrent sessions. This is related to https://github.com/segmentio/nightmare/issues/727,neilwashere,
867,2016-11-02 15:33:03,"I think it would be useful to be able to wait, click, mouseover, etc... elements by their text content. I've only managed to implement clicking in an action so far:

<S_CODE_TOKEN>

If a function could be passed in place of a selector that would be eval'ed to grab the element to click/wait for, that would be pretty cool, too.

<S_CODE_TOKEN>

This would make it possible to write a custom succinct DSL.",jeffijoe,2017-01-02 21:48:11
867,2017-01-02 21:48:11,This would _probably_ be best served as a plugin as you've already mentioned.  I'm adding this to the list of v3 nice-to-haves and merging this issue with that.,rosshinkley,2017-01-02 21:48:11
866,2016-11-02 10:23:19,"I have a selector `.input-search` that is working for nightmare methods like `click()`, `insert()`, `type()` but whenever I try to run it in `evaluate()` the whole app freezes. 

Here is a sample code:

<S_CODE_TOKEN>

`then` and `catch` are never hit. 

The debug output says just this...

> nightmare:actions .wait() for .input-search element +1ms
> nightmare:actions .evaluate() fn on the page +24ms

I have tried with nightmare versions `2.8.1` and `2.7.0`.
",zatziky,2016-11-21 13:47:57
866,2016-11-02 10:34:39,"Ok, I realized that this happens only on url `https://web.whatsapp.com`.

Is it because it a Single Page Architecture (SPA)? I also had to use another `.click()` method to make a click (`nightmare-real-mouse`).
",zatziky,2016-11-21 13:47:57
866,2016-11-02 13:11:09,"The problem lies in:
- `return document.querySelector('selector');` or
- `console.log(document.querySelector('selector')`

There should be a better log but debugging it for a while I didn't get the mechanism very well. I'll let someone more experienced to handle it... :)
",zatziky,2016-11-21 13:47:57
866,2016-11-14 13:22:00,"I'm getting the same thing on a React application.

`console.log` doesn't print anything on the Dev Tools window either.

My code is something like:

<S_CODE_TOKEN>
",matheus208,2016-11-21 13:47:57
866,2016-11-20 16:54:14,"You cannot return DOM elements or lists of DOM elements.  Any information returned from `.evaluate()` has to be serialized and passed over IPC.

Try extracting information out of the DOM element(s) before passing the information back.
",rosshinkley,2016-11-21 13:47:57
866,2016-11-21 13:47:57,Thx @rosshinkley ,zatziky,2016-11-21 13:47:57
865,2016-11-02 00:37:37,"Yahoo.com's home page took a very long time to work—for a moment I thought nightmare.js wasn't working!

![nightmare](https://cloud.githubusercontent.com/assets/74385/19912725/9777cb92-a0d7-11e6-8644-1a7ca6987a33.gif)
",rstacruz,2016-12-30 18:46:41
865,2016-12-30 18:46:38,"good idea, thanks :)",reinpk,2016-12-30 18:46:41
865,2017-01-02 17:37:00,"Yeah I fixed whole merging ;)

On Mon, Jan 2, 2017 at 2:25 AM Rico Sta. Cruz <notifications@github.com>
wrote:

> *@rstacruz* commented on this pull request.
>
>
>
>
> ------------------------------
>
>
>
>
> In Readme.md
> <https://github.com/segmentio/nightmare/pull/865#pullrequestreview-14833628>
> :
>
>
> > @@ -30,16 +30,13 @@ Many thanks to [@matthewmueller](https://github.com/matthewmueller) and [@rosshi
>
>  Let's search on Yahoo:
>
>
>
> oops, haha, this needs to change too
>
>
>
>
> ------------------------------
>
>
>
>
> In Readme.md
> <https://github.com/segmentio/nightmare/pull/865#pullrequestreview-14833628>
> :
>
>
> > @@ -30,16 +30,13 @@ Many thanks to [@matthewmueller](https://github.com/matthewmueller) and [@rosshi
>
>  Let's search on Yahoo:
>
>
>
> but i think someone already edited that
>
>
>
>
> —
> You are receiving this because you modified the open/close state.
> Reply to this email directly, view it on GitHub
> <https://github.com/segmentio/nightmare/pull/865#pullrequestreview-14833628>,
> or mute the thread
> <https://github.com/notifications/unsubscribe-auth/AAoMcSpFOqLKtAFCKH5favWMdstoVwpqks5rONC1gaJpZM4Kmveu>
> .
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
",reinpk,2016-12-30 18:46:41
864,2016-11-01 11:16:58,"Because the Nightmare instance is a thenable, the following will return a Promise that resolves to undefined:

<S_CODE_TOKEN>

This took me 20 minutes to figure out, so it might be worth ensuring that the Nightmare instance is resolved when awaited. :shipit: ",jeffijoe,
864,2017-01-09 09:07:56,Same here!!,Bnaya,
864,2017-02-08 01:46:33,"Same here :-(

I think thenable object should return asynchronously something.",JumpeiArashi,
864,2017-02-10 02:25:57,"I don't know that this is possible (someone correct me if I'm wrong).  This is tantamount to asking for a promise to come through a promise resolution unresolved itself, which (memory serving) breaks Promise standards.

That said, I'd be open a PR either here or on [`nightmare-examples`](https://github.com/rosshinkley/nightmare-examples) noting it.  Thoughts?",rosshinkley,
863,2016-10-31 21:40:24,"Otherwise, nightmare causes my program to hang for 30 secs (or whatever nightmare.options.waitTimeout is set to) before exiting.",bcherny,
862,2016-10-31 20:09:14,"Node Version: 4.2.3
Nightmare Version: 2.8.1
Mocha Version: 3.1.2

I was initially trying to return the result of a `document.querySelectorAll` query in the `evaluate`
I now know that I shouldnt be doing this but I would expect something more descriptive than a timeout

using the following command `mocha index.js`

The following code will just hang and timeout, I would expect the `then` function to be called with an empty object or null

<S_CODE_TOKEN>

but this code will successfully return the textContent (which leads me to believe that the `wait` and `querySelectorAll` are working correctly

<S_CODE_TOKEN>",nguyenchr,
862,2016-11-01 20:54:11,"Quick notes before I have to stop looking at this for now:
1. The problem is in the IPC between the Electron process itself and the browser window process when JS is evaluated (i.e. in `win.webContents.executeJavaScript()`).
2. In @nguyenchr’s example above, the specific issue isn’t in the DOM node but in the jQuery metadata attached to it. Most specifically, it’s an AngularJS `$scope` object attached to the node, which is both very deep and highly recursive.
3. Looks like this was _most likely_ caused by changes to the recursion/uniqueness checking algorithm in Electron’s JS <-> C++ conversion code (which is how values get packaged up for IPC) here: https://github.com/electron/electron/pull/6977
4. There’s an Electron issue tracking it: https://github.com/electron/electron/issues/7286

Not sure if there are also things worth doing in Nightmare ahead of Electron improving on their side:
- Detect recursion and just disallow it? e.g. something like `JSON.parse(JSON.stringify(returnValue))` will throw [quickly] when recursion is encountered, though this could cause other issues :\
- Special case DOM nodes and just send back some particular meaningful properties and NOT metadata attached to them? Or send back an error instead for DOM nodes? (This won’t fix the real issue of sending deep/recursive data structures, but would make it less likely to happen.)
",Mr0grog,
862,2016-11-04 02:53:16,"@Mr0grog Would it be worth it to use something like [`json-stringify-safe`](https://www.npmjs.com/package/json-stringify-safe) to handle circular references when serializing data to pass over the IPC boundary?
",rosshinkley,
862,2016-11-04 18:29:53,"> Would it be worth it to use something like json-stringify-safe to handle circular references

I’d like to think no—the code that seems to be the culprit for the hang (introduced in Electron 1.3.5) is the code that is meant to null out circular refs and basically do exactly what json-stringify-safe does but without stringifying. Seems like it would be better to get that fixed at the source.
",Mr0grog,
861,2016-10-31 15:07:37,"I'm using Nightmare in a VirtualBox vm running Linux Mint as a guest. I have to disable hardware acceleration in Google Chrome so my VM doesn't lockup.

I have found that I also need to disable hardware acceleration in nightmare. 

I added <S_CODE_TOKEN> just before app.on('ready' ... in [runner.js](https://github.com/segmentio/nightmare/blob/master/lib/runner.js#L66) and that solved my issue. ",TechplexEngineer,2017-01-02 21:49:47
861,2017-01-02 21:49:47,"Closing for a viable solution, but thank you for bringing it up!",rosshinkley,2017-01-02 21:49:47
860,2016-10-30 01:26:18,"There's a `mousedown`, but no `mouseup`!? This changes that ;)
",dfrankland,2016-12-17 06:10:51
860,2016-10-30 01:29:08,"~~I'll update with the tests and docs soon.~~ Done.
",dfrankland,2016-12-17 06:10:51
859,2016-10-29 00:20:07,"Hello,

Today I have stumbled to create any custom action which does actions both on server and page context. I have spent the last three days trying every possible combination of Nightmare.action with evaluate and with evaluate_now, and .use(), with no success. 

My task is very simple: I need to create a custom action where I return a property from a dom element, and then use push to store this property on an array on server-side. 

But even such a task is herculean when dealing with Nightmare.

For example: I try the ""use"" function, the same way as in the example in this page:

https://github.com/rosshinkley/nightmare-examples/blob/master/examples/beginner/use/yahooTopResult.js

In sketch, I do the following:

""var functionToUse = function(search) {
  return function(nightmare) {
    nightmare
    .evaluate(function(){
    })
    .then(function(){
        console.log(""output1"");
    }
  };
};

nightmare
  .use(functionToUse())
  .then(function(result) {
    console.log(""output2"")
  })
  .catch(function(error) {
    console.error(error);
  });""

The result: I get output 2 printed BEFORE output 1.

I have to say, in general terms, that Nightmare has a terrible API and documentation, and an almost unpredictable behaviour. For example: where is documentation for ""use""? Where is documentation for ""run""? What criteria nightmare uses for choosing when it is going to queue or when it is going to run the queued operations? I have to do everything with trial and error, because the api beyond the ""readme"" is almost absolutelly undocumented, and the only documentation comes in the form of very restrict examples, where there is no precise definition of function actions and the meaning of the parameters.

This is indeed a very general criticism, but, in restrict terms, what I want now is what I said in the beginning: to create a custom action that is minimaly general enough to get an dom property on the client, return it, and then storing it in an array server-side. Is that possible?
",DjTester,
859,2017-01-02 18:36:27,"> In sketch, I do the following:

Your `.use()` function calls `.then()`.  That's almost certainly going to lead to unintended side effects with queue management, so I'm not terribly surprised you're seeing strange behavior.

> For example: where is documentation for ""use""?

The awful truth about `.use()` is that it's _never_ been particularly well documented.  The idea was to wrap up commonly used Nightmare chains for easy use, but it never really got the attention it deserved.

> Where is documentation for ""run""?

`.run()` is in the throws of being deprecated.  See #575.

> What criteria nightmare uses for choosing when it is going to queue or when it is going to run the queued operations?

All operations (except for `.run()` and I think one overload of `.end()`) are queued. Operations are only executed when `.then()` is called, `.end()` is called with a callback, or `.run()` is called.  The TL;DR advice there is to _always_ use `.then()`.  (If you're using generators, this is done automatically for you with `vo` or `co`.)

> ... and the only documentation comes in the form of very restrict examples, where there is no precise definition of function actions and the meaning of the parameters.

This is a very valid criticism.  One of the things on my back burner has been to make a gh-pages branch and take a serious pass at updating/upgrading the documentation.  Nightmare's API surface is getting to be too big for a simple readme.

>  create a custom action that is minimaly general enough to get an dom property on the client, return it, and then storing it in an array server-side. Is that possible?

Yes, although I don't know that you need a ""custom action"" (or even a `.use()` function) to do so.  Using `.use()`, you could do the following to get all client widths for a given query, for example:

<S_CODE_TOKEN>",rosshinkley,
858,2016-10-28 06:55:29,"Is that possible to generate pdf with custom page size other than A4, A3, Legal,Letter &Tabloid
Thanks in advance
",MaheshLivera,2017-01-02 17:35:46
858,2016-12-20 22:32:37,"You can specify a custom page size by passing `pageSize:{height: <HEIGHT IN MICRONS>, width:<WIDTH IN MICRONS>}` an an option in the `.pdf(path, options)` function.

This would generate a pdf file with 100 x 100 mm page size for example.
`.pdf('test.pdf', {pageSize:{height: 100000, width:100000}})`

I have proposed an update to the documentation in pull request #930 . ",carlsa,2017-01-02 17:35:46
858,2017-01-02 17:35:46,"Documentation has been merged, I'm going to consider this issue closed.",rosshinkley,2017-01-02 17:35:46
857,2016-10-27 19:21:11,"Is there a proper way to chain evaluations?  I tried to find some samples in the docs at no vail, most samples have only one evaluation but in my case I need to navigate through the application and evaluate the state of the UI. Restarting the application may not be a problem but would slow down the testing process since we would have to run through all the steps that have already ""passed"".

<S_CODE_TOKEN>
",helmutgranda,
857,2016-10-28 01:33:20,"The first `.then()` turns your Nightmare chain into a `Promise`.  With that, you can return another Nightmare chain (which resolves to a Promise) and continue evaluation.  Using your example, something like:

<S_CODE_TOKEN>
",rosshinkley,
857,2016-10-29 19:16:31,"@rosshinkley You said that the first `.then()` returns a `Promise`. Can this promise be converted to `bluebird` Promise so to be able to use `.each()` and others from specified library, at a later point in Nightmare chain? Something like this:

<S_CODE_TOKEN>
",gfot,
857,2016-11-01 10:50:29,"Just need chainable .then action, that returns nightmare instance, not promise.

Some workaround, place asserts into custom actions:

<S_CODE_TOKEN>
",zerkalica,
856,2016-10-27 15:08:21,"Tried to use it within an (cljs) electron app, and when nightmare requires electron the return value is an object instead of being a string pointing to the electron binary. I guess that this is because it has already been loaded.

When the spawn call occurs, it will never work because `electron_path` is borked.
",mping,
856,2016-10-28 21:04:55,"Maybe you can do something like this in a electron resources/app folder. I mainly do it for a lot of apps. Might be unrefined, but it has been the fastest way for me till now.

### Make a folder structure like this, you already know how this is.

![](http://i.imgur.com/1lAUF9M.png)

### The package.json file can just have the nightmare as module. Just run `npm i` in current **_resources/app**_ folder

`
$ cat package.json
`

<S_CODE_TOKEN>

### This file can be just the js file needed for a normal electron app.

`
$ cat index.js
`

<S_CODE_TOKEN>

### And finally the index.html file with our magic script tags.

<S_CODE_TOKEN>

The result is something like this.
![](http://i.imgur.com/ERVsi62.png)

I don't know if this is what you want, but I hope it helps you.

And, here is something slightly advanced.
https://github.com/segmentio/nightmare/issues/835#issuecomment-257035603
",entrptaher,
856,2016-10-31 09:37:11,"I was setting the `electronPath` manually, will give it a shot later. Thanks
",mping,
856,2016-12-04 12:27:47,"Would be great if nightmare.js had official support for this. Is it technically feasible? Like, and option to pass  an existing electron instance into the nightmare.js constructor? I don't know much about the inner workings of this stuff, so please excuse my ignorance.",josephrocca,
856,2016-12-07 17:22:31,"@entrptaher I did something similar to the stuff that you mentioned and it worked. Basically added a `package.json` in resources folder and put electron there, and installed the node module.",mping,
856,2017-03-12 00:18:10,"This might help someone...
I managed to run `Nightmare` inside `Electron` using mentioned `package.json` with `nightmare` depencancy in `app` folder, and initing Nightmare like this:

<S_CODE_TOKEN>
",Overtorment,
856,2017-03-12 00:21:32,"@Overtorment Here is another random issue related to that.
https://github.com/segmentio/nightmare/issues/1018",entrptaher,
855,2016-10-27 08:10:17,"I'm using nightmare to submit a form like this:

<S_CODE_TOKEN>

How can I wait for the new page to load after form submit?
",balajmarius,2016-10-28 06:45:49
855,2016-10-27 17:50:37,"Hey @balajmarius, this pretty much the exact same issue as #854; you might want to check there for a better understanding of the issue and possible solutions.
",Mr0grog,2016-10-28 06:45:49
855,2016-10-28 06:45:49,"Thanks!
",balajmarius,2016-10-28 06:45:49
854,2016-10-27 04:11:16,"In the below test case we load yahoo.com, fill in the search box with the word ""test"", click the search button and finally run some code within an `.evaluate()` to extract the page title. One would expect the page title to be ""test - Yahoo Search Results"" instead of the previous page's title of ""Yahoo"". However that is not the case, Apparently after a `.click()` nightmare does not wait for the page to load before allowing the subsequent chained methods to continue.

test case:

<S_CODE_TOKEN>
",bchr02,2016-10-27 21:34:39
854,2016-10-27 08:20:18,"Well, this is kinda tough… Nightmare _does_ wait for pages to finish loading before executing each action. However, there’s a gap of 30ms or so (on my machine) between clicking the button and actually starting a navigation. Yahoo stops the default form submission on click and does it themselves, asynchronously, with JavaScript, so I’m guessing that’s the cause of the delay.

That means there’s actually time for Nightmare to run a command before the browser ever gets told to submit the form and load a new page. After the `click` action, Nightmare checks to see whether a new page is loading and, since it is not (yet), continues on with the `evaluate` action.

Short of inserting an automatic delay between every action (or maybe just after input actions, like `click` and `insert`?), I’m not sure there’s really anything that can be reasonably done here. The existing behavior does work (or at least used to) with native form submission. The issue is that Yahoo’s form submission is actually delayed.
",Mr0grog,2016-10-27 21:34:39
854,2016-10-27 13:45:06,"@Mr0grog Thank you for researching this. I think I found another solution, please check it out:

<S_CODE_TOKEN>

Basically, when you know you need to wait for the page to unload before moving on you would place `.waitforunload()` and nightmare will not move on until it is resolved. I think I should submit a pull request to add this feature natively. Please let me know your thoughts.
",bchr02,2016-10-27 21:34:39
854,2016-10-27 14:27:15,"One issue with this solution is that if the page never unloads the ~~waitTimeout~~ executionTimeout is not respected. I need to see how I can get around this.
",bchr02,2016-10-27 21:34:39
854,2016-10-27 14:33:35,"Okay, so returning the promise within an `.evaluate()` seems to work better because it still respects the executionTimeout (instead of the nightmare queue getting stuck). I wonder if this is a bug with `Nightmare.action`? Anyways, here is the revised code that works properly:

<S_CODE_TOKEN>
",bchr02,2016-10-27 21:34:39
854,2016-10-27 17:24:02,"> `.evaluate()` seems to work better because it still respects the executionTimeout (instead of the nightmare queue getting stuck). I wonder if this is a bug with `Nightmare.action`?

It’s a little unclear (especially given its name), but `executionTimeout` is specifically a timeout for the `evaluate` _action_ (not for anything else, and therefore not for `evaluate_now`). It definitely reads like it’s a generic timeout for all actions (and it might be good if there was one!), but it’s not. The behavior your getting is by design, whether or not it’s a _good_ design :P

So! That just means you have to implement the timeout yourself:

<S_CODE_TOKEN>

It’s a little more complicated, but if you want to avoid setting an event listener inside the page, you can also:

<S_CODE_TOKEN>
",Mr0grog,2016-10-27 21:34:39
854,2016-10-27 17:46:26,"@Mr0grog Thank for the extra option but did you see my other solution  here https://github.com/segmentio/nightmare/issues/854#issuecomment-256658926 which uses an `.evaluate()` instead of an action? I seem to like this the best because it's the cleanest and clearest solution, in my opinion.
",bchr02,2016-10-27 21:34:39
854,2016-10-27 17:47:20,"I did! I find the evaluate solution a little less clean and clear, personally ;)
",Mr0grog,2016-10-27 21:34:39
854,2016-10-27 17:47:47,"(Which is not to say that it’s bad! It’s just as valid and solves the problem well.)
",Mr0grog,2016-10-27 21:34:39
854,2016-10-27 18:01:15,"@Mr0grog it would be awesome if your non-event listener option within https://github.com/segmentio/nightmare/issues/854#issuecomment-256712828 could be added directly to nightmare. Care to send a pull request? 😄 
",bchr02,2016-10-27 21:34:39
853,2016-10-26 12:46:29,"I want to track the loading of resources to the page, similar to casper's:
`casper.on('resource.received', () => {})`

Is it even possible to do with nightmare?
",saginadir,2016-10-27 05:52:21
853,2016-10-26 17:36:37,"Hi @saginadir, you can use the `did-get-response-details` event for this:

<S_CODE_TOKEN>
",Mr0grog,2016-10-27 05:52:21
853,2016-10-26 17:39:17,"Nightmare surfaces most of the WebContents events from Electron: http://electron.atom.io/docs/api/web-contents/#instance-events
",Mr0grog,2016-10-27 05:52:21
852,2016-10-26 00:14:39,"I am running into an error, when including vanilla JS in nightmare.js. I want to make sure that every email in my array is inputted into the system.

Is there an error glossary within nightmare.js? I keep running into this error: Nothing responds to ""goto"" whenever I run my code. I can't seem to find the root of the error even when running DEBUG. Here is my code: 

<S_CODE_TOKEN>

I also have my log here when running DEBUG=nightmare node outboundMailbox.js

<S_CODE_TOKEN>

Ideally, it would loop through the outboundEmailArray, run the function to input the emails into the system, repeat until it has reached the end of the array.
",erichoonpark,2017-01-02 21:51:35
852,2016-10-28 02:07:09,"Looping over Nightmare chains as you have it won't behave as you'd expect, and can cause unexpected problems.  I suggest you read [Asynchronous Operations and Loops](https://github.com/rosshinkley/nightmare-examples/blob/master/docs/common-pitfalls/async-operations-loops.md).  That might not solve all of the problem, but it will eliminate any strange behavior from looping on the same Nightmare instance.
",rosshinkley,2017-01-02 21:51:35
851,2016-10-25 22:36:45,"Isn't possible to have multiple evaluate() invocations? For example something like this:

<S_CODE_TOKEN>
",gfot,2016-10-26 07:34:41
851,2016-10-26 07:34:41,"Just found this: https://github.com/rosshinkley/nightmare-examples/blob/master/examples/beginner/promises/multiple-steps.js that explains the how-to.
",gfot,2016-10-26 07:34:41
850,2016-10-25 21:05:50,"Hi there!

I'm trying to collect some keywords from the amazon auto completion. Unfortunately the input field isn't active after .type() or .insert() is fired. 

Is there a workaround to keep the input field active?

My first attempt:

<S_CODE_TOKEN>
",Raidus,
849,2016-10-25 13:24:22,"I found two missing characters within the code example for the newly added Promises within an evaluate section.

Also, I removed done because including an extra parameter when using evaluate Promises will cause it to not work as a Promise and instead as a callback.
",bchr02,2016-12-17 06:09:55
848,2016-10-24 19:55:50,"When I return a promise from evaluate, everything works fine. However, when i specify one extra parameter in the function used as the first argument in evaluate, with the intent of calling it to signal completion of evaluate, the value is not passed to the next then in the chain.

This works fine:

<S_CODE_TOKEN>

And this doesn't:

<S_CODE_TOKEN>
",rberner,2016-12-17 06:10:11
848,2016-11-04 02:24:25,"This is because Nightmare uses the same callback style that Node uses where the first parameter is an (optional) error.  Consider:

<S_CODE_TOKEN>

This will produce the output of ""ERROR: working"".
",rosshinkley,2016-12-17 06:10:11
848,2016-11-04 17:39:02,"So is there currently no way to run evaluate and receive back a value without it being taken as a error (without using a promise)?
",rberner,2016-12-17 06:10:11
848,2016-12-17 05:38:12,"I should have been clearer with my example.  You certainly can also pass back an optional value.  Consider:

<S_CODE_TOKEN>
...will log ""working"".",rosshinkley,2016-12-17 06:10:11
847,2016-10-24 10:51:01,,QuentinDela,2016-11-02 12:35:18
846,2016-10-22 18:27:44,"I'm trying to write a proof of concept that:
1. Opens hacker news.
2. Searches for a link with a keyword in it.
3. Clicks link.

Here's what I have so far:

<S_CODE_TOKEN>

I'm able to successfully find links that match a keyword, but I'm stuck on how to actually get nightmare to click on those links. Any tips? Should I be trying to extract the `href` and use `goto()` instead of `click()` here? 
",matthewmichihara,2016-11-04 03:41:38
846,2016-10-24 15:41:33,"In your situation I would save the links to a database, then I'll make a cron job to get links from the database then I'll just use `nightmare.goto(urlFromDB)`
",balajmarius,2016-11-04 03:41:38
846,2016-11-04 02:15:47,"I think what you'd _probably_ want go the route of gathering the `href`s - the page you're gathering from will probably change, so you're not guaranteed that using `.click()` and `.back()` will be reliable.  Your loop is almost there: you should be able to get the `href`s directly from the anchor DOM elements.  You could also do something like:

<S_CODE_TOKEN>

The next issue you'll likely hit is looping over an array and the problems that causes with asynchronous operations.  I'd suggest reading [Asynchronous Loops and Operations](https://github.com/rosshinkley/nightmare-examples/blob/master/docs/common-pitfalls/async-operations-loops.md).  That should at least help you get started.
",rosshinkley,2016-11-04 03:41:38
846,2016-11-04 03:41:38,"Thanks @rosshinkley. I can nest another `nightmare.goto(url)` call in the outer `then` block it seems and that seems to solve that.
",matthewmichihara,2016-11-04 03:41:38
845,2016-10-21 22:42:19,"I could never get the inject to work until I realized today that maybe you have to do it after the .goto(). I've been relying on raw javascript until today I really needed some more complex jquery. Could there be something in the documentation to say as much? 
",1mike12,2017-01-02 22:10:04
845,2016-10-28 02:19:38,"There could be, I suppose, but why would you want to `.inject()` something into a page you were going to navigate _away_ from?
",rosshinkley,2017-01-02 22:10:04
844,2016-10-21 13:17:10,"@rosshinkley please how to run nightmare by pm2 or something like that on the server because nightmare use the electron and electron need graphic now i'm using `xvfb-run npm start` but this sol° needs that i stay connected by ssh to the server have you any suggest?
",neutron92,2016-12-17 05:59:47
844,2016-10-22 03:27:55,"There is the solution:

https://github.com/segmentio/nightmare/issues/224#issuecomment-239335488
",privilio,2016-12-17 05:59:47
844,2016-12-17 05:59:47,"@privilio  is right: start with #224.  Closing this for now, feel free to reopen if you are still having an issue.",rosshinkley,2016-12-17 05:59:47
843,2016-10-21 02:18:38,"we are testing a very old ui and those ids and css classes are not well defined. So I was looking to write xpath instead of id and class. It will help us to get xpath by chrome tool and add them in my script easily.

we are not using co , vo
Help is very much appreciated 
",ffoysal,
842,2016-10-20 17:18:32,"Fixes #822 and #833.
",rosshinkley,2016-10-20 17:42:31
841,2016-10-20 16:50:53,"Fixes #839, cleaning up `evaluate_now` arguments and adding some tests to make sure that attribute selectors work as well as preventing inadvertent injection with `.click()`.
",rosshinkley,2016-10-20 17:42:41
840,2016-10-20 16:21:22,"Steps to reproduce:

<S_CODE_TOKEN>

No errors outputted, and the following bug appears in Electron from `preload.js`:
![image](https://cloud.githubusercontent.com/assets/799038/19567789/17ae4036-96bd-11e6-883b-d4d18ae64225.png)

Fix is a single line (ignore second line from other diff)
https://github.com/segmentio/nightmare/compare/master...justinjmoses:master#diff-72b1e00ac76f0313032875e2182181bbR7
",justinjmoses,
839,2016-10-20 14:20:59,"The CSS `[]` attribute selector, which worked nice with nightmare@2.7, now throws an “Unexpected number in JSON” error with the latest version 2.8.0.
# Reproduction

nightmare-test.js:

<S_CODE_TOKEN>

nightmare-test.html (and serve it with localhost:8080):

<S_CODE_TOKEN>

Terminal:

<S_CODE_TOKEN>

Related: https://github.com/tsg-ut/mnemo/pull/105

Thanks.
",hakatashi,2016-10-20 17:42:41
839,2016-10-20 15:11:54,"I've figured the problem out, will send a patch in an hour...
",hakatashi,2016-10-20 17:42:41
839,2016-10-20 15:12:27,"A change was made to allow for asynchronous execution when using `.evaluate()`, which `.click()` uses under the covers.  This change parses the arguments to `.evaluate()`, which parses them, and I think that's causing the issue.
",rosshinkley,2016-10-20 17:42:41
839,2016-10-20 15:51:09,"fmm... the problem was unexpectedly sophisticated and

> send a patch in an hour...

was not possible. I found the selector string injected into ""execute"" template is wrongly escaped and causing syntax error.

https://github.com/segmentio/nightmare/blob/master/lib/javascript.js#L19

So providing `'div[data-x=""0""]'` the above line will be...

<S_CODE_TOKEN>

and making `0` into the unexpected number.

I couldn`t find right way to escape these characters.

And note, I found this error makes users be able to inject **arbitrary code** into the nightmare environment.

nightmare-test.js:

<S_CODE_TOKEN>

nightmare-test.html:

<S_CODE_TOKEN>

Terminal:

<S_CODE_TOKEN>
",hakatashi,2016-10-20 17:42:41
839,2016-10-20 15:55:10,"I'm in the throws of fixing this issue now.  Yes, it has to do with how arguments to `evaluate_now` are parsed.  I'll hopefully have something shortly, possibly including a fix for the arbitrary code injection.  (Which, by the by, shouldn't really matter: that's what almost all of the Nightmare commands do.)
",rosshinkley,2016-10-20 17:42:41
839,2016-10-20 16:32:54,"Thanks. I agree this shouldn't really matter, but did hope this be fixed sooner to avoid potential risk for nightmare users. :)
",hakatashi,2016-10-20 17:42:41
838,2016-10-20 10:24:38,"I'm trying to run , but I keep getting this error:
`(node:75110) UnhandledPromiseRejectionWarning: Unhandled promise rejection (rejection id: 1): Unexpected number in JSON at position 26`

My Package.json:
`{
  ""name"": ""loadspeed-tester"",
  ""version"": ""1.0.0"",
  ""private"": true,
  ""description"": ""tests the load speed using pingdom"",
  ""main"": ""main.js"",
  ""dependencies"": {
    ""bookshelf"": ""^0.10.1"",
    ""coffee-script"": ""^1.9.3"",
    ""enforce"": ""^0.1.6"",
    ""hat"": ""^0.0.3"",
    ""jquery"": ""^3.1.0"",
    ""knex"": ""^0.12.1"",
    ""lodash"": ""^4.15.0"",
    ""mandrill-api"": ""^1.0.45"",
    ""mysql"": ""^2.8.0"",
    ""node-slack"": ""^0.0.7"",
    ""orm"": ""^3.1.0"",
    ""nightmare"": ""^2.7.0"",
    ""sequelize"": ""^3.5.1"",
    ""sql-query"": ""^0.1.26"",
    ""trim"": ""^0.0.1"",
    ""worker-farm"": ""^1.3.1""
  },
  ""devDependencies"": {},
  ""scripts"": {
    ""test"": ""echo \""Error: no test specified\"" && exit 1""
  },
  ""repository"": {
    ""type"": ""git"",
    ""url"": ""git@gitlab.websitesonwheels.net:root/loadspeed-tester.git""
  },
  ""author"": """",
  ""license"": ""ISC""
}
`
",SnakeO,2017-01-02 22:11:32
838,2016-10-20 16:52:56,"Answering your question, anything >=4.x will work.

I suspect, though, you're hitting the same thing as #839, fixed in #841.
",rosshinkley,2017-01-02 22:11:32
837,2016-10-19 22:31:23,"Hello! I'm trying to goto page, wait for selector, then evaluate to get number of steps I will have to do (walk through pagination which is dynamically loaded with xhr by target website) and then run evaluate->click->wait->repeat as many times as required. Is it at all possible?

It certainly doesn't seem possible since there's no way to get access to the result of evaluate function other than by calling 'end' followed by 'then'.

It seems to be a common use case (parsing paginated websites) - easily achievable with other tools (sadly all of them based on Phantom), so I suspect I may be missing something.

Any advise?
",kamiltrebunia,2016-10-20 10:02:33
837,2016-10-20 03:42:07,"First and foremost: you don't have to call `.end()` before `.then()`.  Use `.end()` when you want to shut the Electron instance down.  Use `.then()` when you want to perform the actions that have been queued.

Setting that aside, getting results from an asynchronously loaded page seems to come up fairly frequently.  I'd suggest first giving [""Asynchronous Operations and Loops"" in `nightmare-examples`](https://github.com/rosshinkley/nightmare-examples/blob/master/docs/common-pitfalls/async-operations-loops.md) a read if you haven't already.  That should get you started on looping.  I'd also recommend reading #625.  It's a different issue (scraping an infinite scroll), but the bones of the issue are similar:  conduct an action, perform some sort of check, iterate if necessary.

Finally, if you have specific source you'd like a hand with, feel free to include a simplified version.  I'd be happy to help you get started.
",rosshinkley,2016-10-20 10:02:33
837,2016-10-20 10:02:32,"Thank you very much @rosshinkley. I didn't stumble upon nightmare-examples before. It's true that it's linked within a ToC, but by scrolling and reading through segmentio/nightmare README there was no such section, not even a link to it and I didn't pay attention to the ToC since I assumed I read it all. Also, there is not a single example of a code in a main README that would use `then` at least twice. If either of these were the case - I would have probably solved it by myself before. I'm just describing what was the issue in my case, feel free to disregard my remarks :)

_Even then I am not sure what was I doing wrong before since I used map.reduce (or recursion) to chain promises before and it eludes me what was I previously doing wrong in my code that I did draw all those wrong conclusions about the function of `then`._

In any case - it works like a charm and now that I finally get nightmare mechanics I enjoy the simplicity of the API very much. Fantastic tool.
",kamiltrebunia,2016-10-20 10:02:33
836,2016-10-18 21:52:52,"I've jumped through most of the hoops to get NightmareJS setup on Heroku. It renders most images fine like it does in my local Windows environment. The problem only arises when I load MathJax into an instance of Nightmare on Heroku. Nightmare appears to load the files just fine, but then just crashes.

With `debug=*` on, my output looks like this:

<S_CODE_TOKEN>

`nightmare:log crashed [{},false]` out of the blue has been really confusing me. I've hooked up my nightmare instance with

<S_CODE_TOKEN>

and its not printing anything that seems relevant.

Is there someway to get more helpful errors here? Or does the crash mean something that I'm not aware of? 

My code that is using Nightmare is a little convoluted, so let me know if it'd be useful, thanks!
",jussch,2016-10-21 16:20:05
836,2016-10-19 18:19:13,"Heroku + Nightmare can get a little sketchy having to do with `/dev/shm` being too small, and as far as I know (I remember talking about this on Gitter, but can't dig out the conversation) it can't be adjusted.  This was first mentioned [here in #497](https://github.com/segmentio/nightmare/issues/497#issuecomment-187517613).  I wonder if you're hitting that limit?
",rosshinkley,2016-10-21 16:20:05
836,2016-10-19 20:08:01,">  You also may run into an issue with /dev/shm being too small, which manifests itself as Electron crashing after a few operations in Nightmare.

This definitely sounds like the problem I'm having. I've tried adjusting the dyno size to no avail. Is there anyway I can confirm this is the issue?
",jussch,2016-10-21 16:20:05
836,2016-10-20 03:28:37,"I [found the original conversation](https://gitter.im/rosshinkley/nightmare?at=574b580aa78d5a256e38f3cd), and I _thought_ there was an outline on logs/testing for verifying that was the problem, but it's not jumping out at me.

The dyno sizes don't affect the size of shared memory - that setting is locked by Heroku.  Furthermore, memory serving, you don't have root access to change the shared memory partition.  

Re confirming the issue, you might be able to get away with using something like [`df`](http://man7.org/linux/man-pages/man1/df.1.html) to look at `/dev/shm` usage while your script is running.  (Something like `watch ""df | grep /dev/shm""` or `watch ""df -h | grep /dev/shm""`, maybe?)  I _think_ that's doable with `heroku run bash` on a one-off dyno, but my experience with Heroku is limited.

/cc @rickmed - any light to shed on this topic?
",rosshinkley,2016-10-21 16:20:05
836,2016-10-20 14:54:17,"@jussch @rosshinkley I tried all sorts of acrobatics to make it work on heroku until I emailed their tech support and confirmed that dev/shm is fixed to 5mb on all dynos. 

Even though I couldn't prove that dev/shm was the problem (if you read the chromium issue part of the problem is that you don't get logs about the crash), I tested the same script that was crashing on heroku on the smallest VMs of AWS and DO and worked perfectly. I _think_ (can't remember for sure) monitoring dev/shm at max usage on heroku.

If you _must_ use heroku I guess you could finally ask them to change the allocation ad-hoc (if possible).

Hope it helped.
",rickmed,2016-10-21 16:20:05
836,2016-10-21 16:20:05,"Well that is unfortunate. NightmareJS has been doing wonders for me, especially over PhantomJS.

Regardless, thanks for the help and for the info. I'll keep looking into it, but it doesn't appear to be a Nightmare issue, so I'll close this.
",jussch,2016-10-21 16:20:05
836,2017-01-25 00:46:24,@jussch I'm running into the same issue. Wondering if you found a solution?,Chris911,2016-10-21 16:20:05
836,2017-01-31 22:50:08,"@jussch Heroku just bumped the size of `/dev/shm/` on their dyno to allow headless browser test.

https://devcenter.heroku.com/changelog-items/1085",Chris911,2016-10-21 16:20:05
836,2017-02-02 19:50:47,"@Chris911 No I never found a solution, but thanks a bunch for the info! I'll give it another try.",jussch,2016-10-21 16:20:05
836,2017-02-02 19:52:55,"@jussch I managed to get it to run with a few buildpacks but it was crashing after loading 1 webpage. I contacted Heroku and they said they were working on increasing `/dev/shm/` and that it should fix it. Personally decided to deploy on Google Cloud for now but might switch back to Heroku. 

Let me know if it works for you!",Chris911,2016-10-21 16:20:05
835,2016-10-17 18:15:16,"Please how to end nightmare  by separeted button i want to do a start and stop button 
PS: 

<S_CODE_TOKEN>
",neutron92,2016-11-04 02:54:45
835,2016-10-19 18:32:46,"I'm not entirely sure I understand the question.  Nightmare can be ended with [`.end()`](https://github.com/segmentio/nightmare#end), and in the future interrupted with `.halt()` (see #788).

The ""button"" part of your question confuses me: what are you trying to do?
",rosshinkley,2016-11-04 02:54:45
835,2016-10-19 18:35:57,"@rosshinkley i want to stop the nightmare by a button 
i want to do a button that start my script contains nightmare then when i want to stop the nightmare with an other button because in the server i can't see the electron to stop it 
did u undertand me now?
",neutron92,2016-11-04 02:54:45
835,2016-10-19 18:38:20,"Yes.  I think in that case you'd want the `.halt()` API, which is as-yet not included.
",rosshinkley,2016-11-04 02:54:45
835,2016-10-19 18:39:40,"i got u ok thanks a lot for ur answer
",neutron92,2016-11-04 02:54:45
835,2016-10-19 20:01:33,"@rosshinkley do you know maybe when `.halt()` API will be included ?

We need it for project of ours.

If that will not be soon, do you suggest any solutions ?

Peace!
",shtefcs,2016-11-04 02:54:45
835,2016-10-28 21:40:13,"I don't know about the halt() function but basically I did another workaround.

Creating a nightmare window without calling end()
Then add a button to call only the end()

Maybe you wanted a pause button too. But I suppose this one was the best thing I could come of with.
Here is something else to help you understand my perspective.

First I do this to run nightmare inside electron, 
https://github.com/segmentio/nightmare/issues/856#issuecomment-257028322

Then I use this index.html file.

<S_CODE_TOKEN>

And the result is this,
![](http://i.imgur.com/S6EPLnV.png)

It might look really stupid, but this works for me I guess.
",entrptaher,2016-11-04 02:54:45
835,2016-10-29 19:36:46,"@entrptaher Wow, tnx a lot for trying to help mate, really appreciate!

I will need to wait someone to do this for me, cause current guy who was doing this left the work.

@entrptaher how can I get in contact with you ?  My email is stefan@vanila.io, so you can reach me there or join our internal chat on https://chat.vanila.io
",shtefcs,2016-11-04 02:54:45
835,2016-10-29 19:50:51,"Thank you @entrptaher 
",jelenajjo,2016-11-04 02:54:45
835,2016-10-29 21:55:17,"Glad to be of help.
",entrptaher,2016-11-04 02:54:45
834,2016-10-16 15:27:38,"I'm using nightmare to navigate between various pages and log page errors. Due to the asynchronous nature of `url().then()` I need a way to get the URL at the time of the page error. Would something like this be acceptable?

https://github.com/segmentio/nightmare/compare/master...justinjmoses:master

If so, I'd be happy to write up a PR with test coverage. 
",justinjmoses,
834,2016-10-19 18:42:57,"I can't think of a reason to not include it off the top of my head, and the change is pretty innocuous.  If you're willing to pull together the PR + tests, I'd say go for it. :)
",rosshinkley,
834,2016-10-19 18:47:34,"It's looking like it doesn't fix the problem. I played with some edge cases and it seems possible that the electron browser has moved on to a new URL by the time the event is handled. I need to dig deeper to find a thorough solution.  
",justinjmoses,
834,2016-10-19 19:52:13,"Ah, I think I misunderstood the problem you're trying to solve.  You're after something blocking, I take it?  That's trickier, but there are a couple of options.  You could manually block using `.wait()`, which would solve your asynchronicity problem.  Or if you really want to get crazy, you could take a look at implementing a soft-blocking action to wait for your page errors, akin to how [`nightmare-inline-download`](https://github.com/rosshinkley/nightmare-inline-download/) works.
",rosshinkley,
834,2016-10-19 20:06:09,"Actually I don't want to block per se. I'm happy for nightmare to continue its merry way, I'd just like to make sure I know where the error came from, even if electron has moved on to another page already. 
",justinjmoses,
833,2016-10-13 15:29:39,"npm WARN deprecated electron-prebuilt@1.4.3: electron-prebuilt has been renamed to electron. For more details, see http://electron.atom.io/blog/2016/08/16/npm-install-electron
",xcarpentier,2016-10-31 17:53:40
833,2016-10-17 09:36:49,"What's a good workaround for getting this to work -- can we make a change in package.json?
",SnakeO,2016-10-31 17:53:40
833,2016-10-31 14:57:22,"I think this was fixed here https://github.com/segmentio/nightmare/commit/68b40a8ea605997ac4f38ca75b0db0bbca76f708
",TechplexEngineer,2016-10-31 17:53:40
833,2016-10-31 17:53:40,"Cool thanks !
",xcarpentier,2016-10-31 17:53:40
832,2016-10-13 15:25:49,"how can i pass a function in parameter of .evaluate  allways i have null

puu.sh/rHtgK/89af757a71.png

i want to scrape a website and every data collected saved in mongo no return in the .evaluate
any one can help me
",neutron92,2017-01-02 18:40:29
832,2016-10-19 18:53:30,"To be clear: are you trying to pass an actual function to evaluate?  Something like:

<S_CODE_TOKEN>

_edit:_ I didn't keep my naming conventions straight.  Oops.
",rosshinkley,2017-01-02 18:40:29
832,2016-10-28 20:14:38,"I'm trying the same, 

<S_CODE_TOKEN>

That result will undefined
",cagataycali,2017-01-02 18:40:29
832,2016-10-30 08:55:41,"@cagataycali, maybe thats not the problem you are trying to solve. If you are trying to use download manager, then probably you should try their example first.

<S_CODE_TOKEN>

If you want to pass something to evaluate, you have to pass it as @rosshinkley showed above.
But, from your example, it's not exactly clear what are you trying to do.
The actual code might be more helpful.
",entrptaher,2017-01-02 18:40:29
832,2017-01-02 18:40:29,"@cagataycali In addition, you're not passing values to `.evaluate()` to print.  From the hip, this should work:
<S_CODE_TOKEN>

You may want to give [variable lifting](https://github.com/rosshinkley/nightmare-examples/blob/master/docs/common-pitfalls/variable-lifting.md) a read.

Going to close this due to age and I think possibly being solved.",rosshinkley,2017-01-02 18:40:29
831,2016-10-13 02:48:00,"Sorry I think it is very simple issue for you
But I don't understand.

I tried to make simple code

<S_CODE_TOKEN>

however It doesn't work why do that? could you like me to check about wrong code? I totally feel like an idiot.
",ghost,2016-10-14 07:38:21
831,2016-10-14 07:39:13,"I solve the problem

var Nightmare = require('nightmare');
var nightmare = Nightmare({ show: true });

nightmare
    .goto('https://www.google.com')
    .type('#lst-ib', 'funny cats') // <-this
    .click('form[action*=""/search""] [type=submit]')
    .wait('#main')
    .then(function (result) {
        console.log(result)
    })
    .catch(function (err) {
        console.log(err);
    });
",ghost,2016-10-14 07:38:21
830,2016-10-12 22:11:56,"I have a use case where I need to know what was on the page when a page's waitTimeout is exceeded, but I can't seem to figure how to get the last html of the page from within a .catch(). Anyone have any ideas? Maybe nightmare can be updated so catch() includes an additional parameter with the html? thoughts anyone?

For example:

<S_CODE_TOKEN>
",bchr02,2016-10-27 16:33:12
830,2016-10-12 23:34:03,"seems like https://github.com/segmentio/nightmare/pull/819 would help me get around this issue (once merged). 
",bchr02,2016-10-27 16:33:12
830,2016-10-19 19:24:25,"I don't _think_ you would need #819 to handle this, but I'm not sure I'm clear on what you're asking.  Do you want the URL of the page that excepted, or are you looking to pull information from the page that excepted?

Taking a stab in the dark, would something like this help?

<S_CODE_TOKEN>
",rosshinkley,2016-10-27 16:33:12
830,2016-10-19 19:53:08,"@rosshinkley Thank you for helping. I am looking to pull the information (html) from the page that excepted, not the URL.
",bchr02,2016-10-27 16:33:12
830,2016-10-19 19:56:48,"I basically want a snap shot, so to speak, as html of what was on the browser window at the point when the wait timeout expired.
",bchr02,2016-10-27 16:33:12
830,2016-10-20 03:51:48,"You can still use the same approach, and you've got options, depending on what you want to do: use `.evaluate()` to return the HTML back, or use `.html()` to save the error state off.

Using `.evaluate()`:

<S_CODE_TOKEN>

Using `.html()`:

<S_CODE_TOKEN>
",rosshinkley,2016-10-27 16:33:12
830,2016-10-20 04:04:57,"I will try this. Thank you!
",bchr02,2016-10-27 16:33:12
830,2016-10-24 22:38:46,"@rosshinkley I tried to use your .evaluate() method as you had suggested, but none of the code within the final .then() (where the html should be) executes. 
",bchr02,2016-10-27 16:33:12
830,2016-10-24 22:55:42,"I think it's because the electron windows is already closed once the code within the catch runs.
",bchr02,2016-10-27 16:33:12
830,2016-10-25 16:32:28,"Okay I created another approach that works using evaluate's new Promise support - @rosshinkley thanks for adding that by the way.

So here is what I did. I created a wait function that takes three parameters.
1. The element id to check for
2. waitTimeout (this is optional)
3. pollInterval (this is optional)

Once you declare a wait variable with the new wait function code provided below, when using nightmare instead of using `.wait('#uh-search-box')` you would do this:
`.evaluate(wait, 'uh-search-box')` And since the new wait function returns a promise, it is added to normal queue and we could continue chaining as normal.

Of coarse the solution can be adjusted to ones individual needs. But for me this was perfect. Here is the code:

<S_CODE_TOKEN>
",bchr02,2016-10-27 16:33:12
830,2016-10-25 19:54:41,"The approach I mentioned above works great, however one issue I have seen with some websites is if the page transitions away even after the did-stop-loading event. When that happens the custom wait function that is supposed to be running within the client get's lost. Adding a `.wait(1000)` before the other wait gets around this however at the cost of speed. I wish there was a better way that nightmare could detect when the page has finished loading. 

This issue was also reported in https://github.com/segmentio/nightmare/issues/769 but for whatever reason the issue is closed.

**Update:** I opened a new issue for this here: https://github.com/segmentio/nightmare/issues/854
",bchr02,2016-10-27 16:33:12
830,2016-10-27 07:05:29,"FWIW, @rosshinkley's suggestion should work, _except_ you need to make sure not to call `end()` before your `catch` runs:

<S_CODE_TOKEN>

So it doesn’t have to be nearly so complicated as your asynchronous `wait` above.
",Mr0grog,2016-10-27 16:33:12
830,2016-10-27 16:33:12,"@Mr0grog Thanks for the thorough explanation and for the corrected code. This is great!
",bchr02,2016-10-27 16:33:12
830,2016-10-27 21:34:06,"@Mr0grog Thanks again for helping me. I wanted you to know that I ended up making some refinement to your code above because I didn't understand:
- why there is a `catch()` immediately followed by another `catch()`
- why the last `catch()` is followed by a `then()`
- what the purpose of `.goto('about:blank')` when this could be captured in a `catch()`

So here is the code structure that I ended up using and achieves the goal of performing a task on a page that timed out (like getting the html off of it):

<S_CODE_TOKEN>
",bchr02,2016-10-27 16:33:12
830,2016-10-27 22:54:31,"Ah, there are important answers for all of these questions :)

> ## why there is a `catch()` immediately followed by another `catch()`?

An important part of this is that the first catch _returns another promise,_ so the second catch can handle any errors from it. For example, you have:

<S_CODE_TOKEN>

But you could also do this for a little less nesting:

<S_CODE_TOKEN>

This also has the benefit of letting your HTML printing handler _only_ handle relevant errors if you want:

<S_CODE_TOKEN>

> ## why the last `catch()` is followed by a `then()`?

This is so that you only have to call `end()` once in your whole script. This also makes it easy to ensure that you _always_ remember to clean up and call `end`, no matter whether things went right or wrong. For example, you have:

<S_CODE_TOKEN>

But you could have:

<S_CODE_TOKEN>

Alternatively, if you’re debugging and only want to call `end` when everything is successful and _not_ when things break (bad idea when you aren’t manually testing, but helpful when you are), just move that `then` up before your `catch` calls:

<S_CODE_TOKEN>

> ## what the purpose of `.goto('about:blank')` when this could be captured in a `catch()`?

The idea here is to avoid an unnecessary delay. Let’s say you had some code like this:

<S_CODE_TOKEN>

Now, if you go back a step and use the trick where we only get the HTML for the specific error we care about, that’s not so important:

<S_CODE_TOKEN>
",Mr0grog,2016-10-27 16:33:12
830,2016-10-28 01:10:33,"Poking a head in: Thank you @Mr0grog:

> except you need to make sure not to call end() before your catch runs...

Editing mistake on my part.  Thanks for the second set of eyes.
",rosshinkley,2016-10-27 16:33:12
830,2016-10-28 22:23:41,"Heh, no worries @rosshinkley. I made a similar copy/paste error in my first reply too, only saved by the fact that it didn't break the code :P
",Mr0grog,2016-10-27 16:33:12
830,2016-10-29 03:00:54,"@Mr0grog thanks for explaining
",bchr02,2016-10-27 16:33:12
829,2016-10-12 17:05:04,"How can I proxy the HTTPs requests?

https://github.com/electron/electron/issues/7564
",IonicaBizau,
829,2016-10-20 17:50:27,"I'm not sure what you're asking here - are you asking how to set up a proxy?  Or what proxy to use?  

For the latter, [`node-http-proxy`](https://github.com/nodejitsu/node-http-proxy) is a good place to start.
",rosshinkley,
829,2016-10-20 17:58:33,"I did check that out but it doesn't allow me to modify the content from response. 

I'm wondering if it's possible to proxy the https requests and change the content of the responses for specific urls. 
",IonicaBizau,
829,2016-12-17 05:45:26,"Hm, You could probably use a similar approach to #521 to patch request data coming back - does that help, or are you trying to modify data from `.goto()`?",rosshinkley,
829,2016-12-17 15:42:08,"@rosshinkley I was trying to modify the content of a script served over HTTPs. Still, I don't really have a solution for this, but I found a workaround for my case.

Would be curious how do modify that, tho.",IonicaBizau,
829,2016-12-20 05:16:23,"Hi There,

I am having the same issue.  It appears that that proxy feature works for 'http' requests but not for 'https' requests through the same proxy. I am using a proxy service where I know I am able to, when using curl, visit both 'https' and 'http' pages through the same proxy.

However with this simple code which is similar to the examples given in the API readme:

<S_CODE_TOKEN>

I get the following results when `DEBUG=*`:

<S_CODE_TOKEN>

Any idea what might be happening here? Clearly the authentication is given and works with 'http' urls but not with 'https' urls. 

I suspect, maybe, the authentication is not getting through as the connection is encrypted but I'm not sure how to resolve this issue? Or I am missing something very obvious.",mashaalmemon,
829,2016-12-20 17:32:35,"It is interesting to compare the output from the failed attempt to access an 'https' page vs a successful attempt to access an 'http' page:

<S_CODE_TOKEN>

You'll notice from debugging output that authentication (or the 'loginListener' set in the nightmare.js runner) is executed after 'did-start-loading' whereas in the failed example the login listener is not called.

I've ruled out a certificate problem.

Now I'm trying to track down where the 'ERR_UNEXPECTED_PROXY_AUTH' error might originate from. Any feedback or knowledge that might point me in the right direction would be extremely helpful.",mashaalmemon,
828,2016-10-12 05:47:07,"I was wondering if it's possible to use Electron's <webView>s to load the webpages and adding/removing those tags dynamically inside a single BrowserWindow to handle async requests, (like if each webview was a single instance). I just came across Nightmare while I was researching a way to scrap from Electron, the thing is that I want to scrap lots of links (+100 links, yeah, like data-mining), my first approach was to use `<webView>`'s (with injected ""preload"" scripts and returning HTML code through IPC messages ) and it was good, but since in the future I might use authentication, handle sessions clicking on stuff and waiting for dynamic loads, and more complicated flows I looked for more ""sophisticated"" ways to do it, and I found out about PhantomJS (I used it with Horseman) It was a total disappointment, my raw webview ""scrapper"" took about ~2 seconds to return the whole HTML from a webpage, while PhantomJS took more than ~10 seconds, then I found Nightmare and use it and it takes about ~5 seconds to accomplish the same... all good if you're using it with a single page, but if I try to load those 100+ links (by creating a new instance in a loop, I know that Nightmare do not support more than 1 request at the same time on a single instance) it would take too much time (compared to the `<webview>` approach), and I believe that most of the time spent is consumed on launching a new instance, and not loading the actual webpage... So I thought that it could be possible to have only 1 instance of Nightmare (Electron) but somehow have several `<webview>`'s on it and manage them independently? Have you guys thought about it? Is there technical limitations on this approach? Is this something you plan to support in the future? 
",danielnieto,2017-01-02 22:12:53
828,2016-10-19 19:13:06,"Short answer is yes, it's definitely on the list of things to try, and I'd point you at #593 for more information.

Longer answer: it's very possible to manage multiple `BrowserWindow`s from a single Electron instance, and should be reasonably straightforward to do with Nightmare.  It would solve situations where you're time-bound (like yours, as you noted, launching new Chromium instances takes quite a bit of time) or memory-bound (each Chromium instance is _very_ expensive).  It would also solve problems with managing popup windows and testing with multiple windows.

The downside is that (I think) it would be a breaking change to Nightmare 2.x, which I'm not against, but it would have to be handled ... carefully.
",rosshinkley,2017-01-02 22:12:53
828,2016-10-21 16:27:10,"oh, great!... in the meantime I created a project precisely for these kind ""scrapping"" needs:

[Scrapman](https://github.com/danielnieto/scrapman)

it is based on Electron as well, but it uses the technique described above, btw, I couldn't ever imagine all the painful process needed to communicate Node -> electron(main) -> electron(render) -> shadow DOM with only async messages! I had to create another [NPM module](https://github.com/danielnieto/ipc-messages-manager) just to handle the IPC messaging.

I really really hope that these features get implemented on Nightmare in the future! Looking forward to it!
",danielnieto,2017-01-02 22:12:53
828,2017-01-02 22:12:53,Merging this conversation into #593.,rosshinkley,2017-01-02 22:12:53
827,2016-10-11 16:07:55,"Is it possible to evaluate a script before loading any resources?
",IonicaBizau,2016-10-26 15:02:11
827,2016-10-19 18:58:12,"No, I don't think so.  Memory serving, `webContents` hasn't been created yet, so there's nothing to call `executeJavascript()` on.

What are you trying to do?  There might be another angle.
",rosshinkley,2016-10-26 15:02:11
827,2016-10-20 02:11:59,"I ended  by manually editing the `lib/preload.js` script and setting up an npm script which overrides is after install.

By having a Google Maps map on the page, with markers, I want to click the first marker on the page. The easiest solution I found was to intercept the `addListener` method from Google Maps and collect the markers, and then to click the first marker.

Any ideas how we could do it?
",IonicaBizau,2016-10-26 15:02:11
827,2016-10-26 14:57:30,"> I ended by manually editing the lib/preload.js script and setting up an npm script which overrides is after install.

So you know, on the README there is a [section](https://github.com/segmentio/nightmare#custom-preload-script) for overriding the preload. Like this: 

<S_CODE_TOKEN>

Just be sure to copy the content of the current preload.js into your custom one.
",bchr02,2016-10-26 15:02:11
827,2016-10-26 15:02:09,"Yes I saw that these days, and I set up a script to generate js files and bundle the things in them. Works pretty smoothly. :grin: 

Thanks!
",IonicaBizau,2016-10-26 15:02:11
827,2016-10-26 15:19:30,"so have a script that takes whatever the now current lib/preload.js and combines in your custom code? Can you show me the code? I was thinking about doing this. 
",bchr02,2016-10-26 15:02:11
827,2016-10-26 16:46:33,"@bchr02 Sure! Pretty much a proof of concept, not tested (pasting things from my code):

<S_CODE_TOKEN>
",IonicaBizau,2016-10-26 15:02:11
827,2016-10-26 18:59:53,"@IonicaBizau Thank you!
",bchr02,2016-10-26 15:02:11
826,2016-10-11 15:47:54,"I'm confused, on some places I've found it uses Electron and in others it says it's a wrapper for PhantomJS... what's correct?
",danielnieto,2016-10-12 00:53:19
826,2016-10-11 17:40:46,"It uses Electron.
",amokan,2016-10-12 00:53:19
826,2016-10-12 00:08:41,"Nightmare used to use PhantomJS under the hood before the release of the v2, when it switched to Electron.
You can use the old [1.8.2 version](https://github.com/segmentio/nightmare/tree/1.8.2) if you want to use Phantom instead.
",jgrancher,2016-10-12 00:53:19
826,2016-10-12 00:53:19,"Thank you
",danielnieto,2016-10-12 00:53:19
825,2016-10-11 03:01:01,"Earlier today I ran into this issue: https://github.com/segmentio/nightmare/issues/824

I resolved it by creating a modified `preload.js` that prevents the browser from setting any `unload` or `beforeunload` handlers. This pull request includes my modified `preload.js` along with two tests that ensure that it works.
",Fauntleroy,2016-12-17 06:23:51
825,2016-12-17 06:21:59,"This looks like the same issue that alert, confirm, etc poses.  I'll fix the test conflict and pull it in.",rosshinkley,2016-12-17 06:23:51
824,2016-10-11 01:33:06,"When trying to `.end()` a nightmare instance the process will hang forever if there is a `confirm` dialog on page exit. The confirm dialog is also not visible.

Code:

<S_CODE_TOKEN>

My view of the electron window:

![screen shot 2016-10-10 at 6 29 43 pm](https://cloud.githubusercontent.com/assets/507047/19255990/d89529d4-8f17-11e6-8a70-d1f84d72fd8f.png)

Is there some way to forcefully close the nightmare instance?
",Fauntleroy,2017-01-02 22:13:17
824,2016-10-11 02:18:26,"I have isolated the issue. It seems that Google Forms is setting the `unload` event and preventing navigation with the special `unload` confirm dialog.

I have a temporary fix right now:
- Hijack `window.addEventListener` and silently kill attempts to bind `unload` events
- Make `window.onunload` and `window.onbeforeunload` unwritable properties

I'll probably submit a pull req after I've cleaned up my solution.
",Fauntleroy,2017-01-02 22:13:17
824,2016-10-19 19:01:39,"For what it's worth, you could instead prop up a custom preload to handle the `confirm` case manually.  By default, the confirm handler returns the default response, which in this case is _probably_ to stay on the page.
",rosshinkley,2017-01-02 22:13:17
824,2016-10-19 19:08:23,"@rosshinkley in this case, `window.confirm` isn't the issue, it's the `unload` and `onbeforeunload` handlers. I managed to fix it with a custom `preload.js` script, which I've submitted in a pull request here: https://github.com/segmentio/nightmare/pull/825
",Fauntleroy,2017-01-02 22:13:17
824,2017-01-02 22:13:17,Fixed with #825.  Closing.,rosshinkley,2017-01-02 22:13:17
823,2016-10-10 06:18:56,"I have an image that changes on every download that is downloaded by electron (I can see it in the browser window). Is there any way to programmatically access this image without redownloading it?

Thanks!
",ak5,2017-01-02 22:14:05
823,2016-10-10 16:43:09,"I don't know a direct way to access to cached file, but you can use [screenshotpath-clip](https://github.com/segmentio/nightmare#screenshotpath-clip)

Check #107 for discussion.
",efernandesng,2017-01-02 22:14:05
823,2016-10-11 02:52:38,"Hey thanks, this seems like a doable workaround, it would be nicer to get the image from the cache though (it's there somewhere, no?) I'll play with this later today though, thanks!
",ak5,2017-01-02 22:14:05
823,2016-11-27 09:50:43,See also the PR & plugin listed here: https://github.com/segmentio/nightmare/pull/358,avimar,2017-01-02 22:14:05
822,2016-10-06 08:52:14,"Electron has been renamed ""electron"" and package is being deprecated. 
",marcoscaceres,2016-10-20 17:42:31
822,2016-10-06 08:53:44,"this is emitting warnings on TravisCI and I guess anytime someone `npm install`s 
",marcoscaceres,2016-10-20 17:42:31
821,2016-10-05 18:26:15,"Not sure whose end this is on, so I'm raising it both places.  Probably them, but, happens in my setup in installing your stuff.

<S_CODE_TOKEN>
",StoneCypher,
821,2016-10-05 18:31:50,"https://github.com/electron-userland/electron-prebuilt/issues/199
",StoneCypher,
820,2016-10-04 20:03:23,"If the element being typed or inserted into is removed from the DOM before the blur call is made (which can happen if the element is removed on a key event), an exception is raised.  `blurSelector` now makes sure the element still exists before making the blur call.  Also added a debug message if the selector does not exist after focusing.

Partially fixes #762.
",rosshinkley,2016-10-20 04:30:48
819,2016-10-04 19:58:37,"This PR is intended to let you run `.evaluate()`d functions that are asynchronous, either with callbacks or with promises.  For callbacks, if the `.evaluate()`d function's arity is one less than the passed in parameters, it'll assume the last argument to the function is the callback.  If the return value is a `then`able, it'll call `then()` to wait for promise fulfillment.  Otherwise, the call will behave synchronously as it does now.

This change is _potentially_ breaking as it does change behavior based on the arguments to `.evaluate()`.  Is this change worth the risk of possibly breaking implementations that already exist?

Related to #573 and closes #552.
",rosshinkley,2016-10-20 04:56:11
819,2016-10-09 12:16:08,"This feature would be really awesome!
",xat,2016-10-20 04:56:11
819,2016-10-12 23:41:44,"@rosshinkley this pull request is great! Thank you. It will help me with https://github.com/segmentio/nightmare/issues/830
",bchr02,2016-10-20 04:56:11
819,2016-10-20 04:16:08,"Including.  Thanks for the feedback. :)
",rosshinkley,2016-10-20 04:56:11
818,2016-10-02 14:00:24,"Found a small typo :).
",numaer,2016-10-20 04:29:21
818,2016-10-20 04:15:33,"Thanks for the correction!
",rosshinkley,2016-10-20 04:29:21
817,2016-10-02 00:12:51,"It looks like with /deep/ combinator being deprecated it is not easy to use nightmare with shadow dom elements
",mmacedoeu,
816,2016-09-30 22:17:03,"this example

<S_CODE_TOKEN>

is giving this error 

<S_CODE_TOKEN>
",andyfen,
816,2016-10-04 20:56:28,"I'm guessing based on the output that you're on MacOS, and to that end, there's a known issue with some versions of OSX that limit the maximum file handles to something like 256.  I think that might be what you're hitting?  Try running `ulimit -n` and report back what your limit is.
",rosshinkley,
816,2016-10-05 06:16:28,"yup 256, 
",andyfen,
815,2016-09-29 13:37:19,"Fix `visible` action to check against the current viewport using `getBoundingClientRect`.
You can check [here](http://stackoverflow.com/a/7557433/6409) for more information.
",ligaz,2016-10-20 15:18:07
815,2016-10-14 14:41:57,"@rosshinkley what's the state of this PR? 

Do you plan to merge it or you are afraid it will be breaking change?
",ligaz,2016-10-20 15:18:07
815,2016-10-19 18:47:21,"Last I saw, the tests for `.visible()` were broken.  I haven't had a chance to really dig into it since.

At first blush, this looks like a reasonable change, and also looks like it adds a check for elements that are floated off into oblivion, which is a welcome addition.  I'll take a closer look when I have a chance, but on the face of it, this looks good.
",rosshinkley,2016-10-20 15:18:07
815,2016-10-20 04:14:50,"On slightly closer inspection: what about elements that are bigger than the viewport?  Doesn't this assume that to be visible, the bottom (and rightmost edge) of the element has to be in view?  I don't think a call to `.visible()` implies the _entire_ element is visible.  In fact, all `.visible()` really implies is that the element is on the page and rendered.  Changing that would be a _substantial_ change and probably a breaking one at that.
",rosshinkley,2016-10-20 15:18:07
815,2016-10-20 07:24:06,"The definition of `visible` (at least mine) is that the user can interact with the element in the current viewport. This implies that if the element is bigger than the viewport but some parts of it are present in the viewport it should be `visible`.

_Doesn't this assume that to be visible, the bottom (and rightmost edge) of the element has to be in view?_ - Yes. Thinking twice about it maybe we should check the left top edge instead. Should I update the PR accordingly?

_In fact, all .visible() really implies is that the element is on the page and rendered._ - Isn't this the purpose of `.exists()`?
",ligaz,2016-10-20 15:18:07
815,2016-10-20 14:25:35,"> The definition of visible (at least mine) is that the user can interact with the element in the current viewport. This implies that if the element is bigger than the viewport but some parts of it are present in the viewport it should be visible.

I don't think what you have will work like that.  Specifically:

<S_CODE_TOKEN>

... will dictate that the bottom and rightmost edge _must_ be in the viewport to be considered visible, and (correct me if I'm wrong) I don't think that's your intent.

>  Thinking twice about it maybe we should check the left top edge instead. Should I update the PR accordingly?

I don't think relying on an edge (or more than one edge) being in the viewport is a good indicator of visibility, as the element you are checking may extend beyond the viewport in any, a combination, or every direction.  For this to work right, I think you'll want to make sure that a part of the viewport overlaps the client rectangle, edge-inclusive.

>  Isn't this the purpose of .exists()?

In short, no.  `.exists()` ensures the element is a part of the DOM, visible or not.  `.visible()` makes sure the element is actually rendered.  I don't think whether or not the element is in the viewport matters, and I would not be surprised if this quirk (for want of a better word) of implementation is relied upon by users of Nightmare.

Pondering out loud: this _might_ be better served as a plugin.
",rosshinkley,2016-10-20 15:18:07
815,2016-10-20 15:18:07,"Thanks, I'm closing this PR for now.
",ligaz,2016-10-20 15:18:07
814,2016-09-29 10:28:12,"I implemented a custom action 'realClick' from [another issue](https://github.com/segmentio/nightmare/issues/639#issuecomment-219873334), and it works great the first time. Upon the second usage (using the same selectors, later in the test), nothing happens.

I've tried this out in a few different test suites, and just curious how this could be occurring.

<S_CODE_TOKEN>
",adamjcsmith,2017-01-02 21:25:44
814,2016-09-29 18:29:02,"It looks like you're trying to call `.action()` on a Nightmare instance instead of the Nightmare prototype.  Is that the case?

Setting that aside, I suspect your custom action does not work the first time, either: the callback `cb` gets called with an error.  (It doesn't serialize nicely from the client code because `Error` isn't easily serializable, but that's left to  #646.)  Poking around in your client function, it turns out that the event being emitted is invalid - while the event name seems to be case-insensitive (documentation has them as `mouseDown` and `mouseUp`), the coordinates _must_ be integers.  If the bouds add to an even number, you'll end up with a float, which Electron will reject.  Try using `Math.floor` to ensure your coordinates are round integers.

_edit:_ poor wording.
",rosshinkley,2017-01-02 21:25:44
813,2016-09-28 21:53:43,"I'm trying to use .cookies.get() and .cookies.set() but it doesn't seem to be working.

<S_CODE_TOKEN>

The .cookies.get() works fine and I can console.log() and get the expected values. However, when I do .cookies.set() it seems that nothing happens.
",ScottHelme,
813,2016-10-16 02:59:49,"Can somebody comment on this? I am running into the same issue. Thanks
",lucamartinetti,
813,2016-10-16 11:37:25,"I still haven't made any progress with this. 
",ScottHelme,
813,2016-10-24 15:06:00,"The same with you @ScottHelme . Anyone help?
",albus01,
813,2016-10-25 09:01:17,"Still no solution on my end. 
",ScottHelme,
813,2017-03-10 21:53:57,"I was able to hack around this by just refreshing the page

```
nightmare
    .goto(url)
    .cookies.set({
      name: 'xxxxxxxx',
      value: 'xxxxxxxx',
      path: '/'
    })
    .refresh()",armynante,
812,2016-09-28 14:40:14,"Since there is a support for plugins implemented, it would be nice to have a list of available ones.
Initially a list of plugins with short description (and as a bonus with github stars count) could serve well.
",typekpb,
811,2016-09-28 11:08:28,"I want to open new windows for each instance nightmare.

Eg:

<S_CODE_TOKEN>

Resut :
`Example Domain`

I want to expected result as async:
`GitHub`
`Example Domain`
`GitLab`

Can you help me? Thank you~
",truthtaicom,2016-09-28 11:30:19
810,2016-09-28 06:30:59,"I'm in a situation, that on script re-run are previously inserted input fields prefilled with old values.
So calling:

<S_CODE_TOKEN>

or

<S_CODE_TOKEN>

makes the value to be appended only.
Any chance to overwrite?
Currently I'm workarounding it with:

<S_CODE_TOKEN>
",typekpb,2017-01-02 21:26:18
810,2016-09-28 09:02:50,"I think this is the desired behaviour. Following the philosophy of that, maybe you should try to insert backspace characters.
",marcelfalliere,2017-01-02 21:26:18
810,2016-09-28 09:16:52,"@marcelfalliere OK you're right, what works for me is to do:

<S_CODE_TOKEN>

however it could be handy to have some API way to do that, either some boolean flag for replace, or some clear method.
",typekpb,2017-01-02 21:26:18
810,2016-09-29 17:43:53,"In addition to sending backspace characters as @marcelfalliere said, you can send empty or falsey values to `.type()` and `.insert()` to clear the selector.

I do have a question:

> ...on script re-run are previously inserted input fields prefilled with old values.

Meaning that the values are there between runs to the same site?
",rosshinkley,2017-01-02 21:26:18
810,2016-09-29 19:48:17,"@rosshinkley 

> I do have a question:
> 
> >    ...on script re-run are previously inserted input fields prefilled with old values.
> 
> Meaning that the values are there between runs to the same site?

correct
",typekpb,2017-01-02 21:26:18
809,2016-09-26 20:43:38,"Hi guys,

Trying to leverage `nightmare` in order to be able to convert an svg to a png.
For some reason the following gets stuck on the `screenshot` action:

<S_CODE_TOKEN>

Logs:

<S_CODE_TOKEN>

using `pdf` instead of `screenshot` does not get stuck. Any idea what may be causing this?
",mikeys,2017-01-02 21:01:04
809,2016-09-28 13:51:02,"Check this out https://github.com/segmentio/nightmare/issues/761
",daniel3d,2017-01-02 21:01:04
809,2016-09-29 14:33:11,"@daniel3d is right: `.end()` queues the ending action, it still needs to be executed with a `.then()`.

Setting that aside, and this is kind of offtopic: I'm not certain Nightmare is the best tool for converting SVGs to PNGs.  Have you considered using something like [ImageMagick](http://imagemagick.org/script/index.php)?  `convert` will give you _much_ more flexibility for image manipulation.
",rosshinkley,2017-01-02 21:01:04
809,2016-09-29 21:05:09,"@rosshinkley unfortunately not for SVGs :)
",mikeys,2017-01-02 21:01:04
809,2016-12-16 20:12:00,Anyone here experiencing timeouts may want to give the #927 a try. There’s also second approach to solving this over on https://github.com/mr0grog/nightmare/tree/screenshot-with-offscreen-rendering that you might give a try.,Mr0grog,2017-01-02 21:01:04
809,2017-01-02 21:01:04,Considering this fixed with #927.  Closing.,rosshinkley,2017-01-02 21:01:04
808,2016-09-25 10:30:32,"Title says it all:

<S_CODE_TOKEN>

Any thoughts?

EDIT: I can't even end nightmare instance after then (I know that documentation says it too), but it limits me a lot.

<S_CODE_TOKEN>

By this design, I'm really limited and don't have enough control over page though.
",overflowz,2016-09-29 12:00:07
808,2016-09-29 01:44:15,"In your last `then()` block, you need to call one more `then()` after `end()` (it's in the documentation).

This should work:

<S_CODE_TOKEN>
",trakout,2016-09-29 12:00:07
808,2016-09-29 12:00:04,"Alright, thanks.
",overflowz,2016-09-29 12:00:07
807,2016-09-25 03:39:30,"This adds a document for [mouseover(selector)](https://github.com/segmentio/nightmare/blob/2c3284723bc5c7d82a64ac8130af3b84774e4d54/lib/actions.js#L126-L137).
",38elements,2016-10-20 04:29:10
807,2016-10-20 04:00:23,"Ah, this must have gotten overlooked.  Thanks!
",rosshinkley,2016-10-20 04:29:10
806,2016-09-24 18:55:59,"I am using nightmare.js (awesome work by the way) to detect variables attached to the window object by some script.

So the setup is pretty basic. I have a web server serving a simple html file. Notice the `var beforeKeys = Object.keys(window)`

**thepage.html**

<S_CODE_TOKEN>

The way this page is used, with nightmare, is like so :

<S_CODE_TOKEN>

The injected scripts, at `scriptPath`, looks like this :

<S_CODE_TOKEN>

So to translate this code into what it does :
- nightmare loads thepage.html
- the `beforeKeys` variable holds the keys of the window object
- nightmare injects the scripts
- the scripts does its stuff
- at the end, it logs the difference between the keys before the script and after the script

So the difference **should be** an array containing `[""foo"", ""foo2"", ""foo3"", ""bar"", ""qux""]`. 

**But it is not**. It is an array containing `[""bar"", ""qux""]`

Something to consider : when I test this in a classic web browser (let's say Google Chrome) I get the expected result. I use the same content but with a one line addition for `<script src=""scriptPath.js""></script>`, just before the `</html>`.

Weird ? Or am I missing something ? The test case is of course pruned from the actual work done here... but the idea is here. 
",marcelfalliere,2017-01-02 21:26:58
806,2016-10-04 15:18:35,"Hm, are any of the variables you're testing for defined on the global/window scope _before_ your injection?  I can recreate this behavior if the variables are defined prior to `.inject()`, as then they would already exist on the global scope.

It's worth pointing out that your consideration is not exactly the same thing as the test you've written.  In your test, the `init()` function is injected after the page is loaded, whereas in your consideration example, they are loaded together.  It's a small difference, and I don't _think_ it would be causing this, but it's worth thinking about.
",rosshinkley,2017-01-02 21:26:58
805,2016-09-23 20:16:15,"Hi guys,
why the way to loading/render pages more fast ? Have parameters for this ?

thx a lot.
",jonatasfreitasv,2016-10-20 17:52:19
805,2016-09-29 14:47:18,"That depends on what you mean.  If you've got assets - large images, for example - you could tap into `session.webRequest.onBeforeRequest()` to filter content that could slow your load process down.  There's a [plugin that you might find useful](https://github.com/rosshinkley/nightmare-load-filter) that does this.

As for speeding up the actual rendering process, that's internal to Chromium - I don't know of options offhand, but the [`BrowserWindow`](https://github.com/electron/electron/blob/master/docs/api/browser-window.md) documentation and perhaps the [Chromium switch list](http://peter.sh/experiments/chromium-command-line-switches/) (for use with [`switches`](https://github.com/segmentio/nightmare#switches)) might offer some options for you to tinker with.
",rosshinkley,2016-10-20 17:52:19
805,2016-10-25 19:44:48,"Thx a lot @rosshinkley 
",jonatasfreitasv,2016-10-20 17:52:19
804,2016-09-23 17:19:06,"I need to access new window from nightmare and manipulate it as I do in main window. Is that even possible?

<S_CODE_TOKEN>

basic html:

<S_CODE_TOKEN>

EDIT: Don't get me wrong, I've searched same questions here, but isn't there any workaround? If not, can I just block opening new window and load the new page into the current one?

EDIT2: I've noticed, that if you specify `show: false` opening new tab/window is shown by default. Any thoughts about this? It's getting annoying though.
",overflowz,2017-01-02 21:29:11
804,2016-09-29 17:48:55,"Out of the box? no.  Dealing with multiple instances of `BrowserWindow` isn't currently supported in Nightmare.  (Memory serving, it's one of the features talked about for a future version in #593.)

You can _kind_ of skirt this issue now, but it depends largely on what you need.  I'd suggest checking out [`nightmare-window-manager`](https://github.com/rosshinkley/nightmare-window-manager).  It's limited, but might be enough to help you skate by.
",rosshinkley,2017-01-02 21:29:11
804,2016-09-29 20:13:40,"Thanks for the reply! I've tried nightmare-window-manager too, but still I'm facing second issue. no matter if I specify `show: false` new window always opens up visible.
",overflowz,2017-01-02 21:29:11
804,2017-01-02 21:29:11,Moving this to nightmare-window-manager.,rosshinkley,2017-01-02 21:29:11
803,2016-09-23 11:22:04,"Trying to work through the example. But nothing really happens and it appears the Electron process never really starts judging by the debug output.

File:

<S_CODE_TOKEN>

This is the DEBUG output:

<S_CODE_TOKEN>

I'm running with the following:
- MacBook Pro with OS X El Capitan (`10.11.6`)
- Node `6.3.1`, npm `3.10.3` (installed through nvm `0.29.0`)

Same happens on nightmare versions `2.6.1` and `2.7.0`.
",spoike,2016-09-23 12:20:35
803,2016-09-23 12:20:35,"I just realized the error. Nightmare doesn't run anything until you execute the run with:
- `yield`ing the chain (which needs to be inside a generator function)
- having a `.run()` at the end of the chain
- using `.then()` at the end of the chain
",spoike,2016-09-23 12:20:35
803,2016-11-03 08:16:26,"> - `yield`ing the chain (which needs to be inside a generator function)
> - having a `.run()` at the end of the chain
> - using `.then()` at the end of the chain

This should go in the API docs in my opinion

Edit: Also worth adding `.run` expects a **callback**, leaving it empty will result in `TypeError: Cannot read property 'apply' of undefined` It took me way too long to realize that. And another piece of info being 

> .run() is really intended for internal use and usage isn't directly supported. Should it be?

from #501, also check out #575 for more info on that
",sol-invictus481,2016-09-23 12:20:35
802,2016-09-23 10:37:26,"I have two randomly appearing errors after tests passed:

![screenshot-6](https://cloud.githubusercontent.com/assets/3906376/18780021/047799dc-8195-11e6-8849-4c32ed47eb97.png)

![screenshot-5](https://cloud.githubusercontent.com/assets/3906376/18780019/00ce95d8-8195-11e6-8d2f-b94e7b449956.png)

Any advice, what do I doing wrong?

Basically tests are look like this:
`describe('Homepage', () => {

  it('returns code 200', () => (

<S_CODE_TOKEN>

  ));

});`

But I've got a problems described and solved at [""Electron instances not destroyed #688""](https://github.com/segmentio/nightmare/issues/688)
So, I've added this code: 
`      .then(() => {

<S_CODE_TOKEN>

It didn't helped.
",erisnuts,
802,2016-09-28 13:22:38,"Can you share the full test how do you access nightmare variable in the .then() function? and what is the problem you are trying to solve by using this nightmare.end(); ...... 

[.end() must be called before the .then()... ](https://github.com/segmentio/nightmare/issues/761)
",daniel3d,
801,2016-09-22 20:34:35,"Finally got round to producing a minimum case for the weird debug behaviour mentioned in #405. Looks like it probably is due to a non-character escape after all.

I'm using nightmare version `2.7.0` on node `6.4.0`. I get this weird debug output:

<S_CODE_TOKEN>

<S_CODE_TOKEN>

Here's the full debug log:

<S_CODE_TOKEN>

Note the indentation is different for the weird line.
",willclarktech,
800,2016-09-21 22:06:26,"Fixes ReferenceError when called in Strict Mode.

see issue #799
",sram1337,2016-10-20 04:29:01
800,2016-10-20 03:59:46,"At some moment, we should _probably_ prop up linting as a part of the build process (see long-standing #364), but I won't hold up this PR for that.  Including.  Thanks!
",rosshinkley,2016-10-20 04:29:01
799,2016-09-21 22:00:05,"Calling `nightmare.wait('#someID')` while executing in Strict Mode (ie `node --use_strict`) causes the following error:

<S_CODE_TOKEN>

I will include code that can reproduce the error below.

The issue is that `wait` calls an `eval` which tries to create a variable in the local scope, and then use that variable.

actions.js:375

<S_CODE_TOKEN>

When executing in Strict Mode, `eval` can't create local variables [(see section 1.1 here)](http://www.2ality.com/2014/01/eval.html).  So after the `eval`, `elementPresent` doesn't exist.

I submit a [PR](https://github.com/segmentio/nightmare/pull/800) for a fix.  I think its as easy as declaring `elementPresent` before calling `eval`.

Thanks,
Sam

Edit:

breaksOnStrict.js

<S_CODE_TOKEN>

Run the above with:
`node --use_strict breaksOnStrict.js`

it should produce the above error.

Edit2:
Link to PR
https://github.com/segmentio/nightmare/pull/800
",sram1337,2016-10-20 17:52:45
799,2016-10-20 17:52:45,"Fixed with merged PR, closing.
",rosshinkley,2016-10-20 17:52:45
798,2016-09-20 10:36:22,"well. I have read the doc. As it said, we can use `.on('page', function(type, message))` to listen the page event.

well. I can print the alert message in the iTerm now. But how could I print the message through the browser alert widow?
",CommanderXL,2016-10-20 17:55:15
798,2016-10-04 20:36:40,"I'm not entirely sure what you're asking: do you want to show the alert window?  If so, that would require [overriding the preload script](https://github.com/segmentio/nightmare#custom-preload-script).  Note, though, that `alert`, `confirm`, and `prompt` will cause Nightmare to hang if you actually show the dialog boxes.
",rosshinkley,2016-10-20 17:55:15
798,2016-10-20 17:55:15,"Closing for lack of activity.  If this is still an issue, feel free to reopen/open a new issue.
",rosshinkley,2016-10-20 17:55:15
797,2016-09-19 23:40:17,"Could you please provide a file upload example ?
",mmacedoeu,2016-09-21 21:45:07
797,2016-09-21 21:35:29,"I believe file upload was removed and implemented as a plugin.  Here's the plugin + example:
https://www.npmjs.com/package/nightmare-upload

Issue inquiring about upload removal:
https://github.com/segmentio/nightmare/issues/235
",sram1337,2016-09-21 21:45:07
796,2016-09-18 18:05:32,,antpaw,2016-10-20 04:29:44
796,2016-10-20 03:57:14,"All for removing unnecessary dependencies.  Thanks!
",rosshinkley,2016-10-20 04:29:44
795,2016-09-17 22:18:21,"This might be a good fix for any site that has issues with the code injection.

Fix for #791 
",drew-wallace,2016-12-30 18:51:05
795,2016-12-30 18:50:55,"seems slightly bizarre that this is necessary, but browsers ¯\_(ツ)_/¯ thanks!",reinpk,2016-12-30 18:51:05
794,2016-09-16 19:29:58,"Seeing nightmare hang on certain webpages where as those same pages load fine running in plain electron (same version)

<S_CODE_TOKEN>

<S_CODE_TOKEN>
",ecandino,2017-01-05 03:54:15
794,2017-01-02 21:32:23,Are you (or anyone else) still having this issue?,rosshinkley,2017-01-05 03:54:15
794,2017-01-05 20:27:10,@rosshinkley yes still seeing this issue. Using electron 1.3.4 and nightmare 2.7.0 work fine. ,ecandino,2017-01-05 03:54:15
793,2016-09-15 19:36:46,"I've been trying to get my nightmare script to click on an element, which opens up a modal dialog. Can never get the dialog to actually open, so the click essentially does nothing.

I have tried
- `.click('img#elementid')`
   ..but nothing happens in either the console or the rendered browser
- `.evaluate(function() { 
    $('img#elementid').click();
  })` (That jQuery statement works in the browser.)
    ..but only got an error logged in the console running my nightmare script saying       'window.showModalDialog is not a function'. (Again, does not by doing this in the browser)
- Based on the previous error, I  viewed the source of the page, copied the 'onclick' function that the 'img#elementid' calls to, and pasted that into a nightmare 'evaluate' function, followed by the actual call it makes.

<S_CODE_TOKEN>

  ..but still got the 'window.showModalDialog is not a function' error.

What am I missing?
",shanewignall,2017-01-02 21:33:16
793,2016-10-04 20:20:09,"Sometimes `.click()` does not do what you might expect.  It may be worth giving #619 a read.

Setting that aside, when and where dose `window.showModalDialog` get added?
",rosshinkley,2017-01-02 21:33:16
793,2016-11-08 15:48:24,"@rosshinkley Sorry about the delay, and thanks for the response! It's added in that evaluate function I pasted above. That's the 'onClick' method that gets called the button is clicked. Still stumped on this.. I will give 619 a read
",shanewignall,2017-01-02 21:33:16
793,2016-11-20 17:26:33,"> It's added in that evaluate function I pasted above.

Possible I'm just blind, but `window.showModalDialog` is not added in the code you've posted.  It gets called but not added, which is why I was wondering where it got added.
",rosshinkley,2017-01-02 21:33:16
793,2017-01-02 21:33:16,"Closing for inactivity.  If you're still having this problem, feel free to reopen.",rosshinkley,2017-01-02 21:33:16
792,2016-09-15 11:33:29,"**tldr** Any plans to support WebDriver protocol?

We currently screenshot-test our web app the following way:

[Gemini utility](https://github.com/gemini-testing/gemini) ⇔ [PhantomJS](http://phantomjs.org)

Or:

[Gemini utility](https://github.com/gemini-testing/gemini) ⇔ Selenium server ([homebrew](https://github.com/Homebrew/homebrew-core/blob/master/Formula/selenium-server-standalone.rb)) ⇔ [PhantomJS](http://phantomjs.org)

(Arrows ""⇔"" use [WebDriver protocol](http://www.w3.org/TR/webdriver/).)

It would be very useful to be able to replace PhantomJS (and Selenium?) with Nightmare. Nightmare approach - wrapping Electron - looks very promising. However, I have found no mention of WebDriver protocol support in Nightmare.

Do you plan to support [WebDriver protocol](http://www.w3.org/TR/webdriver/)? Does it fit with Nightmare goals at all?

Probably related:
- https://github.com/nightwatchjs/nightwatch/issues/856
- https://github.com/electron/electron/issues/4834
- Electron seems to provide WebDriver support for [_Electron_ apps](https://github.com/electron/electron/blob/master/docs/tutorial/using-selenium-and-webdriver.md) testing. But I'm looking for support for usual web applications.
",shamrin,
792,2016-11-22 02:50:50,+1,jessyZu,
791,2016-09-14 21:59:41,"OS: Windows 10
node: 5.10.1
nightmare: 2.7.0
electron: electron-v1.3.6-win32-x64

Navigate to wells fargo and try to do anything.

<S_CODE_TOKEN>

The electron window will come up with wellsfargo.com loaded and do nothing.
Open the console and you will see two errors, both saying `__nightmare is not defined`

I tested the yahoo search example and it worked fine. My guess is that it's forgetting the injection that happened.

Further investigation:
If you inspect the `window` object you will notice `__nighmare` no longer exists under `window.__nightmare`, it is now under `window[""""].nightmare`
",drew-wallace,2016-12-30 18:51:17
791,2016-09-17 20:41:14,"I changed both of the ipc declarations in javascript.js to:

<S_CODE_TOKEN>

And it works now.
",drew-wallace,2016-12-30 18:51:17
791,2016-09-17 22:15:19,"Making a PR...
",drew-wallace,2016-12-30 18:51:17
791,2016-10-04 03:33:42,"huh, _5300_WellsFargoEmployees also returns undefined
",1mike12,2016-12-30 18:51:17
791,2016-12-30 18:51:17,merged PR,reinpk,2016-12-30 18:51:17
790,2016-09-12 16:08:52,"I am loading a page and I have a bad path to a local script (which I can fix). But while I was debugging this problem my test was failing due to a wait timeout. It turned out that I was getting a 404 during the page load and I did not get any error messages despite attaching to the `'page'` and `'log'` functions.

What is the right way to detect 404's during page load?
",justinmchase,2016-10-04 15:27:22
790,2016-09-18 19:50:22,"Non-200 codes are not treated as errors - pages that respond with non-200 codes might be expected behavior.

[`.goto()`'s return](https://github.com/segmentio/nightmare#gotourl-headers) will include metadata about the page load, including the response code.  A quick off-the-cuff example:

<S_CODE_TOKEN>
",rosshinkley,2016-10-04 15:27:22
790,2016-09-18 20:52:38,"Perfect, thanks.

On Sun, Sep 18, 2016, 2:50 PM Ross Hinkley notifications@github.com wrote:

> Non-200 codes are not treated as errors - pages that respond with non-200
> codes might be expected behavior.
> 
> .goto()'s return https://github.com/segmentio/nightmare#gotourl-headers
> will include metadata about the page load, including the response code. A
> quick off-the-cuff example:
> 
> var nightmare = require('nightmare')();nightmare.goto('http://example.com/404')
>   .then(function(gotoResult) {
>     console.dir(gotoResult.code);
>     return nightmare.end();
>   })
>   .then(()=>console.log('done'));
> 
> —
> You are receiving this because you authored the thread.
> Reply to this email directly, view it on GitHub
> https://github.com/segmentio/nightmare/issues/790#issuecomment-247870576,
> or mute the thread
> https://github.com/notifications/unsubscribe-auth/AAAq3vhJ8Q7ktzfMr_fC1CfLpGGp5uiuks5qrZYDgaJpZM4J6wUO
> .
",justinmchase,2016-10-04 15:27:22
790,2016-09-21 14:29:35,"Im not sure this is clear in the documentation because it states

<S_CODE_TOKEN>

Maybe providing an example with this basic usage provided in @rosshinkley's comment would make it easier to understand?
",Oted,2016-10-04 15:27:22
790,2016-09-29 14:18:35,"Hm, I think I see what you're saying, @Oted.  The problem here is defining what a ""load success"" is.  Any page that completes the HTTP request - be it an HTTP success (eg, a 200) or an HTTP failure (eg, a 404) - is considered a successful request.  The documentation should be worded more carefully to make that clearer.

_Edit:_ I take back what I said, and shouldn't have fired totally from the hip: this has come up before, and I had forgotten the documentation had already been updated.  The docs are pretty clear, I think:

> Note that any valid response from a server is considered “successful.” That means things like 404 “not found” errors are successful results for goto. Only things that would cause no page to appear in the browser window, such as no server responding at the given address, the server hanging up in the middle of a response, or invalid URLs, are errors.
",rosshinkley,2016-10-04 15:27:22
789,2016-09-09 07:05:27,"I tried the clearCache custom electron action example but not working, the script just hanged at the call of clearCache action, what could cause this? Thx
",rullyramanda,2016-09-10 02:40:29
789,2016-09-09 08:45:43,"use nightmare.cookies.clearAll()
it's work
",vshvydky,2016-09-10 02:40:29
789,2016-09-09 09:17:07,"So that function is also clear the browser (in this case Electron) cache? because what i want to achieve is to clear the browser cache not the cookies though.
",rullyramanda,2016-09-10 02:40:29
789,2016-09-09 10:19:19,"<S_CODE_TOKEN>
",vshvydky,2016-09-10 02:40:29
789,2016-09-10 02:40:24,"ok, thanks for the code i'll try to apply it in my code
",rullyramanda,2016-09-10 02:40:29
788,2016-09-08 19:52:20,"Adds an api to forcibly kill the child process immediately, as discussed here: https://gitter.im/rosshinkley/nightmare?at=57d17dcb68f483b41cb0491a
",nickstanish,2016-10-20 04:30:22
788,2016-10-20 03:55:23,"This looks great.  Thanks!
",rosshinkley,2016-10-20 04:30:22
787,2016-09-08 14:39:31,"sory
",vshvydky,2016-09-09 13:19:11
786,2016-09-07 16:15:28,"Hi, I'm trying to pass address from forEach loop, and its not working, 
maybe this is bad idea from its background, please share any ideas.

the code i'm using:

<S_CODE_TOKEN>

On the error I catching it says [object Object] 
Thanks :)
",VZnode,2016-09-08 13:47:35
785,2016-09-07 15:44:44,,vitorgalvao,2016-10-20 04:28:48
785,2016-10-20 04:28:41,"Thanks for the eyes!
",rosshinkley,2016-10-20 04:28:48
784,2016-09-07 09:08:54,"Hello,

Went through electron docs but it's still not obvious how to intercept all ajax responses? I would need something like: http://api.jquery.com/ajaxcomplete/

Thanks!
",barczaG,
784,2017-02-05 01:33:00,"I think you can do it by using 'did-get-response-details' event.

<S_CODE_TOKEN>

But I don't know if it's possible to read the actual response data.

More info:
- http://electron.atom.io/docs/api/web-contents/
- https://github.com/segmentio/nightmare/#onevent-callback",d3ce1t,
784,2017-02-10 03:50:30,"For what it's worth, you could also capture it from preload using something like (from @nickstanish):

<S_CODE_TOKEN>",rosshinkley,
783,2016-09-07 08:08:31,"Hello @reinpk ,
I am the member of [cdnjs](https://github.com/cdnjs/cdnjs) project.
We want to host this library.
But there is a question want to ask.
I want to confirm which file is needed to be grab.
I think the main file is `lib/nightmare.js` on [npm](https://www.npmjs.com/package/nightmare).
And are there any other dependency file also needed under `lib/` on npm?
Please help me confirm that.
Thanks for your help!

https://github.com/cdnjs/cdnjs/issues/8570
",kennynaoh,2017-01-02 21:33:35
782,2016-09-06 18:17:04,"`Nightmare.action()` does not work as I would've expected it to, where `done` is always the last argument.

<S_CODE_TOKEN>

<S_CODE_TOKEN>

results in:

<S_CODE_TOKEN>

After looking at [actions.js](https://github.com/segmentio/nightmare/blob/2.7.0/lib/actions.js#L55-L62), we can see that the args are backwards in `evaluate_now()`. The correct version would be:

<S_CODE_TOKEN>
",stevenvachon,
782,2016-09-09 21:29:49,"Defining multiple arguments is a bit weirder:

<S_CODE_TOKEN>
",stevenvachon,
782,2016-09-09 21:44:24,"Optional arguments are even weirder:

<S_CODE_TOKEN>
",stevenvachon,
782,2016-11-01 10:16:28,"I also had to add a `return` for values to get passed back:

<S_CODE_TOKEN>
",jeffijoe,
781,2016-09-06 12:59:17,"modified:   lib/actions.js
- Set soft timeout if second argument passed with fn is typeof number

modified:   test/index.js
- Added test for .wait(fn, timeout) - Test fails if no timeout is passed
- Added test for .wait(fn, timeout, fnArgs...) - Test fails if no timeout is passed
",noahtkeller,2017-01-28 14:48:14
781,2016-09-06 13:04:30,"This only works if the number of arguments passed to the .wait() method is at least 2 greater than the number of arguments that the wait fn accepts.

The following will timeout after nightmare's waitTimeout is reached:

<S_CODE_TOKEN>

Where this will soft timeout after 1500msec

<S_CODE_TOKEN>

This will also soft timeout

<S_CODE_TOKEN>
",noahtkeller,2017-01-28 14:48:14
781,2016-09-07 11:30:34,"The tests are passing locally, and it's showing failed on a part I don't think I interfered with. 
",noahtkeller,2017-01-28 14:48:14
781,2017-01-28 14:48:14,Stale,noahtkeller,2017-01-28 14:48:14
780,2016-09-05 22:50:44,"Adding `document.evaluate()` before regular `document.querySelector()` calls, transparently handling XPath expressions. 

Could be an initial implementation to target #775 

Thanks,
Gustavo
",gjmveloso,2016-12-30 19:53:34
780,2016-09-13 17:20:10,"Hi @rosshinkley,

Can you help me on this? I'm receiving the method `cssLookup` is not defined and I'm pretty sure I'm missing something obvious. An outside eye could help me a  lot.
",gjmveloso,2016-12-30 19:53:34
780,2016-10-20 04:27:44,"A quick look at this - you're trying to call `cssLookup` from within an `evaluate_now`ed function when the function is defined outside of the evaluated context.  That closed-over scope is not carried to the evaluation as it crosses the IPC boundary.  (See [here](https://github.com/rosshinkley/nightmare-examples/blob/master/docs/common-pitfalls/variable-lifting.md) for a slightly longer explanation.)  You'll probably want to tuck that function into the preload.

That said... I'm not _entirely_ sure this is necessary.  Is there a problem that XPath solves that CSS selectors cannot?  More generally, are there users out there that this feature would be of use to?
",rosshinkley,2016-12-30 19:53:34
780,2016-10-20 15:23:02,"Hi @rosshinkley,

Thanks for your response. XPath is the only available option to select elements by the inner text, for instance.

It's widely used on Selenium space, for example.

Thanks,
Gustavo
",gjmveloso,2016-12-30 19:53:34
780,2016-11-02 15:11:11,"Please make this happen 😄 
",jeffijoe,2016-12-30 19:53:34
780,2016-12-30 19:53:34,"@gjmveloso as @rosshinkley mentioned we've decided to keep css lookup for minimal simplicity. if there's a super clean, tested and ready-to-go PR may reconsider!",reinpk,2016-12-30 19:53:34
779,2016-09-04 07:40:22,"Thanks for this library, it's really awesome.
I've had to deal with a new use case recently, and I didn't see any example related.

So my question is: Can I use Nightmare, somehow, to post some data through the HTTP body?
Example of what I'd like, using the [request](https://www.npmjs.com/package/co-request) library:

<S_CODE_TOKEN>
",jgrancher,
779,2016-09-05 15:35:25,"Depends on what you mean.  If you're trying to issue a `POST` from the client, you could use `.evaluate()` and `XMLHttpRequest` (or use/`.inject()` your tool of choice) to issue the request.

Could you provide more information about your use case?
",rosshinkley,
779,2016-09-06 01:02:08,"@rosshinkley I've got two options:
- Going from a ""Page A"" and filling a form. Once submitted, it leads me to ""Page B"", which is a results page. 
- Or going straight to ""Page B"", but with a 'POST' method, and some Body `form-data` parameters. This will also lead me to the ""Page B"" results.
  Screenshot from Postman: 
  <img width=""905"" alt=""postman"" src=""https://cloud.githubusercontent.com/assets/5517450/18258786/8382a286-741f-11e6-91c9-c4295440a3bb.png"">

The second option would be quicker as I would skip the first page. I wondered is such a thing is possible with Nightmare. Something like:

<S_CODE_TOKEN>

Hope that's clear enough! Thanks :)
",jgrancher,
779,2016-10-26 13:57:48,"I have a similar problem, have to write a bunch of tests to cover some functionality of a project we're working on and being able to do this would make the login step much faster, particularly given that we want to run every test in as isolated a fashion as possible. 
",gregrafferty,
779,2017-01-28 14:07:03,"method post is not part of ""header"" the original question has it correctly.  I suppose if one could figure out actions maybe some serious hackery could be done there. 
really needs to be a new verb method in Nightmare class itself. 
Change or create new methods for .GET  .POST  .DELETE .PUT .SEARCH implement accordingly. 
It seems like this is a core electron problem. 
https://discuss.atom.io/t/add-http-post-method-to-electron-webview/29702
It comes back to the metaphor of the software.  It's a browser and it is impossible from a URL input to perform anything but a http GET from the URL address line.   `.goto` is the same as typing into the browser a location, which is only ever going to be a .GET method. 
So running arbitrary js fun is the only way. 

> You might be able to send a POST manually through AJAX/fetch etc then replace the HTML of the page in the webview with the HTML returned by your manual POST. You can achieve this using .executeJavaScript() and/or Electron's IPC.

Is there an decent example for doing this?  ",kmacpher67,
778,2016-09-02 23:39:36,"Hi there,

I'm trying to run nightmare example but no luck at all. This is what I have so far:

<S_CODE_TOKEN>

This fails and says Error: Expected {} to equal 'github.com'

Trying out the example posted in the readme timeouts.
",hyalkaf,2016-09-05 23:07:02
778,2016-09-05 15:31:32,"Promises are asynchronous.  `breadcrumb` is equal to the Nightmare instance with the queued actions when you run `expect`.  Also, the way you have your Mocha method set up, it will expect your tests to be synchronous.

With that in mind, let's modify your test case.  Something like:

<S_CODE_TOKEN>

It's also worth pointing out that the test was originally using `mocha-generators`, and in cleaning up the readme to remove the dependencies, the example didn't get modified properly.  There is an open PR (#758) to clean it up.
",rosshinkley,2016-09-05 23:07:02
778,2016-09-05 23:06:59,"Thank you so much :). 
",hyalkaf,2016-09-05 23:07:02
778,2016-09-05 23:13:57,"The example you gave worked fine but when I try it on a different test I still get the timeout. Here is my code: 

<S_CODE_TOKEN>

I'm trying to login to Wordpress but it timeouts
",hyalkaf,2016-09-05 23:07:02
778,2016-09-05 23:42:10,"Without digging into it too deeply, you may want to consider adding a `.catch()` block.  Something like:

<S_CODE_TOKEN>

Otherwise, use `DEBUG` and see if that doesn't give you some useful output.
",rosshinkley,2016-09-05 23:07:02
778,2016-09-08 03:49:06,"This is what the DEBUG flag is showing:

  nightmare queuing process start +0ms
  nightmare queueing action ""viewport"" +2ms
  nightmare queueing action ""goto"" for http://example.org/wp-login.php +2ms
  nightmare queueing action ""wait"" +0ms
  nightmare queueing action ""type"" +0ms
  nightmare queueing action ""type"" +0ms
  nightmare queueing action ""click"" +0ms
  nightmare queueing action ""wait"" +0ms
  nightmare queueing action ""evaluate"" +0ms
  nightmare running +1ms

Not sure what I can draw out of this.  This is just a placeholder http://example.org/wp-login.php
Also catch does't return any errors. 
",hyalkaf,2016-09-05 23:07:02
777,2016-09-02 23:03:48,"Because 0 is falsy, type() and insert() evaluate the `text || '' == ''` case instead of actually typing the value. Hence `type(selector, 0)` clears the selector.

The workaround is to `type(selector, '0')`.
",yoz,2016-10-20 17:56:06
777,2016-09-05 18:49:09,"This is (I'd think) expected behavior.  The documentation could probably be a little clearer, stating that `.type()` and `.insert()` _should_ take strings, but don't necessarily have to (eg, `.type('#someInput', true)` types the string ""true"" the selected element).  Both functions do their best with what they are given.  To that end, I don't think it's a particularly great idea to enforce only strings.  (I'm open to counterargument, though.)

That said, the documentation _is_ pretty clear about what happens with falsey values, which as you note, `0` is an example.
",rosshinkley,2016-10-20 17:56:06
776,2016-09-01 15:58:15,"Hi
I am encountering the following error when I bundled the system.config in my HTML Script using a gulp-task. 

angular2.js:23925 EXCEPTION: TypeError: Cannot read property 'indexOf' of undefined

Can someone tell me where I am breaking.
",kodali2446,2016-10-20 17:56:28
776,2016-10-04 20:39:05,"Are you trying to bundle Nightmare into an Angular2 application?  I'm not exactly clear on what the problem is.  Could you provide more information?
",rosshinkley,2016-10-20 17:56:28
776,2016-10-20 17:56:28,"Closing for inactivity.  If this is still an issue, feel free to reopen/open a new issue.
",rosshinkley,2016-10-20 17:56:28
775,2016-09-01 15:01:59,"Hi,

I was thinking on how we can add XPath selectors support on nightmare.js and I'd tried the easy path - relying directly on `$x()` helper, available on Chrome. 

Not sure why it's not working within Electron/webContents.

Thoughts?

Thanks,
Gustavo
",gjmveloso,2016-09-05 19:30:22
775,2016-09-05 18:30:06,"According to the [Command Line API Reference](https://developers.google.com/web/tools/chrome-devtools/debug/command-line/command-line-reference):

> This API is only available from within the console itself. You cannot access the Command Line API from scripts on the page.

In other words, `$x()` isn't available from an evaluation context.

You could use `document.evaluate()`, it takes an XPath expression as an argument.  [MDN](https://developer.mozilla.org/en-US/docs/Introduction_to_using_XPath_in_JavaScript) has a good introduction on this topic.
",rosshinkley,2016-09-05 19:30:22
774,2016-09-01 13:58:42,"I have a loop containing a setTimeout inside the nightmare.evaluate function. It seems that there is a race condition where the nightmare.end() function executes faster than nightmare.evaluate. How can I prevent that from happening ? Note that I am not using multiple evaluates , all methods I use only once.
",ChristosChristofidis,2016-10-20 17:57:10
774,2016-09-05 15:21:59,"`.evaluate()` is intended to be synchronous, at least for now.  I suspect that may be at least part of your problem.

There is a [plugin](https://www.npmjs.com/package/nightmare-evaluate-with-callback) that takes care of this, as well as an in-progess PR (#573) to try to address it.
",rosshinkley,2016-10-20 17:57:10
774,2016-10-20 17:57:10,"#819 should solve this problem.  Closing.
",rosshinkley,2016-10-20 17:57:10
773,2016-09-01 11:55:54,"Opening this issue to let you know about a new package that I've created that allows deferred returns against evaluates. We're using this so that we can test that ajax requests return valid data packages, but it could be used for any custom ""waitUntil..."" type of action.

https://www.npmjs.com/package/nightmare-evaluate-with-callback
",caseygoodhew,2016-09-05 19:28:34
773,2016-09-05 19:28:34,"I was _really_ hoping to get something similar into core with #573.  If you want to pick that up and run with it, great - otherwise, I'm going to try to pick it up and submit a solution as time permits.

In the meantime, though, thank you.  This will help many outstanding problems.
",rosshinkley,2016-09-05 19:28:34
772,2016-09-01 08:14:52,"It seems that nightmare is not running unless I chain a `.then()` (or other promise 'handler') at the end of the promises chain. I can see the actions get queued, but not ran.

Is this expected behaviour?
",thewizarodofoz,2016-10-20 17:57:53
772,2016-09-05 13:34:54,"code example:

<S_CODE_TOKEN>

This code doesn't run Nightmare, unless I change `runScript()` to `runScript().then(...)` (or put a `then()` after the last nightmare function in `doSomething()`.
",thewizarodofoz,2016-10-20 17:57:53
772,2016-09-05 15:46:52,"Yes, this is expected behavior.  Nightmare actions, as you noted, are queued but not run until `.then()` is executed.
",rosshinkley,2016-10-20 17:57:53
772,2016-10-10 20:11:30,"Wow, just lost 15 min trying to figure out why nightmare is not starting and exiting the script without any log. 😄 
",mateusz-no,2016-10-20 17:57:53
771,2016-08-30 22:21:28,"Is it possible to user Nightmare with webpack to create a script that can be used for web automation tasks in a regular browser? I have poked around but not sure what the best approach is here.

Currently, I use a JQuery script bundled up using Webpack, but looking for an alternative.
",rkpatel33,2017-01-02 21:36:15
771,2016-08-31 14:59:46,"No, not possible. Nightmare works with electron (which exposes chrome APIs to node)
",albinekb,2017-01-02 21:36:15
770,2016-08-30 15:48:09,"On some sites I have noticed that the .goto() call times out when visiting certain urls while running on headless linux.

I followed advice on another thread and setup xvfb on my ubuntu server, and when running scripts most succeed, however I have noticed that some sites appear to never load. I have set `DEBUG=nightmare*` and see that I receive 200 codes from the server, and I see it loads all the resources, it just doesn't ever finalize.

Please see the attached script:
### Test Script

<S_CODE_TOKEN>

This will always result in a a navigation timeout error. Change the link to almost any other site, such as http://google.com and it works fine. This issue is not apparent when running locally on OSX, even with xvfb.
### Standard Output (working)

<S_CODE_TOKEN>
### Headless Output (not working)

<S_CODE_TOKEN>
",noahtkeller,
770,2016-08-31 00:31:38,"It consistently fails when loading this resource in headless: 

<S_CODE_TOKEN>

Which returns the following

<S_CODE_TOKEN>

I updated the test script to try the following, but it did no good:

<S_CODE_TOKEN>
",noahtkeller,
770,2016-09-05 17:37:59,"Hm, I can't reproduce the issue with 2.6.1 on my headless setup.

I don't _think_ it's a security problem, and what's truly unfortunate is that the code is the generic networking timeout.  What version are you using on your headless setup, and how are you executing headlessly?
",rosshinkley,
770,2016-09-06 12:24:29,"Starting with:

`xvfb-run --server-args=""-screen 0 1920x1080x24"" node test.js`

Versions:
`nightmare 2.6.1`
`electron-prebuilt 1.3.4`
`node 6.3.1` && `node 4.4.4`
`Ubuntu 14.04.5 LTS`
",noahtkeller,
769,2016-08-30 14:55:09,"I need to wait for ""DOMContentLoaded"" + images, so I need the full ""load"" event. Having difficulty finding a way to make it work.

These didn't work:

<S_CODE_TOKEN>

<S_CODE_TOKEN>
",stevenvachon,2016-09-05 16:42:28
769,2016-08-30 15:17:12,"Hmm, it turns out that my issue was not with a ""load"" event, but with `documentElement.offsetHeight` calculations. Doing `wait(50)` fixes it -- so it's just an old browser issue.

My original question stills stands though. This needs to be documented somewhere at least, so it might as well be here.
",stevenvachon,2016-09-05 16:42:28
769,2016-09-05 16:18:43,"Nightmare, by default, will wait for the [`did-stop-loading`](https://github.com/electron/electron/blob/master/docs/api/web-contents.md#event-did-stop-loading) event.  This event is typically emitted once the page is ""finished"" loading (be it from the original 20x completing or `stop` being called).  At that point, the page should already be in a ready state.  (Should.  If it isn't, or you have a a countercase, I'd love to hear about it.)

However, `complete` may not be helpful: you could still have client-side scripts issuing requests for assets to load asynchronously, or already-loaded assets modifying the DOM in flight.  I'm not _entirely_ sure what your use case is, though, and I suspect there may be more to it than I think.
",rosshinkley,2016-09-05 16:42:28
769,2016-09-05 16:42:28,"Thanks!
",stevenvachon,2016-09-05 16:42:28
769,2016-10-11 18:31:05,"I'm actually having a similar issue. I have found that using the above `wait` function _does_ work, but not consistently on a headless linux setup.

The reason I am not simply relying on nightmare's idea of when the page is finished loading is that in my testing, the `did-stop-loading` event is fired once there is a significant (but small) amount of time after any assets (scripts, css, iframes) referenced on the page have finished loading. The event is then fired again after those assets have loaded, but by that point, nightmare has already moved on and (in my case) taken a screenshot of a mostly blank page. 

I am loading pages that tend to have a large number of iframes, all of which typically load in external assets as well. Maybe this could be the problem (as I haven't seen too many issues regarding premature promise resolutions)?

Strangely, running the same service that's responsible for loading the pages and using nightmare to take screenshots locally on my Mac almost _never_ (if ever) has a problem using the above `wait` function in order to determine when the page is actually finished loading.

I understand that nightmare most likely does not much of a recourse in terms of listening to events fired from the underlying electron instance, but I haven't delved into the code too deeply, so if it is possible to fix that way, then great!

If anyone has an alternative way to help nightmare make a best guess as to when the page has loaded, I'm all ears!

Edit: #770 looks to be related. 
",cwhenderson20,2016-09-05 16:42:28
769,2016-10-27 04:17:18,"@rosshinkley In regards to your comment https://github.com/segmentio/nightmare/issues/769#issuecomment-244780554:

> Nightmare, by default, will wait for the did-stop-loading event. This event is typically emitted once the page is ""finished"" loading (be it from the original 20x completing or stop being called). At that point, the page should already be in a ready state. (Should. If it isn't, or you have a a countercase, I'd love to hear about it.)

I have opened https://github.com/segmentio/nightmare/issues/854 which provides a test case showing that there in fact is an issue with nightmare not finishing loading before moving on to the next chained method.
",bchr02,2016-09-05 16:42:28
768,2016-08-29 16:23:37,"Fixes #761.
",rosshinkley,2016-09-05 19:22:10
767,2016-08-27 20:13:40,"At least that's what I think is happening. Here's a very simple snippet that works for most sites. For the login page below, however, Nightmare just hangs after the page renders:

<S_CODE_TOKEN>

If you open the console you can see a JS error:

<S_CODE_TOKEN>

Is this a problem in Nightmare or Electron? Is there anything I can do to work around it?
",scytalezero,2016-09-06 21:07:35
767,2016-08-29 16:15:03,"This seems like a Windows-specific problem with Electron, but nothing is jumping out at me in the Electron repository (or `electron-prebuilt`, for that matter).  To be clear, the above works for the Google goto, but not the login?  What if you point it to a different version of `electron-prebuilt` with [`electronPath`](https://github.com/segmentio/nightmare#electronpath)?
",rosshinkley,2016-09-06 21:07:35
767,2016-08-29 18:13:42,"Right, it works for the commented out Google page but not the one I have active.

I did go back through the electron-prebuilt tags and it looks like this problem is Electron-specific and was introduced in v1.2.6 and remains a problem at the current version (v1.3.4). Should I report this over on their repo? If so, do you think the snippet above would be sufficient as a recreation?

Thanks for the help!
",scytalezero,2016-09-06 21:07:35
767,2016-09-03 15:35:31,"I raised this issue with the Electron project. I'll either close or post more information here once I hear from them.
",scytalezero,2016-09-06 21:07:35
767,2016-09-05 17:40:59,"Sorry for the delay, @scytalezero - yes, I'd go ahead and report it at Electron, which it looks like you've already done. :)

Would you mind linking to it here?
",rosshinkley,2016-09-06 21:07:35
767,2016-09-06 19:17:37,"Sure! [Here is the issue.](https://github.com/electron/electron/issues/7071)
",scytalezero,2016-09-06 21:07:35
767,2016-09-06 21:07:35,"Someone from the Electron team has pointed out that the problem seems to be caused by a redefinition of String.prototype.startsWith() done by this specific site. So, bad on them, and I'm closing both issues. Thanks for your time on this.
",scytalezero,2016-09-06 21:07:35
766,2016-08-26 13:31:52,"Bellow is simple example that I am trying to make work, but no success. It don't have much sense and purpose. I am just trying to figure out how to make script go to some another page and then execute some function inside `.evaluate()` if possible. Or if can't be done inside `.evaluate()` , what is the way and best practice?

<S_CODE_TOKEN>
",jelenajjo,2016-08-30 08:42:54
766,2016-08-29 16:06:33,"Cross-site `.evaluate()` calls aren't going to work: the evaluated function is executed in the current page's context.  In other words, as soon as you `.click()` on one of those links, you'll lose your evaluation context.  Also, `.evaluate()` calls are currently designed to be synchronous, although there has been some work to make `.evaluate()` calls asynchronous (see #573).

Based on your snippet, I'm not clear on what you're trying to do: are you trying to click on each github link?

Also, as a matter of housekeeping, you _might_ want to take a look at [asynchronous operations and loops](https://github.com/rosshinkley/nightmare-examples/blob/master/docs/common-pitfalls/async-operations-loops.md).
",rosshinkley,2016-08-30 08:42:54
766,2016-08-30 08:42:54,"@rosshinkley  Thanks! :) [asynchronous operations and loops](https://github.com/rosshinkley/nightmare-examples/blob/master/docs/common-pitfalls/async-operations-loops.md) explanation helped me understand.

Script above is super basic, just to test this. Not much sense in there. :D

Thanks again!
",jelenajjo,2016-08-30 08:42:54
765,2016-08-24 16:41:44,"I try example in README but meet this error when don't run under `sudo`:

<S_CODE_TOKEN>
",imcvampire,2016-09-18 17:32:55
764,2016-08-24 12:10:24,"I'm trying to figure out a way to discover the url that resulted in a timeout when running nightmare.

I'm scraping a website that is very slow and i'm receiving lots of timeouts on my requests.
The ideal solution would be if .wait() returned a exception array that contained the actual error and the url that resulted in a timeout.

Here's the code

setInterval(function () {
    if (i <= limit) {
        var nightmare = Nightmare({show: false, gotoTimeout: 400000});
        console.log(endpointPsicos + i);
        nightmare
            .goto(endpointPsicos + i)
            //Pega o id ou espera 200 seg
            .wait('#tblMedicos', 200000)
            .inject('js', './node_modules/jquery/dist/jquery.js')
            .wait(500)
            .evaluate(function () {
                var psicoList = [];
                if ($('#tblMedicos')) {
                    $('#tblMedicos').find((""[data-medico-id][data-nome-medico]"")).each(function () {
                        var psicoUrl = $(this).attr(""data-medico-url"");
                        psicoList.push(psicoUrl)
                    });
                    var url = $(location).attr('href');
                    return ([psicoList, url])
                } else{
                    var psicoList = [];
                    var url = $(location).attr('href');
                    return ([psicoList, url])
                }

<S_CODE_TOKEN>

}, 10000);
",nilsonivano,2016-10-20 17:58:38
764,2016-09-05 17:52:37,"In your `.catch()` block, you're trying to use jQuery from within your script, which isn't going to work.  You have access to the failed URL - you're creating it in `.goto(endpointPsicos + i)`.  Couldn't you push that + the error?
",rosshinkley,2016-10-20 17:58:38
764,2016-10-20 17:58:38,"Closing for inactivity.  If this is still an issue, feel free to reopen/open a new issue.
",rosshinkley,2016-10-20 17:58:38
763,2016-08-23 19:06:14,"Is there a way to mock the geolocation api?

Thanks!
Jon
",jontonsoup,2016-08-24 14:28:11
763,2016-08-23 22:06:22,"Yes, simply like that:

<S_CODE_TOKEN>
",qsdqdqdsqd,2016-08-24 14:28:11
763,2016-08-24 14:28:11,"Thanks! 
",jontonsoup,2016-08-24 14:28:11
762,2016-08-18 19:54:51,"After doing a click on a button, this error is logged in the console, and nothing happens - the page just hangs. I'm wondering if this has something to do with the encoding on the page.. the button is a 'submit' form button from the Atlassian AUI framework. Any way to fix this issue?
",shanewignall,2016-10-20 04:30:48
762,2016-08-19 21:39:17,"Interesting. I just started using it and the same thing just happened to me. Unfortunately, I can't dig into it right now. But I'm afraid it is not related to clicking the button but most likely the blur event fired by leaving the previous form field.

I don't know I'm only guessing. I'll continue to investigate, the API in this thing seems really cool, and Electron should be fine for my tests. 

The version I'm on is 2.6.1
",jhenriquez,2016-10-20 04:30:48
762,2016-08-19 21:55:32,"@shanewignall Quick update, yup. Just as I thought. In my case, the selector for the field was wrong. the querySelector was not matching anything. 

The interesting part is why it all the way in the blur event, and not in the while trying to put values in the element. Hope this helps you, too.
",jhenriquez,2016-10-20 04:30:48
762,2016-08-22 17:20:35,"@jhenriquez Thanks for the info! I'll see if I can find the issue with  the previous field..
",shanewignall,2016-10-20 04:30:48
762,2016-08-22 19:38:26,"@jhenriquez so one of my issues was just having to use a 'wait' in a certain place. This allowed for the button to actually switch back to the parent form.. but then I still get the blur event error. After that happens, again, the script hangs. This is driving me nuts. The button that is clicked makes the form disappear, so the user sees the parent form, which is then focused on again. Why would it not be focusing back on the parent form like it should?
",shanewignall,2016-10-20 04:30:48
762,2016-08-22 20:12:42,"@shanewignall Well, my use case was way simpler I'm afraid :sweat_smile: but then again I believe it seems to be similar in nature. In my case I was only filling a form and clicking submit. Yet, my field selectors where actually incorrect. So, my selectors were not returning any elements so when nightmare tried to move from field one, to let's say field two (calling blur() on field one) the result is this error.

In your case, I believe it might be similar. By disappearing, I suppose we're not talking about only _hiding_, if the markup is being removed this could render all selectors associated with that previous form invalid.

I would suggest you dig a little bit into the libraries code, and do a quick debug to try and identify which selector is being handled that doesn't bring any results at that particular moment in time. I think the stack trace indicates directly where to look in this case.

Hope this helps. 
",jhenriquez,2016-10-20 04:30:48
762,2016-08-29 15:31:08,"`.click()` will blur the currently active element, which I'd _think_ should be the body if nothing has been selected.  From MDN:

> When there is no selection, the active element is the page's &lt;body&gt; or null. 

I know there are some OS differences with how this works, but I'd hope that Electron behaves the same across platforms.  I suppose it's possible AUI modifies this value, although it seems unlikely.  In any case, that's the only [`.blur()` call within `.click()`](https://github.com/segmentio/nightmare/blob/master/lib/actions.js#L88).

If you modify that line to check for the active element's existence first, do you still have this problem?
",rosshinkley,2016-10-20 04:30:48
762,2016-08-29 21:17:30,"@rosshinkley Thanks for the response. I added a .wait('body') before and after the button click. Unfortunately, I still get the blur event about a second after the script clicks the button that makes the little inline-dialogue form disappear. I noticed that between clicking the button and the blur event error, a little banner appears and disappears on the page that just tells the user that the form was updated successfully. I wonder if this specific element disappearing and appearing causes a blur event? 

Also

@jhenriquez Looking back on your previous comment, I found that when I say the child form ""disappears"", the elements are actually dynamically removed from the page. This element is an inline-dialogue in the AUI framework. 
The thing is, I'm not trying to do anything with those elements after clicking the button to make the dialogue go away, so I _wouldn't think_ that this causes the issue..any thoughts?
",shanewignall,2016-10-20 04:30:48
762,2016-09-26 07:57:32,"I've also been skewered by this, with a selector for a form field that didn't exist. The call to    document.activeElement.blur(); in the nightmare .click() handler sucked me in, assuming it was the culprit. It was a red herring, it was indeed an incorrect selector in a call to .insert() that caused it.

I'm dropping this here in case it helps anyone in the mean time, until/if/when a fix for the deeper issue (I assume at a deeper level) can be made.
",eddiesholl,2016-10-20 04:30:48
762,2016-10-04 16:32:46,"I did some digging with Chrome/Electron specifically: if you remove the active element from the DOM, the active element will point to the `body`.  The only way to get the active element to refer to null (at least in my experimentation) is to delete the `body` from the `html` tag.  (I sincerely doubt you're doing that.)

@willclarktech pointed out in [this issue](https://github.com/willclarktech/elm-boilerplate/issues/3) that the element could be removed between `.type()`/`.insert()` and `.blur()`, which would cause a similar problem, but those are getting the specific selectors, not the (somewhat nonspecific) active element.
",rosshinkley,2016-10-20 04:30:48
761,2016-08-17 15:54:21,"You will get an error when taking a screenshot if the path to the file does not exist. If an error occurs it appears that the queue will not be completed and nightmare will never be ended.

Here's a sample of code that would cause it

<S_CODE_TOKEN>

even if i prevent the call to .type with promises, the instance is never ended

<S_CODE_TOKEN>

Version Info
- nightmare 2.6.1
- node: 6.3.1
",nickstanish,2016-09-05 19:22:10
761,2016-08-18 18:20:44,"realized `.end()` needs to be followed with `.then(() => {})` for it to actually run. 

Can we get some better documentation and examples? The documentation currently says this about `.end`

> Complete any queue operations, disconnect and close the electron process.
",nickstanish,2016-09-05 19:22:10
760,2016-08-17 15:01:54,"Hi everyone.

I've been working with Nightmare last 2 weeks in order to implement a crawler which works in this way:
we have a lot of links (~48k), split them on bunches (10-50 links per bunch) and run it in cycles. So in one cycle we have from 10 to 50 links => we have 10 - 50 Nightmare instances.
We decided to use Promise.all() in order to increase the speed of crawling by parallelizing. 
In each operation we have 3 steps:
1. first evaluation;
2. second evaluation;
3. ending.

And we use async/await for that. An example of our script which is executed in each cycle for each URL (and has its own Nightmare instances) looks like that:

<S_CODE_TOKEN>

I ran my script a lot of times during that last 2 weeks and each time Nightmare stuck either on 1st eval or on the 2nd one. But I couldn't have the exact time or number of cycles after which my script will be stuck: depending on number of URLs I'm crawling in a cycle, it could be earlier or later. 

I started to log everything I could in order to debug such situation. I couldn't reproduce it quickly, so I waited as long as it was necessary. And at least I got a dump of Nightmare instance which was stuck, and I saw the next data inside it (dumped with [util.inspect](https://nodejs.org/api/util.html#util_util_inspect_object_options)):

<S_CODE_TOKEN>

Such signals aren't handled by Nightmare at all. And, by the way, not all signals could be handled by Node.js.
I started to dig into this problem. I found [this commit of Nightmare's 2.0.7 fork](https://github.com/fr-/nightmare/commit/c22b45c8a9d4e6712ba236e4c16761a44198ab59?diff=split), and it was helpful, but only in general (because of version), and I had to write the code on my own. And I decided to make [my own fork](https://github.com/sizewhiz/nightmare) where I started experiments with the problem.

Yesterday I successfully implemented and tested a fix for [almost all Ubuntu signals](http://manpages.ubuntu.com/manpages/precise/man1/kill.1.html). 
I simply ran my app, set some breakpoints and kill **electron** processes on each phase (1st eval, 2nd eval, end) with each of those signals. Only 1 signal - SIGSTOP - couldn't be handled, it means that `process.on('close', callback)` won't be invoked after that. Some signals are totally ignored by the electron and everything works fine. 
My fix is related to the **promises**, cause when you use async/await `then(fn)` method of Nightmare is invoked, and in my fix I invoke the **fn** you provided to this method as a callback in any case - even after unexpected closes. 

After my fix I ran my crawling script using my fork with the fix, and after a long time (35 URLs per cycle, 476 cycles, >4 hours) the stuck was reproduced. I saw the logs and there I found successful handlings of some signals (and so of unexpected closings of electron), but the stuck was reproduced, and I started to see Nightmare instances dumps. I have found that the stuck Nightmare instance had the next data inside it:

<S_CODE_TOKEN>

While any other instance which was successfully ended had the next one:

<S_CODE_TOKEN>

Let's try to understand that:
- if an instance of Nightmare has `ending = true` it means that `.end(fn)` method of Nightmare was invoked (because such assignment is a first line of this method).
- if an instance of Nightmare has `ended = true` it means that `endInstance()` function inside nightmare.js is invoked where such assignment takes place and where an electron instance becomes killed and all its listeners are removed. 
- if `state = 'ready'` it means that the instance wasn't closed unexpectedly (because in my fix I set the value `'failed'` in such case).

As we see the main problem now is this one: **why an electron instance is simultaneously `killed` and `connected`?** And could we handle such situation in any way?

I've had an experimentation recently and I succeeded in reproducing the stuck. 
I did the next: I ran my script, in each cycle I crawl only 2 URLs instead of 10 - 50. I also set up some breakpoints. Then I sent **SIGSTOP** signal to one of those 2 - and after that my script stuck. 

The reason of stuck is the next. In Nightmare we have function  [evaluate_now(js_fn, done)](https://github.com/segmentio/nightmare/blob/master/lib/nightmare.js#L348) which is invoked after you use `evaluate(js_fn)`. As you see, there is a `done` callback, and if the electron process **stuck but not terminated, which is possible after it got SIGSTOP signal, the `done` callback will never be invoked. So your promise won't be resolved/rejected and the script will be stuck**.

So I decided to handle **SIGSTOP** too. [It's hard to do that, but possible](http://unix.stackexchange.com/a/298650). [Here](https://major.io/2009/06/15/two-great-signals-sigstop-and-sigcont/) and [here](http://blogofsiva.blogspot.com/2012/06/why-sigkill-and-sigstop-cannot-be.html) are good explanation too. 

As we see, the only way here - is to use an interval in order to check whether it was OK.
I've implemented such interval here and now it is under testing with 40 URLs in a cycle. 
By the way, I suggest I'm near the solution.

I think that this issue is related to [#751](https://github.com/segmentio/nightmare/issues/751), [#736](https://github.com/segmentio/nightmare/issues/736), [#688](https://github.com/segmentio/nightmare/issues/688), [#282](https://github.com/segmentio/nightmare/issues/282), [#238](https://github.com/segmentio/nightmare/issues/238).

I'm going to update this issue when the last script run with [this commit](https://github.com/sizewhiz/nightmare/commit/8c3572a0bf9b35feac142fd86dfec9fc29109d2d) will be ended.
So, let's discuss [my fork](https://github.com/sizewhiz/nightmare) here - it's for everyone who have ever had stuck/freeze/hang problems with Nightmare.
",pkantsedalov,
760,2016-08-17 16:32:03,"FYI, I've updated my nightmare code to use what was recommended in #688 which has helped quite a bit -- I haven't seen a hung nightmare in ~12/18 hours or so.

Would love to see your PR merged as I had opened #759 around a similar issue with less detailed analysis and no proposed fixes. :-).

Thanks!
",adityabansod,
760,2016-08-17 21:26:23,"Hi @adityabansod.
About [#688](https://github.com/segmentio/nightmare/issues/688): its OK only for orphaned electron processes which really could cause a leak, but my  crawler clears everything between cycles with

<S_CODE_TOKEN>

This code being wrapped in try...catch cleans everything fine. 
By the way, the proposed solution in #688 isn't OK due to the Nightmare's architecture, cause after `end()` invocation `disconnect` will be invoked too and electron can throw an exception about its repeated invocation of the `disconnect`.

In my case everything is about so called **zombie callback**. It means that if you call `then(fn)` or do something like:

<S_CODE_TOKEN>

it means that if electron stuck your callback will never be invoked and your script will stuck as well.

But there is also a problem with stuck after `end()` invocation. I've found it recently. 
[Here](https://github.com/sizewhiz/nightmare/commit/e8c2ffefb012596ae13075dcb9ffe9c1d32ed8ce) I try to kill process by force if it wasn't killed yet. It's not good yet, but I do it for experiments only.
",pkantsedalov,
760,2016-08-22 09:12:52,"After my latest experiments I've at least found that the problem described in [#688](https://github.com/segmentio/nightmare/issues/688) is really hard to solve without electron fix of orphan process. I think a sort of temporary solution could be a timer run in [.end()](https://github.com/segmentio/nightmare/blob/master/lib/nightmare.js#L370) method before [endInstance()](https://github.com/segmentio/nightmare/blob/master/lib/nightmare.js#L204) function invocation where we could check if after some time the process with `PID === this.proc.pid` or any of its orphans is alive - we need to kill it. There could be a parameter for that named like `killTimeout`
",pkantsedalov,
759,2016-08-15 22:32:36,"I am doing some browser automation and there are times where code I'm executing in the target page (e.g. an `.evaluate()`) dies.

Best I can tell there's no way to timeout waiting for an `.evaluate` to come back, so the entire nightmare queue/promise chain kinda just hangs until I notice and kill it.

Any suggestions?

My set up looks like:

<S_CODE_TOKEN>

I've tried to wrap a `setTimeout` with a `throw` in the eval block, like so:

<S_CODE_TOKEN>

but that doesn't always work, nor do I really want to do that in all my `.eval` blocks.
",adityabansod,2016-10-20 18:00:59
759,2016-08-16 15:44:53,"Another options/idea here would be to have a timeout on a `queue` so one could specify how long the entire set of queue'ed commands could run?
",adityabansod,2016-10-20 18:00:59
759,2016-08-22 18:11:51,"I'm having an identical problem, would love to know if anyone came up with a workaround. Right now I'm messing with splitting up the chain into steps and having a Promise.all after a certain amount of time to see if I can pinpoint an evaluate that never finishes.
",GWP,2016-10-20 18:00:59
759,2016-08-22 18:13:19,"@GWP this ended up solving the problem for me (as a workaround): https://github.com/segmentio/nightmare/issues/688#issuecomment-238473332
",adityabansod,2016-10-20 18:00:59
759,2016-10-20 18:00:59,"FWIW, asynchronous evaluate is now possible with #819.

Between that and #688, I _think_ this is resolved.  Feel free to reopen/open a new issue if not.
",rosshinkley,2016-10-20 18:00:59
758,2016-08-14 03:15:29,"As-is the test will time out.
",dunn,2016-10-24 16:51:42
758,2016-08-14 03:21:11,"Actually the test still doesn't work; it ""passes"" no matter what.  Any idea what the problem there is?
",dunn,2016-10-24 16:51:42
758,2016-08-14 12:38:45,"Since it's a generator you need to yield at the beginning of the chain. Also, you will no longer need the done() callback, or done variable in the generator declaration.

<S_CODE_TOKEN>

With no yield keyword there the generator function completes before the nightmare chain and because no assertion errors are thrown it passes. With yield there it halts execution until the completion of the chain, allowing time for the assertion error to be thrown in the .then() block if the expected results aren't there.

This is also why there is no longer a need for the done callback, because we can halt execution instead of calling back, so there is actually no callback injected into the function when it's a generator. If you were to leave the done variable declaration, and call to done() then it would result in the following error:

<S_CODE_TOKEN>

Also, the selector won't return the right results, since the first results are from yahoo image search. The following selector delivers the desired results:

<S_CODE_TOKEN>

Complete test:

<S_CODE_TOKEN>
",noahtkeller,2016-10-24 16:51:42
758,2016-08-14 15:28:36,"Awesome; PR updated. Thanks!
",dunn,2016-10-24 16:51:42
758,2016-08-26 01:21:44,"FYI—all the examples in the readme used to use generators and were explicitly changed to _not_ use them several months ago. Which is to say, it might be better to make this PR just use promises. (Though it sounds like it still would've needed fixing anyway!)
",Mr0grog,2016-10-24 16:51:42
758,2016-08-29 14:32:18,"I agree with @Mr0grog.  The examples should probably use plain promises to minimize external dependencies.
",rosshinkley,2016-10-24 16:51:42
758,2016-08-29 16:13:26,"Gotcha.  I might have time to update this later in the week, but if anyone wants to take care if it first, please do.
",dunn,2016-10-24 16:51:42
758,2016-10-24 16:51:42,"I ended up not using Nightmare for the project that prompted this, so I'm not going to have time to rewrite and test the example code.
",dunn,2016-10-24 16:51:42
757,2016-08-13 19:30:45,"Still not sure what exactly is causing the problem but it seams when you kill() the process is not giving time to electron.app to quit gracefully and that is not allowing the cookies/session to be saved. 

More info can be found here: [Quit gracefully when Ctrl-C is pressed in console #5273](https://github.com/electron/electron/issues/5273)

Fixes bug:
[Nightmare persist partition on windows bug #755](https://github.com/segmentio/nightmare/issues/755) 

Probable fix for:
[Always fail to set cookie #531](https://github.com/segmentio/nightmare/issues/531) 
[sharing a session between different machines? #398](https://github.com/segmentio/nightmare/issues/398)
[Sessions are not persisting in Ubuntu #536](https://github.com/segmentio/nightmare/issues/536)
",daniel3d,2016-09-05 19:22:05
757,2016-08-31 15:01:22,"What's the status here?
",albinekb,2016-09-05 19:22:05
757,2016-08-31 15:20:13,"Im using it in the moment with this modifications so i can persist session between 2 electron windows. I have noted some of the issues i think will fix but nobody have replied yet.
",daniel3d,2016-09-05 19:22:05
757,2016-09-05 19:21:19,"This change seems reasonable to me, and I wonder if it might effect the outstanding issues with orphaned processes?

Anyway, including.  Thanks!
",rosshinkley,2016-09-05 19:22:05
756,2016-08-12 10:36:17,"modified:   lib/actions.js
- map .wait(selector, timeout)->args[1] to this.options.waitTimeout if typeof === 'number'
",noahtkeller,2016-09-05 19:22:00
756,2016-08-29 14:26:47,"A couple of explicit tests for this would be nice.  One handling the timeout, one handling the element existing before the timeout should be sufficient.  Thoughts?
",rosshinkley,2016-09-05 19:22:00
756,2016-08-30 13:56:58,"Sure, I will write them up in a bit.
",noahtkeller,2016-09-05 19:22:00
756,2016-08-30 16:16:59,"@rosshinkley I have added the test for timeout when no element exists, and it passes. Above you mention ""one handling the element existing before the timeout"", this test existed already for the .wait(selector) call, so for the .wait(selector, timeout) call I just added a non-existent selector and 150ms to ensure it still passes, it does not pass if I just wait for the ul.

Is there another specific case you want me to test for?
",noahtkeller,2016-09-05 19:22:00
756,2016-09-05 16:02:09,"@noahtkeller I think this is probably sufficient for now.  Thanks!
",rosshinkley,2016-09-05 19:22:00
755,2016-08-11 15:18:38,"I was having problems to get Nightmare and Electron app to share a [persist partition](https://github.com/segmentio/nightmare/issues/754)

It turn out is a bug for some reason in windows environment you need to use app.quit() in order to save the persist partition by adding this code

<S_CODE_TOKEN>

to runner.js it fixes the problem it may be related with other issues
",daniel3d,2016-09-05 19:29:28
755,2016-08-11 16:53:44,"Actually only this don't fix the problem it seams the way Nightmare is kilning the process on .end() is not the best way of closing electron process.

ignore the first comment code i posted the one bellow seams to work i cannot find any issue with Nightmare and persist partition works now :cookie: 

in runner.js after line 69

<S_CODE_TOKEN>

and in the nightmare.js replace line 211 with this

<S_CODE_TOKEN>
",daniel3d,2016-09-05 19:29:28
755,2016-09-05 19:29:28,"This should have been fixed with #757, I think.  Closing.
",rosshinkley,2016-09-05 19:29:28
754,2016-08-10 17:25:07,"Hi im trying to use Nightmare to login to gmail in the background on my electron app
But i cannot get it to work what is happening i cannot make nightmare and electron to use the same partition

here is the setup

<S_CODE_TOKEN>

I was not sure if is a problem with electron that why i try sharing the partition with webiews and they work without a problem.

<S_CODE_TOKEN>

i also try setting up electronPath: require('electron-prebuilt') just in case if is using difrent electron.exe but no i check electron window and nightmare are using same .exe file.

Please help.
",daniel3d,2016-08-11 15:13:35
753,2016-08-09 10:59:39,"In the documentation I found no reference to the Electron installation, is the prebuild electron from npm supposed to be used?
Can I send a PR to improve the readme?
",darioghilardi,2016-08-09 11:09:18
753,2016-08-09 11:09:18,"Nevermind, it appears the ""electron not found issue"" is related to the fact I don't have the correct headless setup, as reported here #602 .
",darioghilardi,2016-08-09 11:09:18
752,2016-08-08 09:42:29,"Using nightmare 2.6.0, electron seems to load nightmare but then stops running. Can provide Dockerfile which reproduces it fully.

<S_CODE_TOKEN>
",rrva,2016-08-10 14:28:14
752,2016-08-08 14:13:00,"Working workaround is:

<S_CODE_TOKEN>
",rrva,2016-08-10 14:28:14
752,2016-08-08 16:22:43,"Reproduction would be nice.  I can't reproduce locally.
",rosshinkley,2016-08-10 14:28:14
752,2016-08-08 21:13:19,"Use https://github.com/rrva/nightmare-752-repro to reproduce
",rrva,2016-08-10 14:28:14
752,2016-08-10 11:58:00,"Cannot reproduce using that repo:

<S_CODE_TOKEN>
",albinekb,2016-08-10 14:28:14
752,2016-08-10 13:18:18,"@albinekb: To reproduce, you have to use the instructions in the README, i.e. run it in the environment provided in the Dockerfile. For example, this uses node v5.12.0 if this matters. 
",rrva,2016-08-10 14:28:14
752,2016-08-10 13:24:41,"Since others have trouble reproducing I suspect it is something in my environment, thats why I provided the Dockerfile which reproduces it. There is nothing nonstandard about the environment, it uses the official node:5 docker image and adds the library dependencies which electron needs. When using nodejs 6.x image, I instead get problems when the dependency electron-prebuilt is installed: https://github.com/electron-userland/electron-prebuilt/issues/178 so I downgraded to node:5.
",rrva,2016-08-10 14:28:14
752,2016-08-10 13:44:23,"When looking at the require error in electron-userland/electron-prebuilt#178 and here, it seems like it's not a problem with nightmare, maybe it's a problem with the prebuilt electron/electron itself. 

But most likely it's something with your setup  since it works fine on macOS & Ubuntu (headless on amazon)?
",albinekb,2016-08-10 14:28:14
752,2016-08-10 13:44:57,"Seems like your npm isn't installing all dependencies...
",LinusU,2016-08-10 14:28:14
752,2016-08-10 13:45:52,"If you do a clean install, with your dockerfile and run `npm ls` in the project, and diff that with an install that's not in docker I think you'll see your problem 😃 
",albinekb,2016-08-10 14:28:14
752,2016-08-10 14:26:43,"The problem was that the application was installed in / and installing it in a separate directory fixed it.

See below changes. Was totally related to my env, so not a bug, closing.

https://github.com/rrva/nightmare-752-repro/pull/1/files

`npm ls -json` looked identical to my eyes both inside and outside the docker env though.

Thanks.
",rrva,2016-08-10 14:28:14
752,2016-08-17 21:34:59,"Great that you got it working @rrva 😊
",albinekb,2016-08-10 14:28:14
751,2016-08-05 02:30:31,"version: 2.5.3

I run the program with the command `xvfb-run -a -s '-screen 0, 1024x768x24' node index.js`. At some time, it will be blocked in `wait` forever.

It turns out that electron process was died, and the debug log shows - 

<S_CODE_TOKEN>

I'm curious how to capture this, so I can kill the main process? The supervisor, a process control system will restart  it for me. Thanks in advanced！
",flisky,2017-01-02 21:38:08
751,2016-08-08 16:32:06,"Hm, try upgrading to 2.6.0, I think this may have been fixed by coincidence by fixing how Nightmare reacts to closing the Electron window.

If that doesn't solve it, it's possible a solution to #688 may fix your issue.
",rosshinkley,2017-01-02 21:38:08
751,2016-08-09 03:16:05,"Will try it and keep you updated, thanks!
",flisky,2017-01-02 21:38:08
751,2016-08-11 02:15:45,"I can confirm that my app is blocked in wait forever after running for like 15-30min, it never gets a timeout after submitting a form that is stuck by webserver with latest 2.6.1 release
",Snake4life,2017-01-02 21:38:08
751,2016-08-29 03:27:48,"@Snake4life ,  you may give this code a try - 

<S_CODE_TOKEN>
",flisky,2017-01-02 21:38:08
751,2016-08-29 16:32:12,"thanks Im gonna try it out
",Snake4life,2017-01-02 21:38:08
750,2016-08-04 08:38:57,"Possibly noob question (sorry)... but I just can't explain this behavior:

<S_CODE_TOKEN>

<S_CODE_TOKEN>

Any clues what's going on?
",ivan-kleshnin,
750,2016-08-08 16:26:23,"@ivan-kleshnin What version of Nightmare are you using?  When I run your second example with 2.6.0, I get the expected behavior of typing in `#email`.
",rosshinkley,
750,2016-08-10 11:26:54,"OS: OSX, 
NodeJS: 6.2.2
Nighmare: 2.6.0

---

Full test snippet:

<S_CODE_TOKEN>

With such settings 100% runs end up filling the wrong field.
With other settings I observed random behavior for each run.
Sometimes it even was one character in one field and two subsequent in another field!

I believe this is somehow related to React and DOM timings but dunno who exactly.
",ivan-kleshnin,
749,2016-08-03 16:50:39,"I'm using the screenshot function to grab some images for a selection of webpages.

I use `document.documentElement` to retrieve the height of the page in an attempt to capture a screenshot of the full page, however the document's height returned from the `evaluate` function is different to the value returned in devtools when I manually execute it on the webpage.

It results in the addition of a large blank area at the bottom of the screenshot, which is the same colour as the background of the webpage itself.

I've included the code I'm using below to see if it can be replicated, using the BBC News website as an example. I've also attached the image produced from the below code.

Any help would be hugely appreciated! Thanks.

<S_CODE_TOKEN>

Image:

![test](https://cloud.githubusercontent.com/assets/1469007/17373986/846b2bf6-59a2-11e6-8e4c-3d9dfa0dc6b0.png)
",dcgauld,
749,2016-09-05 19:00:05,"I'd be curious to know what operating system and version of Nightmare you're running.  Electron (and Chromium) misbehave beyond the texture size limit (see #616 and possibly #695) - is it possible you're hitting that?
",rosshinkley,
749,2016-09-19 21:20:11,"Perhaps the `.wait(1000)` isn't long enough? Try using a `.then()` instead, or perhaps you need an otherwise unnecessarily long content height algorithm: https://github.com/segmentio/nightmare/issues/726#issuecomment-244961028
",stevenvachon,
748,2016-08-03 03:31:03,"I should have paid closer attention to 721: it broke the link to CircleCI.  Fixing.
",rosshinkley,2016-08-03 04:21:20
747,2016-08-03 00:30:09,"Builds for #746 were failing in CI—it turns out this is because JSON serialization is failing from circular references. This is not the first time we’ve seen exceptions on serializing the raw event data, so I’m opting for just removing it altogether here. There’s very little meaningful information that actually comes with them to begin with.
",Mr0grog,2016-08-03 02:18:45
747,2016-08-03 00:42:53,"@rosshinkley Whatever you did in https://github.com/segmentio/nightmare/pull/653/commits/03f43fc0b63640d1d05f46434545fcb82c9b2c6a seems to have stopped working for Node 6 :(
(must be that libnotify no longer depends on Node 6?)

Would it be better to `nvm install` in the `pre` scripts?
",Mr0grog,2016-08-03 02:18:45
747,2016-08-03 00:53:26,"@Mr0grog hm, that's odd.  I'm curious what changed, but in this case, I _imagine_ fixing it first might be simpler.

And yeah, I think a modification to the circle yaml to run `nvm install` for possibly all three versions in the `pre` would work.  Thoughts? 
",rosshinkley,2016-08-03 02:18:45
747,2016-08-03 00:57:45,"> I'm curious what changed, but in this case, I imagine fixing it first might be simpler.

With the events? TBH, I don’t really want to do the dig-through-the-event-and-find-all-the-problems-and-patch-them-then-lobby-electron-for-a-fix-then-see-this-break-later dance again. It seems prone to having serialization issues, and I don’t think that should be a problem Electron cares about—there’s great utility in having some oddball structures and/or exotic objects in the event, just not for Nightmare. Better to leave it alone and only surface the bits that are meaningfully additive here.

> I think a modification to the circle yaml to run nvm install for possibly all three versions in the pre would work. Thoughts?

Yeah, makes sense to me.
",Mr0grog,2016-08-03 02:18:45
747,2016-08-03 01:01:01,"> With the events? TBH, I don’t really want to do the dig-through-the-event-and-find-all-the-problems-and-patch-them-then-lobby-electron-for-a-fix-then-see-this-break-later dance again.

Ha, I was referring to the Circle setup, but I'm +1 on this too.  I don't _really_ care all that much about including the event data, because as you said, we're not really using the data to begin with.  (I also have an odd sense of deja vu.  Haven't we had this conversation before?)

 Put me down for ""strongly agree."" :)

> Yeah, makes sense to me.

Cool.  I see you already made the changes.  Thanks!
",rosshinkley,2016-08-03 02:18:45
747,2016-08-03 01:09:18,"D’oh, sorry to unload when you weren’t even asking about that.

> Haven't we had this conversation before?

Yep, way back in #576 :P
",Mr0grog,2016-08-03 02:18:45
747,2016-08-03 01:14:02,"> D’oh, sorry to unload when you weren’t even asking about that.

Don't worry about it, I wasn't being terrifically clear.

> Yep, way back in #576 :P

Good gravy.  Well, it's good to know my memory isn't totally failing.
",rosshinkley,2016-08-03 02:18:45
746,2016-08-03 00:02:48,"This fixes #740. We used to only listed for `did-fail-load` events to signal failure because they were always emitted in any kind of failure. In Electron v1.2.6, some kinds of provisional failures stopped emitting `did-fail-load`, so we now also need to listen for `did-fail-provisional-load`.
",Mr0grog,2016-08-08 16:42:46
746,2016-08-03 00:31:18,"See #747 to address test failures in CI—it’s an issue with electron events (again), not an issue with the changes here. Posted it separately because it’ll affect any new PRs :\
",Mr0grog,2016-08-08 16:42:46
746,2016-08-03 01:16:03,"Rebased on #747 for passing tests.
",Mr0grog,2016-08-08 16:42:46
746,2016-08-03 05:18:46,"It looks like the `resetChanges` method from    8015fe0 splices the `cookies` namespace out of existence, causing those tests to fail.

Otherwise, +1.  Thanks, @Mr0grog :)
",rosshinkley,2016-08-08 16:42:46
746,2016-08-03 14:51:23,"D'oh. Could swear I ran the whole suite locally and didn't see that, but there's no way it couldn't have happened :P

Guess I’m going to have to make that reset algorithm a lot more complicated.

Obviously not germane here, but I wonder if plugins should be made to be either a) uninstallable or b) instance-only.
",Mr0grog,2016-08-08 16:42:46
746,2016-08-04 03:37:00,"@rosshinkley Looks like the fix is passing the tests now. A merge and release will be appreciated.
",voidmonk,2016-08-08 16:42:46
745,2016-08-01 15:55:07,"Title says it all. Very interested in this.
",reggi,2016-10-20 18:01:34
745,2016-08-02 12:02:45,"I suppose you can use the [`webContents new-window`](https://github.com/electron/electron/blob/master/docs/api/web-contents.md#event-new-window) event.
",voidmonk,2016-10-20 18:01:34
745,2016-08-08 15:26:55,"Short version:  Out of the box, for now, you can't.

Longer version: It's on the docket for v3 (see #593), but for now, depending on your needs, I wrote a [plugin](https://github.com/rosshinkley/nightmare-window-manager) to try to address the most _basic_ of requirements (read: what I needed at the time).
",rosshinkley,2016-10-20 18:01:34
745,2016-10-20 18:01:34,"Closing for lack of activity.  If this is still a problem, feel free to reopen/open a new issue.
",rosshinkley,2016-10-20 18:01:34
744,2016-08-01 09:04:44,"Hi, my company is trying to choose a test framework. Nightmare looks great. It provides promises, ES6, await.  

But the docs don't state if it's headless - i.e. does it open an instance of Electron for every test? (Like Selenium opens Firefox for each test).

Or is Electron just Javascript that runs in memory (like Phantom.js & Casper.js which I imagine is much faster because it doesn't have to open an entire application and Window on your screen).

Please will you add a brief note on this to your readme.md
",RichardJECooke,2016-10-20 18:02:55
744,2016-08-01 12:38:44,"Oh no, I ran an example an it opens a whole Electron window :(

So it's not headless. Please put this in the docs.  Now I can't run it in Docker to have automated tests.
",RichardJECooke,2016-10-20 18:02:55
744,2016-08-01 12:45:59,"Ahhh, now I see: 

> Pass { show: true } to the nightmare constructor to have it create a visible, rendered window that you can watch what's happening.

It would be cool if at the top of your readme you changed this line:

`var nightmare = Nightmare({ show: true })`

to 

`var nightmare = Nightmare({ show: true })  //use false for headless testing (e.g. in Docker)`
",RichardJECooke,2016-10-20 18:02:55
744,2016-08-02 12:05:26,"You can run it headless using xvfb or xvfb-run. See #224.
",voidmonk,2016-10-20 18:02:55
744,2016-08-02 12:11:49,"Are you saying if I don't have `show: true` and don't use xvfb it's still not headless?
",RichardJECooke,2016-10-20 18:02:55
744,2016-08-08 15:21:34,"@RichardJECooke Whether or not you have `show: true` when running under Docker does not make it headless or headed.  It makes the rendering on the framebuffer (most likely `Xvfb`) render as though it were visible.

Nightmare isn't _truly_ headless: it requires an Electron instance to work, which in turn requires a framebuffer to render properly (at least, for now).

Setting that aside: if you set `show: true` or `show: false` (the default), it will likely not run out-of-the-box on a Docker instance as Docker instances _are_ intended to be headless, and as such, don't typically have a framebuffer included on the image.  To do that, @voidmonk's suggestion stands: have a look at #224 regarding running with `Xvfb` or `xvfb-run`.  You may also want to have  a look at the test suite for Nightmare as that runs on a headless CircleCI server.
",rosshinkley,2016-10-20 18:02:55
744,2016-09-01 19:06:44,"@RichardJECooke perhaps this docker image https://hub.docker.com/r/smtx/nightmarejs-webservice/ helps you build your nightmare app inside a docker container.

Here is the Dockerfile: https://hub.docker.com/r/smtx/nightmarejs-webservice/~/dockerfile/
",smtx,2016-10-20 18:02:55
744,2016-09-10 16:04:50,"> https://github.com/segmentio/nightmare/issues/744#issuecomment-236570644

@RichardJECooke I agree, having that information there would be helpful. I just started using the example and noticed it opened a window, which is great while debugging but when I did a search on README.md for headless or hide, to my surprise I did not get an answer. So, having this would have saved me some time from continuing to dig for an answer or having to read the electron docs.
",bchr02,2016-10-20 18:02:55
744,2016-10-09 06:19:52,"If it requries X, it's not headless.
",fake-name,2016-10-20 18:02:55
744,2016-10-20 18:02:55,"I think this is resolved.  If not, feel free to reopen/open a new issue.
",rosshinkley,2016-10-20 18:02:55
743,2016-07-30 15:42:57,"Backs out #677 in favor of making the type interval an option.
",rosshinkley,2016-08-03 04:21:11
742,2016-07-30 06:56:29,"`.wait(selector)` is helpful to wait for an element to appear dynamically in the page upon completion of page loading and the execution of the scripts. So when that element appears, we continue the execution down the nightmare queue. But sometimes we want to `.wait(ms)` in case our `selector` element did not appear rather than throwing exception after `waitTimeout` has passed (default 30 sec).

The ideas is to combine `.wait(selector)` and `.wait(ms)` and continue whichever happens first.

Either this way:

<S_CODE_TOKEN>

Or this way:

<S_CODE_TOKEN>
",nashwaan,2016-09-05 19:22:02
741,2016-07-30 06:41:20,"I think this is a common question but I could not find a clear answer.

<S_CODE_TOKEN>

This doesn't work.
In most of the examples in Readme.md, `.end()` is called before `.then()`, but if i do that then nightmare instance is shut down before having the chance to execute the next `.goto()`.
",nashwaan,2016-09-05 19:31:34
741,2016-07-30 16:01:22,"Give [asynchronous operations and loops](https://github.com/rosshinkley/nightmare-examples/blob/master/docs/common-pitfalls/async-operations-loops.md) a read - that should help you get started.
",rosshinkley,2016-09-05 19:31:34
740,2016-07-29 05:33:38,"The process hangs after the 'did-stop-loading' event if the response' HTTP status code is 304 (not modified). I simulated the HTTP 304 response using httpbin (https://httpbin.org/status/304). Here's the Nightmare debug log:

<S_CODE_TOKEN>

There's no timeout or further signal until the process is stopped (Ctrl+C), and then it displays:

<S_CODE_TOKEN>

Any clues as to why the process hangs this way.
",voidmonk,2016-08-08 16:42:46
740,2016-07-29 23:25:46,"Is your nightmare script what you showed over on #737? If so, it’s not hanging at all; because of the provisional load failure, `goto` is returning an error. You’re missing the `catch()` clause (or a second argument to handle errors in `then()`), which would get the error from `goto`.

It’s just firing an error you’re not handling :P

(Nightmare _probably_ should be better about logging unhandled errors, but for that see the discussion in #501)
",Mr0grog,2016-08-08 16:42:46
740,2016-07-30 00:36:55,"Tried with `catch()` but on HTTP 304 it still hangs without any error or further message (until Ctrl+C):

<S_CODE_TOKEN>
",voidmonk,2016-08-08 16:42:46
740,2016-07-30 16:26:04,"@voidmonk Out of curiosity, what version of nightmare are you using?

@Mr0grog is right, the provisional load failure is causing an exception.  In your last comment, that exception is handled, and should work fine (although your `.then()` that handles the status code will not be called).
",rosshinkley,2016-08-08 16:42:46
740,2016-07-31 00:59:40,"@rosshinkley Using Nightmare 2.5.3 (latest on npm I suppose).

Tested a bit more, but HTTP 304 is still hanging, and it doesn't raise any exception. All other HTTP errors invoke `catch` via `Promise.reject` in the first `then`.
",voidmonk,2016-08-08 16:42:46
740,2016-07-31 18:10:36,"@voidmonk Hmmm, v2.5.3 does not hang for me using the exact same code you pasted above (save substituting `'https://httpbin.org/status/304'` for `url`). Are you sure that’s exactly the code you’re using?
",Mr0grog,2016-08-08 16:42:46
740,2016-08-01 00:43:02,"@Mr0grog Yeah, same code. It times-out, but doesn't end gracefully. Try running it verbose: `DEBUG=* node 304test.js`. You'll see that there's no activity after `did-stop-loading` event, until it eventually times-out.

I think the expected behaviour for a 304 response should be for the Nightmare process to be terminated instantly (as Chrome does to the request) rather than wait endlessly & timeout. I was [told by the Electron guys](https://github.com/electron/electron/issues/6657#issuecomment-236465680) that it needs to handled by checking the response code in the `did-get-response-details` event.

Here's the modified full code, but now how do we suspend further events and end the Nightmare process on HTTP 304:

<S_CODE_TOKEN>
",voidmonk,2016-08-08 16:42:46
740,2016-08-01 01:59:15,"Based on #474 and #487, I could get the process to end:

<S_CODE_TOKEN>

It works when executed from the command-line, but when run within the `http` module (`http.createServer` handler) it halts execution but doesn't seem to kill the process.
",voidmonk,2016-08-08 16:42:46
740,2016-08-01 05:59:48,"> It times-out, but doesn't end gracefully

Sorry, I guess I should have been more clear: it ends gracefully and immediately for me—there's no timeout.

What platform and electron version are you using?
",Mr0grog,2016-08-08 16:42:46
740,2016-08-01 06:07:45,"@Mr0grog That's strange. It just hangs for me on HTTP 304 until timeout. I'm using:

Ubuntu 14.04.2 LTS on AWS
Node.js v6.3.0
Electron (electron-prebuilt) v1.3.1
Nightmare v2.5.3
",voidmonk,2016-08-08 16:42:46
740,2016-08-01 07:27:20,"Tried the same code on another VM (Ubuntu 14.04.1 LTS on Azure, Node.js v6.3.1), but same problem -- process hangs after `did-stop-loading` and then times-out after 30 seconds. Beats me.

By the way, I'm running it headless via xvfb-run:

<S_CODE_TOKEN>

It doesn't run without xvfb:

<S_CODE_TOKEN>

I also see these warnings. Don't think they're related to this issue:

<S_CODE_TOKEN>
",voidmonk,2016-08-08 16:42:46
740,2016-08-02 12:16:22,"Tried a third time in a Docker cloud container (Ubuntu 14.04.1, Node.js v5.10.0), but same problem. This doesn't look like an isolated issue.
",voidmonk,2016-08-08 16:42:46
740,2016-08-02 16:16:35,"Oh, interesting, looks like my Electron build was [very] out of date. Will have to see what they changed in the navigation events :\
",Mr0grog,2016-08-08 16:42:46
740,2016-08-02 16:23:54,"Yep, broke a little over a month ago because of https://github.com/electron/electron/pull/6201 (in Electron 1.2.6, one release newer than Nightmare requires)
",Mr0grog,2016-08-08 16:42:46
740,2016-08-02 23:44:21,"@Mr0grog Ah ok. So it this a bug in Electron or Nightmare? Any workaround to it?
",voidmonk,2016-08-08 16:42:46
740,2016-08-03 00:32:57,"@voidmonk It’s more a bug in Nightmare than anything else, but only caused because Electron changed its behavior ¯\_(ツ)_/¯

No workaround that I can think of, sorry. #746 fixes it, though.
",Mr0grog,2016-08-08 16:42:46
740,2016-08-03 00:54:05,"@Mr0grog Thanks for looking into it, and for the quick fix!

Hoping for it to be merged and released to npm soon.
",voidmonk,2016-08-08 16:42:46
740,2016-08-03 05:18:33,"Updated to Nightmare v2.6.0 (Electron 1.3.2) which seems to include the fix. Now the test code ([same as above](#issuecomment-236326180)) logs:

<S_CODE_TOKEN>

And then it still hangs -- doesn't end the process, nor shows any other message, until timeout.
",voidmonk,2016-08-08 16:42:46
740,2016-08-03 05:20:28,"@voidmonk The fix wasn't included as it has a test issue that needs to be addressed. As soon as it's fixed, I'll pull it in and cut another release.
",rosshinkley,2016-08-08 16:42:46
740,2016-08-03 05:23:08,"@rosshinkley Oh ok, no worries. Thanks again. I'll await the next release.
",voidmonk,2016-08-08 16:42:46
740,2016-08-31 13:50:32,"Any news about that issue ?
Running nightmare 2.6.1 + electron 1.3.4 and still have that issue.

Thanks
",geostant,2016-08-08 16:42:46
740,2016-09-05 16:05:01,"@geostant I'd suggest opening a new issue with a minimum repro case.
",rosshinkley,2016-08-08 16:42:46
740,2016-09-06 01:52:08,"@geostant I cannot reproduce with nightmare 2.6.1 or later with electron 1.3.4 or later. Using the @voidmonk's example code from https://github.com/segmentio/nightmare/issues/740#issuecomment-236467461 .

If you can provide a reproducible test case, I’ll look at it. Otherwise I can’t seem to get the behavior you are seeing.
",Mr0grog,2016-08-08 16:42:46
740,2016-09-06 01:52:52,"And as @rosshinkley noted, better to open a new issue when you have reproducible example :)
",Mr0grog,2016-08-08 16:42:46
740,2016-09-06 11:39:06,"It seems that it was an issue with headless server while trying to set ""show: true"" which is impossible obviously :)
",geostant,2016-08-08 16:42:46
739,2016-07-29 04:50:45,,mortonfox,2016-08-03 02:15:37
738,2016-07-28 09:31:41,"Not an issue but an announcement that we have added Nightmare as a running backend for [CodeceptJS](http://codecept.io/nightmare/) testing framework. We are using one API for Selenium and Nightmare tests so you can easily switch between drivers. One of the major technical improvements that CodeceptJS allows to use not only CSS but XPath locators in tests. It was pretty complicated but it works.

Thanks to segmentio and all Nightmare contributors!
",DavertMik,2016-09-05 19:26:11
738,2016-09-05 19:26:11,"Nice!  Thanks for the update!
",rosshinkley,2016-09-05 19:26:11
737,2016-07-28 08:48:41,"Hey guys, I'm trying to check the `goto` request's HTTP status code before evaluating the results:

<S_CODE_TOKEN>

But I keep getting the error:

<S_CODE_TOKEN>

Any idea why an error is thrown? It works if the `then` function (which checks the status code) after `goto` is removed.
",voidmonk,2016-08-09 07:32:22
737,2016-07-28 22:34:45,"Someone with more knowledge than I have might be able to provide a better explanation, but you're running into this issue because the `then` function is returning a promise, not the instance of nightmare that has the `wait` function.

The second example shown here describes chaining multiple steps together:

https://github.com/rosshinkley/nightmare-examples/blob/master/docs/beginner/promises.md
",johnferro,2016-08-09 07:32:22
737,2016-07-29 01:28:19,"Thanks @johnferro. An internal chain of steps worked, but it doesn't seem right (`wait` won't be queued etc):

<S_CODE_TOKEN>

Hopefully @rosshinkley or someone with a better understanding of Nightmare can confirm the validity and object disposal.
",voidmonk,2016-08-09 07:32:22
737,2016-07-29 22:57:50,"Some notes:

<S_CODE_TOKEN>

`goto` _always_ returns an object, whether there was success or error, so you can just `if (gotoStatus.code !== 200)`

You should also add a `.catch(error => { /* do something */ })` after the `.then()` handler in case the `goto` fails (e.g. you are offline, the server doesn't respond, the request times out, too many redirects, etc) and in case there are other errors in the rest of your code.

This last one is purely stylistic, but you can pull the last `.then()` up a level so you have less nesting.

Here’s a slight revision that might be a bit more solid:

<S_CODE_TOKEN>
",Mr0grog,2016-08-09 07:32:22
737,2016-07-29 23:11:57,"Another nice thing you can do to tidy up your code is make a plugin for rejecting responses based on status code:

<S_CODE_TOKEN>
",Mr0grog,2016-08-09 07:32:22
737,2016-07-29 23:16:45,"Thanks @Mr0grog, that looks much cleaner.

On a related note, the process hangs if response code is HTTP 304: issue #740. Any clues on that one?!
",voidmonk,2016-08-09 07:32:22
737,2016-07-29 23:31:08,"Actually, nevermind my second comment; it won’t work. I was working on something that would enable that at one point, but I guess I never got around to finishing it and submitting a PR. :\

The first example is still all good, though.
",Mr0grog,2016-08-09 07:32:22
736,2016-07-27 17:02:31,"I am working on moving from Phantom JS to Nightmare in an effort to get more CSS compatibility on my pages.

As a high-level view, my Nightmare instance lives inside a Docker container and listens for data to be pushed onto a queue. Once that data is pushed, I pull some data (including a string of HTML) out of the queue, alter the page a bit using Cheerio, and then turn the data into a HTML Data URL. 

Then, I goto the data url, use a couple of evaluate functions, scroll the page, and take a screenshot.

Here is a condensed version of my code:

<S_CODE_TOKEN>

However, my script will occasionally lock up during various evaluate functions, or during the screenshot function. Other times, the script runs successfully. I have tried this on various websites with the same results.

I can't pinpoint anything in the script that is causing this issue, and I didn't know if any of you had any thoughts on the problem?
",ryanvincent29,2017-01-02 21:01:30
736,2016-07-30 16:17:58,"Silly question: have you tried running with `DEBUG=*` to see if that has any helpful information?
",rosshinkley,2017-01-02 21:01:30
736,2016-07-30 16:18:19,"(Also: Possibly related to #405.)
",rosshinkley,2017-01-02 21:01:30
736,2016-08-02 14:22:27,"Yeah, I run it with DEBUG=*, it outputs 2 lines indicating the initialization of Nightmare, but then I stop getting output from that debug path for the remainder of the program.
",ryanvincent29,2017-01-02 21:01:30
736,2017-01-02 21:01:30,"Considering this fixed with #927.  If you're still having this problem with that change, feel free to reopen.",rosshinkley,2017-01-02 21:01:30
735,2016-07-25 14:19:16,"This is a _censored_ gist
https://gist.github.com/antonellopasella/0efa1fe935a4fbcc5b561b0699e809df

If can be useful, contact me on gitter and I can provide a couple proxy+auth for testing

Thanks!
",antonellopasella,2017-01-02 21:38:41
735,2016-08-10 19:36:09,"how can I force the proxy to stay when page is changing by a link?
",Snake4life,2017-01-02 21:38:41
735,2016-08-29 15:01:31,"@Snake4life The proxy server is set up for every request from Electron.  Are you not seeing that behavior?
",rosshinkley,2017-01-02 21:38:41
735,2016-08-29 16:05:13,"oh yeah sorry forget my question I fixed it thanks!
",Snake4life,2017-01-02 21:38:41
734,2016-07-22 11:46:04,"Hi everybody.

I have a question.
I haven't found the way how set up Nightmare's logs output to be saved to file, not to be displayed in the console. 
It seems that I could listen to the [specific Electron's events and work with them](https://github.com/segmentio/nightmare#onevent-callback), but my I'm interested in this one: **nightmare:log**. Could I catch it or something?

Thanks in advance.
",pkantsedalov,2016-07-25 07:04:33
734,2016-07-22 21:59:07,"Could you do something like `DEBUG_FD=3 DEBUG=nightmare*,electron* node my-script.js 3>log.txt`?
",rosshinkley,2016-07-25 07:04:33
734,2016-07-22 22:01:31,"(Alternatively, I think you should be able to use `nightmare.on('log', fn)` to capture log messages.)
",rosshinkley,2016-07-25 07:04:33
734,2016-07-25 07:04:33,"Thanks a lot!
",pkantsedalov,2016-07-25 07:04:33
733,2016-07-21 05:26:54,"- fix link to contents.openDevTools function
- fix misspelling of 'detach'
- specify that 'detach' must be the value of the 'mode' property (see electron doc for confirmation)
",jamesmanning,2016-08-03 02:16:28
732,2016-07-19 21:21:28,"I am currently attempting to take a screenshot using **Nightmare JS** where it also includes the dropdown (`<option>`) of a `<select>`. 

In order to get the dropdown to appear, I use the [**nightmare-real-mouse package**](https://github.com/Mr0grog/nightmare-real-mouse) to click the `<select>`. Locally, I have verified that this click will open the select (I set `show:true` on initialization of the nightmare object). However, the screenshot does not include the dropdown menu.

I have also tried adding a `nightmare.wait(1000)`, just in case the response to the `nightmare.realClick()` is not rendering quickly.
",ryanvincent29,2016-09-05 19:31:43
732,2016-07-30 16:38:43,"Correct me if I'm wrong: isn't the default `<select>` control an OS-level control (or at best, an application control)?  It's not necessarily rendered by the web frame - meaning that I don't think it will show up with `.screenshot()`.
",rosshinkley,2016-09-05 19:31:43
731,2016-07-19 10:57:54,"Hello.
How can I disable the loading of images on the page, we analyze?
",vshvydky,2016-07-19 11:12:22
731,2016-07-19 11:12:22,"problem solved
",vshvydky,2016-07-19 11:12:22
731,2016-08-21 16:58:41,"@vshvydky How did you do it? I tried:

<S_CODE_TOKEN>

but images are still loaded... (unless they are cached?)
Thanks
",sebastienbarre,2016-07-19 11:12:22
731,2016-08-21 17:06:56,"My bad, this had to be:

<S_CODE_TOKEN>
",sebastienbarre,2016-07-19 11:12:22
730,2016-07-18 19:30:59,"Currently Click() clicks the first instance of a class/element/selector.

Is there a way to click all of the elements at once?

ie, click all of the check boxes with the same element at one, or all of one type of button at once, instead of it clicking the first one in in order in source.
",Stankye,2016-09-05 19:32:53
730,2016-07-19 07:46:23,"Alternatively, I suggest you do so:
....
.evalutate() {
 let elems = document.querySelectorAll('div.click');
elems.forEach(function(elem){
elem.click();
});
return ""sucsess"";
}
",vshvydky,2016-09-05 19:32:53
730,2016-07-20 00:55:52,"code snippet not working, hmm. Any other suggestions?
",Stankye,2016-09-05 19:32:53
730,2016-07-24 21:42:09,"@Stankye: @vshvydky's answer is on the right track, but unfortunately won't work: `document.querySelectorAll` returns a DOM element collection, which like `arguments` isn't actually an array.  

From the hip, something like:

<S_CODE_TOKEN>

...might work.

If I'm reading the [spec](https://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-2651361) right, though (and it is _entirely_ possible I'm not), that will only work for `input`s.  If you want to use it on a generic element, you'll want to emit the click event yourself:

<S_CODE_TOKEN>

Do either of those work for you?
",rosshinkley,2016-09-05 19:32:53
730,2016-09-05 19:32:53,"Closing for inactivity.  If this is still an issue, feel free to reopen/submit a new issue.
",rosshinkley,2016-09-05 19:32:53
729,2016-07-18 12:19:54,"Hi there! Apologies if this is the wrong place to put this, wasn't sure whether to do so here (due to the README) or segmentio/nightmarejs.org (where the site code lives).

I use Nightmare lots and it's the first thing I recommend to journalists wanting a resilient tool for scraping poorly-built websites. That said, the documentation tends to throw people — the syntax on nightmarejs.org uses generators while the README is functional. Regardless, it's honestly one of the best browser automation tools out there at the moment and I feel it could achieve a wider audience if the documentation was improved a bit.

Any chance you'd be interested in me helping to improve the documentation website? I'd add a bunch more examples covering a wider selection of use cases, allow the examples to be displayed using callbacks, generator, or await/async syntax and pull the doc comments into an online documentation viewer (or, in cases where the README is more detailed than the doc comments, open PRs migrating those into the codebase). I'd also try to migrate in some of @rosshinkley's excellent examples/documentation (which I just noticed and is somewhat buried in the README). I'm anticipating a 2-3 month timeline for such a project.

Thanks!
",aendrew,
729,2017-03-17 11:07:09,"or at least put the link for the @rosshinkley's examples into the official readme: 
https://github.com/rosshinkley/nightmare-examples

it would have saved me few headaches :)",vagnerj,
729,2017-03-20 10:18:17,"For what it's worth, I wrote a Medium post about Nightmare awhile back:

https://hackernoon.com/nightmarishly-good-scraping-with-nightmare-js-and-async-await-b7b20a38438f",aendrew,
728,2016-07-15 15:39:56,"Adds an identifier to javascript responder events for electron code invocations.

Should fix: https://github.com/segmentio/nightmare/issues/727 
",cchamplin,
728,2016-11-27 06:46:38,👍 ,ft232r,
728,2016-12-30 19:08:06,"happy to consider, but the tests are failing: https://circleci.com/gh/segmentio/nightmare/918",reinpk,
728,2017-01-26 06:20:34,"Ah, so this is why everything is blowing up! `nightmare` doesn't support concurrency. 👎
@cchamplin do you plan on reviving this PR or should I pick up the torch? 😄 

edit: https://github.com/Timer/nightmare/commit/803732b1b33936500b1a6918efc1f067b5253bad",Timer,
727,2016-07-14 22:02:41,"I'm experiencing issues where I'm not able to perform Nightmare calls inside of an event callback. Specifically if I have a setup like:

<S_CODE_TOKEN>

<S_CODE_TOKEN>

The result of exists and the result of url are often times mixed up (url will get ""true"", and exists will get a url).

Is there a way around this, or a proper was to perform nightmare actions inside of an event callback?
",cchamplin,
726,2016-07-14 17:04:46,"I'm trying to take an screenshot of 375x667 (in order to simulate an iPhone 6 capture) with the code below, but the screenshot is taken as a wrong size of 359x608 and also is showing scrollbar (can scrollbar be hidden?)

Enviroment:
- Windows 10
- Node v6.2.2
- Nightmare.version: 2.5.3

<S_CODE_TOKEN>

**Image Generated**
![test](https://cloud.githubusercontent.com/assets/17678220/16848350/c9000f7a-49cb-11e6-9a67-e0720c991026.png)

Thanks,
FD
",fdagostino,2016-08-08 17:03:45
726,2016-07-15 01:58:12,"try

<S_CODE_TOKEN>
",notsunohito,2016-08-08 17:03:45
726,2016-07-15 02:07:35,"Thanks Shuichiro, this solves the screenshot size issue.
Now is taking the screenshot at 375x667 but the scrollbar is still shown
and included in this size.
Is there any way to hide the scrollbar? Or any way to add the width of the
scrollbar so I can take screenshot of 375+scrolllbar_widthx667?

El Thursday, July 14, 2016, Shuichiro Kamiya notifications@github.com
escribió:

> try
> 
> Nightmare({
>   frame: false,
>   useContentSize: true
> })
> 
> —
> You are receiving this because you authored the thread.
> Reply to this email directly, view it on GitHub
> https://github.com/segmentio/nightmare/issues/726#issuecomment-232841431,
> or mute the thread
> https://github.com/notifications/unsubscribe-auth/AQ2_jEDy5tpcZULaSkMTUBapjCKIdp8Iks5qVuk5gaJpZM4JMpQS
> .
",fdagostino,2016-08-08 17:03:45
726,2016-07-15 03:24:20,"I don't think you can hide the scrollbars with Electron [before DOM ready](https://github.com/electron/electron/issues/3534).

Out of curiosity, could you use `-webkit-scrollbar` set to `display:none` to hide the scrollbar?  It will still be there before `dom-ready`, but I _think_ you can hide it:

<S_CODE_TOKEN>

Would something like that work for you?
",rosshinkley,2016-08-08 17:03:45
726,2016-07-15 21:09:00,"Beautiful! this seems to work!

2016-07-15 0:24 GMT-03:00 Ross Hinkley notifications@github.com:

> I don't think you can hide the scrollbars with Electron before DOM ready
> https://github.com/electron/electron/issues/3534.
> 
> Out of curiosity, could you use -webkit-scrollbar set to display:none to
> hide the scrollbar? It will still be there before dom-ready, but I _think_
> you can hide it:
> 
> nightmare
>   .goto('http://example.com')
>   .evaluate(function() {
>     var s = document.styleSheets[0];
>     s.insertRule('::-webkit-scrollbar { display:none; }');
>   })
>   .viewport(100, 100)
>   .then(function() {
>     console.log('done');
>   });
> 
> Would something like that work for you?
> 
> —
> You are receiving this because you authored the thread.
> Reply to this email directly, view it on GitHub
> https://github.com/segmentio/nightmare/issues/726#issuecomment-232851174,
> or mute the thread
> https://github.com/notifications/unsubscribe-auth/AQ2_jGl4epxTK-CA02B5N2URHulBBRR_ks5qVv1pgaJpZM4JMpQS
> .
",fdagostino,2016-08-08 17:03:45
726,2016-08-08 17:03:45,"Closing as this seems to be resolved.
",rosshinkley,2016-08-08 17:03:45
726,2016-08-29 20:36:43,"`frame`, `show` and `useContentSize` are not documented in the readme and do not appear to do anything with v2.6.1
",stevenvachon,2016-08-08 17:03:45
726,2016-09-05 17:59:25,"They are not documented in the readme because they are not internal to Nightmare, they're internal to Electron's `BrowserWindow`.

What do you mean ""don't appear to do anything""?
",rosshinkley,2016-08-08 17:03:45
726,2016-09-06 14:06:59,"@rosshinkley They did not auto-size the viewport to the content. Instead I had to do all of this:

<S_CODE_TOKEN>
",stevenvachon,2016-08-08 17:03:45
725,2016-07-14 03:58:03,"Hi everyone, when i run example.js 

<S_CODE_TOKEN>

I have some error : 

<S_CODE_TOKEN>

I appreciate any help you can give!
",sapuit,2016-07-14 14:05:39
725,2016-07-14 13:47:10,"Silly question:  what version of Node are you running?
",rosshinkley,2016-07-14 14:05:39
725,2016-07-14 14:05:19,"i upgrade the last version , i fixed  it, Thanks a lot!
",sapuit,2016-07-14 14:05:39
725,2016-08-01 08:07:50,"I am having the same problem.
node --version
v0.10.36
But still getting this error.
PLEASE ADVICE
",varsano,2016-07-14 14:05:39
725,2016-08-08 15:13:09,"@varsano Upgrade NodeJS.  Nightmare will not work with anything <4.x.
",rosshinkley,2016-07-14 14:05:39
725,2017-01-28 10:07:42,"Hey,
First of all thanks allot for you answer, it got lost in my tons of emails
and i already managed by my self.
Now that i see you answer i run into a problem when scrapping a webpage:
i scroll to the bottom of the page and every scroll actually triggers a
request with a response and i want to store this response without any luck
screenshot:
[image: Inline images 1]

[image: Inline images 2]



how can i do it?
The page that i am trying to scrap written in AngularJS and i know that the
response that i am looking for i stored somewhere on
*window.self.$scope.ctrl._ads* but i found it only once and it happen after
a several of events that i can't reproduce.

please help since this a really important project that i have to finish in
a couple of days

Thanks allot for your help and great day


On 8 August 2016 at 17:13, Ross Hinkley <notifications@github.com> wrote:

> @varsano <https://github.com/varsano> Upgrade NodeJS. Nightmare will not
> work with anything <4.x.
>
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub
> <https://github.com/segmentio/nightmare/issues/725#issuecomment-238268811>,
> or mute the thread
> <https://github.com/notifications/unsubscribe-auth/AOqEzp1fRuYss6T0I4ANBCdgQq1oYxh6ks5qd0eLgaJpZM4JMD6C>
> .
>
",varsano,2016-07-14 14:05:39
724,2016-07-13 21:40:38,"Hi. i have some issue with running form filling in for loop. The problem is that i can't enable DevTool because i'm using ""nightmare-upload"" it wont work if i will enable DevTools. So i can't see is there any error in console or something else. It's running several times and stopping/freezing on some page. 
My question : is there any option to get all messages, events, errors with listening only one event so i can see what is happening on the page. 
After some more investigation i detected that it's stopping on .wait(selector) function. I checked and the callback is not working always once it's not working and the wait function is stopping working.
This is the code to test it. Sometimes it's working sometimes no, so i think it's some bug maybe.

<S_CODE_TOKEN>
",hovosanoyan,2017-01-02 21:10:24
724,2016-07-14 13:46:38,">  is there any option to get all messages, events, errors with listening only one event so i can see what is happening on the page.

Try running your script with `DEBUG=nightmare*,electron*` if you're not already.  That might have some useful information.

> After some more investigation i detected that it's stopping on .wait(selector) function.

Is it the same one every time?

> I checked and the callback is not working always once it's not working and the wait function is stopping working.

Which callback?  The one for `co`?
",rosshinkley,2017-01-02 21:10:24
724,2016-07-14 14:35:13,"hi, thanks for respond. Yeah i'm already using DEBUG flags. But can't get information about my issue.

It's every time in same page but the count of loops is different so once it may stop on 15 another time it will stop on 5.

And what about callback i meant the 

<S_CODE_TOKEN>

in **action.js** line : 405 .

I think this is the same issue #251 
I tried with .wait(milliseconds) and it's working, so my trouble may be fixed. But i think this we still have the issue, probably bug. 
",hovosanoyan,2017-01-02 21:10:24
723,2016-07-13 19:32:42,"Tried it on multiple sites, different elements, the element is being acquired, but the return is an empty object.
",xmen4u,2016-07-25 20:50:42
723,2016-07-14 13:34:33,"I'm guessing you're trying to return `DOMElement.getBoundingClientRect()` from `.evaluate()`?  I suspect that the properties of DOM object you get back are not enumerable, and as such, aren't getting serialized.  Try explicitly returning an object with the properties you want.
",rosshinkley,2016-07-25 20:50:42
723,2016-07-14 18:53:21,"@rosshinkley correct, that is what i'm trying to do. However, i've also tried explicitly doing that, by Object.keys it, however in both cases the return is an empty array [object]. Unless you meant something completely different.
",xmen4u,2016-07-25 20:50:42
723,2016-07-21 18:40:53,"anyone?
",xmen4u,2016-07-25 20:50:42
723,2016-07-22 21:36:39,"@xmen4u Could you post an example?  I want to be sure we're on the same page.
",rosshinkley,2016-07-25 20:50:42
723,2016-07-22 22:16:02,"@rosshinkley: sure:

`nightmare.viewport(800,600).goto(url)wait().evaluate(()=>document.getElementById('selector').getBoundingClientRect()).then(bounds=>console.log(bounds. .... )).catch(...)`

where the console.log can be specific or JSON.stringify, i've tested both. 
",xmen4u,2016-07-25 20:50:42
723,2016-07-22 23:32:50,"Again, the `DOMRect` that `getBoundingClientRect()` returns won't serialize nicely, and won't cross the IPC boundary between Electron and Nightmare.  You'll lose the properties and be left with an empty object.

The easiest way to fix this is to return an object with the properties off of the `DOMRect` that you want.  Something like:

<S_CODE_TOKEN>

I apologize this wasn't clear before.
",rosshinkley,2016-07-25 20:50:42
723,2016-07-24 03:27:05,"@rosshinkley Thank you so much! this seems to work!
",xmen4u,2016-07-25 20:50:42
723,2016-12-09 23:22:15,Do you guys would happen to know in which unit these coordinates are returned? The bounding rectangle I'm getting is distorted vertically...,sebastienbarre,2016-07-25 20:50:42
723,2016-12-17 02:57:38,"@sebastienbarre Memory serving, they're in pixels... you _might_ want to open a new issue (if you haven't already) with an example.",rosshinkley,2016-07-25 20:50:42
722,2016-07-13 16:20:32,"I have 4 divs, each 100px tall. I set the viewport height to 400px. The viewport should be the same height as the 3 divs combined, but the last div is cutoff. I noticed the amount cutoff is the same height of the window control bar at the top of the window. In other words, it would seem that `.viewport()` sets the height of the window not the height of the viewport.

![Screenshot](https://i.imgsafe.org/6698013ac1.png)
",asakusuma,2016-08-08 17:02:21
722,2016-07-14 13:26:03,"This is a known quirk, for lack of a better word.  The underlying implementation calls [`BrowserWindow.setSize()`](http://electron.atom.io/docs/api/browser-window/#winsetsizewidth-height-animate).  It's been touched on in [#593](https://github.com/segmentio/nightmare/issues/593#issuecomment-216927915) as a breaking change, and also talked about in [#596](https://github.com/segmentio/nightmare/issues/596#issuecomment-214392429).
",rosshinkley,2016-08-08 17:02:21
722,2016-08-08 17:02:21,"Also worth pointing out: setting `webPreferences.useContentSize` to `true` will force the render area to be the size that `.viewport()` sets.

With that, I think this issue is resolved.  If you're still having problems, feel free to reopen/open a new issue.
",rosshinkley,2016-08-08 17:02:21
721,2016-07-12 21:55:44,,amilajack,2016-08-03 02:15:50
720,2016-07-12 21:17:22,"I'm creating a custom action and I want to call another action in an 'evaluate_now' manner. Is there any way to do this?

e.g. I'd like to do something like this...

<S_CODE_TOKEN>

I appreciate any help you can give! 
",caseygoodhew,2016-08-08 17:00:36
720,2016-07-14 13:18:33,"I think you'd be better off defining your custom action (if you need one) and then using [`.use()`](https://github.com/segmentio/nightmare#useplugin).  That will let you queue multiple actions together, which I think is ultimately what you're after.

The problem with defining actions within actions is that the action you define (`something` in your example) will add actions to the queue - but instead of adding them between `something` and the next action in the chain, it will add them at the end as the action function for `something` isn't run immediately.

For a little background, you may want to take a look at rosshinkley/nightmare-examples#3, the [`.action()` example](https://github.com/rosshinkley/nightmare-examples/blob/master/docs/beginner/action.md) and the [`.use()` example](https://github.com/rosshinkley/nightmare-examples/blob/master/docs/beginner/use.md).
",rosshinkley,2016-08-08 17:00:36
720,2016-08-08 17:00:36,"Closing for inactivity.  If this is still a problem, feel free to reopen/open a new issue.
",rosshinkley,2016-08-08 17:00:36
719,2016-07-12 06:46:55,"I used examlpe.js for assembly testing.
Create a configuration file webpack.config.js:
`
'use strict';

module.exports = {
    entry: './example.js',
    output: {
        filename: 'bundle.js',
        path: './built'
    },
    resolveLoader: {
        modulesDirectories: [
            '/node_modules'
        ]
    },
    node: {
        fs: ""empty"",
        child_process: ""empty""
    }
}
`

launched webpack

I got the following error:
`
ERROR in ../electron/index.js
Module not found: Error: Cannot resolve 'file' or 'directory' ./lib-cov/electron in C:\node.data\parser\node_modules\electron
 @ ../electron/index.js 2:4-33

ERROR in ../electron/~/drip/index.js
Module not found: Error: Cannot resolve 'file' or 'directory' ./lib-cov/drip in C:\node.data\parser\node_modules\electron\node_modules\drip
 @ ../electron/~/drip/index.js 2:4-29

ERROR in ../electron/~/tea-concat/index.js
Module not found: Error: Cannot resolve 'file' or 'directory' ./lib-cov/concat in C:\node.data\parser\node_modules\electron\node_modules\tea-concat
 @ ../electron/~/tea-concat/index.js 2:4-31
`
How can I compress the project? Webpack not indispensable tool to use. Can you suggest any other tools to build?
",vshvydky,
719,2016-08-26 07:50:31,"+1
",starInEcust,
719,2017-03-24 18:34:02,+1,thebetterjort,
718,2016-07-09 19:24:17,"Fixes #678.
",rosshinkley,2016-08-03 03:55:07
717,2016-07-09 19:23:10,"Fixes #492.
",rosshinkley,2016-08-03 03:54:47
716,2016-07-09 19:20:41,"Fixes #450.  Also serves as an excuse to clean up the `self` and `self.options` references.
",rosshinkley,2016-08-03 03:54:30
715,2016-07-09 04:41:08,"Hi all,
I would like to scrap multi-site with one restful api, I use express to implement it.
But I only triggered nightmare successfully in first time with my api,
when I call again my api I can't trigger nightmare any more :(

Have any idea?

another question, in below case, I need to instantiate new Nightmare object individually , so that I can scrap three different site, have any smarter way to achieve that?

bellow `getScrap` is my apiControler function with express `Router` GET callback:

<S_CODE_TOKEN>
",sevenLee,2016-08-08 16:59:52
715,2016-07-09 15:18:44,"> But I only triggered nightmare successfully in first time with my api,
> when I call again my api I can't trigger nightmare any more

It looks like you're defining your instances outside of `getScrap()`, then calling `.end()` inside of `getScrap()`, which will end and destroy the Nightmare/Electron instances.  Once they are ended, they can no longer be used.  Try moving the creation of your Nightmare instances inside of the `getScrap()` method.

> another question, in below case, I need to instantiate new Nightmare object individually , so that I can scrap three different site, have any smarter way to achieve that?

Depends on what your use case is.  You could use a single Nightmare instance and iterate over the URLs, but that will take more time as Nightmare execution _must_ be sequential.  If you're curious on how to do such a thing, [this article from `nightmare-examples`](https://github.com/rosshinkley/nightmare-examples/blob/master/docs/common-pitfalls/async-operations-loops.md) might be worth reading.

Finally, it's probably worth pointing out that based on your above code, you don't have to use `cheerio`.  You could use `.evaluate()` and CSS queries to accomplish what you want, I think.
",rosshinkley,2016-08-08 16:59:52
715,2016-07-09 15:31:47,"Thanks a lot! it could work now and I will check nightmare-example. about cheerio, because I am familiar jquery, it is handy to me. It means the performance is better when I use css queries in `.evaluate()`?
",sevenLee,2016-08-08 16:59:52
715,2016-07-09 18:02:27,"Performance-wise, you might see a slight improvement.  You would be cutting out the time it takes for the IPC to respond with the HTML and the time it takes `cheerio` to parse the HTML document.

If jQuery is your tool of choice, you could also use [`.inject()`](https://github.com/segmentio/nightmare/#injecttype-file) to add jQuery to the page so it's available when you use `.evaluate()` (if jQuery is not available on the page already).
",rosshinkley,2016-08-08 16:59:52
715,2016-08-08 16:59:52,"Closing for inactivity.  If you're still having issues, feel free to reopen/open a new issue.
",rosshinkley,2016-08-08 16:59:52
714,2016-07-08 17:09:58,"Fix #696.

Changes:
1. Adds error when authentication fails
2. Adds the ability to end a Nightmare chain from an event that happens out-of-band using the `die` event
3. Allows for credentials to be reset mid-stream.
",rosshinkley,2016-08-03 03:34:02
713,2016-07-07 19:20:50,"When I use .click('#submitLink') to submit a form, I would like to get the response headers...but I cannot find a way to do this with nightmare.  Am I missing something?  Any help is appreciated...thanks,

Brian
",btknorr,2016-08-08 16:59:07
713,2016-07-08 19:17:03,"I think the [`did-get-response-details` event](https://github.com/electron/electron/blob/master/docs/api/web-contents.md#event-did-get-response-details) should have what you're after.  Something like:

<S_CODE_TOKEN>
",rosshinkley,2016-08-08 16:59:07
713,2016-08-08 16:59:07,"Closing for inactivity.  If this is still a problem, feel free to reopen/open a new issue.
",rosshinkley,2016-08-08 16:59:07
712,2016-07-06 22:20:56,"I've got an automated test-suite for a few paypal actions, manually testing stuff works (ie put an URL in the browser, complete the transaction), but going through nightmare/elector child processes closes from to time (based on what A/B testing bucket my test had fallen in).

Logs for the build:
https://semaphoreci.com/makeomatic/ms-payments/branches/fix-updated-transport/builds/1

Code for the test that fail:
https://github.com/makeomatic/ms-payments/blob/fix/updated-transport/test/suites/sales.js#L24-L85

Gets to this point:
https://github.com/makeomatic/ms-payments/blob/fix/updated-transport/test/suites/sales.js#L65

Then electron closes right away. I'm not sure what I can do here and how to avoid such a case or at least fail not on a timeout
",AVVS,2016-12-07 17:40:39
712,2016-07-08 18:34:33,"@AVVS are those files available publicly?  The links you provided all 404.

Maybe you could post the relevant parts here or in a gist?
",rosshinkley,2016-12-07 17:40:39
712,2016-07-08 18:42:27,"@rosshinkley restored branch so you can see the code, logs are also available again on this same build
",AVVS,2016-12-07 17:40:39
712,2016-07-09 18:24:22,"At first blush, I suspect the selector you're typing into does not exist.  It may be worth checking with `.exists()` first, and if it does not exist, throwing an exception.  Error handling/reporting could stand some improvement (see #646).
",rosshinkley,2016-12-07 17:40:39
712,2016-07-09 19:01:59,"I'll check it. Thanks for pointing out
",AVVS,2016-12-07 17:40:39
712,2016-07-26 12:42:46,"@AVVS Most crashes in electron in my experience are due to invalid selectors, run electron with the verbose flag, it should reveal invalid selectors (or whatever else is making it crash).
",inakianduaga,2016-12-07 17:40:39
712,2016-08-08 16:58:27,"@AVVS Is this resolved?
",rosshinkley,2016-12-07 17:40:39
712,2016-08-09 15:26:18,"@rosshinkley not yet, still playing with this. Please leave this issue opened and I'll let you know
",AVVS,2016-12-07 17:40:39
712,2016-12-07 17:22:42,@inakianduaga : how to run electron with verbose flag ?,GautierT,2016-12-07 17:40:39
712,2016-12-07 17:40:39,@rosshinkley recent versions seem fine & thanks for the tips,AVVS,2016-12-07 17:40:39
712,2016-12-17 03:24:42,"@AVVS No problem, glad you got it sorted.",rosshinkley,2016-12-07 17:40:39
711,2016-07-04 21:34:59,"Is it possible to re-inject (manually or otherwise) previously injected files when the electron app refreshes due to file change (via watcher). The goal being to inject test files every time I update them (without having to restart nightmare).
",dwelle,2016-07-11 19:25:55
711,2016-07-08 17:46:21,"Instead of using `.inject()` (which is what I'm assuming you're using?), you _might_ want to define a [custom preload](https://github.com/segmentio/nightmare#custom-preload-script) for your test suite.
",rosshinkley,2016-07-11 19:25:55
711,2016-07-11 19:25:43,"Great, thanks for help.

For others, here's the MWP to append a file:

<S_CODE_TOKEN>

But, you may want to copy/paste the default contents of [preload](https://github.com/segmentio/nightmare/blob/master/lib/preload.js), too, as stated.
",dwelle,2016-07-11 19:25:55
710,2016-07-03 01:27:06,"I did some research on switching to an iframe and found a package someone made for it. Unfortunately, this package is outdated.
I would like to switch to an iframe based on both the index and the name of the frame.
Thanks.
",div3rse,2016-07-05 05:37:03
710,2016-07-08 17:43:23,"@diverse-soles Out of curiosity, what library were you using?
",rosshinkley,2016-07-05 05:37:03
710,2016-07-09 10:21:40,"@rosshinkley https://www.npmjs.com/package/nightmare-iframe
https://github.com/segmentio/nightmare/issues/203
",div3rse,2016-07-05 05:37:03
709,2016-07-02 14:52:55,"What about if I have the follow test case:

<S_CODE_TOKEN>
",goddyZhao,2016-07-09 17:58:50
709,2016-07-06 12:23:50,"$.ajax has a setting named `async`, you can set up to ""false"". Maybe it works :dancer: 
",icaromh,2016-07-09 17:58:50
709,2016-07-07 12:02:36,"Thanks @icaromh for your information. Actually ajax is just an example, I actually want to know how to handle the async case, because with phantomjs, if you execute a javascript function on the page you open, there is an API called `window.callPhantom` to communicate with the phantom process outside, so the async handler won't be a problem. I just want to ask whether there are corresponding solution in nightmarejs
",goddyZhao,2016-07-09 17:58:50
709,2016-07-08 18:31:05,"@goddyZhao This is one of the things that #573 was attempting to address.  Currently, there is no way to allow for asynchronous actions in `.evaluate()` out of the box.
",rosshinkley,2016-07-09 17:58:50
709,2016-07-09 17:58:50,"Merging into #552.
",rosshinkley,2016-07-09 17:58:50
708,2016-07-01 01:53:35,"Hello!
I would like to know how I could improve the code quality of this example script.
My main programming language isn't JavaScript so I am a bit lost about how I could make it better.

This example Nightmare script goes to `accounts.google.com/signin` and sign a Google account.
The script also checks if an element exist and if it not exists then the script will log an error so It can notify me when the bot is broken.

Here's the code:

<S_CODE_TOKEN>
",alfonsomga,2016-07-05 22:12:58
708,2016-07-05 22:12:58,"Solved.
",alfonsomga,2016-07-05 22:12:58
708,2016-11-02 21:07:53,"Can you share how you solved this?  I'm also trying  to loop over several exists() checks
",pinguinoholdings,2016-07-05 22:12:58
708,2016-11-02 21:11:17,"@pinguinoholdings check out this [repo](https://github.com/rosshinkley/nightmare-examples), maybe it can help you.
",alfonsomga,2016-07-05 22:12:58
708,2016-11-02 21:13:34,"Thanks, I've been pounding through that all night.  My code is working similar to yours, but it has a lot of nested .then() clauses that I'm hoping to clean up
",pinguinoholdings,2016-07-05 22:12:58
708,2016-11-02 22:29:23,"Thanks @alfonsomga 

My use case was logging into a site, and then clicking through an unknown number of ""OK"" button prompts before I could get to the page I was looking for.  Being an unknown number, I couldn't make it work by nesting .then() statements, not to mention how to exit the check.  This is most likely not the most elegant solution, but it works.

For anyone following along later, hopefully this can provide a start...

<S_CODE_TOKEN>
",pinguinoholdings,2016-07-05 22:12:58
708,2016-11-02 23:01:43,"@pinguinoholdings I would recommend you to use [vo control flow library](https://github.com/matthewmueller/vo) to achieve it.

Here's an example code:

<S_CODE_TOKEN>

As you can see it's pretty simple and straightforward.
",alfonsomga,2016-07-05 22:12:58
708,2016-11-02 23:06:10,"By the way if you use vo control flow library you will can do things like:

<S_CODE_TOKEN>

I'm sure this will make your _life easier_!
",alfonsomga,2016-07-05 22:12:58
707,2016-06-30 22:29:10,"If the page load fails, the error will be an object **wit** the following properties
",leonstafford,2016-07-08 22:09:41
707,2016-07-01 16:36:30,"Thanks for another pair of eyes!
",rosshinkley,2016-07-08 22:09:41
706,2016-06-30 21:06:49,"Hey - this project is awesome!

I am, however, having a bit of trouble with the .pdf functionality. I have set breakpoints in the callback for the internal pdf action function, and it does return an error - however that error is just a blank object - nothing in it. I've been trying multiple options and such to try to get this to work, or to at lest return an actionable error, but come up empty... Would really appreciate any input/advise you may have :smile: 

<S_CODE_TOKEN>
",bradleygore,2016-07-01 23:27:33
706,2016-07-01 18:10:34,"Two problems afoot here.  

Let's address the immediate problem first: why it's crashing.  You have specified a `pageSize` of `letter`, which [according to the Electron docs](https://github.com/electron/electron/blob/master/docs/api/web-contents.md#webcontentsprinttopdfoptions-callback) should be capital-L `Letter`.  The page size is (evidently) case-sensitive as `letter` crashes on my Ubuntu 16.04 image and `Letter` works fine.

Onto the other problem: why the output was empty.  `.pdf()` tries to happily pass the error argument up the IPC chain, and since `Error` does not have helpful enumerable properties, the information is omitted. This falls under the banner of what #646 was trying to accomplish.
",rosshinkley,2016-07-01 23:27:33
706,2016-07-01 22:00:52,"@rosshinkley Oh man - I totally overlooked the casing being off... that solved it - so sorry to have bugged you for that. Thanks a ton for your excellent help!!!
",bradleygore,2016-07-01 23:27:33
705,2016-06-30 20:03:00,"Addresses issue #704, also removes ""it.only"" from unit tests (assuming that was unintentional).

I admit that I'm not sure what to write for a unit test here.  If you can give me some guidance, that would great.  Otherwise, existing tests pass, and a test run on my machine appears to use the TZ environment variable.  Thanks!
",rfink,2016-08-03 02:16:56
705,2016-07-01 17:36:02,"> also removes ""it.only"" from unit tests (assuming that was unintentional).

Yes, it was unintentional.  Streams got crossed.  (This was also fixed in #697, fwiw.)

> I admit that I'm not sure what to write for a unit test here. If you can give me some guidance, that would great.

I think the easiest thing to do would be to use a custom `.action()` action to pull the environment variable from Electron's `process`.  You should then be able to create an instance with an environment variable, use the custom action to get that variable, and test accordingly.
",rosshinkley,2016-08-03 02:16:56
705,2016-07-08 17:35:37,"Thanks!  I'll get that going.
",rfink,2016-08-03 02:16:56
705,2016-07-08 18:42:08,"So what I'm finding, is that the ""env"" object doesn't get attached to the ChildProcess object in a way that node can access it (i.e. this.child.env, this.proc.env, or this.proc._handle.env).  Unless I'm missing something, it might be hidden under the covers in V8.  Do you have any other suggestions?
",rfink,2016-08-03 02:16:56
705,2016-07-08 18:46:25,"You should be able to pull `env` off of `process` like you might for any ordinary process, I think.  Off the cuff:

<S_CODE_TOKEN>

... should be enough to at least make sure you can get the environment variables back.
",rosshinkley,2016-08-03 02:16:56
705,2016-07-08 18:59:09,"That's great, thanks!  That makes a lot of sense, I had to learn a little how the process communication was working.  I really appreciate your help and patience.
",rfink,2016-08-03 02:16:56
705,2016-07-08 19:20:48,"No problem! :)

One minor nit: could you remove the `console.log`?
",rosshinkley,2016-08-03 02:16:56
705,2016-07-10 01:21:02,"Whoops - my mistake.  Removed.  Thanks!
",rfink,2016-08-03 02:16:56
704,2016-06-30 16:26:17,"I'm actually not 100% sure if this works, but would it be possible to allow environment variables to be set for the child process?  I would like to set TZ to change the timezone that electron is running on.  I can create a pull requests if needed.
",rfink,2016-08-08 16:46:22
704,2016-08-08 16:46:22,"This should have been fixed with #705.  Closing.
",rosshinkley,2016-08-08 16:46:22
703,2016-06-30 07:41:11,"I have an issue with a web application we develop in our company: There are presented the first results of a search and to see more results you have to scroll down. As there are many indexes to choose, there is a second scrollbar. And I wanted Nightmare to scroll down to the bottom of the page until no more results are presented. But it was not possible to scroll down.
I tried to reproduce it with another website and I found a website where I can see the same behaviour.

I am running the latest version of NightmareJS on Windows 7, 64 bit

Here is my code: 

<S_CODE_TOKEN>

And I also will attach the screenshots to show you that none of the scrollbars scrolled down: 

Before:
![screenbefore](https://cloud.githubusercontent.com/assets/10739344/16480387/e34f3f1a-3e9d-11e6-9c82-fd1f92a84c72.png)

After:
![screenafter](https://cloud.githubusercontent.com/assets/10739344/16480388/e35252e0-3e9d-11e6-9ede-1997d65ac5cd.png)

If anybody has found a solution for my problem, please let me know. 
Thank you
",felix185,2016-07-04 06:47:04
703,2016-07-01 20:48:09,"`.scroll()` [scrolls on the window](https://github.com/segmentio/nightmare/blob/master/lib/actions.js#L494), not on the components contained in them.

That being said, you should be able to use `.evaluate()` and [`Element.scrollTop`](https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollTop) to accomplish what you're trying to do.  If I'm reading your source, you're trying to scroll to the end of all of the code divs, yes?  Something like:

<S_CODE_TOKEN>

I left both evaluate calls in for illustrative purposes.  You could cut one of the `.evaluate()` calls and determine height and scoll in a single step:

<S_CODE_TOKEN>

These might not be 100% what you need, but it should get you on track.
",rosshinkley,2016-07-04 06:47:04
703,2016-07-04 06:47:04,"@rosshinkley Thank you very much for your help.
",felix185,2016-07-04 06:47:04
702,2016-06-29 12:37:40,"Fix #700
",coyotte508,2016-07-08 22:09:51
701,2016-06-28 01:48:39,"I'm trying to load 1 URL, then select all items from a select menu, to download multiple bank statements.

I'm following the guide [here](https://github.com/rosshinkley/nightmare-examples/blob/master/docs/common-pitfalls/async-operations-loops.md) to loop using reduce.

partial code:

<S_CODE_TOKEN>

After this runs, there is one file in the tmp folder, and it corresponds to the first select Option.

Also, the file name is bankPDF_0.

So the option and index are not iterating inside the nested nightmare section, though they are inside the reduce callback...

Here is some of the console output:

<S_CODE_TOKEN>

What I'm doing wrong to loop using reduce / promises?
",cdock1029,2016-07-08 21:05:02
701,2016-07-08 19:33:48,"At first blush, what you have looks like it should work.  Out of curiosity, if you print the index and directory in the then starting with `.then(info => { ...`, what does that result in?  What download library are you using?
",rosshinkley,2016-07-08 21:05:02
701,2016-07-08 20:53:21,"I did a little digging, and assuming you're using `nightmare-inline-download`, this is a bug in that library.  The download handler never gets removed, meaning the first download handler will always handle the download, assigning it the same path.  Fix for that shortly.
",rosshinkley,2016-07-08 21:05:02
701,2016-07-08 21:05:02,"Merging into rosshinkley/nightmare-inline-download#6.

If that's not the library you're using, feel free to reopen this issue.
",rosshinkley,2016-07-08 21:05:02
701,2016-07-11 19:40:47,"It was, thanks!
",cdock1029,2016-07-08 21:05:02
700,2016-06-27 16:46:02,"[The custom preload docs](https://github.com/segmentio/nightmare#custom-preload-script) have `__nightmare.ipc = require('ipc')`, which should read `__nightmare.ipc = require('electron').ipcRenderer`.
",rosshinkley,2016-07-08 22:09:51
699,2016-06-27 14:02:31,"Can I change the screen resolution in nightmarejs?
For example, how it works in Casperjs:

<S_CODE_TOKEN>

Already more than 4 hours trying to figure out. Thank you!
",Firues,2016-08-08 16:47:59
699,2016-07-01 18:26:41,"I'm not certain, but I don't think so, at least not directly.  Electron's screen resolution depends on the framebuffer it's rendering to.  You could use something like `xvfb-run` to alter the framebuffer (#224 touches on this, although for an entirely different reason).

What are you trying to accomplish?
",rosshinkley,2016-08-08 16:47:59
699,2016-08-08 16:47:59,"Closing for lack of response from OP.  Feel free to reopen/open a new isuse if this is still a problem and you have more information.
",rosshinkley,2016-08-08 16:47:59
698,2016-06-26 11:49:11,"Hey,

I'm using nightmare to build scrapers,
till now it went pretty well with fast response website - however I've encountered a very slow response website which give me timeouts on wait for elements (it's set to 30 seconds).

I know that I can change the wait timeout, however I'm trying to figure out a better way to solve it as a static timeout isn't the great solution when it fluctuating.

Thanks !
",geostant,2016-08-08 16:58:00
698,2016-07-01 17:20:24,"I'm not exactly sure I understand the problem you're trying to solve.  Are you asking if `.wait()` could accept a timeout per-call?
",rosshinkley,2016-08-08 16:58:00
698,2016-08-08 16:58:00,"I _think_ the intent of this is the same as #742.  Merging.
",rosshinkley,2016-08-08 16:58:00
697,2016-06-25 20:07:22,"Fixes #694, also removes an errant `.only()` in the test suite.
",rosshinkley,2016-07-08 22:09:28
697,2016-06-27 07:07:05,"LGTM
",LinusU,2016-07-08 22:09:28
697,2016-06-27 10:12:05,"LGTM
",albinekb,2016-07-08 22:09:28
696,2016-06-23 14:45:56,"Hi, 

For now, it looks like the nightmare is hanged if the http authenticate with wrong password and need to wait navigation timeout. 

Thanks,
Tim 
",snakewa,2016-08-03 03:34:02
696,2016-07-08 17:11:34,"Looking at the current implementation of `.authentication()` and the documentation for the [`login` event](https://github.com/electron/electron/blob/master/docs/api/web-contents.md#event-login), the actual authentication happens out-of-band with respect to the Nightmare action chain.  There also isn't a login failure event exposed by Electron.  This makes handling error cases tough.

The best solution I can think of is to have Nightmare support an internal event to kill the event chain from an out-of-band event, then creating an out-of-band event after a certain number of retries.

Trying to fix this also uncovered another problem: being able to change authentication after it is set.

All of the above _should_ be addressed in #714.
",rosshinkley,2016-08-03 03:34:02
695,2016-06-22 11:30:27,"I was trying out rosshinkley's solution in [#328](https://github.com/segmentio/nightmare/issues/328#issuecomment-159311982) for taking full screenshots, that is, where the height adjusts to the measured dimensions of the `body`-element. As a test, I ran it against BBC.com, which in console returns:

<S_CODE_TOKEN>

But the returned screenshot is 987px wide and 1025px high. I saw in some other issues that this may have to do with the system, so for reference this was run on Windows 10 64-bit 1920x1080 resolution (no HiDPI or other peculiarity, plain old laptop with an Nvidia card).

Why would the dimensions of the output image not match the recorded dimensions?

For reference, the script ran:

<S_CODE_TOKEN>
",OleVik,
695,2016-07-01 19:52:52,"Is this possibly the same problem as #596?
",rosshinkley,
695,2016-07-01 21:43:00,"Seemingly not, as the resulting screenshot is limited to a ""standard"" viewport, not affected by scaling. There is no zooming or proportionally dubious screenshots, rather just the absence of a variable height. The outcome width is as expected, but the outcome height is 1025px where it should be 7119px.
",OleVik,
695,2016-07-07 16:35:55,"+1 I have the same issue too (with almost equal code) on windows 7 x64.
But I getting the page size with following method:

<S_CODE_TOKEN>
",antixrist,
695,2016-07-08 17:41:15,"@OleVik Specifically, I was referring to the scrollbar/title et al eating into the pixel count.  I think that might be _part_ of the problem.  The buffer height being incorrect is distressing.

I know there is a problem where you cannot create a window larger than the display size on Windows (see electron/electron#4932 and possibly electron/electron#5053), but resetting the viewport (which calls `BrowserWindow.setSize()` under the covers) _should_ work.

Out of curiosity: can you set the height using `.viewport()` to something big but smaller than the size returned?  Something on the order of `.viewport(dimensions.width, 4000)`?  (I wonder if you're possibly hitting a texture limit and Chromium is misbehaving because of it.)
",rosshinkley,
695,2016-07-13 12:15:30,"Running the same script as above, but with `yield nightmare.viewport(dimensions.width, 4000)`, the resulting image is 987x1025.
",OleVik,
695,2016-07-30 16:15:03,"@OleVik Out of curiosity, what happens if you try to snap a screenshot of say, `.viewport(4000,4000)`?

A while back, I wrote a quick and dirty [gist](https://gist.github.com/rosshinkley/b5fb5061073756e926b791a66d62b24b) that spit out the max texture size - I wonder if that could be ported to use opengl and freeglut for Windows?
",rosshinkley,
695,2016-07-31 12:25:41,"With `yield nightmare.viewport(dimensions.width, 4000)` the output image is 1914x1025, and the console output `{ height: 7469, width: 997 }`. So seems like a texture limit, not quite sure how to port that gist to Windows, but it would be very handy to be able to take unconstrained screenshots.
",OleVik,
695,2016-08-08 15:10:10,"Hm, that's ... odd.  I would not expect a texture tile to be rectangular.  This makes me wonder if it's something perhaps Windows-specific.

What version of Windows are you running?
",rosshinkley,
695,2016-08-08 17:04:40,"Not sure which details matter most, but: Windows 10 64-bit, DirectX 12 on Nvidia GeForce GT 540M (driver v353.62). Resolution is 1920x1080, and since the graphics are integrated (Intel HD Graphics 3000) its current resolution is reported by Speccy as 1536x864 pixels.
",OleVik,
695,2016-10-05 08:04:41,"I found electron option code.
https://github.com/electron/electron/blob/master/docs/api/browser-window.md#new-browserwindowoptions

Try this code, 
`var nightmare = new Nightmare({
maxHeight:2000,
maxWidth:2000
    });`
",mkmkku,
695,2016-11-25 16:35:27,"var nightmare = new Nightmare({ maxHeight:2000, maxWidth:2000 }); **almost** fixed it for me. It's only getting 95% of the screenshot now even with max-height being extremely large and the actually screenshot being nowhere near the max height. For some reason the viewport still does not expand all the way to the height specified.",jimmaay,
695,2017-01-12 22:56:34,"@jimmaay/@OleVik, can you try 
var nightmare = new Nightmare({ minHeight:7119, minWidth:1000 });

It worked for me.",BhavinPatel04,
695,2017-01-12 23:39:32,"@BhavinPatel04 It is indeed much closer to the expected output than before. Using Nightmare v2.9.1, running the same script as before but with

<S_CODE_TOKEN>

The returned image is 1914px wide and 7060px high. Apart from the small error margins in dimension, which presumably could be offset with higher `min`-properties, there is a fairly large discrepancy with set `width` and `height`. When I add in `maxHeight:2000` and `maxWidth:2000`, as suggested by @mkmkku, the returned image is 1990px wide and 7060px high.

I should add, the output of `console.dir(dimensions);` is `{ height: 7144, width: 993 }`, so there is also a discrepancy between how big Nightmare measures the target to be, and what the output is, at least with the setup from the initial post updated with the above.",OleVik,
695,2017-01-13 00:50:29,"Yeah I ended up changing maxHeight to 16384, anything higher will cause #906",jimmaay,
694,2016-06-22 11:30:04,"I use `xvfb-maybe` to run electron in Docker but since 2.5.1, it seems to crash with no further indication.

`nightmare@2.5.1`:

<S_CODE_TOKEN>

`nightmare@2.5.2`:

<S_CODE_TOKEN>

Reverting to 2.5.0 solves the problem.
",oncletom,2016-07-08 22:09:28
694,2016-06-22 13:33:40,"What OS? We have seen the same issue on Ubuntu 16.04, it has nothing to do with nightmare but is a problem in electron 1.x.x, which nightmare upgraded to in `2.5.1`
",albinekb,2016-07-08 22:09:28
694,2016-06-22 13:34:30,"`nightmare electron child process exited with code null: undefined +21ms`

I saw this as well on Ubuntu 16.04, it seems like the electron binary is exiting with a SIGSEGV right away. Could you try just starting electron (`./node_modules/electron-prebuilt/dist/electron`) and post the output?
",LinusU,2016-07-08 22:09:28
694,2016-06-22 13:40:52,"It uses an old Ubuntu:

<S_CODE_TOKEN>

Sadly when I run the following, nothing gets returned:

<S_CODE_TOKEN>
",oncletom,2016-07-08 22:09:28
694,2016-06-22 20:05:35,"There is an issue in electron repo that looks related https://github.com/electron/electron/issues/6186
",bahmutov,2016-07-08 22:09:28
694,2016-06-23 09:40:58,"This is fixed with electron `1.2.5` and `electron-prebuilt` is released.
So run `npm install` again and it should work 😄 
close? @oncletom
",albinekb,2016-07-08 22:09:28
694,2016-06-23 09:48:54,"Please bump the dependency in Nightmare before closing
",LinusU,2016-07-08 22:09:28
694,2016-06-24 15:58:25,"I confirm the problem is solved thanks the new release of electron.

Thank you all for your help :-)
",oncletom,2016-07-08 22:09:28
694,2016-06-25 19:19:24,"Reopening until Electron dependency is bumped.
",rosshinkley,2016-07-08 22:09:28
694,2016-07-23 02:58:58,"I am getting this error too.
Nightmare: 2.5.3
Electron prebuilt: 1.2.8
Ubuntu 14.04 in docker container
`electron:stderr Xlib:  extension ""RANDR"" missing on display "":1"".`
",trompx,2016-07-08 22:09:28
694,2016-07-30 15:53:00,"@trompx `XRANDR` being missing is not that big of a deal; unless you're explicitly loading it with `Xvfb` (or whatever X buffer you're using), that line is going to show up, serving as a warning that you will not be able to resize and rotate your buffer.  The original problem with this thread had to do with how Electron was being started, and on certain flavors of Linux, was crashing, which would cause Nightmare to misbehave.
",rosshinkley,2016-07-08 22:09:28
693,2016-06-21 14:22:13,"It seems like evaluate can sometimes hang and never resolve the promise if the page is navigating at the same time that the evaluation is happening.

In our application we are constantly running a polling function that will check in what state we are in, on a page that is reloading from time to time to show new data. The code looks something like this:

<S_CODE_TOKEN>

In some cases the function simply hangs, this is an example of the output:

<S_CODE_TOKEN>

It's a bit spammy, sorry about that, but as you can see it prints my first debug statement (`linusu:test Queueing read of login status +90ms`) and then nightmare runs the action (`nightmare:actions .evaluate() fn on the page +1ms`), but then it never returns to me so that my second debug statement can run.

I'd be happy to provide any more information that might be relevant, and I'll try to put together a test case.
",LinusU,
693,2016-06-25 23:45:17,"Hm, out of curiosity, what version of Nightmare are you using?

I thought that if the page was loading, Nightmare would wait for the artificial `did-change-is-ready` event before continuing from a `did-stop-loading` event.  In other words, a race condition while loading shouldn't be possible because the action chain _should_ be blocked.

I'd love to see a minimum case if you could throw one together.  As time permits, I'll see if I can reproduce the problem.
",rosshinkley,
693,2016-08-08 16:55:48,"@LinusU Bumping this thread - did you either get this resolved or put together a test case?
",rosshinkley,
693,2016-08-09 08:37:41,"Sorry for the radio silence, I never managed to solve it but I worked around it by not running evaluate in a loop :)

I have still to put together a test case, time has been tight as always...
",LinusU,
693,2016-09-27 18:25:22,"I just resolved race condition in `navit`. Assuming that the electron wrapper is written the same way, I decided to write here in case you're having the similar issue.

The problem was: during initial page load, `webContents.executeJavaScript` never actually executes (it never returns a callback if you're using `executeJavaScript(code, callback)` interface, the same I imagine is true for events).

So you'd need to wait until the page actually loads. I suggest checking `webContents.isWaitingForResponse` and if it's true, delay javascript evaluation until `did-stop-loading` event.

Something like this should work (I'm not entirely sure, so please test it out):

<S_CODE_TOKEN>

Here is a the commit in `navit`, so you can try to salvage tests and such: https://github.com/nodeca/navit/commit/6525dc7bf414894324d2ca8e99f076c24781f06f
",rlidwka,
693,2016-10-25 16:56:54,"+1 . 
Evaluate sometimes files if page is navigating.
Workaround was to ensure somehow that page is not navigating (eg. wait on some fix selector)
",barczaG,
693,2017-02-15 23:11:05,"Experiencing this mostly on production (free/slow Heroku dyno). This definitely feels like a race condition.

My workaround was to wrap every `evaluate` call (or function like `wait` which can use evaluate internally) and perform `nightmare.wait('html')` before attempting the _real_ wait/evaluate call.

**EDIT**: Turns out this workaround does improve the success rate but not to 100%. Still getting hung up on evaluate occasionally.",nfarina,
692,2016-06-20 19:52:55,"Fixes #689.
- moves timeout defaults to parent process
- adds a non-ending route to the test server
- uses `did-stop-loading` instead of `did-finish-loading` as the former
  is called regardless of load success or not
- adds an optional page transition timeout called `loadTimeout` that
  forces the `webContents` to stop after a given time.
",rosshinkley,2016-06-21 03:24:50
691,2016-06-20 19:49:15,"Based on several prior conversations toward moving Nightmare to a `.then()` based API, Nightmare has been updated to reflect that, but the readme has not been as well kept.
",rosshinkley,2016-06-21 03:24:28
690,2016-06-20 08:02:52,"Hello! Since new versions of `electron` (in our case `electron-prebuilt`) is released pretty often, have you thought about using [greenkeeper](https://greenkeeper.io/)? This would save some manual-work time and make sure nightmare is updated with the latest `electron`.
",albinekb,
690,2016-06-21 02:00:35,"That's a great idea.  I'll look into it.
",rosshinkley,
689,2016-06-18 04:46:02,"I've spent hours debugging why scripts intermittently do not complete.
I added 'heartbeat' messaging between main and child process and some granular logging to figure out what is happening.

It seems clear that in a situation where there is a failure for the page to complete loading, Nightmare has no timeout and error throw.

For example, I have a .click('a[....]') which results in a new page load, but for some reason the page does not complete loading.  Since there is no timeout for .click() operations, Nightmare is stuck.

Please refer to attached logging, you should be able to follow it easily.
I eventually termniate the process.

<S_CODE_TOKEN>

<S_CODE_TOKEN>
",TimNZ,2016-06-21 03:24:50
689,2016-06-18 04:47:04,"I think you need an global timeout mechanism
",TimNZ,2016-06-21 03:24:50
688,2016-06-17 06:03:14,"I already called .end() function somehow there is a electron still running in the task.
Anyone has a great idea how can i solve this issue? This issue bothering almost 1 month I can't find any solution.

Thanks
",AaronTrazona,
688,2016-06-20 17:47:01,"Could you post a small example that reproduces the problem?
",rosshinkley,
688,2016-06-22 19:56:43,"Basically, what I did make a lot of instances of nightmare until the nightmare stuck up when I stopped the process the electron still running in background even though I already stopped the process.
",AaronTrazona,
688,2016-08-03 05:54:25,"@AaronTrazona or @rosshinkley, it has been about a month since there was activity on this thread. ny further headway made on this? On my end, I have electron processes hanging around when my app is idle and nightmare.end() has been called. 

Was any route cause or solution found?
",mashaalmemon,
688,2016-08-03 06:34:12,"Nightmare is killing the main process it launches via child_process.spawn, and intermittently renderer processes are being orphaned after the kill()

I have a script that runs periodically purging abandoned electron.exe processes as I have a long running service based app using nightmare.

It is fairly easily re-produceable.  I've had it happen even just launch electron.exe manually and then killing the main process.

It may be worth having end() send a message to the spawned Electron process asking it to kill itself via app.quit() to see if that makes a difference.

If I get time next week I'll create a simple test app that can reproduce it.
",TimNZ,
688,2016-08-03 15:05:37,"@TimNZ that makes a whole lot of sense. I've experienced this on MacOSX as well as on linux (specifically running in a docker instance so the flavour of linux is the one that the official ""node:6.2.2"" is based on).

Hopefully there is a solution that can be used cross platform. I am attempting to use nightmare in a production environment but can't until this problem is solved.
",mashaalmemon,
688,2016-08-08 15:43:57,"@TimNZ If I'm understanding the problem properly (and it is _thoroughly_ possible I am not), this would mean either that `ChildProcess.kill()` isn't actually killing the child process, meaning Electron isn't honoring `SIGTERM`, or there is some edge case for ending the process that isn't handled properly.  (The latter seems _far_ more likely.)

I am curious to see a reproduction - that would be most informative.
",rosshinkley,
688,2016-08-08 20:34:47,"Ross, details here: https://github.com/electron/electron/issues/6120

It's orphaned Renderer/Helper processes, not Main.

As I said I don't think it is a Nightmare issue, and at this stage think it may have only been happening on Windows.

I haven't investigated further either since about Electron 1.2.3 since the app I deployed runs just fine in conjunction with an hourly script to kill orphaned renderer processes.

I'll try to do a mini app next week to replicate, and see if it getting the runner process to do app.quit() makes any difference.
",TimNZ,
688,2016-08-09 07:18:15,"In my testing as well, I've noticed that if Nightmare is run in a service/daemon or HTTP server, Electron instances don't get killed by `nightmare.end()` alone. One workaround that works, is to disconnect & kill the child process explicitly (see code below):

<S_CODE_TOKEN>

It seems to me that this issue is to do with Nightmare. In a service/daemon model, the final process termination of Nightmare doesn't occur properly. When the main service/daemon is terminated, a bunch of Nightmare log messages (example below) are dumped, hinting that previous processes didn't end until now.

`nightmare electron child process not started yet, skipping kill. +1ms`

By the way, I tested on Ubuntu 14.04.2 LTS running Nodejs 6.3.0, Electron 1.3.2, Nightmare 2.6.1, xvfb.
",voidmonk,
688,2016-09-06 08:44:04,"Do you have example app to be tested the #757 maybe have fixed the issue.
",daniel3d,
688,2016-09-20 10:35:25,"This issue was not fixed by #757 .
",rafalneves,
688,2016-09-28 13:25:25,"@rafalneves Can you give more info your comment is not really constructive what did you test what is not fixed?
",daniel3d,
688,2016-09-28 20:13:10,"I just replied to the previous comment. I tried to run the latest code (that includes #757 commited code) and I run into same problem (electron instances are not destroyed). Right now I'm using the fix proposed by @voidmonk that solved the issue.

I was using debian 8. Was an sporadic need, so I didn't test it anywhere else.
If I can assist you more, let me know.
",rafalneves,
688,2016-12-20 12:06:18,"I have figured out this bug in my code, but do not know exactly why. 
Electron instances is not destroyed in this example:
<S_CODE_TOKEN>

Here is working example:
<S_CODE_TOKEN>
",itomas,
688,2016-12-20 21:55:17,"@itomas i'm unable to reproduce the issue

>  Electron instances is not destroyed 

after executing the script you provided. Electron is closed correctly only thing I had to do to make it run was to add `.then()` otherwise the script is not working try running this on your machine and let me know if you still experiencing the same issue.

<S_CODE_TOKEN>

`os` Microsoft Windows [Version 6.3.9600] - Windows 8.1
`node` 6.9.1
`electron` 1.3.2
`nightmare`  2.9.0

> Note that if you're using promises, `.then()` must be called after `.end()`
[check the above here](https://github.com/segmentio/nightmare#end)
",daniel3d,
687,2016-06-16 16:22:51,"Add useful information found in issue #665 for devs looking for proxy info.
",agrberg,2016-07-08 22:09:16
687,2016-06-16 16:25:43,"I'm not married to the changes in the first two commits so if you don't like them, I'm happy to drop them.
",agrberg,2016-07-08 22:09:16
687,2016-06-21 02:08:48,"Keeping the documentation consistent: could you move the `.evaluate()` and `.then()` methods to be inline?
",rosshinkley,2016-07-08 22:09:16
687,2016-06-21 02:34:38,"By the by, the first two commits: +1.  Those are logical changes.
",rosshinkley,2016-07-08 22:09:16
687,2016-06-21 13:45:18,"Sure thing. I intended that to reduce the duplication but it's minimal and might make things easier on the reader. One sec and I'll have an update.
",agrberg,2016-07-08 22:09:16
687,2016-06-21 13:51:57,"@rosshinkley updated, thanks for the review
",agrberg,2016-07-08 22:09:16
687,2016-07-08 22:07:15,"Awesome.  Thanks! :)
",rosshinkley,2016-07-08 22:09:16
686,2016-06-16 11:02:59,"Hi all,
im new in using nightmarejs. and i just install the node & nightmare just today
im assume the version are pretty new
i have an automation on do some specific action within some website.
the problem is, when i do click the button to login to that website. naturally, it will popup a new window.

in program( java script), when i do command click(""submit1""), the browser are now closed, the popup window doesnt show up and also seems my program crash(exit). so i cant continue that automation
![screenshot from 2016-06-17 10 01 32](https://cloud.githubusercontent.com/assets/5646599/16139525/8769e5b8-3472-11e6-9368-6c4966476b6d.png)

is there any idea regarding that issue.
",aldwinrafferty,2016-07-09 17:56:01
686,2016-06-20 18:02:48,"I'm not sure I follow: when you click `#submit1`, the browser you click in closes?  Have you tried this with `.catch()`?  Also, are you sure the popup does not appear?  (The base Nightmare window is set to be always on top.  Try moving it around to see if the popup is hidden.)

It's worth noting that Nightmare does not work with multiple windows by default.  I wrote a [plugin](https://github.com/rosshinkley/nightmare-window-manager) to address very basic window management needs, but it lacks most of the basic commands that Nightmare has and exists more as a prototype than anything.  See the discussion for making window management native in the next major revision in #593.
",rosshinkley,2016-07-09 17:56:01
686,2016-07-09 17:56:01,"Closing for lack of activity.  If this is still an issue, feel free to reopen/open a new issue.
",rosshinkley,2016-07-09 17:56:01
685,2016-06-15 17:29:13,,cdock1029,2016-06-21 03:24:01
684,2016-06-13 15:08:21,"Fixes #680 and #682.
",rosshinkley,2016-06-21 03:24:14
683,2016-06-13 06:34:05,,littleweb,2016-07-09 17:53:38
683,2016-06-15 04:04:42,"Interacting with a Flash application is going to be difficult with Nightmare.  What are you trying to do?
",rosshinkley,2016-07-09 17:53:38
683,2016-06-21 12:41:48,"I need this too. Not because I need to directly interact with a flash app, but because the web page I load need flash to work.
(e.g load spotify with nightmare)
",Wykks,2016-07-09 17:53:38
683,2016-07-01 18:45:26,"For what it's worth, you _can_ load [Flash in Electron](https://github.com/electron/electron/blob/master/docs/tutorial/using-pepper-flash-plugin.md).

Something like the following should work:

<S_CODE_TOKEN>

You should see the Flash intro animation letting you know it is working properly.
",rosshinkley,2016-07-09 17:53:38
683,2016-07-09 17:53:38,"Closing for lack of response from the OP.  If this is still an issue, feel free to reopen/submit a new issue.
",rosshinkley,2016-07-09 17:53:38
683,2016-07-10 13:44:47,"Sorry for the delay ! It's working perfectly, thanks ! :)
",Wykks,2016-07-09 17:53:38
682,2016-06-12 14:47:00,"When nighmare instance have not used it have no process attached and process property. As the result process termination handler as the event reaction trying to detach process using not existing attribute what is producing slightly misleading error.

The least impact fix seems to become aware that process attribute does not exists.

/Users/justaman/projects/ifetch/node_modules/nightmare/lib/nightmare.js:178
  if (instance.proc.connected) {
                   ^

TypeError: Cannot read property 'connected' of undefined
    at endInstance (/Users/justaman/projects/ifetch/node_modules/nightmare/lib/nightmare.js:178:20)
    at emitOne (events.js:96:13)
    at process.emit (events.js:188:7)
",mrjj,2016-07-09 17:52:13
682,2016-06-13 12:50:36,"Thanks @mrjj but I think we still doesn't have a _workaround_ on this, right?
",gjmveloso,2016-07-09 17:52:13
682,2016-06-13 22:43:48,"@gjmveloso, please, see my answer in related bug #680
",mrjj,2016-07-09 17:52:13
682,2016-07-09 17:52:13,"Fixed in #684.  Closing.
",rosshinkley,2016-07-09 17:52:13
681,2016-06-12 03:22:38,"OS X 10.11.5
Node 6.2.0
Electron 1.2.2

Got an issue where running the main example the Electron process will sit at 99% for ages and the example may or may not eventually complete.

Runs fine in a Windows 2008 VM hosted on MS Azure

What's the best way to debug this?
",TimNZ,2016-06-21 05:11:35
681,2016-06-15 03:51:31,"My first gutcheck would be to run the example script with `DEBUG=*` to see if Electron has any useful output.  (My guess is probably not, but it's worth a try.)

Do you have different results running with showing the Electron instance using [`{show: true}`](https://github.com/electron/electron/blob/master/docs/api/browser-window.md#new-browserwindowoptions)?

If you write an example against a simpler site (like http://example.com, say) does it have the same behavior?
",rosshinkley,2016-06-21 05:11:35
681,2016-06-21 05:11:35,"Feels like an Electron issue.  No issue in other Win 2008/Win 7 VM environments.
",TimNZ,2016-06-21 05:11:35
680,2016-06-11 00:37:18,"Hi,

I've started playing around with Nightmare on **Windows** and I'm receiving the _TypeError: Cannot read property 'connected' of undefined_ error every time I try to run my basic code:

<S_CODE_TOKEN>

> TypeError: Cannot read property 'connected' of undefined
>     at endInstance (C:\Code\test\node_modules\nightmare\lib\nightmare.js:178:20)
>     at emitOne (events.js:96:13)
>     at process.emit (events.js:188:7)
> [Finished in 0.256s]

Thoughts?

_Nightmare Version:_ 2.5.1
_NodeJS Version:_ 6.2.1
_Windows 7 x64_
",gjmveloso,2016-06-21 03:24:14
680,2016-06-13 15:30:52,"This is related to #682, but I also don't think your source will do what you intend.  Nightmare is asynchronous, queuing actions in a chain until `.then()`, `.run()` or `.end()` is called.  Your `if` statement will always run the `else` condition, and produce undesirable outputs.  From the hip, written to use `.then()`:

<S_CODE_TOKEN>

... of course, this depends on what `doLogin()` does.  It might make sense to return a promise from `doLogin()` and return the result.

You could also use [`vo`](https://github.com/matthewmueller/vo) or [`co`](https://github.com/tj/co) to help with generators and then use `yield` to make your script look a little more synchronous.  Also totally from the hip, written to use `vo`:

<S_CODE_TOKEN>

Same caution as above, this also depends on what `doLogin` does.
",rosshinkley,2016-06-21 03:24:14
680,2016-06-13 22:47:13,"The root cause is that there were no process created, because you didn't finalise your request;
This code will work:

<S_CODE_TOKEN>

Have a nice day!
",mrjj,2016-06-21 03:24:14
680,2016-06-14 00:06:17,"Thanks for your help @mrjj and @rosshinkley - I'd completed forgot about the _asynchronous_ thing.

But I think I'm still doing something wrong :cry: 

Here is my complete code:

<S_CODE_TOKEN>

I'm receiving the following error message:

> TypeError: browser.goto(...).title(...).evaluate(...).exists(...).then(...).then
> (...).end is not a function
>     at Object.<anonymous> (C:\Code\test\app.js:16:6)
>     at Module._compile (module.js:541:32)
>     at Object.Module._extensions..js (module.js:550:10)
>     at Module.load (module.js:458:32)
>     at tryModuleLoad (module.js:417:12)
>     at Function.Module._load (module.js:409:3)
>     at Function.Module.runMain (module.js:575:10)
>     at startup (node.js:160:18)
>     at node.js:456:3

**Line 16 is on _end()_ call**

Thanks again, really appreciated your help
",gjmveloso,2016-06-21 03:24:14
679,2016-06-10 04:24:55,"I want to download CSV with Nightmare and [Nightmare-download-manager](https://github.com/rosshinkley/nightmare-download-manager).

Target site generated new window when use '.click' for download.
`<input confirm=""Download CSV. \n Is it ok ?"" onclick=""window.open('/customers/apply/inbox.csv?', '_blank');"" style=""float:right;margin-right:16px;_margin-right:8px;"" type=""button"" value=""Download CSV"" />`
`.click('input[value=Download CSV]')`
Electron open new window but doesn't start download.
New windows's title is '_blank'.

How to rewrite '_blank' to '_self' or download or disable '_blank'

Thanks.
",rluisr,2016-12-17 04:13:49
679,2016-06-20 18:37:15,"There are two different questions here: one, can the download plugin be applied to other windows; and two, if the target of the click event can be changed.

Answering the first: Nightmare will not handle popup windows by default.  I wrote a prototype [plugin](https://github.com/rosshinkley/nightmare-window-manager) to show how it could be handled, but your example has the added complexity of trying to mix another plugin in with window management.  Under the current incarnation of Nightmare, that would be difficult to accomplish.  Native window management is on the list for the next major revision (see #593).

As for the second: I'm not sure, but I doubt it.  If the input has an `onclick` defined specifically, could you use `.evaluate()` to point the target of the action to `_self`?  Something like: 

<S_CODE_TOKEN>

... I _suspect_ this won't work, but it might be worth a shot.
",rosshinkley,2016-12-17 04:13:49
679,2016-08-08 16:55:12,"@rluisr Did you get this resolved?
",rosshinkley,2016-12-17 04:13:49
679,2016-12-04 15:20:53,"Had the same issue, overwriting the `onclick` or `target` solved it for me.",Siilwyn,2016-12-17 04:13:49
679,2016-12-17 04:13:49,"Thanks, @Siilwyn.  Going to consider this resolved, closing.",rosshinkley,2016-12-17 04:13:49
678,2016-06-08 18:13:59,"`nightmare.cookies.clear()` only clears cookies for the current website.

It'd be handy to be able to clear all cookies, so you know you start with a fresh start no matter what tests you ran with the electron browser before.

My precise use case is I want to clear all cookies after payment, and the payment processor & store both have different domains obviously so I have to make a bit of extra code to really clear all cookies.

In any case, it's natural to assume being able to control the electron browser like that.
",coyotte508,2016-08-03 03:55:07
678,2016-06-13 11:39:16,"<S_CODE_TOKEN>

If you use a different partition each time you'll be sure that you get a ""clean"" browser, as the default is a persistent partition.
",albinekb,2016-08-03 03:55:07
678,2016-06-13 12:52:25,"Also worth pointing out: there is an API for [clearing data](https://github.com/electron/electron/blob/master/docs/api/session.md#sesclearstoragedataoptions-callback) exposed by Electron, but the method isn't directly exposed in Nightmare.  

You could use `.action()`, but I think `webSession.clearStorageData()` should probably be core.  Thoughts?
",rosshinkley,2016-08-03 03:55:07
677,2016-06-08 14:55:56,"closes https://github.com/segmentio/nightmare/issues/469

I've tested my tests with `0` timeout on the `.type()` function and can't report any keystrokes being emitted in the wrong order. 

Using the `setTimeout(fn, 0);` hack to defer the event to the next event loop of JavaScript should be just fine. 

I was tempted to make this timeout a configurable variable to aid debugging without making test suites run longer than necessary, but I did not want to introduce a breaking change. 
",kylewelsby,2016-06-21 03:23:39
677,2016-07-26 21:26:14,"Well this introduces problems when the page doesn't expect things to be typed instantly (like when filling card expiry in paypal's interface)
",coyotte508,2016-06-21 03:23:39
677,2016-07-26 22:57:35,"It would be ideal to add the timeout duration as a attribute.

Kind Regards

_Kyle Welsby - MeKyle Ltd_

mobile: +44 (0) 7575 790 552
email: kyle@mekyle.com
twitter: @halfcube http://twitter.com/halfcube
site: mekyle.com
skype: halfcubeuk

On 26 July 2016 at 22:32, coyotte508 notifications@github.com wrote:

> Well this introduces problems when the page doesn't expect things to be
> typed instantly (like when filling card expiry in paypal's interface)
> 
> —
> You are receiving this because you authored the thread.
> Reply to this email directly, view it on GitHub
> https://github.com/segmentio/nightmare/pull/677#issuecomment-235410621,
> or mute the thread
> https://github.com/notifications/unsubscribe-auth/AAGvhWWCHRYdiNqa8zcTzRg4gowRh-ZJks5qZnzYgaJpZM4IxDTl
> .
",kylewelsby,2016-06-21 03:23:39
676,2016-06-08 12:43:41,"Sample code:

<S_CODE_TOKEN>

Expected behavior: the page refreshes every 5000 ms.
Observed behavior: the page doesn't refresh (but the logged messages still show).

I'm aware that `refresh()` would work in this instance but sometimes it's not known whether the page we want to get the latest data from is already the current page. And such information is hard to get as there's no easy way to directly get the current url.

Imo, there should be one of the following:
- Doc of `goto` specifies that nothing happens if the url given is already the current page
- Behavior of `goto` changed to correctly reload the page if url is the same
- Possibly add an option to the `goto` command.to specify the behavior
",coyotte508,
676,2016-06-08 15:59:36,"A workaround to achieve the desired behavior at the moment is doing `url = `${baseUrl}#${counter++}`` (as the correct way to achieve the behavior is much too verbose).
",coyotte508,
676,2016-06-09 12:52:40,"> Observed behavior: the page doesn't refresh (but the logged messages still show).

When the URLs match, you're right - [nothing happens](https://github.com/segmentio/nightmare/blob/master/lib/runner.js#L171-L172).

> I'm aware that refresh() would work in this instance but sometimes it's not known whether the page we want to get the latest data from is already the current page.

I'm not sure I follow - can you elaborate?

> And such information is hard to get as there's no easy way to directly get the current url.

True, there's no `.url()` method or something similar.  Extracting the information should be reasonably straightforward, though:

<S_CODE_TOKEN>

> Doc of goto specifies that nothing happens if the url given is already the current page

That's a good idea.  As mentioned, that's how it's set up.  (I'm sure there was/is a reason, although I can't recall off the top of my head.)
",rosshinkley,
676,2016-06-09 14:39:56,"Extracting the information is straightforward, but chaining is not.

Instead of having:

<S_CODE_TOKEN>

If not using the hack (page + ""#...""), the code becomes:

<S_CODE_TOKEN>

And objectively speaking, I don't see why the current behavior is like it is. I used `zombiejs` before which admittedly is not a reference, but looking at phantomjs' `.open()` they too seem to load the page anyway. Without the programmer asking _not to reload if url is same_, it seems strange to me.

The [code seems pretty old](https://github.com/segmentio/nightmare/blob/1b11714183cff93fe96cdbc03db1b500f4bc5cb8/lib/runner.js#L62-L64) and was [added amongst other major changes](https://github.com/segmentio/nightmare/commit/1b11714183cff93fe96cdbc03db1b500f4bc5cb8).

There is no specific commit or reason why.
",coyotte508,
675,2016-06-08 07:25:29,"Just read about chrome is actively implementing the headless mode, do you have plan to incorporate it into nightmare?

https://bugs.chromium.org/p/chromium/issues/detail?id=546953#c54
",mko-io,2016-06-08 13:05:37
675,2016-06-08 13:05:37,"Yes, provided Electron supports it.  This has been an ongoing discussion at electron/electron#228 as well as the tail end of #224.
",rosshinkley,2016-06-08 13:05:37
674,2016-06-06 14:12:36,"I am new to nightmare and electron's api. I want to access the underlying electron browser to show a image that i scrape using nightmare. Can someone show me an example?
",Nisthar,2016-08-08 16:55:01
674,2016-06-08 00:03:22,"I'm a little confused by your question, and would like to clarify - are you trying to save an image from a page?
",rosshinkley,2016-08-08 16:55:01
674,2016-06-08 09:06:05,"No, I am trying to get the source of an image and use the source to display
an image in a new electron window.

On Wed, Jun 8, 2016 at 5:33 AM, Ross Hinkley notifications@github.com
wrote:

> I'm a little confused by your question, and would like to clarify - are
> you trying to save an image from a page?
> 
> —
> You are receiving this because you authored the thread.
> Reply to this email directly, view it on GitHub
> https://github.com/segmentio/nightmare/issues/674#issuecomment-224450336,
> or mute the thread
> https://github.com/notifications/unsubscribe/ALcELbh62O3FlcxHIJRAdjxbSg0YpxD1ks5qJgbQgaJpZM4Iu8Hq
> .
",Nisthar,2016-08-08 16:55:01
674,2016-06-08 15:26:03,"@rosshinkley I just want to open an additional electron window to display the scraped image.
",Nisthar,2016-08-08 16:55:01
674,2016-07-09 18:47:48,"Currently, you cannot open a new browser window from Nightmare.  #593 has it as a possible future improvement.

For now, you could write a plugin to do such a thing - [`nightmare-window-manager`](https://github.com/rosshinkley/nightmare-window-manager) might be a place to start.  It supports window control, but does not support opening a new window (yet).
",rosshinkley,2016-08-08 16:55:01
674,2016-08-08 16:55:01,"Closing for inactivity.  If you still need help with this, feel free to reopen and provide more information about what you've tried.
",rosshinkley,2016-08-08 16:55:01
673,2016-06-05 21:48:10,"Hi guys!
How about ""Referer"" header?

Usage:

<S_CODE_TOKEN>

Result:
![headers](https://habrastorage.org/files/4ca/d21/34a/4cad2134ae524cc6b1a581ed9eeef0c2.png)
",antixrist,2016-06-21 03:23:17
673,2016-06-08 01:44:57,"Could you include tests, please?  I think that a test verifying the header is set in Express and perhaps another verifying that Electron is returning the correct referrer from `.goto()` would be sufficient.

Somewhat offtopic, I'm not sure how I feel diverging (or diverging more?) from [`webContents.loadURL()`](https://github.com/electron/electron/blob/master/docs/api/web-contents.md#webcontentsloadurlurl-options), but I think I can live with adding `Referer` to the headers in this way.

Also somewhat offtopic, it _might_ be wise to accept both the 3 R (`Referer`) and 4 R (`Referrer`) header names.  Thoughts?
",rosshinkley,2016-06-21 03:23:17
672,2016-06-05 03:07:09,,joffychim,2016-07-09 17:29:13
672,2016-06-07 23:59:04,"Could you provide a sample of what you're trying to do?
",rosshinkley,2016-07-09 17:29:13
672,2016-06-10 14:03:30,"as the subject, i may cancel the automation when it is typing and kill the process
",joffychim,2016-07-09 17:29:13
672,2016-06-10 14:51:46,"Hm, you can end the process with `.end()`, but not until after other actions in the chain have finished.  Are you asking if you can interrupt the chain to kill the process?  That would not be advisable.  You _could_ kill the Electron process manually using `nightmare.proc.kill()`, but that will put the Nightmare instance into a state where the behavior is not well defined.
",rosshinkley,2016-07-09 17:29:13
672,2016-07-09 17:29:13,"Closing for lack of activity/information.  If this is still a problem, feel free to reopen/submit a new issue.
",rosshinkley,2016-07-09 17:29:13
671,2016-06-02 14:53:01,"`nightmare.type('#password', 'aJk3é;KDja2')` only types `aJk3;KDja2` skipping the `é`.
",bob6664569,
671,2016-06-06 13:10:44,"idem here, problem with accent.
With insert thats work
",Hesiode,
671,2016-06-06 13:33:13,"It seems that the characters must be sent as unicode combinations to sendInputEvent method of Electron to avoid the limitations of the Accelerator's API (see Issue #549). Maybe it could be automatically added.
",bob6664569,
671,2016-06-06 17:09:51,"Hi !
Same problem here too :)
",warka0,
670,2016-06-02 11:20:21,"Closes: #632 
",albinekb,2016-06-08 02:19:56
670,2016-06-08 08:07:33,"Thanks!!
",albinekb,2016-06-08 02:19:56
669,2016-05-31 05:48:56,"I am trying to run the example code:

<S_CODE_TOKEN>

Its returning an error `Cannot read property 'blur' of null` in the console. 
Any solutions?
",Nisthar,2016-06-07 23:43:12
669,2016-06-07 23:39:09,"In versions prior to 2.5.0, this (cryptic) error generally meant that one of your selectors was not finding the specified element.  I think Yahoo runs some form of A/B or has different page characteristics based on the requester.  This problem has cropped up before (#116, #490, and I think there were some others).  The Readme version of the example was patched in 2.4.0, the [runnable example](https://github.com/segmentio/nightmare/blob/2.5.0/example.js) in 2.5.0.

My first suggestion would be to update your example to the 2.5.0 version and try running it again.
",rosshinkley,2016-06-07 23:43:12
669,2016-06-07 23:42:55,"Thanks. I had encountered it in my code too when there is no selector
found.
On Jun 8, 2016 5:09 AM, ""Ross Hinkley"" notifications@github.com wrote:

> In versions prior to 2.5.0, this (cryptic) error generally meant that one
> of your selectors was not finding the specified element. I think Yahoo runs
> some form of A/B or has different page characteristics based on the
> requester. This problem has cropped up before (#116
> https://github.com/segmentio/nightmare/issues/116, #490
> https://github.com/segmentio/nightmare/issues/490, and I think there
> were some others). The Readme version of the example was patched in 2.4.0,
> the ru nnable e xample
> https://github.com/segmentio/nightmare/blob/2.5.0/example.js in 2.5.0.
> 
> My first suggestion would be to update your example to the 2.5.0 version
> and try running it again.
> 
> —
> You are receiving this because you authored the thread.
> Reply to this email directly, view it on GitHub
> https://github.com/segmentio/nightmare/issues/669#issuecomment-224446331,
> or mute the thread
> https://github.com/notifications/unsubscribe/ALcELemYikc_Fm8QHeQ59rEbk5JpUK0qks5qJgEjgaJpZM4IqMpX
> .
",Nisthar,2016-06-07 23:43:12
669,2016-11-29 06:13:28,"I am running the example code on c9,io, a virtual machine for ubuntu. 
The example.js does not return anything. Could someone review what the problem here?
I am a total beginner for node.js and c9 so the issue might lie in some very simple process. 
![qq 20161129141240](https://cloud.githubusercontent.com/assets/8443821/20698718/f11e9c40-b63d-11e6-96ad-dcbb443af18f.jpg)
![qq 20161129141223](https://cloud.githubusercontent.com/assets/8443821/20698717/f11de214-b63d-11e6-8b9a-5c378f664144.jpg)
![qq 20161129141152](https://cloud.githubusercontent.com/assets/8443821/20698719/f1236202-b63d-11e6-82fd-ea032d08df4d.jpg)

",BerlinaLI,2016-06-07 23:43:12
669,2016-12-17 04:55:15,@BerlinaLI I have a suspicion you might be hitting #224.  Thoughts?,rosshinkley,2016-06-07 23:43:12
668,2016-05-30 22:32:28,"Hi,

How does one skip all the previous tests when writing a new test? Currently I have about 20 nightmare tests that take about 2000ms each. Whenever I save my file they have to rerun from the beginning. Is there some sort of flag or something that will skip the previous tests and only run the new one? Something of that sort. 

Thanks
",brotzky,2016-07-09 17:35:16
668,2016-05-31 01:19:38,"You can use an [exclusive test](https://mochajs.org/#exclusive-tests) - eg, `describe.only` or `it.only`.

If you're using `mocha-generators`, there is a [known bug](https://github.com/vdemedes/mocha-generators/issues/2) with `it.only`.  There's a [PR](https://github.com/vdemedes/mocha-generators/pull/4) to fix it that you could pull down and link to, if you were so inclined.  (`describe.only` works fine with `mocha-generators`, for what it's worth.)
",rosshinkley,2016-07-09 17:35:16
668,2016-05-31 03:51:27,"Thank you, I will try it out. 
",brotzky,2016-07-09 17:35:16
668,2016-07-09 17:35:15,"Considering this issue resolved.  If you're still having problems with `.only()`, feel free to reopen/open a new issue.
",rosshinkley,2016-07-09 17:35:16
668,2016-07-12 16:24:08,"Sorry for the late response. The issue has been resolved once we upgraded some npm deps. Thanks for the reply/support!
",brotzky,2016-07-09 17:35:16
667,2016-05-30 18:12:53,"<S_CODE_TOKEN>

nightmare.exist('input[type=""hidden""][value=""12""]').then(exists => {
  // i want to click the submit button.
})
",kuyoonjo,2016-06-08 02:23:31
667,2016-05-30 19:16:40,"solved by:

<S_CODE_TOKEN>

nightmare is awesome ^^. But need more documents.
",kuyoonjo,2016-06-08 02:23:31
667,2016-06-08 02:23:31,"Looks like this issue is resolved, closing.
",rosshinkley,2016-06-08 02:23:31
666,2016-05-30 11:07:52,"The fix for this bug in Electron was released with version 0.37.7 and we currently depend on `^0.37.7` so this should be safe to remove.
",LinusU,2016-06-08 02:19:44
665,2016-05-28 21:31:21,"Is there a code example where the proxy, and proxyAuth options are working. I spent a few hours trying to get it work, but could not. I tried maybe 100 different variations of the syntax as the documentation is not really clear about this, and about half did not return any errors, the remaining code ran fine, but the IP did not change to the one set in the proxy settings. After every attempt I checked the log files on the server, to confirm if requests came in and if the IP was changed. 

Here is where I was left (I've replaced my test domain with google.com below):

<S_CODE_TOKEN>
",mikkokotila,2016-07-09 17:34:35
665,2016-05-31 04:53:10,"I don’t think any of those are actually valid switches (you can see the whole list at http://peter.sh/experiments/chromium-command-line-switches). I think the switch you want is `proxy-server`:

<S_CODE_TOKEN>

I don’t know if you can set the auth info in the URL (e.g. `http://user:pass@1.proxy.com:80`) or if you would need to use the `authentication()` action, e.g:

<S_CODE_TOKEN>

Alternatively, you could write a plugin that uses the `setProxy` method on Electron’s `session` object, as documented here: http://electron.atom.io/docs/api/session/#sessetproxyconfig-callback
",Mr0grog,2016-07-09 17:34:35
665,2016-05-31 10:31:23,"Thank you. 

I had tried that as well. I tried again and neither of the examples you change anything i.e. I could change the switch (proxy-server) to lkjlkj-weioruweoriu and the code still runs the rest of the program. It seems to me that for some reason the switches part is totally ignored at the moment, because it can be changed to anything without any effect on the rest of code. Thank you for the plugin tip, though it would be great if this could work as in the examples you had provided given how amazing Nightmare otherwise is! 
",mikkokotila,2016-07-09 17:34:35
665,2016-06-07 23:28:11,"> I had tried that as well. I tried again and neither of the examples you change anything i.e. I could change the switch (proxy-server) to lkjlkj-weioruweoriu and the code still runs the rest of the program.

Hm, setting `proxy-sever` to a bogus URL (or even a malformed URL) causes provisional load and load failures, at least with 2.5.0.  Out of curiosity, what version of Nightmare are you running?

> I don’t know if you can set the auth info in the URL (e.g. http://user:pass@1.proxy.com:80) or if you would need to use the authentication() action

I would be _very_ curious to know the answer to this.
",rosshinkley,2016-07-09 17:34:35
665,2016-06-10 00:06:55,"@rosshinkley : you need to use authentication() with setting 'proxy-server' (with out user + password)
",xmen4u,2016-07-09 17:34:35
665,2016-06-10 06:43:43,"@xmen4u can you clarify, is this what should work, or something that you have actually effectively worked with? In case it's the latter, can you please provide exact code example and I will test it also.

I got the proxy authentication to work on Electron, but would prefer to use Nightmare if possible. At the moment, given that there are no specific detailed answers to this issue, unless someone provides a working code example, my suggestion is to assume that proxy authentication does not work. 
",mikkokotila,2016-07-09 17:34:35
665,2016-06-10 18:01:38,"This works just fine for me:

<S_CODE_TOKEN>

Granted, that proxy does not require auth, but it is clearly proxying.
",Mr0grog,2016-07-09 17:34:35
665,2016-06-10 19:12:58,"@mikkokotila:

<S_CODE_TOKEN>

Works well. Changing the proxy during run-time is an issue i couldn't figure out how.
",xmen4u,2016-07-09 17:34:35
665,2016-06-16 16:24:06,"Thanks @xmen4u for the answer and @mikkokotila for already posting what I needed help with. I've added this information to the Read me for others to find more easily in PR #687.
",agrberg,2016-07-09 17:34:35
665,2016-07-09 17:34:35,"With #687 being merged in, I'm going to consider this issue resolved.
",rosshinkley,2016-07-09 17:34:35
664,2016-05-27 15:59:58,"Fixes #663.
",rosshinkley,2016-05-27 16:19:50
664,2016-05-27 16:53:50,"Awesome :raised_hands:
",LinusU,2016-05-27 16:19:50
663,2016-05-27 13:57:04,"Only `.on` is implemented, it would be nice if there where a way to stop listening to events, or only listen to the first event.
",LinusU,2016-05-27 16:19:50
662,2016-05-26 11:42:23,"Is there a way to make page actions based on extracted data? I'm interacting with an asp.net webforms application so after i load the page and perform the search, I have to use that Nightmare instance to do all of the remaining scraping as none of the ""links"" are true urls they are javascript ajax calls which update portions of the page.

The only way I can find to operate on scraped data from .evaluate is after an end() call which just won't work.

Is it possible to click or perform other actions based on data returned from an .evaluate() call?
",TechplexEngineer,2016-05-26 18:45:12
662,2016-05-26 15:48:27,"Sure!  The `.then()` function will have as its arguments the results of the previous method:

<S_CODE_TOKEN>

As another example, you may want to have a look at `nightmare-example`'s [""Running Multiple Steps"" example](https://github.com/rosshinkley/nightmare-examples/blob/master/docs/beginner/promises.md#running-multiple-steps).
",rosshinkley,2016-05-26 18:45:12
662,2016-05-26 18:41:11,"Perfect! I didn't realize there was an examples repo!

This is exactly what I was looking for:

<S_CODE_TOKEN>
",TechplexEngineer,2016-05-26 18:45:12
661,2016-05-26 09:26:17,"What is the intended use case for `.use(fn)`?

I had hoped that it could be used to add actions to nightmare instances, but I haven't gotten that to work since it seems that I can only add actions on the global Nightmare class.

Maybe I'm just missing something...
",LinusU,2017-01-02 21:08:23
661,2016-05-26 16:07:13,"> What is the intended use case for .use(fn)?

`.use()` is intended to wrap a group of actions to make adding compound actions to Nightmare a little easier and readable.  Note that it doesn't add callable actions directly to the instance itself.  (In other words, you can't call `nightmare.myAction(...)`, but you can call `nightmare.use(myAction(...))`.)

> I had hoped that it could be used to add actions to nightmare instances, but I haven't gotten that to work since it seems that I can only add actions on the global Nightmare class.

I am guessing you're referring to `.action()`?  This is a very different mechanism - `.action()` adds an action directly to the Nightmare prototype, also adding all of the sugar required to execute a method inside of Electron.

What are you trying to do?
",rosshinkley,2017-01-02 21:08:23
661,2016-05-26 18:24:14,"I'm trying to build a module for dealing with `<select>` elements, and I want an easy way for other people to consume the library. At first, I thought that `.action` was an instance method and thus I wrote my readme as this:

<S_CODE_TOKEN>
## Usage

<S_CODE_TOKEN>
<S_CODE_TOKEN>

I don't like the idea of encouraging my users to patch the _global_ `Nightmare` object, as that is considered a bad practice and could potentially have side effects on other libraries.
",LinusU,2017-01-02 21:08:23
661,2016-05-26 19:51:31,"[In the development of `.action()`](https://github.com/segmentio/nightmare/pull/425#issuecomment-171139723), I had originally thought about adding functionality per instance, but this was abandoned for simplicity's sake.  Is allowing a type to modify it's own prototype bad practice?  (Debatable.)

I think `.action()` is _probably_ better suited to your use-case.  It shouldn't step on other libraries so long as there aren't naming collisions.  Doing what you're asking with `.use()` would probably require calling `.then()`, which might have undesirable effects.

Thinking out loud: would `.exists()` and `.select()` accomplish what you're after?
",rosshinkley,2017-01-02 21:08:23
661,2016-05-31 14:39:25,"For what it's worth: I've thrown together a [`.action()`](https://github.com/rosshinkley/nightmare-examples/blob/master/docs/beginner/action.md) and [`.use()`](https://github.com/rosshinkley/nightmare-examples/blob/master/docs/beginner/use.md) examples over at [`nightmare-examples`](https://github.com/rosshinkley/nightmare-examples).
",rosshinkley,2017-01-02 21:08:23
661,2016-05-31 15:04:54,"Nice! That helped me understand what `.use` was intended for.

I don't know if this should be encouraged at all but I've been extending the prototype manually so that I can get support for plugins in a nice way, not sure if I want to release anything using this though, but this is what it looks like:

**`nightmare-select.js`**

<S_CODE_TOKEN>

**`usage.js`**

<S_CODE_TOKEN>

This way I won't ever clobber the global instance which I really want to avoid...
",LinusU,2017-01-02 21:08:23
661,2016-05-31 15:24:27,"That's _really_ what `.action()` was intended for.  You could rewrite your `selectHasOption` and `selectOptionWithText` as `.action()`s.  From the hip:

<S_CODE_TOKEN>

Under the covers, Nightmare amends the prototype with the action you specify.
",rosshinkley,2017-01-02 21:08:23
661,2016-05-31 18:11:47,"Yes, but the problem with that I don't see a way of using that without going down a path of anti-patterns. The use case here is that I want to distribute a third party ""plugin"" to nightmare.

The first problem with the action approach, is 1) modifying global state potentially affecting other parts of the code, and 2) require with side effects.

<S_CODE_TOKEN>

So I refactor a bit to avoid the require with side effects. Instead of running on load, I'll export a function that will patch the nightmare object.

<S_CODE_TOKEN>

But the bigger problem still exists, I'm modifying global state. Lets say that I have several scrapers for different sites published on npm. Two of them, `scrape-bikes-stockholm` and `scrape-bikes-uppsala` depends on two different versions of `nightmare-select`. Since I made a breaking change in the api, I had to bump the version to `2.0.0`. I have updated `scrape-bikes-stockholm`, but I haven't gotten around to updating `scrape-bikes-uppsala` just yet.

Now there will be a huge conflict in my app, `bikes-in-sweden`, which shows the position of all bike racks in Sweden. Since it depends on both `scrape-bikes-stockholm` and `scrape-bikes-uppsala`, it will pull in both versions of `nightmare-select`. But when the second to load version is loaded, it will simply replace the first version and the scraper depending on that version will start to fail.

The Node.js community is very centered on small reusable modules, and I think that publishing a lot of small modules is not an uncommon use case. Encouraging users to patch global state is dangerous and considered an anti-pattern.

I would be very happy if we could see if there are any alternative approaches to a great plugin system, that is both easy to use, reliable and compatible with the Node.js ecosystem 🙌 

also, Nightmare is really awesome and it beats all the other similar tools I've used, keep up the good work!
",LinusU,2017-01-02 21:08:23
661,2016-05-31 18:39:31,"First and foremost: I agree.  Modifying the prototype directly for actions has problems.

The idea behind modifying the prototype was, again, done for brevity/cleanliness and so you're not slogging through a ton of boilerplate just to get a Nightmare instance.  Furthermore, patching the prototype is how [internal methods are attached](https://github.com/segmentio/nightmare/blob/master/lib/nightmare.js#L479-L482).  Allowing users to leverage that was a reasonable outgrowth.  Also, patching of Electron behavior was built atop the already-existing patching of Nightmare behavior.

I'm not saying it's correct.  Scope and use of Nightmare has changed.  A lot.

This was sort-of-kind-of touched upon in [this comment](https://github.com/segmentio/nightmare/pull/609#issuecomment-222428497).  I think better plugin/action management should be put on the v3 list in #593.  Thoughts?
",rosshinkley,2017-01-02 21:08:23
661,2017-01-02 21:08:23,Merging this with #593.,rosshinkley,2017-01-02 21:08:23
660,2016-05-26 07:55:26,"The **end()** function ends queue, disconnects, ends the program. But isn't it possible just to end the queue but not disconnect or end the program so that we can start the queue anew and avoid possible memory leak? Here, something that might catch your eyes.

<S_CODE_TOKEN>

Here is the goal,
Instead of this,

<S_CODE_TOKEN>

Maybe we can do this,

<S_CODE_TOKEN>

Or, 

<S_CODE_TOKEN>

Releasing the memory, yet keeping the instance up.
",entrptaher,2016-05-26 17:56:46
660,2016-05-26 15:41:20,"This is what `.then()` is intended to do: execute and then clear the queue.  The `EventEmitter` leak is a long-standing issue (#282, #350, #589, #658 - and I'm sure I've missed many).  While ending the Nightmare instance would ""prevent"" the leak, I don't think doing what you're asking would solve the underlying issue.
",rosshinkley,2016-05-26 17:56:46
660,2016-05-26 15:53:24,"Yeah, I heavily use then(), but it was just an idea after seeing the behavior of end() and EventEmitter.
Edit: How stupid of me, the issue was about end() and not about blocking contents.
I use Nightmarejs for a long time, but was unaware of such small modules.
Anyway, if you think ending won't mean any good, then lets drop this idea.
Closing this issue.
",entrptaher,2016-05-26 17:56:46
659,2016-05-24 16:16:13,"This is a pass at moving the Nightmare start to the queue.  This removes the need for `.ready()`.  Also, this changeset makes the ending of an instance asynchronous.  (This props up downstream usability for #502 and possibly #598.)
",rosshinkley,2016-06-08 02:20:10
658,2016-05-23 19:12:26,"Fixes #350:  Ensures extra event listeners are removed when done/error is called, also allows for >1 log event per `javascript` call.

All credit should go to @s0m3on3 for the original fix.

(Also, I _thought_ this had already been submitted, but I can't find the original.)
",rosshinkley,2016-05-27 16:19:37
658,2016-05-23 19:14:44,"CircleCI tests are failing because I left my personal build pointed at the 14.04 image to test the fix for #621, which is certainly going to break without the updated circle.yml.
",rosshinkley,2016-05-27 16:19:37
657,2016-05-22 15:45:24,"https://gist.github.com/Stankye/31c7b6ef65613aecc919730165601ce3
^ Log ^
npm install nightmare is gently tossing errors 
Any ideas/help?

""12159 error Failed at the electron-prebuilt@0.37.8 postinstall script 'node install.js'.
12159 error Make sure you have the latest version of node.js and npm installed.
12159 error If you do, this is most likely a problem with the electron-prebuilt package,
12159 error not with npm itself.
12159 error Tell the author that this fails on your system:
12159 error     node install.js""

Ubuntu 16.04
NodeJS Version: 4.2.6
npm Version: 3.5.2
",Stankye,2016-07-09 17:28:29
657,2016-05-22 16:11:41,"This looks a _lot_ like electron-userland/electron-prebuilt#108.  The TL:DR version is that you've likely got an ownership discrepancy with your local NPM cache.  Can you give that a look and see if that fixes your problem?
",rosshinkley,2016-07-09 17:28:29
657,2016-07-09 17:28:29,"Closing for lack of activity and information.  If this is still an issue, feel free to reopen/submit a new issue.
",rosshinkley,2016-07-09 17:28:29
656,2016-05-22 12:27:40,"The HTTP status code (e.g. 200, 404, 500)
",kuyoonjo,2016-05-22 16:13:49
656,2016-05-22 12:38:52,"The resolution of [`.goto()`](https://github.com/segmentio/nightmare#gotourl-headers) has that information.  For example:

<S_CODE_TOKEN>
",rosshinkley,2016-05-22 16:13:49
656,2016-05-22 12:48:58,"Thank you Ross, but it does not work.

On May 22, 2016, at 1:38 PM, Ross Hinkley <notifications@github.com<mailto:notifications@github.com>> wrote:

The resolution of .goto()https://github.com/segmentio/nightmare#gotourl-headers has that information. For example:

var nightmare = require('nightmare')();
nightmare.goto('http://example.com')
  .then((gotoResult) => {
    console.log(gotoResult.code); //prints out the HTTP status for the request
  })

—
You are receiving this because you authored the thread.
Reply to this email directly or view it on GitHubhttps://github.com/segmentio/nightmare/issues/656#issuecomment-220830268
",kuyoonjo,2016-05-22 16:13:49
656,2016-05-22 12:50:11,"What does not work?  How is it failing?
",rosshinkley,2016-05-22 16:13:49
656,2016-05-22 12:58:12,"Oops, it works now. Just by updating nightmare.
Thank you very much Ross.
",kuyoonjo,2016-05-22 16:13:49
656,2016-05-22 13:27:43,"Hi Ross,

Thank you very much for your previous help. One more question. How to force kill the electron.
my code:
setTimeout(() => {
nightmare.end(_ => {}) // it does not exit immediately.
reject('Promise timed out after ' + timeout + ' ms')
}, timeout)

Regards,
Yu Chen

On May 22, 2016, at 1:50 PM, Ross Hinkley <notifications@github.com<mailto:notifications@github.com>> wrote:

What does not work? How is it failing?

—
You are receiving this because you authored the thread.
Reply to this email directly or view it on GitHubhttps://github.com/segmentio/nightmare/issues/656#issuecomment-220830733
",kuyoonjo,2016-05-22 16:13:49
656,2016-05-22 15:50:15,"@kuyoonjo Be sure you're calling `.then()` after `.end()`.  That will run the queued actions (if any) and end Nightmare gracefully.
",rosshinkley,2016-05-22 16:13:49
656,2016-05-22 15:50:53,"@kuyoonjo also, if you have a more complete example, I'd like to see it.  I might be able to help more that way.
",rosshinkley,2016-05-22 16:13:49
656,2016-05-22 16:03:51,"Thank you Ross, You are genius. At moment, everything is OK.
BTW, this is my Repo using nightmare.js https://github.com/kuyoonjo/google-auto-oauth2

On May 22, 2016, at 4:50 PM, Ross Hinkley <notifications@github.com<mailto:notifications@github.com>> wrote:

@kuyoonjohttps://github.com/kuyoonjo also, if you have a more complete example, I'd like to see it. I might be able to help more that way.

—
You are receiving this because you were mentioned.
Reply to this email directly or view it on GitHubhttps://github.com/segmentio/nightmare/issues/656#issuecomment-220839559
",kuyoonjo,2016-05-22 16:13:49
656,2016-05-22 16:13:49,"Awesome.  Closing this as I think it's resolved.  If you have any more problems, reopen/open a new issue.
",rosshinkley,2016-05-22 16:13:49
656,2016-05-22 16:15:16,"^^ Yes. Really helpful. Thank you again.

On May 22, 2016, at 5:13 PM, Ross Hinkley <notifications@github.com<mailto:notifications@github.com>> wrote:

Awesome. Closing this as I think it's resolved. If you have any more problems, reopen/open a new issue.

—
You are receiving this because you were mentioned.
Reply to this email directly or view it on GitHubhttps://github.com/segmentio/nightmare/issues/656#issuecomment-220840871
",kuyoonjo,2016-05-22 16:13:49
655,2016-05-21 09:45:09,"nightmare.html() should save temporary files in a folder next to the script instead.
",nick2012,2016-07-09 17:26:03
655,2016-05-22 15:48:11,"With some experimentation, I think Electron dumps the temporary file into `[home]/Downloads` instead of honoring the `paths` download path.  You _can_ override the `home` directory, but I suspect that would have other unintended consequences and isn't really what you're after.  

I'm also kind of surprised that `webContents.savePage()` allows for an undefined path.  I suspect the temporary file is just that - temporary, designed to be removed after the file is moved to the ultimate destination.  Looking at the test spec, there's no explicit cases for an undefined filepath.  Might be worth filing an issue with Electron to see if that's intentional or not.

In the meantime, there are a couple of options:
1. specify the save path every time
2. use `.use()` to wrap the `.html()` action
3. write a plugin to get the behavior you want
",rosshinkley,2016-07-09 17:26:03
655,2016-07-09 17:26:03,"Closing for lack of activity.
",rosshinkley,2016-07-09 17:26:03
654,2016-05-21 05:14:39,"Basically, if you click, scroll, etc so that the content of the page gets extended via JavaScript, when using the save page option with `HTMLOnly` option, Nightmare does not save the latest HTML, but the one that was loaded at the beginning. However, it saves the latest version when using `HTMLComplete`.
",nick2012,2016-05-24 16:01:19
654,2016-05-22 16:00:30,"It looks like [you might already have an answer](https://github.com/electron/electron/issues/5635).  I think (someone please correct me if I'm wrong) Chromium uses the HTML from `DOMReady` for fulfilling that action.

As an example, you could write something to fulfill this yourself using `.evaluate()` on the document's HTML.  Something like:

<S_CODE_TOKEN>
",rosshinkley,2016-05-24 16:01:19
654,2016-05-24 16:01:19,"Its ok like this. Thank you.
",nick2012,2016-05-24 16:01:19
653,2016-05-20 19:52:33,"fixes #621.
",rosshinkley,2016-05-27 16:17:29
653,2016-05-20 20:20:41,"Can we also drop the `--harmony` flags as noted all over the README, then? (I _think_ we can, but honestly not totally sure.)
",Mr0grog,2016-05-27 16:17:29
653,2016-05-20 20:24:54,"May also want to add multiple node versions for testing in `circle.yml` as described here: https://discuss.circleci.com/t/testing-multiple-versions-of-node/542
",Mr0grog,2016-05-27 16:17:29
653,2016-05-20 20:26:53,"> Can we also drop the --harmony flags as noted all over the README, then? (I think we can, but honestly not totally sure.)

I'm almost positive we can.

> May also want to add multiple node versions for testing in circle.yml as described here: https://discuss.circleci.com/t/testing-multiple-versions-of-node/542

Ah, that's a good call.  I'll have to look into that a little deeper, what do you think is reasonable?  Latest 4, latest 5, latest 6?  Something like that?
",rosshinkley,2016-05-27 16:17:29
653,2016-05-20 20:29:44,"> what do you think is reasonable? Latest 4, latest 5, latest 6? Something like that?

That’s what I would do :)

If you only specify the main version number with NVM, it’ll use the latest available (e.g. `nvm use 4` will use `4.4.4`).
",Mr0grog,2016-05-27 16:17:29
652,2016-05-20 18:44:22,"Fixes two problems: one, if the name is not specified, clear all cookies for the current domain (#202); and two, return if there are no cookies specified to clear.  (This is a nascent bug that would cause Nightmare to hang indefinitely.)

I didn't change the cookie methods to look at an optional domain as I _think_ that's a bit outside the scope of this PR.  Should that be opened up in a separate issue, or should I include that here?

FWIW, the required changes:
- change `assign` to use `defaults` in `get` and `set`
- alter `clear` to accept strings _or_ cookie objects with a a default URL to the current URL
",rosshinkley,2016-05-27 16:19:17
651,2016-05-20 09:08:35,"Gives more helpful errors when using `.click`, `.mousedown` or `.mouseover`, and the selector cannot be found.

e.g. when running `.click('a.not-here')` and the element cannot be found, it will give back the error ""Unable to find element by selector: a.not-here"" instead of the previous ""Cannot read property 'dispatchEvent' of null"".
",LinusU,2016-05-27 16:18:53
651,2016-05-27 16:18:46,"Looks good.  Thanks!
",rosshinkley,2016-05-27 16:18:53
650,2016-05-20 01:10:17,"2 changes:
1) Made the example script shown in the readme.md to actually be the
content of example.js (fix the existing mismtach)
2) small correction to be able to run the example directly after install
(at least on windows) by including the 'node_module\nightmare' as part
of the path and changing yahoo.js to example.js
",oliviervaillancourt,2016-05-27 16:18:19
650,2016-05-20 01:16:05,"@Mr0grog @rosshinkley,

Thanks for encouraging me to contribute.  I hope I got it right this time.  I closed #643 and created this one based on the latest.

Let me know if I did it wrong or if you have questions.
Olivier
",oliviervaillancourt,2016-05-27 16:18:19
650,2016-05-20 15:28:18,"@oliviervaillancourt Part one looks great, thanks for fixing that.  Part two I'd _probably_ leave as simply `example.js`.  The example is in the root of the project directory and is (I think) fairly obvious which example we're referring to.  The only remaining thing I can think of is possibly changing the README to say `example.js` instead of `yahoo.js` under the Examples heading on line 55 (which isn't your fault, I think it's been that way for quite a while).

@Mr0grog Thoughts?
",rosshinkley,2016-05-27 16:18:19
650,2016-05-20 15:35:36,"Oh, ha, paths, didn’t even think about how those would be different on Windows when I noted it in #643 :(
Probably agree with @rosshinkley there.
",Mr0grog,2016-05-27 16:18:19
650,2016-05-20 15:54:52,"Sounds good to me.  I can make the change later on today and update the PR
(I guess this is doable, I've never tried to update a PR before)

Thanks

On Fri, May 20, 2016 at 11:35 AM, Rob Brackett notifications@github.com
wrote:

> Oh, ha, paths, didn’t even think about how those would be different on
> Windows when I noted it in #643
> https://github.com/segmentio/nightmare/pull/643 :(
> Probably agree with @rosshinkley https://github.com/rosshinkley there.
> 
> —
> You are receiving this because you were mentioned.
> Reply to this email directly or view it on GitHub
> https://github.com/segmentio/nightmare/pull/650#issuecomment-220639655
",oliviervaillancourt,2016-05-27 16:18:19
650,2016-05-20 15:55:51,"@oliviervaillancourt just make another commit on the same branch and it’ll automatically get picked up :)
",Mr0grog,2016-05-27 16:18:19
650,2016-05-20 17:07:44,"Thanks Rob,

I'll try that tonight.

On Fri, May 20, 2016 at 11:55 AM, Rob Brackett notifications@github.com
wrote:

> @oliviervaillancourt https://github.com/oliviervaillancourt just make
> another commit on the same branch and it’ll automatically get picked up :)
> 
> —
> You are receiving this because you were mentioned.
> Reply to this email directly or view it on GitHub
> https://github.com/segmentio/nightmare/pull/650#issuecomment-220645336
",oliviervaillancourt,2016-05-27 16:18:19
650,2016-05-21 00:38:48,"Hey @rosshinkley and @Mr0grog,

I think I've updated this PR with the outcome of the discussion by simply stating `example.js` on line 55.

Let me know if you feel this should be done otherwise.

Thanks for your help
",oliviervaillancourt,2016-05-27 16:18:19
650,2016-05-21 01:36:34,"Looks awesome to me. Thanks!
",Mr0grog,2016-05-27 16:18:19
650,2016-05-27 16:09:49,"Looks great.  Marking for inclusion.  Thanks for the effort, @oliviervaillancourt!
",rosshinkley,2016-05-27 16:18:19
649,2016-05-19 18:05:03,"CircleCI started returning a valid 200 for bad URLs under the guise of DOS protection.  This change enforces bad domains during testing.
",rosshinkley,2016-05-19 18:09:36
648,2016-05-19 09:29:54,"Is there a way to asynchronously `.evaluate()`?

I was taking a look at [horseman](https://github.com/johntitus/node-horseman), and they provide a handy `done` callback...

<S_CODE_TOKEN>

I'm thinking in implementing it myself to nightmare, but want to be sure this doesn't exist already?
",daraosn,2016-07-09 17:32:40
648,2016-05-19 15:15:22,"This is touched on in #552, and a fix is proposed in #573.  At the time of this comment, it's incomplete.
",rosshinkley,2016-07-09 17:32:40
648,2016-07-09 17:32:40,"Merging into #552.
",rosshinkley,2016-07-09 17:32:40
647,2016-05-18 21:51:19,"I spent quite some time evaluating dozens of testing frameworks before settling on Nightmare. And today after thinking ""I wonder if I can replace the generators with `async`/`await`?"", and discovering that I could, I felt the need to express my gratitude for the work you've done.

So, thank you! (And sorry if this is the wrong place to say it!)
",taoeffect,2017-01-02 21:14:41
646,2016-05-18 16:42:12,,rosshinkley,
646,2016-05-19 01:03:51,"> (From #645) Once we've got consistent error reporting between the parent and child process, the errors over IPC almost falls out of that for free. Entirely possible I'm missing something, though.

So, quick example of what I was getting at:

<S_CODE_TOKEN>

Results in an error object back in the user’s process of `{}`—not super helpful! Right now we return strings or generic objects for errors (when we bother to return errors :P), which is not as nice. And if there is an actual exception in Nightmare’s code (as opposed to Nightmare explicitly returning error information), we have the same situation. That said, returning _something_ in all the explicit error cases is waaaaaaaay more important. The serialization thing is more of a nicety (but not a free one).
",Mr0grog,
646,2016-05-19 15:06:57,"> That said, returning something in all the explicit error cases is waaaaaaaay more important. The serialization thing is more of a nicety (but not a free one).

I should have chosen words more carefully.  Freeish?  Cheap?  Close to free?  Free enough?  Free as in mattress?  Take your pick.  My point was you could manage the explicit error data cases internally to the IPC to mimic real capital-E Errors easily enough, so long as the data is consistent.

Anyway, explicit errors are much more important, you're right about that.
",rosshinkley,
646,2016-05-20 18:18:25,"VIOLENT AGREEMENT! Anyway, back to the main topic here: figuring out the current state of affairs:

**goto**
- Error: a string for bad arguments (ideally, this should be a `TypeError`)
- Error: an object when the operation fails
- Return: an object with data about the HTTP response

**engineVersions**
- Cannot error
- Return: Object with data

**title**
- Should not ever error
- Return: string

**url**
- Should not ever error
- Return: string

**visible**
- Should not ever error
- Return: boolean

**exists**
- Should not ever error
- Return: boolean

**click, mousedown, mouseover, type, insert, check, uncheck, select**
- Error: may get a string error message, but not one that clearly indicates what went wrong (selector not found). See also #651
- Return: nothing

**forward**
- Should not ever error (open question: _should_ it error if there’s nothing to go forward _to?_)
- Return: nothing

**back**
- Should not ever error (open question: _should_ it error if there’s nothing to go back _to?_)
- Return: nothing

**refresh**
- Should not ever error
- Return: nothing

**wait**
- Error: actual `Error` instance on timeout
- Return: nothing if too few args (but does debug log the situation)
- Return: nothing if argument is an unknown type (does _not_ debug log the situation)
- Return: nothing on success

**evaluate**
- Error: actual `Error` instance for invalid arguments (ideally should be `TypeError`)
- Error: string for errors in the evaluated function
- Return: return value of evaluated function (when JSON-serializable)

**inject**
- Error: throws unhandleable async error for errors reading the file
- Return: nothing

**viewport**
- Appears to be incapable of erroring, but may behave oddly or hang if args are incorrect
- Return: nothing (could be value here in returning the actual resulting size, which may differ from requested size)

**useragent**
- Should not ever error
- Return: nothing

**scrollTo**
- Error: throws unhandleable async error if too few args (`TypeError: done is not a function`)
- No error, but potentially odd behavior if wrong argument types
- Return: nothing (like viewport, maybe useful to return the resulting scroll position)

**screenshot**
- Error: actual `Error` instance for file writing issues (permissions, paths, etc)
- Error: throws unhandleable async error if clip rect doesn’t have the required properties or is not an object
- Return: buffer if no path specified, nothing if path is specified

**html**
- Error: empty object if invalid value for `saveType` (it’s an error in Electron, but gets quashed by IPC serialization)
- Return: nothing

**pdf**
- Error: throws unhandleable async error if only one argument and it is not a string or object or if first argument of two is truthy but not a string
- Error: throws unhandleable async error if PDF generation actually fails (using, for example, an invalid `options` object like `{printBackground: 5}`)
- Return: buffer if no path specified, nothing if path is specified

**authentication**
- Should not be capable of erroring directly
- **Hangs indefinitely if given incorrect credentials**
- Error: throws unhandleable async error if called more than once (`Error: callback can only be called for once`)
- Return: nothing

**cookies.get, cookies.set, cookies.clear**
- May have odd errors if too many args
- Errors because of incorrect values get quashed into an empty object
- Return: single cookie object or array of cookie objects for get, nothing for set and clear

**run**
- Error: asynchronous, unhandleable runtime error if a callback function is not provided (See #500)

**then**
- Should never error
- Return: promise
",Mr0grog,
646,2016-12-22 05:19:26,"AH, the `throw new Error` from evaluate is just a string, not an error object.

That's why `error.message` wasn't working.

OK, I fixed my code in two places.",avimar,
645,2016-05-18 16:40:15,"Fixes #642.

Ultimately, I think it would be better to reject with an instance of `TypeError` (with the same message), but that requires properly serializing and deserializing errors over IPC, which is a non-trivial task (would love to hear your thoughts on this, @rosshinkley). I wanted to get the immediate problem solved first.
",Mr0grog,2016-05-19 16:58:35
645,2016-05-18 17:01:34,"Thank you for this, looks good.

As for the errors, it might be better to move this conversation to #646.  I haven't thought terribly deeply about serializing errors over IPC - my first thought is that all actions would have to consistently handle error cases, which is something we've also touched on in #593.  Once we've got consistent error reporting between the parent and child process, the errors over IPC almost falls out of that for free.  Entirely possible I'm missing something, though.
",rosshinkley,2016-05-19 16:58:35
644,2016-05-17 22:54:09,"We fixed this in the actual preload script, but missed the test! This doesn’t upgrade Electron, but it is a prerequisite for upgrading. (The API is gone entirely in Electron 1.0)
",Mr0grog,2016-05-19 16:58:22
644,2016-05-18 17:12:16,"I had spotted this when working on stuff for #502, but hadn't gotten around to PRing it.  Thanks!
",rosshinkley,2016-05-19 16:58:22
643,2016-05-17 13:24:50,"Hi,

While trying to test nightware, I had to modify the example.js a little bit.  It seems that yahoo.com may have removed the 'title' attribute on the search input.  

Also the readme tells you to node yahoo.js instead of example.js.

Maybe I misunderstood something.  But if this was really a correction to be done, here it is.

Thanks
",oliviervaillancourt,2016-05-20 01:11:59
643,2016-05-18 16:08:16,"Hi @oliviervaillancourt, the selectors in the README were specifically chosen to be more robust against the regular changes Yahoo makes and they do still work: https://github.com/segmentio/nightmare/pull/613

It looks to me like it’s just `example.js` that is out of date (my bad; I completely failed to update it in the above PR.)
",Mr0grog,2016-05-20 01:11:59
643,2016-05-18 20:50:23,"Hi Rob,

Thanks for taking the time to look into my PR.  I see the more robust way of doing selector in PR 613.  

I'm still having this issue and I'm not sure if it's because I misunderstood something or the PR hasn't been merged yet.

Anyways, I've made a video of what I'm doing and you can have a look to if you want.

[https://onedrive.live.com/redir?resid=9A82B122E214504!6250&authkey=!ALWRmtGHO62jr_M&ithint=video%2cmp4 ](https://onedrive.live.com/redir?resid=9A82B122E214504!6250&authkey=!ALWRmtGHO62jr_M&ithint=video%2cmp4)

Thanks
",oliviervaillancourt,2016-05-20 01:11:59
643,2016-05-19 00:51:36,"@oliviervaillancourt Right, your issues are with:
- README should say to run `node node_modules/nightmare/example.js`
- The actual content of `example.js` doesn’t match the example in the README

Both of those things totally need to be fixed! :thumbsup: on your PR changing those. I was only trying to say that it probably shouldn’t change the example code (changing the shell command is good) that is currently in the README (and, where it changes `example.js`, it should match the code in the README). Sorry if I worded it poorly!
",Mr0grog,2016-05-20 01:11:59
643,2016-05-19 01:10:26,"Hey Rob,

Sounds like we are on the same page now and I completely agree with the way you stated things.

I guess at this point, although my PR is not exactly the best, you have enough to make the changes required.

If you need me to update the PR, let me know but I'll assume you have enough info to make the changes.

Thanks for taking the time to help me understand.  I'll continue to play around with nightmare
",oliviervaillancourt,2016-05-20 01:11:59
643,2016-05-19 01:20:44,"> you have enough to make the changes required.

I’m not a committer and don’t have any more rights to make changes than you do, so you should probably keep working on this PR. (I just thought I’d give some feedback since I wrote #613 and knew a little bit about the stuff you were touching here.)
",Mr0grog,2016-05-20 01:11:59
643,2016-05-19 01:30:42,"Ah,  got it.

Thanks for your input.  I'll look into that.

Thanks
On May 18, 2016 21:20, ""Rob Brackett"" notifications@github.com wrote:

> you have enough to make the changes required.
> 
> I’m not a committer and don’t have any more rights to make changes than
> you do, so you should probably keep working on this PR. (I just thought I’d
> give some feedback since I wrote #613
> https://github.com/segmentio/nightmare/pull/613 and knew a little bit
> about the stuff you were touching here.)
> 
> —
> You are receiving this because you were mentioned.
> Reply to this email directly or view it on GitHub
> https://github.com/segmentio/nightmare/pull/643#issuecomment-220203551
",oliviervaillancourt,2016-05-20 01:11:59
643,2016-05-19 15:23:37,"@oliviervaillancourt just to +1 what @Mr0grog was saying: _please_, by all means, keep going.  The more contributors, the more people we have involved, the better. :)
",rosshinkley,2016-05-20 01:11:59
643,2016-05-20 01:11:59,"Created a new PR  #(650) that replaces this one.  So closing this PR.
",oliviervaillancourt,2016-05-20 01:11:59
642,2016-05-17 12:55:40,"<S_CODE_TOKEN>

Actual output:

<S_CODE_TOKEN>

Expected output:

<S_CODE_TOKEN>
",LinusU,2016-05-19 16:58:35
642,2016-05-18 05:52:56,"Is this meant to run in a generator with `yield nightmare.goto(undefined)` ? Otherwise I can’t reproduce what you’re describing.
",Mr0grog,2016-05-19 16:58:35
642,2016-05-18 06:03:41,"Oh, sorry, yes it is :+1:
",LinusU,2016-05-19 16:58:35
641,2016-05-17 08:35:03,"It felt very awkward to be able to use `.then`, but not `.catch` directly, leading me to write code like this:

<S_CODE_TOKEN>

This pr will allow me to skip the `.then(x => x)` part and just use `catch` directly, making it work even more as a normal promise.

<S_CODE_TOKEN>
",LinusU,2016-05-19 16:57:54
641,2016-05-18 13:09:52,"Ping @Mr0grog 😃 
",albinekb,2016-05-19 16:57:54
641,2016-05-18 14:16:29,"Cool, I think this would be great to have! But why isn’t the implementation just:

<S_CODE_TOKEN>

It’s much simpler and more robust. After all, that’s how it’s specified: http://www.ecma-international.org/ecma-262/6.0/index.html#sec-promise.prototype.catch
and even how it’s implemented in V8: https://chromium.googlesource.com/external/v8/+/master/src/promise.js#256

Also, it needs a test ;)

(Side note: I’m not a committer here, just a helpful handyman, so I can’t approve your PR.)
",Mr0grog,2016-05-19 16:57:54
641,2016-05-18 14:36:33,"@Mr0grog Thanks for the comments!
",LinusU,2016-05-19 16:57:54
641,2016-05-18 17:33:26,"+1 on this.  Including.
",rosshinkley,2016-05-19 16:57:54
640,2016-05-17 00:12:44,"This helps to alleviate the problems noted in #612 (and hinted at in other issues as well), but does not solve the core problem (deadlocking on a disk cache shared between Electron processes).

This turned out to require a much bigger change than one might expect—Nightmare checks whether the window is ready to receive actions (i.e. whether it is loading) between every action, but since we can now be in a state where we are ok to continue but loading is still going on, we have to track for ourselves whether is OK to perform the next action instead of simply asking Electron whether resources are loading. This is accomplished by way of a method named `isReady()` that returns a boolean and `setIsReady(newValue)` that takes a boolean and fires an event on the `BrowserWindow` instance called `did-change-is-ready`.

The actual timeout value can be customized at construction time (via an option called `gotoTimeout`, analagous to `waitTimeout`) and at method time with a third argument `goto(url, headers, timeout)`.

@rosshinkley I’m not 100% providing _both_ those methods for overriding is best—maybe it should just follow the example of `wait` and only support the constructor option?

I also wonder if, based on this, certain actions should be exempted from the `continue` check (e.g. `goto`, `viewport`, `wait(number)`), since it’s not really relevant for everything. I think that’s definitely out of scope for this PR, though.
",Mr0grog,2016-05-27 16:18:02
640,2016-05-18 17:50:44,"> I’m not 100% providing both those methods for overriding is best—maybe it should just follow the example of wait and only support the constructor option?

Hm, I'm inclined to say that it should be a constructor-only option.  I can't think of a case offhand where having differing timeouts by URL would be helpful.  Is there a use case buried here that I'm not thinking of?

> I also wonder if, based on this, certain actions should be exempted from the continue check (e.g. goto, viewport, wait(number)), since it’s not really relevant for everything. I think that’s definitely out of scope for this PR, though.

Fair point.  I suspect the idea was to have all of the actions use the same events for simplicity, but I can certainly see where a go-ahead timeout would be useful for those handful of actions.  (Adding it to `.wait(number)` might be breaking for users in the wild, though.)
",rosshinkley,2016-05-27 16:18:02
640,2016-05-19 01:31:01,"> I can't think of a case offhand where having differing timeouts by URL would be helpful. Is there a use case buried here that I'm not thinking of?

I _think_ this came from my personal angst that it’s not an option with `wait(selector|function)`—where I do think there are clear use cases for different timeouts on different calls (bits of this PR have been hanging around in my git stash for a while). I think, upon reflection, that it doesn’t have any especially great use-cases. Maybe when loading a local page you might expect it to be fast and want to time out more quickly than when loading something from the web? I’m not sure that’s a very strong case, though.
",Mr0grog,2016-05-27 16:18:02
640,2016-05-19 17:44:44,"Updated to resolve merge conflicts.
",Mr0grog,2016-05-27 16:18:02
640,2016-05-20 15:34:12,"> I think this came from my personal angst that it’s not an option with wait(selector|function)—where I do think there are clear use cases for different timeouts on different calls (bits of this PR have been hanging around in my git stash for a while).

Ah, I understand.  Wholly agree it makes sense for `.wait()`, but for `.goto()` ... I'm leaning toward ""no"".

> Maybe when loading a local page you might expect it to be fast and want to time out more quickly than when loading something from the web?

Mmm, _maybe_ - this feels a bit out in the weeds, though.  I say let's not complicate the method signature until it's demonstrably useful.  Thoughts?
",rosshinkley,2016-05-27 16:18:02
640,2016-05-20 15:36:42,"> Wholly agree it makes sense for .wait(), but for .goto() ... I'm leaning toward ""no"".

Yeah, already changed it yesterday in c9679938e64ec4196d3defd8a84d90171b591d14 :)
",Mr0grog,2016-05-27 16:18:02
640,2016-05-20 15:38:33,"@Mr0grog I saw. :)  Doing my best to be thorough.

This looks good.  +1 to you sir.
",rosshinkley,2016-05-27 16:18:02
639,2016-05-16 19:37:45,"Is there any way to make .click() work in a React app? Calling it with the selector string that yields the element on which the `onClick` handler is defined doesn't seem to work.

All the sources I found recommend using the React test utils to simulate a click, but of course production websites don't expose these. I'm considering to monkey-patch the react test utils into the page (insert script tag or something) but that seems a bit obscure.

I guess the question extends to other page interactions like .type(), do these work with React apps?

I tried a workaround suggested in https://github.com/facebook/react/issues/3249

<S_CODE_TOKEN>

But this doesn't even work in the Chrome console.
",timotgl,2016-05-19 06:30:53
639,2016-05-17 21:55:38,"I _suspect_ this is the same as the notes about whether `click` should be using `sendInputEvent` in #619. Does writing a plugin that clicks by using `sendInputEvent` work for you?
",Mr0grog,2016-05-19 06:30:53
639,2016-05-17 22:28:11,"If it helps to test, here’s a quickie example plugin:

<S_CODE_TOKEN>

Use it like so:

<S_CODE_TOKEN>
",Mr0grog,2016-05-19 06:30:53
639,2016-05-18 07:58:37,"@Mr0grog your example works perfectly, but using `realClick` on a React button still doesn't work for some reason. I either get 'parent doesn't respond to .realClick' or just nothing happens. But thank you for the investigation nonetheless 👍 
",timotgl,2016-05-19 06:30:53
639,2016-05-18 14:34:07,"> I either get 'parent doesn't respond to .realClick' or just nothing happens.

Where do you see that error? Nothing in Nightmare should generate that message and nothing outside Nightmare should have any clue about `realClick`, so it doesn’t sound like it’s working perfectly at all! I wouldn’t conclude it’s not working for React yet until we know it’s actually working ;)

Do you have a full test case you can post as a [gist](https://gist.github.com)?
",Mr0grog,2016-05-19 06:30:53
639,2016-05-19 06:30:51,"Turns out that I was using an incorrect selector string with .click(). It needs to be the exact same DOM node where the corresponding React component has the onClick handler. I tried with a wrapping element and assumed it would be propagated. The normal .click() does work in fact. Sorry for taking up your time :/
",timotgl,2016-05-19 06:30:53
638,2016-05-16 16:05:28,"It would be really nice if there were a way to pass in the failure message you'd like logged when a wait call times out. So instead of just seeing the default `failed with "".wait() timed out after 30000msec""` you would be able to call wait like so 

<S_CODE_TOKEN>
",atomless,2016-05-27 20:09:36
638,2016-05-16 17:52:17,"`wait` could definitely have a better message, but I don’t think user customization is a good idea. Are you looking for better output in unit/functional tests? If so, I think is is much better handled (and probably already supported) by whatever assertion/expectation library you’re using.
",Mr0grog,2016-05-27 20:09:36
638,2016-05-17 08:29:31,"I'm also 👎 on being able to customise the message, if you are implementing a library and want to provide useful errors to your consumers, use `try`/`catch`.

e.g.

<S_CODE_TOKEN>
",LinusU,2016-05-27 20:09:36
638,2016-05-17 19:19:49,"@atomless since you’re using Ava (I think?), you could do something like:

<S_CODE_TOKEN>
",Mr0grog,2016-05-27 20:09:36
638,2016-05-18 15:32:25,"@Mr0grog nice idea! Thanks.
",atomless,2016-05-27 20:09:36
637,2016-05-16 12:25:10,"<S_CODE_TOKEN>

Expected output:

<S_CODE_TOKEN>

Actual output:

<S_CODE_TOKEN>
",LinusU,2016-07-09 17:25:07
637,2016-05-18 17:28:46,"related: #593, #645, #646 
",rosshinkley,2016-07-09 17:25:07
637,2016-07-09 17:25:06,"Merging this conversation into #646.
",rosshinkley,2016-07-09 17:25:07
636,2016-05-16 10:18:30,"<S_CODE_TOKEN>

throws this error stack:

<S_CODE_TOKEN>
",atomless,2016-07-09 17:24:19
636,2016-05-16 17:35:56,"Are you using Babel or some other source transformer on this code? (guessing so because you are using `import`). Most likely, the source transformer is changing the `Object.keys()` call to call some other library function, which is then not available in the actual browser window where it gets evaluated.

Have you tried this example code on its own without source transformations?
",Mr0grog,2016-07-09 17:24:19
636,2016-05-16 17:48:30,"Also, what versions of Node, Nightmare, and Electron are you using?
",Mr0grog,2016-07-09 17:24:19
636,2016-05-18 15:31:16,"Hi @Mr0grog - well, that's a good thought, but the thing is I can run `Object.keys(...)` without error from everywhere in my test scripts with no error at all. I only get the error when it's run from within a function in a `wait()` or `evaluate()` call.
",atomless,2016-07-09 17:24:19
636,2016-05-18 16:01:56,"> I only get the error when it's run from within a function in a wait() or evaluate() call.

That adds more evidence for the conclusion, then! The functions you pass to `wait` and `evaluate` don’t run in the current environment—they get transformed back to source code, sent to the browser (an entirely different process, so you can’t share function objects with it), then turned back into functions and executed there. If you have code in those functions that depends on something in your environment (such as a custom implementation of `Object.keys`), they’ll break, because they don’t actually run in your environment.
",Mr0grog,2016-07-09 17:24:19
636,2016-05-18 17:16:35,"@Mr0grog yep - you must be right. I find it quite surprising that Ava's babel transpiler would mess with Object.keys though!
",atomless,2016-07-09 17:24:19
636,2016-05-18 17:34:45,"One workaround if you are stuck with that transpiler would be:

<S_CODE_TOKEN>
",Mr0grog,2016-07-09 17:24:19
636,2016-07-09 17:24:19,"Looks like this issue is resolved, so I'm going to go ahead and close it.  If this is still a problem, feel free to reopen/submit a new issue.
",rosshinkley,2016-07-09 17:24:19
635,2016-05-13 18:50:10,"Im using nightmare to turn some large webpages into pdfs and I've been having some issues. After digging around for a bit, here is what I've got.
Generally, everything works, but sometimes I see electron just crash (the process dies) during the pdf generation phase and then nothing else happens. No error is thrown, nightmare never returns anything, promises aren't evaluated. It just stalls out indefinitely. 
I have also seen the same thing happen on occasion with the one difference being the following error

<S_CODE_TOKEN>

Any suggestions here?

Edit: Its probably worth noting that I'm not printing directly to a pdf, but storing it as a buffer and passing it along to some compression scripts. 
Also, after playing around with the different debugging options, I got a logline 
`nightmare electron child process exited with code null: undefined +29s`
Edit2: Tried to get some more info out of nightmare when electron crashes. Its shutting down due to the signal SIGILL
",RoryJShevin,2016-07-09 17:23:25
635,2016-05-22 16:40:43,"@RoryJShevin Can you post a minimum reproduction of this problem?  Also, what version of Nightmare are you using?

I've tried to reproduce this problem with a ~15mb and ~500mb page and cannot.
",rosshinkley,2016-07-09 17:23:25
635,2016-07-09 17:23:25,"Closing due to lack of information.  If this is still a problem, feel free to reopen/submit a new issue with a repro case.
",rosshinkley,2016-07-09 17:23:25
635,2017-03-17 12:18:24,I have the same problem.,drnachio,2016-07-09 17:23:25
634,2016-05-13 16:05:31,"<S_CODE_TOKEN>

Expected output:

<S_CODE_TOKEN>

Actual output:

<S_CODE_TOKEN>
",LinusU,2016-07-09 17:22:48
634,2016-05-13 17:28:44,"Yeah, this is a long-standing known issue and there’s been a _little_ bit of discussion about better serializing things like errors. But for now, what you send across processes has to be JSON-serializable.
",Mr0grog,2016-07-09 17:22:48
634,2016-05-18 17:20:54,"Related: #646, #593, #645
",rosshinkley,2016-07-09 17:22:48
634,2016-07-09 17:22:48,"Merging into #646, moving discussion for serializing errors/error handling there.
",rosshinkley,2016-07-09 17:22:48
633,2016-05-12 18:41:35,"Right know it logs something like ""Cannot read property 'blur' of null"" when there is a not existing selector, would be great for next version to have additional info of the action and what triggered the error, etc :)

Also, if there is a fatal error like a not existing selector, shouldn't the error be logged even if there is no catch?
",rickmed,2016-05-18 17:16:11
633,2016-05-13 17:38:51,"> Also, if there is a fatal error like a not existing selector, shouldn't the error be logged even if there is no catch?

This part is a little debatable (I’m totally with you on better messages)—the reason promises don’t natively do this is because you can always add a rejection handler via `then` or `catch` later after the error occurs. Instead, you can listen for [the `process` object’s `unhandledRejection` event](https://nodejs.org/dist/latest-v4.x/docs/api/process.html#process_event_unhandledrejection):

<S_CODE_TOKEN>
",Mr0grog,2016-05-18 17:16:11
633,2016-05-18 17:15:28,"> Right know it logs something like ""Cannot read property 'blur' of null"" when there is a not existing selector, would be great for next version to have additional info of the action and what triggered the error, etc :)

This part, however, dovetails with some of the other issues we've been talking about in #645, #646, and #593.  I'm on board for making events have more helpful errors.
",rosshinkley,2016-05-18 17:16:11
633,2016-05-18 17:16:11,"I'm going to merge this with #646.
",rosshinkley,2016-05-18 17:16:11
632,2016-05-11 15:42:40,"Electron have released version 1.0, nightmare needs to upgrade electon-prebuilt. 
http://electron.atom.io/blog/2016/05/11/electron-1-0
",lamecoder,2016-06-08 02:19:56
632,2016-05-18 17:13:12,"#644 needs to be pulled in first at a minimum.
",rosshinkley,2016-06-08 02:19:56
632,2016-05-26 09:13:17,"#644 is merged, what is next for making this happening?
",LinusU,2016-06-08 02:19:56
632,2016-05-31 14:59:25,"Tried it locally with Electron 1.0.2 and seems to be working great. All tests are passing and I was able to use our internal app as before.

I'm affected by electron/electron#5444 so it would be really nice to be able to upgrade to version 1.0.2...
",LinusU,2016-06-08 02:19:56
632,2016-05-31 15:50:18,"@LinusU It works fine with 1.0.x and (memory serving) 1.1.x, but some of the tests involving `webSecurity` break with 1.2.x.  I believe it's symptoms of electron/electron#5712, which have been fixed but as yet unreleased (at least with `electron-prebuilt`).  

I'm comfortable upgrading to a non-breaking version in the meantime, barring protest.  Thoughts?
",rosshinkley,2016-06-08 02:19:56
632,2016-06-01 13:40:59,"`1.2.1` is released from electron, just need to wait for `electron-prebuilt` to upgrade
",albinekb,2016-06-08 02:19:56
632,2016-06-02 11:11:15,"@rosshinkley @LinusU 
`1.2.1` is now released in `electron-prebuilt` https://www.npmjs.com/package/electron-prebuilt
I ran the tests with `1.2.1` and everything passes 🎉 
",albinekb,2016-06-08 02:19:56
632,2016-06-07 09:45:28,"ping @rosshinkley @matthewmueller 
",albinekb,2016-06-08 02:19:56
632,2016-06-07 23:42:09,"@albinekb This will get pulled into the next version. :)
",rosshinkley,2016-06-08 02:19:56
631,2016-05-11 06:12:57,"npm ERR! Windows_NT 10.0.10586
npm ERR! argv ""C:\Program Files\nodejs\node.exe"" ""C:\Program Files\nodejs\node_modules\npm\bin\npm-cli.js"" ""install"" ""--save"" ""nightmare""
npm ERR! node v6.1.0
npm ERR! npm  v3.8.6
npm ERR! code ELIFECYCLE

npm ERR! electron-prebuilt@0.37.8 postinstall: `node install.js`
npm ERR! Exit status 1
npm ERR!
npm ERR! Failed at the electron-prebuilt@0.37.8 postinstall script 'node install.js'.
npm ERR! Make sure you have the latest version of node.js and npm installed.
",Muyv,2016-05-19 05:15:45
631,2016-05-13 17:22:55,"@Muyv This is an issue in `electron-prebuilt` and I believe it’s already been filed: https://github.com/electron-userland/electron-prebuilt/issues/125 (but you should make sure that bug matches what you’re experiencing)
",Mr0grog,2016-05-19 05:15:45
631,2016-05-18 17:10:25,"@Muyv Is this resolved?
",rosshinkley,2016-05-19 05:15:45
631,2016-05-19 03:38:42,"@rosshinkley Nope, maybe this issue is WINDOWS-only, I tried to do it in CentOS, eveything goes well.
",Muyv,2016-05-19 05:15:45
631,2016-05-19 03:53:32,"@Mr0grog Thx, It seems a compatibility problem of `electron-prebuilt`. In fact I've already used another Phantomjs bridge to realize my requirements.
",Muyv,2016-05-19 05:15:45
630,2016-05-10 02:36:11,"This fixes a potential bug where, if `goto('javascript:blahblahblah')` was called while a child frame was loading, the nightmare could wind up getting stuck, never moving on to the next action (because the `goto` machinery is only paying attention to events on the main frame).

[There's a related check for `isLoading()` in the `continue` action](https://github.com/segmentio/nightmare/blob/master/lib/runner.js#L459), but I figured that one was best to leave alone for now—if you want to take a screenshot, for example, you might want to make sure child frames have finished loading first. We could get a minor potential speed boost on pages with frames by changing it, though.
",Mr0grog,2016-05-19 16:58:05
629,2016-05-10 01:00:06,"Hey Nightmare Team,

I still love the work you've been producing, but I've run into a few snags. With the old generator form, I used to be able to having intermediate steps in my promise or function that would check for specific conditions before failing or continuing. 

With the new promise format, I don't see a way I can do this, or perhaps I'm missing something.

An example might be:
- Go to a login page
- Check for a selector
- Type username and password
- Login fails
- Check for failed message, throw error.
- Take a screenshot to send with the error for debugging purposes

In the case of the new promise-based nightmare, the failure is just a timeout since I have yet to figure out a way to have an intermediary step.

Any advice on how I might be able to achieve this?
",chrisgeo,2016-05-27 20:10:14
629,2016-05-10 02:02:02,"First off, you should still be able to write the exact same code with generators. Nothing’s changed there so far as I’m aware. (The generator support was always based on the promise-style API; I think the change in messaging was just a desire not to push learning both Nightmare _and_ async generators on a new user.)

I’m imagining you might have had code like…

<S_CODE_TOKEN>

If that's way off, drop an actual example in here so we can see what you're trying to translate to promises.

A promise version of the above might be:

<S_CODE_TOKEN>

In the above, `doTheThing()` would return a promise that resolves if the login worked and rejects if the login failed.
",Mr0grog,2016-05-27 20:10:14
629,2016-05-10 16:28:32,"Thanks @Mr0grog. I'll go and give it a try again. Thanks for your help.
",chrisgeo,2016-05-27 20:10:14
629,2016-05-11 16:50:06,"Hey @Mr0grog,

Sorry for opening this up again, but looking at the promise example, I'm not positive generators would work inside of it.

Here's an example based on your suggestion:

<S_CODE_TOKEN>

It's possible for my use-case that using the generator form may be better altogether because I have other actions that need to occur after `.then`, an example building off the original, 
- Login fails, fail and take screenshot
- Login success, go to the next page
  - do a few actions
  - take a screenshot.
",chrisgeo,2016-05-27 20:10:14
629,2016-05-12 03:27:54,"Oh no, I think you might have some crossed wires here about how promises and generators work, probably caused by a **horrible** copy/paste error in my initial reply. So sorry about that :(

While you _can_ mix the promise-style `then()` API with generators, you really don’t want to. (You’d still need `vo`; setting it up right would be complicated, etc). When I wrote:

<S_CODE_TOKEN>

That was a copy/paste error from the window I’d written the code in. It’s completely wrong and wouldn’t ever work _at all._ That was supposed to be:

<S_CODE_TOKEN>
",Mr0grog,2016-05-27 20:10:14
629,2016-05-12 04:06:19,"> It's possible for my use-case that using the generator form may be better altogether because I have other actions that need to occur after .then, an example building off the original

So… this is equally do-able in generator form or in promise-form. The main difference is in the way you branch. Let’s say we fixed my original example with the code from above (sorry again):

<S_CODE_TOKEN>

The easiest way to use that would be:

<S_CODE_TOKEN>

It might also just be simpler to:

<S_CODE_TOKEN>

There are _a lot_ of ways to formulate this. What works best will depend on exactly what it is you want to do.
",Mr0grog,2016-05-27 20:10:14
628,2016-05-09 11:02:17,"In testing my app I am using `wait('element_selector')` a lot. Often I need to return a boolean value once the element is found in order to use it in a truthy assertion. SO I end up doing : `let el_found = await browser.wait('el_selector').evaluate(() => { return true; });` or ``let el_found = await browser.wait('el_selector').exists('el_selector');`

It seems to me it would be much nicer if wait simply returned true once the element was found?
",atomless,2016-05-27 20:07:47
628,2016-05-10 02:15:01,"Just making sure I understand, you're doing:

<S_CODE_TOKEN>

Why not:

<S_CODE_TOKEN>

Seems a little simpler unless I'm misunderstanding what you're getting at.

That said, if I understand right, it _would_ be nice if `wait()` also returned `true` when it succeeded. In general, a lot of the Nightmare methods could probably stand to return more informative values. 👍 
",Mr0grog,2016-05-27 20:07:47
628,2016-05-10 13:21:50,"@Mr0grog Thanks. 

Yes, I can see I should have provided more context with my question. Specifically, I am using Nightmare.js with the testing framework [Ava](https://github.com/sindresorhus/ava) - (incidentally Nightmare and Ava almost feel made for each other!).

I am writing a series of functional tests for my app, that run in serial and tend to each perform a small action and/or then test a single part of my app's state. So they tend to look a lot like this:

<S_CODE_TOKEN>
",atomless,2016-05-27 20:07:47
628,2016-05-10 16:12:58,"Hmmm, in that case, you ought to just be able to:

<S_CODE_TOKEN>

In an `async` function (or async generator), `browser.wait()` should throw an exception if the selector never shows up, so you you _shouldn’t_ need to assert anything at all there. I’ve never actually used Ava, though, so I don’t know if there are any idiosyncrasies there.
",Mr0grog,2016-05-27 20:07:47
628,2016-05-11 08:31:20,"I agree with @Mr0grog, and I think that it would be weird API-wise if `wait` returned a `Promise<bool>`.

I've been using Ava with Nightmare as well and a just to `await browser.wait(...)`, it will throw an error if the promise is rejected.
",LinusU,2016-05-27 20:07:47
628,2016-05-11 09:07:14,"@Mr0grog yes, you are correct that you could choose not to use the assertion and it would still work - although I'd still like to attempt to have a descriptive fail message - unfortunately when ava times out the error message is not shown even with the assertion :(
",atomless,2016-05-27 20:07:47
628,2016-05-11 10:25:07,"That must because ava times out before the `browser.await` times out in that case...
",LinusU,2016-05-27 20:07:47
628,2016-05-13 14:49:07,"@LinusU Bingo - set Ava's timeout so that it's longer than the 30s Nightmare.js wait timeout and I now get the proper test failure message when the wait times out. Thanks!
",atomless,2016-05-27 20:07:47
628,2016-05-13 16:59:48,"@atomless you can also reduce how long `wait` waits if you need:

<S_CODE_TOKEN>

Would only wait 5 seconds.
",Mr0grog,2016-05-27 20:07:47
628,2016-05-13 17:06:47,"@Mr0grog even better - thanks!
",atomless,2016-05-27 20:07:47
628,2016-05-18 17:06:28,"@atomless Is this issue resolved?
",rosshinkley,2016-05-27 20:07:47
628,2016-05-27 20:07:47,"Closing for inactivity, if this issue is still a problem feel free to reopen/open a new issue.
",rosshinkley,2016-05-27 20:07:47
628,2016-06-01 03:56:41,"@atomless 
Is not more easy use `JSDOM` instead `Nightmare` for your test?

But if you really want use `AVA` + `Nightmare` you can use `test.cb`

**Example**

<S_CODE_TOKEN>
",lagden,2016-05-27 20:07:47
627,2016-05-08 10:37:07,"I am trying to update the package `x-ray-phantom` from using old nightmare phantom driver to using electron. Fork here https://github.com/ivawzh/x-ray-phantom

However, `.evaluate()` seems not being triggered. 

<S_CODE_TOKEN>

Result from running `npm test`:

<S_CODE_TOKEN>
",ivawzh,2016-05-10 22:51:56
627,2016-05-08 16:45:40,"First, the immediate problem: the way you're using `.evaluate()`, the function that accepts the body and sets `ctx.body` will be passed as an argument to the first function in `.evaluate()`.  Off the cuff, I think you want something like:

<S_CODE_TOKEN>

Second, a question for you: have you seen the [Nightmare driver for x-ray](https://github.com/phulas/x-ray-nightmare)?  Would that work for your application?
",rosshinkley,2016-05-10 22:51:56
627,2016-05-09 13:10:54,"@rosshinkley Thanks for the answer. Your fork looks awesome, just one thing I cannot get pagination to works. Is there anything special I need to config?
",ivawzh,2016-05-10 22:51:56
626,2016-05-07 17:15:27,"I want it to scroll down until the size of the returned document does not increase anymore. 
How can I achieve this?
",nick2012,2016-05-08 16:30:35
626,2016-05-08 16:30:35,"Duplicate of #625, closing.
",rosshinkley,2016-05-08 16:30:35
625,2016-05-07 16:01:55,"<S_CODE_TOKEN>
",nick2012,2016-05-27 20:10:24
625,2016-05-07 16:48:25,"It looks like maybe you are trying to call nightmare functions from within `evaluate_now`, which won’t work. The code passed to `evaluate_now` runs _inside the browser window,_ where `this` represents the same `window` object any JavaScript running inside the page would have access to.

Also, unless the page specifically does something special when the page scrolls, scrolling the page isn’t going to make the result of `exists(selector)` change.
",Mr0grog,2016-05-27 20:10:24
625,2016-05-07 16:57:20,"<S_CODE_TOKEN>

The selector that I use in exists() is available until no further scrolling down is possible.

On a sidenote, I have a different ideea. There are pages where you can't figure out very easily how the infinite scroll is implemented, or which is the selector, at least if you are a beginner like me. 

I want it to scroll down until the size of the returned document does not increase anymore. 
How can I achieve this?

Javascript kills me, in Perl this would have been so easy, but Mechanize::Firefox is outdated and very slow. 
",nick2012,2016-05-27 20:10:24
625,2016-05-08 16:25:10,"Another nit: your initial example also will only scroll until the page is 100000 px long, which is _big_, but ""infinite"" scroll pages could be longer.

> I want it to scroll down until the size of the returned document does not increase anymore. 
> How can I achieve this?

This is a **very** naive method to answer your question:

<S_CODE_TOKEN>

This approach has problems: when you're going against a page that [actually is an _infinite_ scroll](http://scrollmagic.io/examples/advanced/infinite_scrolling.html), the above will never end.  Also, the `.wait()` call could be replaced with waiting for the scroll element count to change to possibly reduce latency and increase robustness.

> Javascript kills me, in Perl this would have been so easy, but Mechanize::Firefox is outdated and very slow.

If Perl is your language of choice, you _might_ want to check out [Selenium](http://www.seleniumhq.org/).  I haven't personally tried it, but there is a [Perl port of the remote driver](https://github.com/gempesaw/Selenium-Remote-Driver).
",rosshinkley,2016-05-27 20:10:24
624,2016-05-06 19:36:58,"Hello,

I may be missing something, but I did not find any info on how upload of files (input type=file may be multiple file support). Is it possible? I think I scanned all the docs but no mentioning of upload files

Thanks
",huglester,2016-05-06 19:38:37
624,2016-05-06 19:38:37,"ah.. those silly things, when you first post and the find similar issue! duplicate #235
",huglester,2016-05-06 19:38:37
623,2016-05-06 17:42:32,"Fixes #622.
#595 should be almost exactly the same as ‘should be constructable with switches’ since it is the same, just only supporting switches with no values (or switch + value together in one string).
",Mr0grog,2016-05-19 16:57:33
623,2016-05-18 17:02:11,"This looks great, adding to next release. :+1: 
",rosshinkley,2016-05-19 16:57:33
622,2016-05-05 18:43:03,"Arising from a conversation over #595, there should be a better test beyond mere construction for `switches`.  One possibility that @Mr0grog suggested is a test-only plugin that hooks into the Electron machinery to ensure the switches are set.
",rosshinkley,2016-05-19 16:57:33
621,2016-05-04 22:40:29,"Outgrowth of #620.
",rosshinkley,2016-05-27 16:17:29
621,2016-05-06 03:36:18,"Should probably document it clearly in the README, too. To be honest, I’m not really sure what the compatibility requirement _is._ (I was under the impression, based on some comment in an issue or PR I can’t find a little while back, that it was Node 4+ now.)
",Mr0grog,2016-05-27 16:17:29
621,2016-05-06 03:41:40,"> Should probably document it clearly in the README, too. 

👍 

> To be honest, I’m not really sure what the compatibility requirement is.

We talked about it (I can't find the reference offhand either), and I believe we came to the consensus that Node 4+ was ""official"", but I _think_ everything will still work using 0.12.x with `--harmony`.
",rosshinkley,2016-05-27 16:17:29
621,2016-05-20 19:44:13,"> Node 4+ was ""official"", but I think everything will still work using 0.12.x with --harmony.

Scratch that.  Template strings don't work with <4.
",rosshinkley,2016-05-27 16:17:29
621,2016-05-20 20:01:28,"> Template strings don't work with <4.

Worth noting that doesn't matter for node compatibility (for now), since we only use template strings on the Electron side, which does support them in the version we require in `package.json`.
",Mr0grog,2016-05-27 16:17:29
621,2016-05-20 20:04:39,"... won't calls to [`.call()`](https://github.com/segmentio/nightmare/blob/master/lib/ipc.js#L72) fail, specifically when the emitter [gets a result](https://github.com/segmentio/nightmare/blob/master/lib/ipc.js#L87)?
",rosshinkley,2016-05-27 16:17:29
621,2016-05-20 20:06:02,"d'oh, forgot `ipc.js` also runs in the user process! (Was only looking at `nightmare.js`.)
",Mr0grog,2016-05-27 16:17:29
621,2016-05-20 20:06:32,"Totally fine!  :)  Just making sure my read of things was okay.
",rosshinkley,2016-05-27 16:17:29
621,2016-05-20 20:07:01,"(Do we need to change `ipc.js`?)
",Mr0grog,2016-05-27 16:17:29
621,2016-05-20 20:08:09,"> (Do we need to change ipc.js?)

I don't think so.  My stance is that it's _fairly_ reasonable to say that 4.x is a good minimum requirement.  What do you think?
",rosshinkley,2016-05-27 16:17:29
621,2016-05-20 20:13:33,"I am cool with that—especially since I was the one who thought the minimum had been updated to 4.x in the first place :P  (Also since 6.x will soon be the new long-term-support version of node)
",Mr0grog,2016-05-27 16:17:29
621,2016-05-20 20:15:28,"I'm almost 100% sure we had this conversation (or a very close approximation), but it's beyond my searching ability.  Now it's official in #653! ;)
",rosshinkley,2016-05-27 16:17:29
620,2016-05-04 17:51:51,"With the following error:

<S_CODE_TOKEN>

Is this expected / documented anywhere?
",mathisonian,2016-05-18 16:49:59
620,2016-05-04 21:55:01,"Are you running with `--harmony`?  I _thought_ fat-arrow notation was supported (with some caveats with respect to binding `this`) in Node 0.12.x.  Open to being wrong, though.

Node 4.x+ is recommended for Nightmare, but I see now that it's not listed as the engine in `package.json`.  (I also know that assertion had been made before, but it's not jumping out at me where.)
",rosshinkley,2016-05-18 16:49:59
620,2016-05-04 21:59:05,"Ah no, I wasn't running with `--harmony`. Not a huge deal, but I ran into the error when I depended on `^2.1.0` and got the semantic upgrade. 

Thanks for the response!
",mathisonian,2016-05-18 16:49:59
620,2016-05-18 16:49:59,"I believe this issue has been resolved, closing.  If you continue to have problems, feel free to reopen/open a new issue.
",rosshinkley,2016-05-18 16:49:59
620,2016-07-01 09:56:10,"i have this issue.
",dcshapiro,2016-05-18 16:49:59
620,2016-07-01 09:56:48,"root@ubuntu-2gb-tor1-01:/images# node --harmony e.js

/images/node_modules/google-images-scraper/node_modules/nightmare/lib/nightmare.js:94
  this.queue((done) => {
                     ^
SyntaxError: Unexpected token >
    at Module._compile (module.js:439:25)
    at Object.Module._extensions..js (module.js:474:10)
    at Module.load (module.js:356:32)
    at Function.Module._load (module.js:312:12)
    at Module.require (module.js:364:17)
    at require (module.js:380:17)
    at Object.<anonymous> (/images/node_modules/google-images-scraper/lib/google-images-scraper.js:6:17)
    at Module._compile (module.js:456:26)
    at Object.Module._extensions..js (module.js:474:10)
    at Module.load (module.js:356:32)
    at Function.Module._load (module.js:312:12)
    at Module.require (module.js:364:17)
    at require (module.js:380:17)
    at Object.<anonymous> (/images/node_modules/google-images-scraper/index.js:1:80)
    at Module._compile (module.js:456:26)
    at Object.Module._extensions..js (module.js:474:10)
",dcshapiro,2016-05-18 16:49:59
620,2016-07-01 16:21:08,"@dcshapiro What version of node and nightmare?
",rosshinkley,2016-05-18 16:49:59
620,2016-07-01 17:21:26,"root@ubuntu-2gb-tor1-01:~# nodejs --version
v0.10.25

and 

{
  ""name"": ""nightmare"",
  ""version"": ""2.5.2"",
  ""license"": ""MIT"",
  ""main"": ""lib/nightmare.js"",
  ""scripts"": {
    ""test"": ""make test""
",dcshapiro,2016-05-18 16:49:59
620,2016-07-01 18:14:12,"@dcshapiro [Nightmare requires 4.x or higher.](https://github.com/segmentio/nightmare#node-versions)  See also #621.

I _think_ you might still be able to get away with using 0.12.x and `--harmony`, but your mileage may vary.
",rosshinkley,2016-05-18 16:49:59
619,2016-05-04 17:03:23,"I have a slider in a page that can be clicked to choose the value.
This slider is really a div, styled with js to inject the right value in a React Component.
From the dom point of view everything is ruled with the left value of this div:

<S_CODE_TOKEN>

I would like to know if it is possible to simulate a mouse click in a position x,y with nightmare.
Any help is appreciated.
",maiopirata,2016-07-09 17:21:07
619,2016-05-04 21:41:26,"I suppose you could use `.evaluate()` and use [`document.elementFromPoint()`](https://developer.mozilla.org/en-US/docs/Web/API/Document/elementFromPoint).  An untested from-the-hip example:

<S_CODE_TOKEN>

... but that might not be granular enough for your application.  You could also initialize your own mouse event with a custom X,Y and issue it against the control at X,Y.  The [`MouseEvent`](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent) docs may interest you.

If you wanted to get fancy, you could also write a plugin using Electron's [`webContents.sendInputEvent`](https://github.com/electron/electron/blob/master/docs/api/web-contents.md#webcontentssendinputeventevent) to send `mouseDown` and `mouseUp` events.
",rosshinkley,2016-07-09 17:21:07
619,2016-05-05 10:19:32,"I used the evaluate function. Inside that I find the dom element that is basicaly a div rectangle listening for clicks.
I successfully have the element of the DOM.

<S_CODE_TOKEN>

I create than an offset element and I give an offset of 100.
Unfortunately the event is not dispatched correctly. What do you think I'm missing here?

Thanks
",maiopirata,2016-07-09 17:21:07
619,2016-05-05 14:11:42,"According to the [`MouseEvent` constructor docs](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/MouseEvent), at least in my naive read, `clientX`/`clientY` is relative to the client window, not to the DOM element (like it is for the readonly `clientX`/`clientY` on a caught `MouseEvent`).  What happens if you specify an absolute point?
",rosshinkley,2016-07-09 17:21:07
619,2016-05-05 14:29:50,"Scratch that, I'm wrong, [jsbin](http://jsbin.com/coxekatofe/1/edit?html,js,console,output) to prove it.

Based on that little experiment, what you have ought to work.  Out of curiosity, what happens if you instead issue a `mousedown`?
",rosshinkley,2016-07-09 17:21:07
619,2016-05-05 16:47:04,"I have tried the following.
First I find the correct position of the slider in absolute coordinates. Then I try to click it via the function.
It doesn't work via the browser console, nor via electron browser...

<S_CODE_TOKEN>

In reality the 
`el.dispatchEvent(ev)`
give `true` as answer, so it is actually really executing the code correctly, but the event doesn't have impact in the gui. I don't know why.
",maiopirata,2016-07-09 17:21:07
619,2016-05-06 18:54:13,"@maiopirata your code above seems perfectly correct. What are you expecting to have happen? Do you have a `click` event listener on the `div` or on an element that contains it? When you dispatch a simulated event this way, an element _inside_ the div at the given position _will not receive the event._ This will also not automatically trigger the relevant `mousedown` and `mouseup` events, so if you are actually listening for those, your listeners will not be triggered.

It is also worth noting that none of the default behaviors that a browser does will be triggered when you dispatch events this way (that’s why you might want to use `webContents.sendInputEvent` as @rosshinkley mentioned—that _will_ cause default browser behaviors).

Side note: you can actually get the position of the element relative to the viewport much more easily than you are doing above:

<S_CODE_TOKEN>
",Mr0grog,2016-07-09 17:21:07
619,2016-05-06 21:41:58,"Thank you @Mr0grog for your answer. I will definitely test webContents, it seems that this is the point.
Thank you also that you show me bounds.left, top.. It would have saved me a lot of time knowing it some days before.

I will let you know soon
",maiopirata,2016-07-09 17:21:07
619,2016-05-10 18:42:44,"I'm trying to do similar as well. I want to write automation tests for canvas drawing and need to do mousemove/mousedown/mouseup at a specific coordinate (x,y).

Is there any reason _not_ to attempt to expose a method like sendEvent that PhantomJS has? 
http://phantomjs.org/api/webpage/method/send-event.html

For this specific use case, I was able to get sendEvent working with PhantomJS events, but would prefer Nightmare because it's just a lot nicer/cleaner overall. Initially I just assumed it was an Electron bug/ swallowed event, but figured I'd ask first if it was working as intended. 

@rosshinkley I'm not sure this is fancy, but I'm not sure how to make the driver yet either. :)
",dsowsy,2016-07-09 17:21:07
619,2016-05-10 21:47:48,"@rosshinkley do you have any idea why the `click()` (and `mouseover/mousedown`) action doesn’t use `sendInputEvent`? Assuming no, since according to git, they pretty much appeared out of whole cloth, but asking just in case.

Seems like upgrading them to use `sendInputEvent` would be more “correct,” though it would change behavior slightly. (Maybe a good v3 change?)
",Mr0grog,2016-07-09 17:21:07
619,2016-05-18 06:08:23,"If it helps anyone here, I wrote a little example plugin for how to use `sendEvent` over on #639. @dsowsy for your case, just throw some `mousemove` events in between the `mousedown` and `mouseup`:

<S_CODE_TOKEN>

It would be good to get a sense if this approach actually works for you and others experiencing issues before spending the effort cleaning it up for adding to core.
",Mr0grog,2016-07-09 17:21:07
619,2016-05-18 16:47:23,"> @rosshinkley do you have any idea why the click() (and mouseover/mousedown) action doesn’t use sendInputEvent? Assuming no, since according to git, they pretty much appeared out of whole cloth, but asking just in case.

I _suspect_ it's because `sendInputEvent` wasn't a part of the Electron API when 2.x was initially released.  (The release dates differ by something like 10 days, memory serving.)  I also suspect that it worked Good Enough&trade;, so before now there hasn't been a real reason to change it.

> Seems like upgrading them to use sendInputEvent would be more “correct,” though it would change behavior slightly. (Maybe a good v3 change?)

I'd like to (like you) see more usage before making the change, but I also agree this feels much more in the spirit of ""doing things as an actual user would"", which is in keeping with the spirit of Nightmare.  Given that it seems to be causing enough problems, I'd be open to moving it into core.  Thoughts?
",rosshinkley,2016-07-09 17:21:07
619,2016-05-19 01:15:58,"> Given that it seems to be causing enough problems, I'd be open to moving it into core. Thoughts?

Well, it sounds like there are either some bugs with it or it is not solving the problem: https://github.com/segmentio/nightmare/issues/639#issuecomment-219953581 It needs feedback from @timotgl or I or someone should do some testing w/ React. I wouldn’t want to change this part of core if it doesn’t actually solve the issues people are encountering.

It also might be worth postponing to v3—it won’t work on elements that aren’t being displayed (the current implementation does) and it will work differently than the current implementation on elements with children or that are obscured/overlapped by other elements (the events will go to the element at the click location, not necessarily to the element identified by the selector). Most of the time this should be a non-issue, but it’ll almost certainly bite someone.
",Mr0grog,2016-07-09 17:21:07
619,2016-05-20 23:51:49,"Basic plugin that people can use here: https://github.com/Mr0grog/nightmare-real-mouse
Or just `npm install nightmare-real-mouse`

Maybe that can sit for a while and see if it solves issues for people?
",Mr0grog,2016-07-09 17:21:07
619,2016-05-25 16:54:24,"Sorry for the late answer. What you did looks great. I'll let you know as soon as I put my hands on it again...
",maiopirata,2016-07-09 17:21:07
619,2016-07-09 17:21:07,"Closing for lack of activity (and looks like this is possibly resolved).  If this is still an issue, feel free to reopen/submit a new issue.
",rosshinkley,2016-07-09 17:21:07
618,2016-05-04 10:13:19,"I've got a select like:

<S_CODE_TOKEN>

I'd like to get the option value from the string ""This is a sentence"". Do you know how to do that? I've tried to handle it via `evaluate` like

`return $('select[name=""category""]:contains(""This is a sentence"")').val()`

It works but I don't know how to use the result after.
",kud,2016-05-23 16:46:41
618,2016-05-04 14:43:04,"Maybe I'm not grasping what you're asking, but it seems like `.evaluate()` might do what you want?

<S_CODE_TOKEN>
",rosshinkley,2016-05-23 16:46:41
618,2016-05-04 15:02:02,"Kinda work but how to use nightmare in then function?

<S_CODE_TOKEN>
",kud,2016-05-23 16:46:41
618,2016-05-04 15:06:03,"A common pattern is to return a `then`able (like Nightmare) out of `.then()` and use `.then()` again in the chain.  For example:

<S_CODE_TOKEN>
",rosshinkley,2016-05-23 16:46:41
618,2016-05-04 15:10:16,"This is perfect @rosshinkley. Thank you for your clear explanation and your time. I appreciate it. :)
",kud,2016-05-23 16:46:41
618,2016-05-04 15:38:56,"But it means: 

<S_CODE_TOKEN>

that I've got to put everything in the `then` function? Because for instance `.check()` doesn't exist if I use it just after:

<S_CODE_TOKEN>
",kud,2016-05-23 16:46:41
618,2016-05-04 15:40:15,"In fact, `evaluate` is a promise-like?
",kud,2016-05-23 16:46:41
618,2016-05-04 16:15:24,"Plus,

<S_CODE_TOKEN>

doesn't work because apparently argv (from yargs) is not defined there. Should I create a new nightmare function and use evaluate_now maybe?
",kud,2016-05-23 16:46:41
618,2016-05-04 16:22:39,"Got it:

<S_CODE_TOKEN>

However still asked: https://github.com/segmentio/nightmare/issues/618#issuecomment-216905454
",kud,2016-05-23 16:46:41
618,2016-05-04 16:28:17,"> that I've got to put everything in the then function? Because for instance .check() doesn't exist if I use it just after:

This gets into some confusing territory: `.then()` returns a native Promise, not a Nightmare instance.  If I'm understanding properly, this:

<S_CODE_TOKEN>

... won't work as `.then()` turns the downstream chain into a native Promise chain.  So to answer your question, yes, I think everything has to be in the `.then()`.

> doesn't work because apparently argv (from yargs) is not defined there. Should I create a new nightmare function and use evaluate_now maybe?

Looks like you got this figured out with passing arguments to `.evaluate()`.
",rosshinkley,2016-05-23 16:46:41
618,2016-05-04 16:33:53,"Hahaha yeah. :D thank you. I understand more how it works now. :)
",kud,2016-05-23 16:46:41
617,2016-05-04 04:59:58,"Hi Guys, nightmareJs returns me empty objects when I run the code below. 
I want to grab the stackoverflow questions from the main page. 

<S_CODE_TOKEN>

My Results

<S_CODE_TOKEN>

Appreciate any advise. Thanks. 
",mingsterism,2016-05-04 16:31:00
617,2016-05-04 10:51:43,"have you tried evaluating the same argument in the browser console?
",maiopirata,2016-05-04 16:31:00
617,2016-05-04 14:39:28,"I suspect that DOMElement's parts are non-enumerable, and as such not crossing the IPC boundary.  In other words, it's not going to serialize well.

Fixing it is fairly straightforward: pluck the values you want inside of `.evaluate()`.  Say you wanted the question title and link:

<S_CODE_TOKEN>

Note that the use of `Array.prototype.slice.call` is deliberate: `document.getElementsByClassName()` returns a array-like object known as an [`HTMLCollection`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCollection).
",rosshinkley,2016-05-04 16:31:00
617,2016-05-04 16:31:00,"Works perfectly. 
",mingsterism,2016-05-04 16:31:00
617,2016-05-05 11:54:31,"@rosshinkley @mingsterism
Using `Array.from()` is a nicer way to do this ;)

<S_CODE_TOKEN>
",albinekb,2016-05-04 16:31:00
617,2016-05-05 13:40:36,"@albinekb Ah, true.  Thanks for pointing that out.
",rosshinkley,2016-05-04 16:31:00
616,2016-05-03 01:58:50,"I am trying to make a screenshot at the bottom of the long page (e.g. http://www.taoism.net/ttc/complete.htm) like so:

<S_CODE_TOKEN>

Screenshot file size is 0 bytes. Tested with different `y` parameters, it works until ~8000px.
Expected: screenshot clip works with any `y` value.

Tried using `.scrollTo`, it did not help.
",apodgorny,2016-07-09 17:19:55
616,2016-05-31 01:41:26,"After playing around with this and recreating the behavior, it looks like the [resource provider](https://code.google.com/p/chromium/codesearch#chromium/src/cc/resources/resource_provider.cc&sq=package:chromium&type=cs&l=458&rcl=1464366759) deep in the guts of Chromium uses the device limit (I think it's 8 or 16k in general).  This is important because that defines the maximum size of the rendering canvas, which defines the maximum size of the screenshot.  Anything larger and the texture management/WebGL parts start throwing exceptions.

Anything larger, unfortunately I think you'd have to start stitching parts together yourself.
",rosshinkley,2016-07-09 17:19:55
615,2016-05-02 14:56:36,"Is it possible to remotely control other browsers? Thanks
",kokujin,2016-05-27 20:05:19
615,2016-05-02 18:09:57,"With Nightmare? No.  Nightmare is built to be run atop Electron.

If you're looking for a browser automation suite, [Selenium](http://www.seleniumhq.org/) is a fairly popular choice.  It's got webdrivers for most (all?) popular browsers.
",rosshinkley,2016-05-27 20:05:19
614,2016-04-30 01:43:28,"Given notes on https://github.com/segmentio/nightmare/issues/602#issuecomment-215139708 and #607, it seems prudent to add a more explicit failure case for starting the Electron process with incorrect arguments.

_We should never hit this error,_ but obviously it’s possible somehow. This at least helps make it more explicit what happened instead of getting some crazy error about trying to access the `dock` property. When people _do_ hit it, it also might give some tiny bit of insight into exactly what happened.
",Mr0grog,2016-05-05 17:50:26
613,2016-04-29 20:03:44,"Hopefully this makes the README example a little more robust agains the regular, surface-level changes in Yahoo’s homepage.
",Mr0grog,2016-05-05 17:49:25
613,2016-04-30 00:50:32,"Also: this fixes #607.
",Mr0grog,2016-05-05 17:49:25
612,2016-04-29 11:10:59,"This issue may be related to #564 (I sometimes get the same error in that issue with this code). The following code will occasionally (about ~10% of the time) hang (with this example, it generally hangs on the 'https://teamtreehouse.com/' URL). Here is my code:

<S_CODE_TOKEN>

Here is the command I'm using `DEBUG=nightmare:actions,electron:* node --harmony nightmare.js` and the output:

<S_CODE_TOKEN>

The result is that occasionally it displays the fully loaded page but does nothing with it:
![screen shot 2016-04-29 at 11 36 20](https://cloud.githubusercontent.com/assets/8442161/14913993/9f661050-0dfe-11e6-961c-61458404e01b.png)

My node version is `v4.4.3` and here is my `package.json`:

<S_CODE_TOKEN>
",JWMarchant,2016-05-27 19:52:44
612,2016-04-29 18:58:16,"Possibly related: #238 and #405.
",rosshinkley,2016-05-27 19:52:44
612,2016-04-29 19:51:40,"@JWMarchant it might be helpful to see the logs with `nightmare:*` instead of just `nightmare:actions` — anything happening in the electron process goes under `nightmare:log`, so there might be some good details missing in your debug output above.

I wouldn’t _think_ this is related to #405 since you are stilling seeing the window just hanging around open, so it’s not crashing.
",Mr0grog,2016-05-27 19:52:44
612,2016-04-29 20:02:32,"@Mr0grog true.  The reason i roped #405 in as a ""maybe"" was because it didn't _always_ crash the process, sometimes it would hang with no useful info.  It's possible that was hitting two different problems.
",rosshinkley,2016-05-27 19:52:44
612,2016-05-03 09:42:44,"Hi guys,

Here are the logs with `nightmare:*` run:

<S_CODE_TOKEN>

and the log after I close the electron window manually:

<S_CODE_TOKEN>

The program I'm using (iTerm) cuts off the logs, so if you need more just let me know and I'll try and figure out how to get it all in full.

Thanks
",JWMarchant,2016-05-27 19:52:44
612,2016-05-03 13:22:55,"@JWMarchant For what its worth, you can specify a file descriptor with `DEBUG_FD`.  Something like: `DEBUG_FD=3 DEBUG=nightmare:* node myNightmareScript.js 3>output.txt`.  For completeness, could you also run with `ELECTRON_ENABLE_LOGGING=true` and `ELECTRON_ENABLE_STACK_DUMPING=true`?

Also, if I'm not mistaken, your source will run up to ten URLs together at the same time - the second parameter to `async.queue` is a concurrency parameter.  For log clarity, it might also help to set it to 1 (or remove it as the default is also 1). 
",rosshinkley,2016-05-27 19:52:44
612,2016-05-03 15:35:56,"@rosshinkley, here's a separate log file this https://drive.google.com/a/conversion.com/file/d/0B5HUOoRm9YUbR1FtaVphZjR6TWc/view - thanks for  that useful tip! Unfortunately I couldn't recreate the issue when running `async.queue` with `1` as the concurrency parameter, so the log file is showing it as `10` so perhaps that may be it? Ideally I'd like to run Nightmare multiple times as I want to scrape thousands of websites everyday and doing it one by one is not really feasible...
",JWMarchant,2016-05-27 19:52:44
612,2016-05-03 23:41:12,"Ok, I’ve only gotten this to reproduce a few times, but it seems like the issue is well below Nightmare or Electron—the HTTP request for the initial HTML content of the page never actually closes and finishes, so we never move on to evaluating the JS that gets `window`. I’m not sure if this is something funky with Treehouse’s server (I _only_ observed this behavior with Treehouse), with Chromium, or deep in the network stack on the OS.

On the Electron side, we get response details for the beginning of the HTML and we get the `dom-ready` event, but we get no finish or failure events. Inside the browser window, `document.readyState` never moves from `interactive` to `complete` and the window’s `load` event never fires. Oddly, though, the `DOMContentLoaded` event _does_ fire.

So… I’m thinking the best way to address this is:
1. Listen for the `dom-ready` event on `webContents`.
2. Add a timeout to `goto` (default it to… 30s? Make it customizable… by goto call? By Nightmare instance?) If the timer runs out and `dom-ready` has happened, consider the load successful. If the event didn’t happen, consider the load a failure.

Alternatively, we could just have the timer and consider it a failure regardless of what events have happened. I can certainly understand that argument given that things inside the browser window are certainly not in a 100% a-ok state (though they do seem 99.999% ok).

@rosshinkley thoughts?
",Mr0grog,2016-05-27 19:52:44
612,2016-05-04 03:01:57,"> Ok, I’ve only gotten this to reproduce a few times, but it seems like the issue is well below Nightmare or Electron—the HTTP request for the initial HTML content of the page never actually closes...

That... is not great and kind of scary.  That makes me wonder how Treehouse is being served, leading me to ...

> On the Electron side, we get response details for the beginning of the HTML and we get the dom-ready event, but we get no finish or failure events. Inside the browser window, document.readyState never moves from interactive to complete and the window’s load event never fires. Oddly, though, the DOMContentLoaded event does fire.

... which, also based on your previous comments, I agree that it might be the response not getting ended properly in all circumstances.  I don't know if that would cause the `readyState` to hang (or any of the other... side effects? you describe).  That should be easily testable, and seems worthy of at least a rough pass.  I also have a sneaking suspicion you may have given this a try already.  Thoughts?

If it is a problem with the OS/networking stack (seems unlikely, but certainly possible), I'd be curious to get a quick straw poll on who is using what and try to cover what is missing.

Moving on!

> So… I’m thinking the best way to address this is [consider `dom-ready` as acceptably complete].

In the spirit of Nightmare behaving as close to a Real Browser&trade; as possible, considering `dom-ready` + an arbitrary timeout (30s default + an options override seems like a good first pass, by the way) as success seems reasonable.  The page is still usable, and (ostensibly) can issue execution requests/interact with it.  However, I would feel much more comfortable if the hang could be reliably reproduced so tests could be propped up against it.
",rosshinkley,2016-05-27 19:52:44
612,2016-05-05 17:06:21,"> However, I would feel much more comfortable if the hang could be reliably reproduced so tests could be propped up against it.

That being said, _not_ a dealbreaker.  Would be nice to have if the hang could be produced reliably (and in a reasonable amount of time).
",rosshinkley,2016-05-27 19:52:44
612,2016-05-11 00:24:43,"More diggin’: I believe the issue is related to caching/sessions/user data:
- I occasionally get the exact same crash in Chromium’s disk cache backend creating an entry when running this (specifically, in `disk_cache::BackendImpl::CreateEntryImpl`) and
- The hanging requests appear to be exclusively requests Chromium is attempting to serve from cache. 

Treehouse happens to use ETags and set relatively long expire headers, which may be causing/exacerbating the issue.

I’m going to guess (based on very little data) that this is probably a result of so many separate Electron processes using the same persistent (disk-based) session by virtue of their sessions having the same name (the default session) and sharing the same user data directory. @inversion suspected something along these lines quite a while back, too: https://github.com/segmentio/nightmare/issues/238#issuecomment-155024950 So:
1. I still think the above approach (timeout, succeed w/ DOM ready) is a good practice regardless and it will alleviate the symptoms of this issue, so I will see about writing a PR for it.
2. Eventually moving to a 1 electron process, N browser windows model will probably alleviate this.
3. Other methods for “fixing” the problem include randomizing the partition name (or keeping it in memory) or randomizing the user data directory (only do those if they aren’t explicitly specified by the user).

I’m a little hesitant on (3) since it changes caching drastically and I don’t really have _hard_ evidence of the problem. _If_ we did some version of it, I think I’d go for in-memory partitions unless the user specifies a partition name. I think (?) (2) is still probably something we want to do—in which case, I think that’s the best long term solution.
",Mr0grog,2016-05-27 19:52:44
612,2016-05-11 00:39:02,"(Lending credence to the above theory, I have so far been unable to reproduce the issue while using memory partitions.)
",Mr0grog,2016-05-27 19:52:44
612,2016-05-27 19:52:44,"This should have been fixed with #640.  Closing.
",rosshinkley,2016-05-27 19:52:44
611,2016-04-28 16:33:43,"I've got a file input in a form, how to handle it?
",kud,2016-05-22 21:14:59
611,2016-04-29 18:36:47,"As far as I know, you can't, at least not yet.  #235 covers it, and I don't think the `debugger` method has been tried/made into a plugin.
",rosshinkley,2016-05-22 21:14:59
611,2016-05-02 10:08:46,"Thank you @rosshinkley.
",kud,2016-05-22 21:14:59
611,2016-05-04 11:02:00,"@kud Or you can use Nightmare v1.8.2, which does have file upload functionality, but uses PhantomJS instead of Electron. https://github.com/segmentio/nightmare/tree/1.8.2 😉
",lukehorvat,2016-05-22 21:14:59
611,2016-05-04 11:03:06,"Interesting. Thanks @lukehorvat.
",kud,2016-05-22 21:14:59
611,2016-05-22 21:14:59,"I wrote a [plugin](https://www.npmjs.com/package/nightmare-upload) that should give you the same ability as 1.x to add files to a file input.  As that should solve this issue, I'm going to go ahead and close this issue.  If this is still a problem, feel free to reopen/open a new issue.
",rosshinkley,2016-05-22 21:14:59
610,2016-04-28 03:34:28,"I've been trying the .click() method on various sites, but all seems to give errors. Appreciate some help. 

wikipedia.org

<S_CODE_TOKEN>

output debug

<S_CODE_TOKEN>

It fails at 
`.click("".central-featured-lang lang1"")`. I realize that `'Cannot read property \'dispatchEvent\' of null'` error only occurs when CSS selector is wrong. But I can't figure out what is the right one? Appreciate some help. 

yahoo.js

<S_CODE_TOKEN>

output debug

<S_CODE_TOKEN>

Typing in the search box works. Only  .click(). I pasted Source code below for reference. 

<S_CODE_TOKEN>

I tried the function in Chrome console and it works. Thanks very much for the advise. 
",mingsterism,2016-04-29 01:50:02
610,2016-04-28 19:23:34,"+1
",johndvorakHR,2016-04-29 01:50:02
610,2016-04-28 20:10:12,"@mingsterism on wikipedia.org, the CSS selector doesn't find any elements. The space operator in selectors ""a b"" means ""an element b with an element a ancestor"". You might have intended
`.central-featured-lang,lang1`

In the Chrome console you can try `$$(mySelector)` to see what gets returned from a querySelectorAll.

I'm not sure what's going on with the yahoo.com example, because there is no #main that I can find on the page and it waits indefinitely, but if I remove that wait() call then I don't get the same error.
",yoz,2016-04-29 01:50:02
610,2016-04-29 01:50:01,"@yoz thanks for the advise. I followed your direction on the wikipedia selectors. Turns out, it was a (dot) i had to put in. `.central-featured-lang.lang1`. 
However, I still cant get the actual href element using CSS selectors. It gives me the entire line. I posted the question on stackoverflow as well. http://stackoverflow.com/questions/36928172/how-to-get-href-text-using-css-selectors 

For .wait(#main) on yahoo, I too had a hang. However, I tried a workaround and it worked. 

Below the whole wait function from actions.js

<S_CODE_TOKEN>

I took a method of the wait function and implemented that directly in my code instead and it worked for some reason. 
Added `exports` to implement in my code. Implement with `waitms(5000)`

<S_CODE_TOKEN>

Maybe something for others to check into. 

In regards to the .click() issue, what actually happened was electron was redirecting yahoo to my country specific yahoo. Thus the selectors were wrong. I changed the selectors with my specific yahoo url  `'https://sg.yahoo.com/?p=us'` , and it worked.  
",mingsterism,2016-04-29 01:50:02
609,2016-04-28 03:03:43,"Hello!

This pull is the result of doing a pretty extensive rewrite of nightmare. The readme.md describes some of the new functionality introduced, however, beyond using promises and the auto-chain (fluent) functionality as well as rebasing on 'Nightmare.prototype', there are other dev-centric goals that I wanted to get into the codebase. These are using ecmascript 5 features when it made sense, reducing boilerplate code, modularizing when possible, and reducing dependencies to well known and maintained libraries.

I've been forward porting pulls when they were committed to nightmare. While the commits aren't 1:1 the functionality should be close nee identical to what is in the base fork.

If you would, please check it out and see if these changes align with Nightmare's goals.

Thanks!
",Oceanswave,
609,2016-05-03 13:58:18,"I personally wouldn't mind dropping the `.chain()` altogether. When using with `async`/`await` (via babel) or with [co](https://github.com/tj/co) it's seldom needed.

e.g.

<S_CODE_TOKEN>

or

<S_CODE_TOKEN>

When writing code that has a lot of evaluates that are used to choose branch it's especially useful.
",LinusU,
609,2016-05-06 12:58:51,"Yeah, I tend to agree - aside from really simple code you're going to have a number of branches which reduces the length of the chain -- plus it leaves the door open for harder to troubleshoot exceptions that may occur somewhere in the chain.

That said, however, it does provide for an easy migration path from the current Nightmare and slightly more readable code when using the fluent, chained, style.

The pattern also has prior precedence in libraries such as lodash that include a chain method for similar readability benefit.

since it's one method, it's easy enough to deprecate in the future...
",Oceanswave,
609,2016-05-28 19:05:56,"Hey guys, can we please have a follow-up on this one? (e.g. when/if could we expect this PR to be merged, can `.chain()` be considered deprecated, etc.) I'd really like to start using fresh new Nightmare with pure async/await env.
",inca,
609,2016-05-30 07:22:51,"some quick thoughts:
- the chaining is primarily there to help it so you don't need to compile JS with babel or use co. this is sort of become less and less relevant, i think it's probably fine to just await or yield at each step. you'll probably get better performance when you do want to parallelize this stuff since right now you're stuck with the internal queue regardless of if you call these methods in parallel.
- can't you async/await now? nightmare implements thenables, which are basically lazy promises and should give you all the advantages of promises, without cluttering up your API with promise-specific syntax
- the prototype extension is really clean, but do you get a lot of advantages just using object with functions. if i have some time, i'd like to see nightmare move more towards this: https://github.com/matthewmueller/plumbing/blob/master/test.js, where you get a shared context (this) and can easily add tracers, logging, queueing (any other decorator) in user-land without cluttering up the fundamental actions of nightmare.  

i'm going to leave it up to the others to decide to merge or not, since i haven't been actively working on nightmare lately.
",matthewmueller,
609,2016-06-05 12:12:57,"Thank you for detailed response! I didn't realize that each manipulation returns thenable, thus can basically be used individually. That's exactly what I was looking for.
",inca,
608,2016-04-27 23:41:08,"Hello!

This pull is the result of doing a pretty extensive rewrite of nightmare. The readme.md describes some of the new functionality introduced, however, beyond using promises and the auto-chain (fluent) functionality as well as rebasing on 'Nightmare.prototype', there are other dev-centric goals that I wanted to get into the codebase. These are using ecmascript 5 features when it made sense, reducing boilerplate code, modularizing when possible, and reducing dependencies to well known and maintained libraries.

I've been forward porting pulls when they were committed to nightmare. While the commits aren't 1:1 the functionality should be close nee identical to what is in the base fork.

If you would, please check it out and see if these changes align with Nightmare's goals.

Thanks for the original Nightmare and I hope this helps!
",Oceanswave,2016-04-28 01:55:14
608,2016-04-28 01:55:56,"Closing this and troubleshooting why xvfb is failing.
",Oceanswave,2016-04-28 01:55:14
607,2016-04-27 17:40:17,,rosshinkley,2016-05-05 18:34:11
607,2016-04-27 19:05:54,"the missing catch wouldn't happen to cause a 'Cannot read property 'dock'' would it?
",shesmu,2016-05-05 18:34:11
607,2016-04-30 00:57:13,"@shesmu no, it doesn’t. Are you referring to #602, or are you seeing that error independently (and do you have a reproducible test case)? I can see, where that error is happening, but can’t see how the conditions that cause it would ever be true. I’d love to know if you have a way to make it reliably happen.
",Mr0grog,2016-05-05 18:34:11
607,2016-05-05 18:34:11,"Fixed in 2.4.0, closing.
",rosshinkley,2016-05-05 18:34:11
606,2016-04-27 09:06:11,"Hi, 
I'm running this code below. the Yahoo.js example. The electron window shows in events in following order.
1) Yahoo search button being clicked
2) 'github nightmare' typed in search box
3) Terminates suddenly whilst on the same page. 

Appreciate some advise. Thanks very much. 

<S_CODE_TOKEN>

This is the debug messages I get.

<S_CODE_TOKEN>
",mingsterism,2016-04-28 03:37:04
606,2016-04-27 17:19:18,"I suspect one of the selectors is causing an error.  What happens if you add a `catch`, like:

<S_CODE_TOKEN>
",rosshinkley,2016-04-28 03:37:04
606,2016-04-28 01:32:06,"@rosshinkley I got the output below. 

<S_CODE_TOKEN>

Any ideas on the error? 
",mingsterism,2016-04-28 03:37:04
606,2016-04-28 03:37:04,"@rosshinkley I posted a new issue on the followup of the error. Appreciate your help. Thanks very much. 
",mingsterism,2016-04-28 03:37:04
605,2016-04-27 08:57:37,"I'm running the example yahoo.js code locally on windows 8 with electron and node v6.0.0  installed locally. 
iI'ved tried both `node yahoo.js` and  `node --harmony yahoo.js`  but i get this error message. 

<S_CODE_TOKEN>

this is the actual code. 

<S_CODE_TOKEN>

Thanks very much. 
",mingsterism,2016-04-28 03:37:24
605,2016-04-27 16:58:07,"You're using `yield` outside of a generator, and I don't think that's legal.

Also, in your case, you don't need `yield` if you are using `.then()`.  At first glance, your source would probably work as expected if `yield` is removed.
",rosshinkley,2016-04-28 03:37:24
605,2016-04-28 01:21:52,"@rosshinkley Thanks for the clarification. 
",mingsterism,2016-04-28 03:37:24
604,2016-04-27 04:27:32,"Redo of #600 to fix #599.  This method allows for synchronous version retrieval.

The only thing I'm not _real_ crazy about is the debugging of the version information.  That seems to defeat the purpose of using a lazy getter that props up the cached version values.  Thoughts?
",rosshinkley,2016-04-27 15:51:57
604,2016-04-27 04:53:12,"> The only thing I'm not real crazy about is the debugging of the version information. That seems to defeat the purpose of using a lazy getter that props up the cached version values.

Would agree. Maybe not really necessary at all. If you still want the logging, the electron process could just `parent.emit('log', [versions])` when it starts.

Other note: if `engineVersions` is only available on a Nightmare _instance,_ maybe no great need for `execSync`. I know I kind of lobbied for this over on Gitter, but that’s because I was thinking of it being on the Nightmare constructor/the library exports, where it was less tied to an instance.
",Mr0grog,2016-04-27 15:51:57
604,2016-04-27 05:18:13,"> Maybe not really necessary at all. 

I was heading in this direction, at least for this incarnation.

> Other note: if engineVersions is only available on a Nightmare instance, maybe no great need for execSync.

I'm kind of 50/50 on this.  I kind of like having the version property be a regular ol' synchronous property.  However, the fact that versions can change by instance makes me think maybe it should be a chainable like it was in #600 (although it would still need some naming and placement touchups).
",rosshinkley,2016-04-27 15:51:57
604,2016-04-27 05:21:25,"... also to add another possible wrench to the mix, and maybe another point for the original incarnation, this will cause a process to never quit:

<S_CODE_TOKEN>

... as the child process is started at construction time.
",rosshinkley,2016-04-27 15:51:57
604,2016-04-27 15:51:57,"For completeness, I've gone ahead and finished this PR with suggested changes.  However, in light of Electron versions being instance-dependent and the mere instantiation of Nightmare creating a possible ""hang"", I think it's best to re-open #600.
",rosshinkley,2016-04-27 15:51:57
603,2016-04-26 20:36:21,"Quick question. I'm not sure if this has been answered already before but I didn't find this in the docs or during my issue search but does nightmare support psuedo classes like `:first` or like [these](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes) as it's selector?
",shri3k,2016-04-26 21:35:53
603,2016-04-26 20:55:55,"Generally, things are selected by running `document.querySelector()`, so pseudo-selectors are supported to the extent that Chrome supports that API.

Most of them are well supported. I’m not sure if they _all_ are, though. I don’t think anyone has tested all of them, especially things like `:focus`, which might be supported differently depending on whether the window is visible on screen or hidden (PhantomJS has a long standing bug related to this particular issue: https://github.com/ariya/phantomjs/issues/10427).
",Mr0grog,2016-04-26 21:35:53
603,2016-04-26 21:35:53,"Ahh, that actually clarifies things quite a bit. Apparently `:first` [isn't supported](https://developer.mozilla.org/en-US/docs/Web/CSS/:first) and I happened to be testing only that. 😿  Found alternative to it by using `:first-child`. Thanks, @Mr0grog 
",shri3k,2016-04-26 21:35:53
602,2016-04-26 15:51:21,"I have done fresh installs of nightmare JS repeatedly, in an attempt to solve this issue. No dice.

I run `npm i nightmare`. It installs nightmare NPM version 3.3.6. It also installs electron for me. Electron-download NPM version 2.14.15 is installed, as well as electron-prebuilt NPM version 2.14.6.

Running it inside of my virtual box (running Ubuntu 14.04.3), it produces the error `nightmare electron child process exited with code 127: command not found - you may not have electron installed correctly +8ms`.

I have reinstalled multiple times. I've tried installing electron separately. No matter what I attempt, I always get that error.

I should point out, I can get the code to run perfectly on OSX. After I do a fresh reinstall outside of my virtual box, it works perfectly fine on OSX.

EDIT: Summary commands I have attempted:
`npm uninstall electron && npm uninstall nightmare`
`npm i nightmare`
`npm i -g electron`
`npm i segmentio/nightmare`
",jamesaspence,2016-06-25 20:04:42
602,2016-04-26 16:32:05,"First off, your version numbers look like versions of NPM rather than versions of nightmare (latest is 2.3.4) or electron (latest is 0.37.7). You should only need to install nightmare, though.

Are you running the install commands inside your virtual box or on OSX? Nightmare has a dependency on electron-prebuilt, which downloads a platform-appropriate binary on install. So if you're installing on OSX but running on Linux it won't find the Linux binary.
",yoz,2016-06-25 20:04:42
602,2016-04-26 16:38:00,"I'm installing nightmare using `npm i nightmare` inside the virtual box. I did an uninstall of both electron and nightmare before that. All of this was done within the virtual box.
",jamesaspence,2016-06-25 20:04:42
602,2016-04-26 16:38:46,"For versions: electron-download is 2.1.1, prebuilt is 0.37.7, and nightmare is 2.3.4
",jamesaspence,2016-06-25 20:04:42
602,2016-04-26 16:44:11,"What do you have installed in node_modules/nightmare/node_modules/electron-prebuilt/dist?

Do you have any output from npm install?
",yoz,2016-06-25 20:04:42
602,2016-04-26 16:52:49,"Nothing inside of node_modules/nightmare/node_modules. That directory doesn't exist.

npm install outputs that the packages were installed correctly, from what I can tell. I can add the output here if you'd like to see it.
",jamesaspence,2016-06-25 20:04:42
602,2016-04-26 20:06:02,"To give a lil more context, here's the sample code I have that's failing.

<S_CODE_TOKEN>

That outputs:

<S_CODE_TOKEN>
",jamesaspence,2016-06-25 20:04:42
602,2016-04-26 20:10:57,"You may want to run with `DEBUG=nightmare:*,electron:*` to see output from electron, too. You might get some better details about why things are failing.
",Mr0grog,2016-06-25 20:04:42
602,2016-04-26 20:13:05,"@Mr0grog Just tried that. Getting this error now:

`electron:stderr /vagrant/code/node_modules/electron-prebuilt/dist/electron: error while loading shared libraries: libgtk-x11-2.0.so.0: cannot open shared object file: No such file or directory +0m`
",jamesaspence,2016-06-25 20:04:42
602,2016-04-26 20:16:41,"Ok, so you are at least missing libgtk, which Electron needs to run. You may want to look at #224 for a better sense of all the binary dependencies you need when running on Linux.
",Mr0grog,2016-06-25 20:04:42
602,2016-04-26 20:28:06,"I've got an update: I installed all the dependencies listed here: http://electron.atom.io/docs/v0.25.0/development/build-instructions-linux/

Now, my debug outputs literally nothing, even with `DEBUG=nightmare:*,electron:*` on. It just appears to exit silently.

Full command running:

`clear && DEBUG=nightmare:*,electron:* node --harmony workbench.js`

EDIT: I was running the command wrong. Now here's the error I'm getting: 

<S_CODE_TOKEN>

However, xvfb is installed and the newest version?

EDIT 2: running `xvfb-run node workbench.js` works perfectly fine. Unfortunately, I need to run this as part of a node server process.
",jamesaspence,2016-06-25 20:04:42
602,2016-04-26 20:49:15,"> xvfb is installed and the newest version

Is it running? _Generally_ you want to start Xvfb as a daemon process. Alternatively, you can `xvfb-run [xvfb args] node your-nightmare-script.js`

Additionally, if you don’t have a system well-configured for running headlessly, there are a bunch of other things you’ll want to ensure are configured and running properly. Check out the scripts in `nightmare/test` or bug @rosshinkley over on Gitter for more—he knows the ins-and-outs of the headless Linux issues much better than I.

Note also, if you are on Node v4+ (which is kind of a requirement now…?) you don’t need the `--harmony` flag anymore. (Though using it doesn’t hurt anything.)
",Mr0grog,2016-06-25 20:04:42
602,2016-04-26 21:52:10,"@Mr0grog Do I need to? I was working under the assumption that nightmare would start the virtual display itself. Maybe that was my problem.
",jamesaspence,2016-06-25 20:04:42
602,2016-04-26 22:04:13,"> Do I need to?

Yes. In my experience, at least, it’s pretty unusual for any tool that uses an X Windows display to actually _create_ one—the idea is usually that the program is simply asking the window server for a display to use (well, really a window to draw in, not even a display); it’s not really the program’s responsibility to worry about whether that display is real or virtual, how it’s managed, etc.

There was some brief discussion not too long ago (https://github.com/segmentio/nightmare/issues/502#issuecomment-210601980) about whether it would be useful to do this automatically, but I don’t know that it’s gone anywhere. 
",Mr0grog,2016-06-25 20:04:42
602,2016-04-26 22:08:10,"Poking a head in:

> There was some brief discussion not too long ago (#502 (comment)) about whether it would be useful to do this automatically, but I don’t know that it’s gone anywhere.

I've been working on this off and on, but hit a snag with `Xvfb` not reliably stopping when Electron stops.  Still in the works if I can get it working properly.
",rosshinkley,2016-06-25 20:04:42
602,2016-04-26 22:14:26,"Okay. I'm currently trying out Phantom+Casper+Spooky, seeing if that works a lil better. If I can't get that running, I'll probably switch back to nightmare again. I'll be sure to update this issue provided that doesn't go well.
",jamesaspence,2016-06-25 20:04:42
602,2016-04-27 14:28:07,"Gave it a try again this morning. I'm using https://www.npmjs.com/package/xvfb to spin up my xvfb process prior to my code. However, I'm still getting `nightmare electron child process exited with code 1: general error - you may need xvfb +56ms`

EDIT: My code:

My code:

<S_CODE_TOKEN>

EDIT - using [node headless](https://github.com/kesla/node-headless) also doesn't work. I still get `nightmare electron child process exited with code 1: general error - you may need xvfb +0ms`
",jamesaspence,2016-06-25 20:04:42
602,2016-04-27 16:03:26,"Nightmare is async, so at least part of your problem is this:

<S_CODE_TOKEN>

Instead, you should be doing something more like:

<S_CODE_TOKEN>
",Mr0grog,2016-06-25 20:04:42
602,2016-04-27 16:06:32,"No dice. Even with `xvfb.stop` done inside the `then`, or calling nightmare inside of the `xvbp.start` callback, I still get the error.
",jamesaspence,2016-06-25 20:04:42
602,2016-04-27 16:12:33,"What’s the actual electron output?
",Mr0grog,2016-06-25 20:04:42
602,2016-04-27 16:14:17,"Nothing. It just sits there. Using `DEBUG=nightmare:*,electron:* node workbench.js` yields nothing and the process just sits.
",jamesaspence,2016-06-25 20:04:42
602,2016-04-27 16:24:53,"> Using DEBUG=nightmare:_,electron:_ node workbench.js yields nothing and the process just sits.

So… does it just sit, printing nothing, or does it print the error about Xvfb? If nothing, you’ve likely got some other issue, because that sounds like Electron isn’t even getting a chance to try and start.
",Mr0grog,2016-06-25 20:04:42
602,2016-04-27 16:30:19,"@Mr0grog It literally just sits, printing nothing. Switching to `DEBUG=nightmare node workbench.js` shows me the nightmare log, which looks something like this:

<S_CODE_TOKEN>

I also get this error now:

<S_CODE_TOKEN>

EDIT: Never mind, now the original debug command is returning errors as well. Following output:

<S_CODE_TOKEN>

EDIT 2: We're back to nothing after I tweaked my code again. No output, process just hangs forever.

<S_CODE_TOKEN>

This outputs nothing again. Changing to `DEBUG=nightmare` outputs:

<S_CODE_TOKEN>
",jamesaspence,2016-06-25 20:04:42
602,2016-04-27 16:53:13,"The following adapted from the example works on my headless box:

<S_CODE_TOKEN>

Is that what your modification looks like/what you're running?

A couple of notes:
- Nightmare construction must come _after_ the Xvfb start.  (It did here, but it's worth pointing out it's a requirement.)  The Nightmare constructor automatically starts Electron and Xvfb should be running prior to that.
- This log line: `electron:stderr Xlib:  extension ""RANDR"" missing on display "":107""` makes it look like you might have other instances of Xvfb running.  I've had Electron get a little flaky with multiple instances running (_usually_ with regards to problems described in #561).  Might be worth a `killall` or a reboot to have a fresh start.
",rosshinkley,2016-06-25 20:04:42
602,2016-04-27 17:00:43,"Okay, I'm basically starting from scratch. I re-provisioned my vagrant box. I'm reinstalling nightmare entirely via `npm uninstall nightmare && npm i nightmare`. I'm gonna be using node 5.5.0, npm 3.3.12. 
EDIT: Also installed xvfb via `sudo apt-get install xvfb`
My code is gonna be exactly this:

<S_CODE_TOKEN>
",jamesaspence,2016-06-25 20:04:42
602,2016-04-27 17:05:46,"Result, even after all that:

<S_CODE_TOKEN>
",jamesaspence,2016-06-25 20:04:42
602,2016-04-27 17:30:38,"That's .... baffling.  @yoz might have been on the right track, but the suggestion there looks like it would work for npm2, not npm3.  If you look at `node_modules/electron-prebuilt/dist`, does `electron` exist there?

I'd also be curious if you explicitly installed `electron-prebuilt` and/or explicitly set [`electronPath`](https://github.com/segmentio/nightmare#electronpath) if that might have any effect.
",rosshinkley,2016-06-25 20:04:42
602,2016-05-19 11:04:28,"I have the same issue, the weird thing is it works perfectly on my laptop, but within my vps I got the `general error - you may need xvfb` error. I am not using `xvfb` in my code, as I did not use it on my laptop and it worked. Is the use of `xvfb` needed on virtual servers ? If yes, could you explain why?

Thanks a lot :-)

EDIT: I ran the code provided by @jamesaspence and it's working, but i'm still willing not to use `xvfb` if I don't understand the need to use it - it worked without it before...
",paulintrognon,2016-06-25 20:04:42
602,2016-05-19 15:11:31,"@paulintrognon You might want to take a look at #224.  The short version is that Electron requires a framebuffer to render, and when you're running headlessly on Linux, running `Xvfb` satisfies that requirement.
",rosshinkley,2016-06-25 20:04:42
602,2016-06-23 15:25:33,"To solve this, I needed to install libxss. 
Use this command to install it on ubuntu 14: sudo apt-get install libxss1
",seliver,2016-06-25 20:04:42
602,2016-06-25 20:04:42,"If you run with `DEBUG=*`, Electron _should_ fail with helpful messages telling you what binary is missing, which should let you figure out what package needs to be installed.  I suspect you're missing libxss or libnotify.

I'm going to go ahead and close this issue.  If it crops up again, feel free to reopen/open a new issue.
",rosshinkley,2016-06-25 20:04:42
601,2016-04-26 13:52:14,"something like this:

<S_CODE_TOKEN>
",joychester,2016-04-26 14:15:11
601,2016-04-26 14:06:11,"It should.  Are you having a specific problem returning an object or array back from `.evaluate()`?
",rosshinkley,2016-04-26 14:15:11
601,2016-04-26 14:15:11,"verified, works well :)
",joychester,2016-04-26 14:15:11
600,2016-04-26 02:22:38,"Quick attempt to address #599.
",rosshinkley,2016-05-05 18:11:10
600,2016-04-26 17:00:14,"I would add a `Nightmare.VERSION` for the version of Nightmare. And maybe rename `.versions()` to `.browserVersions()` or `engineVersions()`?
",Mr0grog,2016-05-05 18:11:10
600,2016-04-27 15:53:36,"Reopened with suggestions from #604.
",rosshinkley,2016-05-05 18:11:10
599,2016-04-25 20:30:02,"To help people with debugging and other issues, we should make the versions of:
- Nightmare itself
- Electron
- Chromium

available at runtime via the API. See also #597
",Mr0grog,2016-05-05 18:33:40
599,2016-04-25 21:41:01,"A quick note on this: getting the versions for Electron/Chromium requires running Electron, so this either needs to be an async call or it will be a potentially slow, blocking call (the first time; we can cache it after that). Any thoughts on which approach is better, @rosshinkley?
",Mr0grog,2016-05-05 18:33:40
599,2016-04-26 01:06:48,"Could the information be captured during the `app.on('ready')` handler and piped up as part of the response there, then attached to the Nightmare instance inside of the instance construction sugar?  That would negate the need for extra calls, and that uses a trip that's already being made, so we get version info for (almost) free.  Thoughts?
",rosshinkley,2016-05-05 18:33:40
599,2016-04-26 01:24:21,"Although... that would mean the version info is not immediately available like you might expect.  It'd only be available after Nightmare has entered a ready state, like it would prior to executing a chain.  I was trying to get away with _not_ having a `.version()` (or similar) method, but now I'm not sure that's particularly feasible.
",rosshinkley,2016-05-05 18:33:40
599,2016-04-26 16:58:19,"Well, maybe the Electron/Chrome version stuff isn’t necessarily needed in API? We _could_ just log it whenever starting Electron if people only need it informationally. Not quite as much utility there, but maybe enough.
",Mr0grog,2016-05-05 18:33:40
599,2016-04-26 17:43:46,"I think I still prefer exposing _some_ way of getting the versions programmatically, and I can't think of a good method for doing that without an explicit method that doesn't require side-effect-y stuff.

That said, adding a debug call for the versions on `ready` is probably worth doing and will cover most (probably an overwhelming majority) of cases.
",rosshinkley,2016-05-05 18:33:40
599,2016-05-05 18:33:40,"""Fixed"" in 2.4.0, closing.
",rosshinkley,2016-05-05 18:33:40
598,2016-04-25 20:18:35,"Implement a crash reporter service internal to Nightmare to accept crash reports from the child Electron process.  

Related: #545 
",rosshinkley,2016-09-06 15:33:04
598,2016-04-26 14:46:56,"I started working on this and quickly realized a couple of problems.

Nightmare isn't an event emitter itself.  Not a huge problem, but I'd think Nightmare should expose a `crash-report` or `crash-reported` event to be handled.  As the crash report service would probably have to run under the Nightmare instance, the duty falls to it to emit the event.

Also, Nightmare is currently 1:1 Nightmare instance to Electron instance.  To prevent crosstalk, each Nightmare instance would have to run a new instance of the crash reporter service on a different port, introducing complexity to either 1) rely on the user to supply an open port or 2) have Nightmare handle selecting an open port internally and Just Working&trade;.

The latter problem makes me wonder if this functionality should be put into the growing list of v3 nice-to-haves.  The proposed single Electron instance managing multiple `BrowserWindow`s would fit this nicely, as there would only be one Electron instance to report crashes for.

Thoughts?
",rosshinkley,2016-09-06 15:33:04
598,2016-05-05 17:02:20,"Thinking about this a bit further, I suppose the crash reporter could be attached to the constructor instead.  If you're running multiple instances, though, I don't know that you'd know where the crash came from, only that one of them crashed.  It's still worth setting up, I think.
",rosshinkley,2016-09-06 15:33:04
598,2016-09-06 15:33:03,"Wrote this as a plugin that can be found [here](https://github.com/rosshinkley/nightmare-crash-reporter).  Closing this issue.
",rosshinkley,2016-09-06 15:33:04
597,2016-04-25 16:12:07,"First things first: Nightmare is awesome :heart:

So, I am attempting to use Nightmare as part of our testing workflow, to verify that some visualization components we're developing don't change significantly with each new pull request, etc. Pretty standard stuff. The trouble is, I am getting different-looking results from the same setup on my local development machine and on Travis. My main question is, what governs how Nightmare/Electron/Chromium actually behave at runtime? Are there options besides those I can control from Node (e.g., extant configuration OS-specific base options for Chromium) that control this runtime behavior?

Here are images of one of my vis components, as rendered on my local machine (top), and on Travis (bottom):
![local](https://cloud.githubusercontent.com/assets/2903332/14790137/f78ce502-0add-11e6-8320-832e197b8e91.png)

---

![travis](https://cloud.githubusercontent.com/assets/2903332/14790145/00e6ffd4-0ade-11e6-9c62-bbcd56a35dc2.png)

Note that, while both images have the correct dimensions, there is a spacing difference between them (the top image stretches off to the left, while the bottom one doesn't). I expected both images to be the same.

Here is the Nightmare code I use to create these images:

<S_CODE_TOKEN>

Both builds begin from scratch, using NPM to manage node dependencies (in the standard way). It's entirely possible that the difference is coming from some other aspect of my setup, but I wanted to pinpoint Nightmare's possible role in it as well.

Thanks in advance!
",ronichoudhury,2016-04-27 13:27:58
597,2016-04-25 19:59:55,"A related question (that is really about Electron but that you may know the answer to): how can I tell which version of Chromium is being used by Nightmare, via Electron? I am afraid that my local settings for Chrome on my system are somehow affecting my testing output, and I'd like to figure out how to tell whether or not that's happening as a part of this larger effort.
",ronichoudhury,2016-04-27 13:27:58
597,2016-04-25 20:38:30,"> how can I tell which version of Chromium is being used by Nightmare, via Electron?

If you are on the latest for everything, it’s using Chromium 49.0.2623.75. There’s not an easy way to tell (I just made #599), but you can use a plugin to get the info from the electron process:

<S_CODE_TOKEN>
",Mr0grog,2016-04-27 13:27:58
597,2016-04-25 21:35:11,"Well, the short and pithy answer is that the display is only as consistent between systems as Chromium is, though that’s probably not very helpful ;)

The difference between the two images above is really surprising if the the windows are the same size in both cases. How is the chart drawn and sized? Could it be a timing issue that’s causing some part of the code to get the size wrong? Maybe something do do with the viewport? (Are there any meta tags that affect viewport layout in your page?) Maybe media queries? (e.g. 1x vs. 2x device-pixel-ratio)

If the layout changes at some point based on the width of the window, timing could easily be a big part of this—since every command has to cross between several different processes, there’s not much control over exactly when your screenshot gets taken vs. any async stuff the web page is doing on its own, for example. It’s not uncommon for timing to be very different on a (usually slow) CI server than on your (usually fast) development machine.

> what governs how Nightmare/Electron/Chromium actually behave at runtime?

Plenty of stuff like the above is different based on the hardware available (especially the displays).

On a lower level, there are potentially a _lot_ of things; I think you’d really need to dig into all the various interrelated projects to begin to get a meaningful answer to this. Some are set at compile time, too. There is a lot of conditional code in Chromium and Electron that branches based on whether you are building for OS X, X Windows, or Windows. Those things are generally intended to make the results as much the same as possible, though.

As a side note, in your config:

<S_CODE_TOKEN>

`useContentSize` doesn’t have any affect when `frame` is `false`. It also only does anything if `width` and `height` are present (it only works at window creation time; it doesn’t affect sizing calls afterward).
",Mr0grog,2016-04-27 13:27:58
597,2016-04-27 13:27:58,"- Thanks for the tip about extracting the version number from Nightmare; that will be helpful for me going forward
- It turns out it was part of the software stack we use to generate those images. They have a ""strict autosizing"" feature that attempts to balance the main data display size against the axes and other decorations that go in the margins. For some reason that method works very differently on the different platforms, which is where the real mystery lies (rather than in Nightmare/Electron/Chromium configuration). If I instead direct that chart to be rendered with static sizing, then almost all of the rendering differences disappear (there is still a 1-pixel discrepancy in the placement of some labels, but I suspect that's either from the SVG engine or some other quirk of the software we're using).
- Thanks also for the info on `useContentSize`. One question: you said it only does something if `width` and `height` are present - does that not count the default values of `800` and `600` that those parameters get if not specified?
",ronichoudhury,2016-04-27 13:27:58
597,2016-04-27 14:04:03,"> you said it only does something if width and height are present - does that not count the default values of 800 and 600 that those parameters get if not specified?

Oh, you're probably right, I'll bet it does. I'd have to go back and look, at Electron’s code, but don't have a computer handy.

At any rate, having `frame: false` effectively does the same thing, so `useContentSize` is redundant. IIRC, the electron code is something like:

<S_CODE_TOKEN>
",Mr0grog,2016-04-27 13:27:58
597,2016-04-27 14:12:07,"Ah I see. Thanks for the clarification. I should probably dump that flag and specify `width` and `height` for good measure in my code in any case.

And seriously, thanks for the lightning fast responses on my questions!
",ronichoudhury,2016-04-27 13:27:58
596,2016-04-25 14:03:50,"Here is my code:

`Nightmare({ show: false })
    .viewport(150, 200)
    .goto('http://www.taoism.net/ttc/complete.htm')
    .wait()
    .screenshot('test.png')
    .end()
    .run(function(err, nightmare) {
        console.log('Done.');
    });`

RESULT:
Screenshot dimensions generated: 300x356
Resolution doubled

EXPECTED:
Screenshot dimensions generated: 150x200
Resolution normal (100% zoom)

Attaching generated screenshot.
![test](https://cloud.githubusercontent.com/assets/2205877/14786437/bbf11d44-0ab3-11e6-8af1-295adb046f67.png)

NOTE: the generated result is not proportionally scaled to expected (separate bug?)
",apodgorny,2016-05-27 20:05:09
596,2016-04-25 14:44:55,"For the double size: this has to do with high-resolution display.  Viewport dimensions are in browser pixels, not device pixels (thanks to @Mr0grog for pointing out the difference).  For more information, read  [the bottom of #498](https://github.com/segmentio/nightmare/issues/498#issuecomment-189156529).

For the proportional scaling, I'm not sure.  It might be symptoms of the same quirk.
",rosshinkley,2016-05-27 20:05:09
596,2016-04-25 15:25:02,"As far as proportions, that’s because `viewport` sets the size of the _window_ (debatable about whether that’s correct, but that’s what it does), while the screenshot only captures the actual content area, so it loses some pixels from the height for the title bar (and on the edges for the window frame, depending on platform).
",Mr0grog,2016-05-27 20:05:09
596,2016-04-25 18:59:54,"Is there any workaround to this? I want to be able to rely on the size I ask of it. Perhaps, a setting that I don't know of or an evaluate call?
",apodgorny,2016-05-27 20:05:09
596,2016-04-25 19:03:24,"There’s no super-easy way, but, as @rosshinkley noted, I wrote a short description of what you can do to counterract this [at the bottom of #498](https://github.com/segmentio/nightmare/issues/498#issuecomment-210710684). You could use a similar mechanism to [set the window’s content area](http://electron.atom.io/docs/v0.37.7/api/browser-window/#winsetcontentsizewidth-height-animate) instead of using Nightmare’s `viewport()` method.
",Mr0grog,2016-05-27 20:05:09
595,2016-04-25 10:52:32,"https://github.com/electron/electron/blob/master/docs/api/app.md#appcommandlineappendargumentvalue

List of arguments:
http://peter.sh/experiments/chromium-command-line-switches/
",yotamlaufer,
595,2016-05-02 18:21:03,"I'm okay with this change.  Would you mind adding to the readme to cover the option and where to find Chromium switches?
",rosshinkley,
595,2016-05-04 14:40:10,"done
",yotamlaufer,
595,2016-05-04 14:43:55,"@yotamlaufer Awesome, thank you.
",rosshinkley,
595,2016-05-04 14:47:28,"With please. I love nightmare!
",yotamlaufer,
595,2016-05-05 17:47:14,"Curious question: why name this `chromiumArguments` when the corresponding switches version is just `switches` (no “chromium” prefix)?
",Mr0grog,
595,2016-05-05 17:47:33,"Also, tests?
",Mr0grog,
594,2016-04-25 10:42:19,"It will be really useful to set chromium arguments, allowing tweaking of the runtime.

https://github.com/electron/electron/blob/master/docs/api/app.md#appcommandlineappendargumentvalue
",yotamlaufer,
594,2016-04-25 10:53:28,"https://github.com/segmentio/nightmare/pull/595
",yotamlaufer,
593,2016-04-25 02:13:44,"I'm not sure where to put this, and I'm open to this being moved to a Wiki if that makes more sense.  In the interest of having all of the big (and possibly breaking) features/nice-to-haves for the next big release in one spot:
- Native `iframe` support and management - #203, #496
- Multiple window management support (including popups) - #352, #510 
- ~~IPC safety - #493, #579~~ 
- Queue safety - #493, #239, #522 (and many, _many_ more)
- Actions with selectors waiting on selector prior to executing action - #388
- `.goto()` optionally returning after `DOMContentLoaded`
- Reduce plugin function complexity

There may be a need for:
- An upgrade guide for users
- Splitting up the documentation (akin to how Electron has it)
- A semi-formal statement of ongoing support for 2.x for some period once 3.x is finished

Nice to-haves:
- Manipulating elements with custom predicates - #867 

What have I missed in features, needs, or linked issues?

_edit:_ added element ",rosshinkley,
593,2016-05-02 04:35:51,"#596 makes me wonder if changing `viewport()` to actually set the _viewport_ (as opposed to window) size would be a good breaking change for v3.
",Mr0grog,
593,2016-05-02 17:53:53,"Maybe have `goto` return as soon as a page is loading so you can execute scripts ASAP during load?

Have actions with selectors wait for the selector before doing the action (#388). Capybara (Ruby), for example, does this. It could possibly be configurable (though I think you’d want opt-out rather than opt-in).
",Mr0grog,
593,2016-05-04 03:10:30,"IPC safety will likely make it into the next release of Nightmare.
",rosshinkley,
593,2016-05-04 03:22:00,"> #596 makes me wonder if changing viewport() to actually set the viewport (as opposed to window) size would be a good breaking change for v3.

Hm, how are you planning on doing that?  Using `window.outerWidth` and `outerHeight` and then adding the difference?  (I don't remember being able to set the viewport directly, but I'm probably wrong.)

> Maybe have goto return as soon as a page is loading so you can execute scripts ASAP during load?

To what end?  Should `preload` be extended (or pluggable) instead?

> Have actions with selectors wait for the selector before doing the action (#388). Capybara (Ruby), for example, does this. It could possibly be configurable (though I think you’d want opt-out rather than opt-in).

Fully on-board for an implementation of #388.
",rosshinkley,
593,2016-05-04 16:48:25,"> how are you planning on [changing the viewport size instead of window size]?

I think just calling [`window.setContentSize()`](http://electron.atom.io/docs/v0.37.8/api/browser-window/#winsetcontentsizewidth-height-animate) instead of [`window.setSize()`](http://electron.atom.io/docs/v0.37.8/api/browser-window/#winsetsizewidth-height-animate)

> To what end? Should preload be extended (or pluggable) instead?

I think I was thinking so you could get in as early as DOMContentLoaded or maybe before other scripts, but maybe specifying preload stuff somehow would be better. Not an idea I’d thought through deeply.
",Mr0grog,
593,2016-05-05 16:38:10,"> I think just calling window.setContentSize() instead of window.setSize()

Of course.  Y'know, I've read the `browser-window` docs a zillion times and forgot about `setContentSize`.  Maybe I need to read it a few more times.

> I think I was thinking so you could get in as early as DOMContentLoaded or maybe before other scripts, but maybe specifying preload stuff somehow would be better. 

I was pondering out loud, and now I'm wondering if plugging preload is a good idea.  I think preload is executed prior to every page load, in so doing losing a bit of control - there are probably situations where you want to run a given script on a given page's load.

I doubt I'm thinking about it the way you are: what would you suggest as API changes?  It seems like you're advocating having a navigation setup method and a navigation method - am I anywhere close to being on the same page?
",rosshinkley,
593,2016-05-05 16:55:30,"I've been tinkering with the idea of changing the Electron part of `.action()` to wrap the ambient `require`.  The function signature is ugly: `function(name, options, parent, win, renderer, done)`.  Changing the `.call` in the `action` handler from:

<S_CODE_TOKEN>

...to something more like....

<S_CODE_TOKEN>

... which would make the handler signature be `function(done)`.  Also, dropping the `renderer` as I think it could be `require`d.

I realize wrapping `require` is also kind of ugly and probably unadvised, but I thought I'd float it out.  Thoughts?
",rosshinkley,
593,2016-05-06 21:19:39,"I definitely agree that function signature is not only a little ugly, but very hard to get right. I have had to look it up in the README _literally every single time_ I’ve needed to use it and I’ve gone so far as to write it like `function (_, __, parent, ___, ____, done)` in some examples because you really only need one or two of those most of the time.

But why not just make those variables ambiently available in the plugin’s closure instead of wrapping require? Or, barring that, have plugins take two args: an object with all the things (as you’d get from the require call in your example) and the `done` callback?

(Also agree that dropping `renderer` would be pretty reasonable because there are other ways to get it.)
",Mr0grog,
593,2016-05-06 21:26:21,"> I was pondering out loud, and now I'm wondering if plugging preload is a good idea.

It’s probably not. I think my _real_ desire, initially, was just to be able to run code before waiting for the whole page to fully finish loading all its resources (exactly how, in the client, you often want to run on `DOMContentLoaded` instead of on `load`). My use case is basically: “I want to click this button and I don’t care whether images have loaded yet.”

BUT the more I think about it, that makes a lot of things more complicated: have all the page’s scripts (if some where deferred) loaded yet? What if you just want to load a page and screenshot it? Now you have to load, wait, then screenshot. Etc. A possible alternative might just be to add an option to `goto` asking it to return as soon as the HTML is loaded, but keep the default behavior the same. (e.g. `goto('url', {waitForResources: false})`)
",Mr0grog,
593,2016-05-06 21:38:46,"> I have had to look it up in the README literally every single time I’ve needed to use it

Me too.  And I _wrote_ the [expletive redacted] thing.  I'm going to go on a limb and say it's the most unwieldy part of Nightmare, and humbly apologize.

> But why not just make those variables ambiently available in the plugin’s closure instead of wrapping require?

It's certainly easy to do, but makes where those variables came from kind of opaque.  The less it seems like magic, the better.  (Using `require` only makes this marginally better, I realize.)

> Or, barring that, have plugins take two args: an object with all the things ...

The options hash was [frowned upon](https://github.com/segmentio/nightmare/pull/425#issuecomment-169736725) in the orginal incarnation.  I wouldn't be totally against it (provided it has a descriptive name), but `require` seemed to satisfy both the ""no options hash"" and the ""this function signature is _impossible_ to remember"" demi-requirements.
",rosshinkley,
593,2016-05-06 22:20:05,"> My use case is basically: “I want to click this button and I don’t care whether images have loaded yet.”

That's what I was guessing, and that would be awkward to cram into preload.  That's why I walked it back.  I'm not sold that plugging preload is a _bad_ thing necessarily (having to redefine all of the machinery for `console` et al is not a great solution, either), but not going to solve what you had in mind.

> BUT the more I think about it, that makes a lot of things more complicated...

This is what I was thinking, but I thought maybe there was an obvious part that I had missed.  (I have a penchant for overcomplication.)

> A possible alternative might just be to add an option to goto asking it to return as soon as the HTML is loaded, but keep the default behavior the same. (e.g. goto('url', {waitForResources: false}))

I'm trying to think of countercases, and while I can think of instances where not waiting is silly, they are still valid use cases and I _think_ would behave properly.  (Eg, `.goto(myUrl, {waitForResources: false}).wait('.mySelector')` where `.mySelector` is added by the client.)  At first blush, this is a reasonable approach.
",rosshinkley,
593,2016-05-10 21:52:08,"Generally: have every action return something? In a similar vein, be better about errors. Also: make all errors instances of `Error` (maybe a subtype, like `NightmareError` or something). This covers a lot of things, so probably requires an audit of all existing actions first (if it seems like a good idea).
",Mr0grog,
593,2016-05-18 16:42:24,"> Generally: have every action return something? In a similar vein, be better about errors. 

Can't +1 this enough.

> maybe a subtype, like NightmareError or something

That's something I had not considered, but the idea is certainly appealing.

>  so probably requires an audit of all existing actions first (if it seems like a good idea)

This is probably worth doing.  Added #646.
",rosshinkley,
593,2017-03-03 01:21:40,"Seriously, when this release will be available? Popups / New windows are giving me serious nightmares and struggling a lot 😭 I'm still using nightmare-window-manager, but sometimes it does not help (popup logins for example, triggered by javascript with anti csrf token + link of something, etc and all of these are obfuscated or really painful to dig in).",overflowz,
593,2017-03-17 03:41:27,"@overflowz The main holdup right now is that `preload` is not honored by windows not created by instantiating a new `BrowserWindow` internal to Electron, specifically with `window.open()`.  See electron/electron#2605.

I haven't dug into it, but it _might_ be skirted with some `preload` magic on the main Electron window.  At the time, it felt like an _awful_ lot of work for something that might end up getting fixed.",rosshinkley,
592,2016-04-24 04:47:36,"Is there some way to get the pixels of what Nightmare is doing? Would be cool to specify a window size that Nightmare operates in and then get those pixels to pipe them somewhere.
",trusktr,2016-05-27 21:02:44
592,2016-04-24 17:12:12,"You could write a plugin that does this—on the Electron side, just subscribe to `FrameManager`’s `data` event and you’ll receive a buffer with full-frame image data each time the browser window renders.

Maybe something like (totally untested):

<S_CODE_TOKEN>

And use it like so to watch yahoo.com load and render, frame by frame:

<S_CODE_TOKEN>
",Mr0grog,2016-05-27 21:02:44
592,2016-05-27 20:02:38,"@trusktr did @Mr0grog's suggestions work for you?
",rosshinkley,2016-05-27 21:02:44
592,2016-05-27 21:02:44,"@rosshinkley I haven't tried it yet. Seems like it will though. I'll re-open if I get around to it (or if anyone reading tries and it doesn't work, they can re-open too).
",trusktr,2016-05-27 21:02:44
591,2016-04-23 20:22:22,"Fixes #590.

We used to support `javascript:` URLs, but lost that feature in #553. TBH, I’m slightly skeptical on bringing it back, _but_ #553 got released in an extra-minor update, so it seems worth fixing since it actually broke some people.

Bonus: this supports page loading data for URLs like `javascript:window.location='http://google.com'`. It could be ever so slightly faster if we didn’t bother to support that. Seemed nice to have, though. ¯\_(ツ)_/¯

Also worth noting: we don’t handle errors especially well this way. It’s not any worse than before, but I wonder if calling `goto('javascript:notAnActualFunction()')` should return error instead of success, which I think we could do by passing JS URLs through the evaluate code and then, if the result is not `undefined`, setting the URL. That’s complicated, though. (You _can_ currently capture errors with the `page-error` event, but it’s hard to connect that with the URL.)
",Mr0grog,2016-04-23 22:03:29
591,2016-04-23 21:17:28,"This is a case I would not have thought of.

> Also worth noting: we don’t handle errors especially well this way. It’s not any worse than before, but I wonder if calling `goto('javascript:notAnActualFunction()')`  should return error instead of success...

Oh man.  _My eyes._  I hadn't considered this case, either.  I'd be curious to see a proposed implementation for supporting rejection of bad `javascript:` links.
",rosshinkley,2016-04-23 22:03:29
591,2016-04-23 21:18:08,"(At any rate, +1.  This will be included in the next release.)
",rosshinkley,2016-04-23 22:03:29
591,2016-04-25 19:46:34,"> I'd be curious to see a proposed implementation for supporting rejection of bad javascript: links.

The more I think about it, the less I want to do it. It’s pretty edge-casey.
",Mr0grog,2016-04-23 22:03:29
590,2016-04-22 20:28:47,"I have a page that has a javascript function that gets executed to navigate.  In version 2.3.1 of nightmare I could:

.goto('javascript:__doPostBack(\'ctl100$ctl00$MainMenu\',\'DAT\')')

and it navigated successfully.  When I upgraded nightmare to v2.3.3 it stopped. Here is the return error

{ message: 'navigation error',
      code: -1000,
      details: 'unhandled protocol',
      url: 'javascript:__doPostBack(\'ctl00$ctl00$MainMenu\',\'DAT\')' }
",uncledlm,2016-04-23 22:03:29
590,2016-04-23 00:08:26,"Ah, this is definitely a result my trying to fix URLs that caused Electron to hang in #553. I think it’ll need a little investigation to make sure all the new load handling machinery works if you use a `javascript:` URL.

In the mean time, you ought to be able to use [evaluate](https://github.com/segmentio/nightmare#evaluatefn-arg1-arg2):

<S_CODE_TOKEN>

Honestly, that might be a better solution anyway unless there’s something very particular about your use case.
",Mr0grog,2016-04-23 22:03:29
589,2016-04-22 17:20:39,"This is one of several issues @fr- noted in #282. It is also important because the registered listener could cause the Nightmare instance to be retained even if there are no other references to it, which means instances can never be garbage collected.

This also removes the uncaught exception listener on the parent process, as mentioned in https://github.com/segmentio/nightmare/issues/586#issuecomment-212681749.

Finally, ensure the instance gets marked as ended even if the child process connection has already died (e.g. it crashed).

Other notes:
- This adds a “private” variable to nightmare instances named `_endNow`. I’d like not to do that, but nightmare already stores several private variables this way and I didn’t want to either totally rearrange the code by bringing `run` inside a closure or introduce a whole new pattern of using `WeakMap` to store references to private data.
- This still installs lots of listeners (the primary issue at hand in #282). It slightly reduces the trouble by cleaning up listeners when an instance is done with, but it’s not perfect. Another approach would be to have a central registry of instances that handles telling each of them to end when relevant process events happen, which would mean we only add one listener per event instead of one per event per instance. If we move to a single electron process model, we’ll probably have to have that central registry to do other things anyway.
",Mr0grog,2016-04-23 22:03:15
588,2016-04-22 17:02:59,"Contains upstream fixes for #375, #563, #572. For the dev tools issues, I think we should still take #576, but this does obviate it on a technical level.
",Mr0grog,2016-04-23 22:02:52
588,2016-04-22 17:23:34,"Not sure why that test failed. It seems to run fine locally. Hopefully something didn’t break in this Electron release :\
",Mr0grog,2016-04-23 22:02:52
588,2016-04-23 21:04:38,"Hm.  I've seen similar screwball failures on Circle, even with the `xvfb` patch.  I don't know if that's still the cause, but it may be worth another look.
",rosshinkley,2016-04-23 22:02:52
587,2016-04-22 10:11:56,"Nightmare crashes for me on Debian with `node:5.10`.
## Setup

Run command:

<S_CODE_TOKEN>

Dependencies for electron (from Dockerfile):

<S_CODE_TOKEN>
## Logs

This is the relevant output (it crashes, runs screenshot + evaluate but never continues):

<S_CODE_TOKEN>
## Various versions

<S_CODE_TOKEN>

<S_CODE_TOKEN>

<S_CODE_TOKEN>

---

Any idea how to fix this? I'm unsure what's causing the crash.

**Update:** It works for two previous screenshots, but crashes on the third one.
**Update 2:** It works fine locally on OS X.
",bahlo,2016-04-22 13:01:19
587,2016-04-22 13:01:19,"Seems to be a duplicate of #545, closing.
",bahlo,2016-04-22 13:01:19
587,2016-04-25 19:59:02,"You might want to ensure that your Docker /dev/shm is not too small in case you are hitting this bug:
https://bugs.chromium.org/p/chromium/issues/detail?id=522853
",yoz,2016-04-22 13:01:19
587,2016-12-14 23:59:20,"@yoz, that answer was right on the money. I was troubleshooting very unpredictable behaviour in a docker vs on my Mac and traced it to exactly this issue. Many thanks.",mashaalmemon,2016-04-22 13:01:19
586,2016-04-20 15:02:57,"<S_CODE_TOKEN>

Please give to nightmare consumer decide when to kill process.
Thanks
",demongloom,2016-04-23 22:23:42
586,2016-04-20 17:56:46,"This came up in #558, and I'll quote @Mr0grog:

> So… it would be a very bad idea not to exit the process at this point. Electron’s underlying IPC machinery is now in a bad state, so further communication between the your node.js process and the “browser” is not reliable.

I'm wondering now is if instead of exiting, the Nightmare instance should be put into an error state where any further calls would cause exceptions as the IPC parts are no longer reliable.

All of that being said: uncaught exceptions are bad.  Why not add handling for the exception?
",rosshinkley,2016-04-23 22:23:42
586,2016-04-21 01:22:08,"> I'm wondering now is if instead of exiting, the Nightmare instance should be put into an error state where any further calls would cause exceptions as the IPC parts are no longer reliable.

I definitely think this would be great. But some thoughts: there are two different kinds of `uncaughtException` handlers and I think the story is a little different for each.
1. Exceptions in the child (electron) process. This is what #558 was about. I think the reality here is that when this happens, we pretty much have to assume everything in the process (and therefore in the Nightmare instance controlling it) is hosed. I think you’re on the right track here, @rosshinkley:
   1. Treat this like an error in any action, stopping all running queues, and calling the callback/rejecting the promise for each of them with information about the exception.
   2. Marking the instance as dead so any later calls to `run/then/end` either throw or reject (I’d lean towards reject, but throwing might make sense, too). The same goes for when the Electron process crashes, which is currently totally silent. 😱 Arguably, we should be doing this when the instance is explicitly ended, too (IIRC, you can currently call `run/then` again after the process is ended and have unclear problems).
2. Exceptions in the parent (user) process (the handler @demongloom cited). As I’m thinking about this one more critically now, **I’m not sure we should be handling this event at all:**
   - Handling it is not great practice for library code (as opposed to user code) because it changes the behavior of the process. We “fixed” this in #554, but this gets in the user’s way if they want to not crash on an exception (rarely ever a good idea, but _sometimes_ there are legitimate reasons). In hindsight, the better fix for #554 might have been to just remove the handler altogether.
   - Handling it in order to clean up the electron process is unnecessary because we already trap all the possible close/exit/signal events and cleanup there. Whether the system exits because of an uncaught exception or the user explicitly does so in their own code, we’re still covered without trapping this event.
   - Presumably the handler was originally added to ease debugging, but what about cases where Electron is a useful additional piece of functionality in a larger app, rather than the central purpose of someone’s app? It’s not great to just be spewing stack traces to the console if they’re trying to redirect errors somewhere else (logs, a remote service, etc). (If we really like this functionality, maybe send it to `debug` and then only exit the process if there are no other uncaught exception handlers?)
   
   To some extent, I simply did wrong by adding the `endInstance` call to the existing uncaught exception handler on the parent in #487. We don’t have to assume, unlike with the child process, that Nightmare’s internals are hosed here. It’s plenty likely that the exception came from code that didn’t have anything to do with Nightmare.
",Mr0grog,2016-04-23 22:23:42
586,2016-04-23 22:23:42,"Fixed with #589.  Closing.
",rosshinkley,2016-04-23 22:23:42
585,2016-04-20 01:18:27,"Fixes #577.
",rosshinkley,2016-04-23 22:02:34
585,2016-04-23 22:02:23,"The problem is now fixed via #548, but this PR adds the unit tests for failed selectors.
",rosshinkley,2016-04-23 22:02:34
584,2016-04-19 18:44:40,"Fixes #421, at least in part.

Open questions: 
1. Should Nightmare override the environment variable for `ELECTRON_ENABLE_LOGGING`?
2. Should the `nightmare:` namespace be on the debug calls for Electron?
",rosshinkley,2016-04-23 21:49:17
584,2016-04-20 07:30:48,"> Should Nightmare override the environment variable for ELECTRON_ENABLE_LOGGING

I would say nah. For high-level issues someone is likely to care about (deprecation notices, info about why Electron failed to start, etc.), info gets logged regardless of this env var. It gets pretty verbose if you turn it on. Better to leave that up to a user, I think.

> Should the nightmare: namespace be on the debug calls for Electron?

I’d say nah to this, too, but I don’t really have any good reasoning or a strong case for it.
",Mr0grog,2016-04-23 21:49:17
584,2016-04-20 14:17:34,"> It gets pretty verbose if you turn it on. Better to leave that up to a user, I think.

My thoughts too.  Thought I'd float it just to make sure there wasn't something I missed.

> I’d say nah to this, too, but I don’t really have any good reasoning or a strong case for it.

The best (and possibly only) reason I'd be in favor of leaving it prefixed with `nightmare:` is to maybe simplify `DEBUG`.  However, with your test to catch deprecation warnings, I'm not sure there's a case to be made.
",rosshinkley,2016-04-23 21:49:17
583,2016-04-19 16:50:26,"That is, make `nightmare.then()` behave according to Promises/A+ and ES6 Promise specs. Addresses #527.
",Mr0grog,2016-04-23 21:49:03
582,2016-04-18 16:06:35,"Running across #581 made me think it would be a good idea to get automatic warning of deprecated API usage. This causes the test suite to fail at the end if any deprecated APIs are used.

The implementation basically wraps the Nightmare constructor used in tests and watches Electron’s `stderr` for deprecation warnings, then throws an exception at the end if there were any.
",Mr0grog,2016-04-19 04:07:57
582,2016-04-18 16:07:15,"Note the tests _should_ fail, since we are using some deprecated APIs :P

#581 should be merged first in order to keep these tests happy.
",Mr0grog,2016-04-19 04:07:57
582,2016-04-18 16:39:16,"This looks great.

This went in a different direction than I had thought, though.  Not sure if this is the best place for this conversation, but here goes: something I had been thinking about was wrapping the Electron instance stdout and possibly stderr up with calls to `debug` (rather than piping them straight through to the parent process stdio).  Then I started thinking about possibly having log levels and _maybe_ introducing something slightly more complex than debug like [winston](https://github.com/winstonjs/winston).  Thoughts?
",rosshinkley,2016-04-19 04:07:57
582,2016-04-18 16:59:11,"> something I had been thinking about was wrapping the Electron instance stdout and possibly stderr up with calls to debug (rather than piping them straight through to the parent process stdio). Then I started thinking about possibly having log levels and maybe introducing something slightly more complex than debug like winston.

I generally like that idea, but the place for it is probably #421.

As for _this_ PR, I thought it was valuable to programmatically examine stderr for these warnings so we could explicitly cause tests to fail (and if that doesn’t feel great, cool, we shouldn’t take this). We couldn’t do that with just a logger. It also lets us a) group all the warnings together so they aren’t spread though-out the test output and b) dedupe them, so you only see “printToPDF is deprecated.” once, for example:

<S_CODE_TOKEN>

Since Electron’s stdio are just streams, there’s no reason we can’t pipe them to multiple places if we want to. Doing this shouldn’t get in the way of piping to `debug` or some other logging tool.
",Mr0grog,2016-04-19 04:07:57
582,2016-04-18 17:04:38,"> I generally like that idea, but the place for it is probably #421.

Good point, I'll move it there.

> As for this PR, I thought it was valuable to programmatically examine stderr for these warnings so we could explicitly cause tests to fail...

I'm realizing now I might have been unclear.  I completely agree, evaluating stderr output for deprecation is a good idea.  I like having them collected and deduped for the end.  And ...

> Since Electron’s stdio are just streams, there’s no reason we can’t pipe them to multiple places if we want to. Doing this shouldn’t get in the way of piping to debug or some other logging tool.

... was kind of what I was driving at: we can get both, and it might be worthwhile to do so.  I just blanked on #421.
",rosshinkley,2016-04-19 04:07:57
582,2016-04-18 17:06:25,"Oh, ha, sorry. Violent agreement!
",Mr0grog,2016-04-19 04:07:57
582,2016-04-18 17:07:01,"Totally fine. :)
",rosshinkley,2016-04-19 04:07:57
581,2016-04-18 16:01:38,"We were using a few deprecated Electron APIs in various spots. Best to fix that before they disappear entirely and break! Happily, they were all just renamings or moves to other locations, so this was very straightforward.

Noticed while looking at #421.
",Mr0grog,2016-04-19 04:07:13
581,2016-04-18 16:33:53,"Looks good.  Thanks!
",rosshinkley,2016-04-19 04:07:13
580,2016-04-18 15:55:25,"Hi all,

I'm attempting to go to a page, grab a URL from an anchor tag, and then use `goto` to change the current browser window to that URL (since otherwise it opens a new window I'm unable to access at all).

I don't see a way to do this in the docs. Is this possible?

I've tried using `evaluate.then` to return the url to `then`, which works, but then I can't change my current nightmare instance from within the `then`. It appears to have no effect.

EDIT: The equivalent of what I'm trying:

<S_CODE_TOKEN>
",jamesaspence,2016-04-18 16:24:35
580,2016-04-18 16:19:13,"Judging from your example, it looks like you're queuing the `.goto()` action but not executing it.  What happens if you modify your example to something like:

<S_CODE_TOKEN>
",rosshinkley,2016-04-18 16:24:35
580,2016-04-18 16:24:35,"Works perfectly! Thanks for the help.
",jamesaspence,2016-04-18 16:24:35
579,2016-04-18 03:23:57,"This addresses one aspect of #493. It should make IPC between the user’s process and the Electron process a) “safe” in that simultaneous calls can’t cause incorrect results and b) simpler. It’s based on discussion with @rosshinkley in issue #493.

The main idea here is that Nightmare’s IPC objects gain two methods, each to be used in opposite processes:
- `ipc.respondTo(name, responder)` Registers a function that can respond to calls from another process. The `name` is a handle by which other processes call it. The responder takes any number of arguments, where the last one is a callback. This callback should be called when the responder’s work is complete. Any arguments will be passed back to the caller in the other process. In addition, the callback has a method named `progress` that can be called to emit `data` events in the other process.
  
  <S_CODE_TOKEN>
- `ipc.call(name, [arg, [arg, [...]]], [callback])` Calls a responder with the given `name` in another process. Any arguments between the `name` and `callback` are passed as arguments to the responder. The callback will be called when the responder’s work is finished. In addition, this returns an event emitter than can be used to handle `data` events indicating progress from the responder or a single `end` event, which will be called with the same arguments as and immediately prior to `callback`.
  
  <S_CODE_TOKEN>

Under the hood this is accomplished by having three special IPC messages:
- `CALL` indicates that a responder should be called. Sent from the parent, to the child. It has at least 2 arguments:
  1. A unique ID identifying the call. This is used to ensure responses don’t get tied up with other calls to the same responder.
  2. The name of the responder to call
  3. Arguments to pass to the responder.
- `CALL_DATA_{ID}` indicates progress data related to a call is being sent. Sent from the child to the parent. The ID in the name is the unique ID that was sent with the initial call above.
- `CALL_RESULT_{ID}` indicates that this is the final result of the call. Sent from the child to the parent. The ID in the name is the unique ID that was sent with the initial call above.

The above set of messages can be used in either direction, but they are probably only relevant now in terms of calls from the parent to the child. Maybe worth noting: a very similar (but more heavily built out and robust) mechanism is used internally in Electron’s `remote` module. This one is more minimal and light-weight, but sacrifices a lot of nice features that one has (support for circular references, complex types like dates, functions, promises, errors, and placeholder objects instead of string names).
## Notes and open questions
1. This doesn’t convert all calls yet. It just does `evaluate_now` and `useragent` as demo cases. A later commit will have to do the rest.
2. In implementing this, I noticed that we can wind up with multiple IPC objects for a single process. It doesn’t actively cause problems, but depending on the order things are registered in, it could, so I made sure there could only be one IPC instance per process.
3. This implementation differs slightly from the initial proposal in #493—it is intended to be backwards-compatible (so it doesn’t break plugins). I’m not sure if that a virtue or unnecessary, since plugins that can run in the Electron process are pretty new. The method names are also slightly different; I thought these were clearer.
4. The progress capability is neat, but it incurs a lot of additional complexity and I’m not sure how much real value it adds. No existing actions use anything like it. The situations where it would be useful might be just as well handled with more judicious debug messages, error throwing, or simple events. We could easily remove the progress support and add it again later.
   - If we keep it, should be a stream instead of a simple emitter? Like the progress capability itself, its benefits are primarily theoretical and it probably comes with a more complex implementation.
5. This implementation sits atop the existing `ipc.emit()` and `ipc.on()` methods. That means the special `CALL*` messages can be pretty easily observed. I’m not sure that’s a big deal, but we could call the appropriate methods on the `process` instead to make intercepting things harder.
6. My initial implementation relied heavily on the spread operator, which made things much simpler. However, spread isn’t available in Node v4.x without the `--harmony` flag (it’s 👍 in v5.x), so I removed it in favor of lots of `apply()` calls.
   - `--harmony` is still mentioned in the README (only down at the bottom), but not actually required in practice on Node 4+. I think it’s good that it’s not required.
   - In hindsight, a lot of the `apply()` noise (not all) could be avoided by just sending arguments as an array through IPC instead of spreading them into the message arguments.
7. Some action implementations in the Electron process will get more complex (only slightly) because of this. Several actions are fire-and-forget, but in this implementation, they _have_ to call a callback. Because arguments are so dynamic in Nightmare, I can’t think of a good way to detect whether an action (on the Electron side) actually uses the callback. Probably not a big deal, but I just wanted to call it out.
8. You only get to have one responder for a given name. I think that’s reasonable (what would you do with more??), but not sure if it’s worth adding some logging or throw errors if `respondTo` is called with the same `name` more than once.
9. There’s no way to unregister a responder. I’m not sure we need it, but maybe?

I’d love feedback from anybody on this. Ideally this is a safe, backwards-compatible change (see (3) above), but it’s still a major (and deep) API change. We should be more 👍 than ¯\_(ツ)_/¯ in order to accept it.
",Mr0grog,2016-05-05 17:46:51
579,2016-04-20 03:19:25,"> The progress capability is neat, but it incurs a lot of additional complexity and I’m not sure how much real value it adds. No existing actions use anything like it.  If we keep it, should be a stream instead of a simple emitter?

I'm mixed on this, but I can think of applications where this might be useful.  For example, a similar concept is used in the [download manager](https://github.com/rosshinkley/nightmare-download-manager) to look at download state out-of-band.

> This implementation differs slightly from the initial proposal in #493—it is intended to be backwards-compatible (so it doesn’t break plugins). I’m not sure if that a virtue or unnecessary, since plugins that can run in the Electron process are pretty new.

My first off-the-cuff idea would be to wrap `.on()` and/or `.emit()` to warn of safety concerns when it is used in plugins (although I can think of situations where one might want to manage events themselves).  What change were you planning to propose that would break plugins?

Also, while I have in interest in how plugins are implemented as I have authored a few, [I don't think I'm the _only_ author](https://github.com/segmentio/nightmare/issues/319#issuecomment-208243666).

> You only get to have one responder for a given name. I think that’s reasonable (what would you do with more??), but not sure if it’s worth adding some logging or throw errors if respondTo is called with the same name more than once.

I'm struggling to come up with a usecase for more than one responder.  I would think responding to a given event twice would constitute a runtime error.

> There’s no way to unregister a responder. I’m not sure we need it, but maybe?

Maybe.  You could be explicit about unregistering a responder before registering a different responder for the same action, eg if you wanted your plugin implementation of `.type()` to override the default.  (Overrides at present have no consequence, at least in my naive reading.)

More as I let this marinate and as others chime in. :)
",rosshinkley,2016-05-05 17:46:51
579,2016-04-20 07:07:10,"> a similar concept is used in the download manager to look at download state out-of-band.

Oh, neat. I don’t think the progress mechanism here would simplify that use case, but it does make me wonder if there’s room for some sort of more abstract create-a-ipc-sub-channel mechanism. That would probably have some utility in the single-electron-process model described in #561. Probably out-of-scope here, though?

> My first off-the-cuff idea would be to wrap .on() and/or .emit() to warn of safety concerns when it is used in plugins (although I can think of situations where one might want to manage events themselves).

I feel like `on/emit` still have a lot of value for sending events or event-like messages. As far as built-in stuff, I think that’s just event forwarding from the browser window and logging from the Electron process.

> What change were you planning to propose that would break plugins?

I think I mistyped it on the issue thread, but I was originally thinking of _replacing_ `emit/on` with `call/respondTo` instead of having differently-named methods.

> I would think responding to a given event twice would constitute a runtime error.

So do you think it should throw an exception? Or maybe just log a warning?
",Mr0grog,2016-05-05 17:46:51
579,2016-04-20 14:47:44,"> ... but it does make me wonder if there’s room for some sort of more abstract create-a-ipc-sub-channel mechanism. That would probably have some utility in the single-electron-process model described in #561. Probably out-of-scope here, though?

I figured the single process model would have to have another identifier in `.call()`/`.respondTo()` (or `.on()`/`.emit()`) for which `BrowserWindow` the action was intended for. That could be pretty readily abstracted away for ease of use.  Am I anywhere close to the same page?

That said, it's probably out of scope, but it does feel like process management/window management is going to depend on this change.  (Or at least borrow from it heavily.)

> I feel like on/emit still have a lot of value for sending events or event-like messages. As far as built-in stuff, I think that’s just event forwarding from the browser window and logging from the Electron process.

Fair, maybe a warning is too heavy-handed.  I don't necessarily disagree, but it does seem like a raw `.on()`/`.emit()` pair is dangerous enough to warrant... something.  Would this be better served as a (eventual) writeup on how to manage events yourself in nightmare-examples?

> I think I mistyped it on the issue thread, but I was originally thinking of replacing emit/on with call/respondTo instead of having differently-named methods.

Ahhh, okay.  I understand.

> So do you think it should throw an exception? Or maybe just log a warning?

I want to say exception, but I'm not sure I can make a case.  In my read of your implementation, I don't _think_ you can cause execution problems as the results are executed with `.once()`, which makes me think warning.  On the other side,  I think that >1 response is errant behavior, shouldn't happen, and as such should be dealt with as an exception (if nothing else to catch silly stuff during testing, which is what's tipping me - but only just - toward exception).  Is there a valid case where a `.call()` will have more than one response?
",rosshinkley,2016-05-05 17:46:51
579,2016-04-21 02:34:07,"> it's probably out of scope, but it does feel like process management/window management is going to depend on this change. (Or at least borrow from it heavily.)

Definitely out of scope, but if `call` returned a scoped IPC instance instead of the emitter it does…

<S_CODE_TOKEN>

> it does seem like a raw .on()/.emit() pair is dangerous enough to warrant... something.

At the very least, I should update the plugin example in the README. Totally forgot about that.

Maybe (this is a bit hare-brained), rename `emit` to `send` and make `emit` log a warning, then forward to `send`? That way, we are forcing people to opt-in to the fact that they don’t want the call-response structure. It’s kind of ridiculous to rename a method to make people consider whether they _really_ want to use it, though.

Really I think it should be clear that this `call` is the better, future API and you can opt-in to improved behavior. `emit/on` isn’t getting any _worse._

> I don't think you can cause execution problems as the results are executed with .once()

True, but that kind of problem is actually prevented even earlier by the fact that the responder registry can only hold one responder per name. So registering a second one with the same name bumps out the old one, and there is only ever one function that even has the opportunity to call back. I think we established that that’s fine.

The “should we throw?” question is more about whether it’s ok to bump out a previously registered responder.
- Logging a warning would notify you that a responder was overridden, but would still allow your program to continue.
- Throwing would basically mean you can’t override a previous responder; doing so would just stop everything and Nightmare couldn’t run until you fixed the issue.
- Staying silent as the implementation currently does is probably not a great idea the more I think about it. You’d probably at least want some diagnostic logging informing you that the original responder has been replaced.
",Mr0grog,2016-05-05 17:46:51
579,2016-04-23 00:15:14,"I went ahead and added logging of duplicate calls to `respondTo` with the same name. Can easily change to throwing if we decide that’s preferable, though.
",Mr0grog,2016-05-05 17:46:51
579,2016-04-26 13:37:55,"@Mr0grog Good.

I'm considering opening a branch off of master for v3 parts.  Would you be willing to complete this PR and put it against that branch?  Thoughts on doing such a thing?
",rosshinkley,2016-05-05 17:46:51
579,2016-04-26 16:41:44,"> Would you be willing to complete this PR and put it against that branch?

Sure? What’s “completing” mean—just wrapping up the rest of the built-in actions?

> Thoughts on doing such a thing?

Generally I’d flip it around and have `master` be current development (e.g. v3) and have a `v2` branch for any additional 2.x releases. But ¯\_(ツ)_/¯ all good either way.
",Mr0grog,2016-05-05 17:46:51
579,2016-04-26 18:13:49,"> Sure? What’s “completing” mean—just wrapping up the rest of the built-in actions?

Yeah, that's what I had in mind - rounding out the rest of the existing methods with the IPC safety is sufficient for now.  (The beauty of source control: we can always change it later.)

> Generally I’d flip it around and have master be current development (e.g. v3) and have a v2 branch for any additional 2.x releases.

I've seen this done a _lot_ of different ways, and all seem to be about equally as effective.  I had no _real_ reason beyond releases being cut from the master branch and that PRs are probably going to continue to come to the master branch.  There also seems to be artifacts of a historical precedence from the v2 stuff for Electron being done in a separate branch, but my research there is cursory at best.

I don't have a problem with changing that, even if it adds near-term work for existing PRs/merges.  

> But ¯_(ツ)_/¯ all good either way.

100% with you.  I'm not compelled one way or another.  If you've got a good reason, we can do it how you suggested.  Or not.  You know, whichever. :)
",rosshinkley,2016-05-05 17:46:51
579,2016-04-29 18:55:48,"@rosshinkley do you want a new PR pointing to another branch, or should this still be going to master? (per discussion the other day about whether this is v2.4 or v3 feature)
",Mr0grog,2016-05-05 17:46:51
579,2016-04-29 19:00:21,"I _think_ we agreed that since this is non-breaking, this should go into 2.4.x.  To that end, I think it should go into this PR => master.
",rosshinkley,2016-05-05 17:46:51
579,2016-04-29 19:02:52,"Cool, I think this is done if nothing looks out of place to you, then.
",Mr0grog,2016-05-05 17:46:51
578,2016-04-16 09:08:15,"I start nightmare with the following snippet.

<S_CODE_TOKEN>

But unfortunately it crashes when calling `nightmare.goto('http://google.com')` because of      `openDevTools: true`. When I comment this line everything's working perfect. 
",berdof,2016-04-23 22:20:25
578,2016-04-16 10:50:57,"confirming it crashes on `openDevTools` (running no proxy server), v `2.3.2`.
",dwelle,2016-04-23 22:20:25
578,2016-04-16 15:28:28,"This is a problem with Electron: electron/electron#5180

Related: #563, #572, and an attempt at fixing in #576.
",rosshinkley,2016-04-23 22:20:25
578,2016-04-23 22:20:25,"Should be fixed with #588.  Closing.
",rosshinkley,2016-04-23 22:20:25
577,2016-04-16 02:50:07,"Consider:

<S_CODE_TOKEN>

`world` would be typed into the already-focused `selector-existing`.
",rosshinkley,2016-04-23 22:02:34
576,2016-04-15 23:20:01,"Electron has a potential crasher (on OS X, at least) when the devtools are open: https://github.com/electron/electron/issues/5180

This is an extremely simple workaround. Nightmare’s event forwarding code sends the `event.sender` argument, which may contain properties that crash Electron when accessed. Nightmare triggers the crash by stringifying everything when forwarding the event across IPC. This simply avoid including the `sender`.

I _think_ it would be nicer not to send the `event` object at all (since this patch leaves it as an empty object in most cases and I don’t think it provided any users with useful data), but I am ever so slightly worried that changing which arguments are where in the events could bite somebody. This seemed safer.
",Mr0grog,2016-04-23 21:48:50
576,2016-04-15 23:30:57,"Fixes #572, #563.
",Mr0grog,2016-04-23 21:48:50
576,2016-04-16 00:17:21,"Well, I guess the sped up tests go so fast they complete before Electron has a chance to crash! They’re still valid, but no longer a good canary for the crash this PR is mainly about preventing. Should I roll them back?
",Mr0grog,2016-04-23 21:48:50
576,2016-04-16 15:31:40,"> Electron has a potential crasher (on OS X, at least) when the devtools are open:

It's happening on my Debian-based Linux boxes too.  I should also mention #578 - I think it's symptoms of the same problem.

> They’re still valid, but no longer a good canary for the crash this PR is mainly about preventing. Should I roll them back?

Uh, I guess so.  Is there a reason to keep the changes?
",rosshinkley,2016-04-23 21:48:50
576,2016-04-16 16:03:07,"> Is there a reason to keep the changes?

Well, they allow the test to complete in a fraction of a second rather than several seconds (and still have accurate results). Nightmare’s test suite isn’t so big that it’s a problem now, but I’ve seen plenty of projects where that is a problem, so it seemed like a reasonable change while I was poking at the dev tools stuff.

The question, I guess, is whether it’s useful to have a much slower test that _might_ also tell us we avoided the crasher (since the crash is intermittent).
",Mr0grog,2016-04-23 21:48:50
576,2016-04-16 17:02:16,"The crash test isn't causal, making the argument for leaving it as-is kind of weak.  Plus, the speed benefit is nice.  But not having _any_ way of catching the crash also seems silly.  I wish there were a better way of explicitly causing the crash.

I am still on the fence, but tipped toward inclusion.  This problem seems important enough to merit _reasonably_ quick attention from the folks at Electron, so I imagine it will be addressed fairly quickly.  Thoughts?
",rosshinkley,2016-04-23 21:48:50
576,2016-04-16 17:59:50,"> This problem seems important enough to merit reasonably quick attention from the folks at Electron, so I imagine it will be addressed fairly quickly.

Yeah, I’d imagine so. I would tend towards not worrying about it under that expectation, but we could leave the tests as-is (that is roll back the changes here) until the bug is addressed, and then add the improvements here.

If we really want to test for the crash, we should have an explicit test for it and, since it’s intermittent, probably write it like [the screenshot reliability tests](https://github.com/segmentio/nightmare/blob/master/test/index.js#L717), where it gets repeated a few times to get a better guarantee that everything is working.
",Mr0grog,2016-04-23 21:48:50
576,2016-04-18 06:36:08,"The crash is fixed upstream in Electron: https://github.com/electron/electron/pull/5191. We’ll have to watch for the next release and update.

Based on that, I think we should just go with the faster test. I also still think cutting the `sender` out of forwarded events would be good since it reduces a lot of noise in the debug logs—once you get to the parent process, it’s no longer a meaningful reference and there’s not much useful data that gets serialized there, either.
",Mr0grog,2016-04-23 21:48:50
576,2016-04-18 16:32:20,"That's good.  Great, even.  Faster tests make for happy tests.

As for stripping out the sender, I'd be pretty okay with that.  I've never found it _particularly_ useful outside of having the `browserWindowOptions` barfed out with every event, and those could be sent in a one-time debug message.  And I'm not sure _that_ is even necessary.
",rosshinkley,2016-04-23 21:48:50
575,2016-04-15 16:52:24,"This is spawned from discussion on #501. @rosshinkley notes:

> `.run()` is really intended for internal use and usage isn't directly supported. Should it be?
1. `run` is not documented, it’s not the “official” API, and nothing internal ever calls it except `end`, which could just as easily call `then` instead. If `run` isn’t intended for external usage, it should be removed (or at least deprecated by logging warnings to the console when called until v3 is released).
2. On the other hand, even though it’s not documented, “official,” or public, I get the impression that it _is_ widely used. It comes up in issues a lot. Does that mean it should _become_ documented and official?

I can see a lot of value in simply canonizing a thing lots of people seem to be using. That said I personally like a smaller API surface, so I think I lean towards deprecating `run`. In the end, though, I’m not sure I have a real horse in the race here. I’d love to hear others’ thoughts.
",Mr0grog,
575,2016-04-15 18:53:18,"> run is not documented, it’s not the “official” API, and nothing internal ever calls it except end.

At the possible expense of being ""that guy,"" `.then()` uses [`.run()` internally too](https://github.com/segmentio/nightmare/blob/master/lib/nightmare.js#L357).

> I can see a lot of value in simply canonizing a thing lots of people seem to be using.

Adding some historical context:  I believe the PhantomJS implementation [used `.run()` to execute the Nightmare chain](https://github.com/segmentio/nightmare/tree/1.8.2#runcb).  I would hazard a guess that a fair number of things out there were either developed against 1.x or were developed looking at examples from 1.x.

> ...  so I think I lean towards deprecating run.

Making `.run()` a method that wraps an internal `run()` method with some deprecation warnings would be something I could get behind.  Thoughts?
",rosshinkley,
575,2016-04-15 19:38:45,"> At the possible expense of being ""that guy,"" .then() uses .run() internally too.

Oh, fine! ;)

> I believe the PhantomJS implementation used .run() to execute the Nightmare chain.

Ah! Well that explains a lot. That actually makes me feel not-so-hot about deprecating it, too :\
",Mr0grog,
575,2017-02-11 05:28:52,"@rosshinkley writes in #979 

> TL;DR: don't use .run(). It's a holdover from Nightmare 1.x. Use .then() instead.

If that's indeed the case, let's decide this & close this issue.

My 2 cents, without getting into the whole history here, is the syntax of `run()` is nice, and I don't really understand why it can't/shouldn't be a wrapper. But whether it is supported or isn't supported, a decision one way or another would be nice :)",ripper234,
574,2016-04-15 15:10:38,"Hi, we're trying to do something crazy here at https://github.com/resin-io/etcher. We're trying to automate the process of taking screenshots to our application (for the website, etc) by controlling the real Electron app with Nightmare.

The plan is to run the Etcher app with Nightmare utilities to drive the application into certain states, and take screenshots of it.

So far I tried the following:
- Pointing Nightmare's `electronPath` to the Electron Etcher binary generated when packaging the application. The app seems to run fine, but `.evaluate()` blocks or any other Nightmare function don't seem to run at all.
- Using Nightmare's Electron, and opening the `index.html` file of Etcher. This seems to work, and every NightmareJS function, including `.evaluate()` works fine, however I get: `require is not defined`. Any ideas? Is NightmareJS blocking `require` calls from the site it opens? 
",jviotti,2017-01-02 21:19:34
574,2016-04-15 15:13:15,"Actually, not even `process` is defined. Looks like the app is running in a more restricted environment, and not in a normal Electron environment?
",jviotti,2017-01-02 21:19:34
574,2016-04-15 15:17:20,"<img width=""997"" alt=""screenshot 2016-04-15 11 16 57"" src=""https://cloud.githubusercontent.com/assets/2192773/14565985/990d2eb8-02fb-11e6-9330-36eb97a36168.png"">
",jviotti,2017-01-02 21:19:34
574,2016-04-15 15:39:07,"In [this comment](https://github.com/segmentio/nightmare/issues/242#issuecomment-142985863), the user seems to be running scripts using `require()` with NightmareJS. I'll try various NightmareJS versions to see if it makes any difference.
",jviotti,2017-01-02 21:19:34
574,2016-04-15 15:52:00,"Okay, I found the reason. `nodeIntegration` is set to `false` on `runner.js`: https://github.com/segmentio/nightmare/blob/master/lib/runner.js#L71. Setting it to `true` works like a charm. Any reason why this is disables? I'm happy to provide a PR to implement an option to control this value.
",jviotti,2017-01-02 21:19:34
574,2016-04-16 01:33:19,"> Any reason why this is disables?

Well, Nightmare is primarily meant to be a scripted _web browser,_ and loading any content from the web into an environment where `nodeIntegration = true` makes your whole machine extremely vulnerable to all manner of crazy attacks.

I’m not a committer or anything here, so I can’t say anything about whether other people might be interested in making this happen. Personally, though, I’m sure making that property changeable is really the best way to go about this. Using Nightmare (or something like it or its API) to control an Electron app is a _really cool idea,_ but I think doing it right would require a much more thoughtful approach. Maybe better to fork it, make all the adjustments you wind up needing to make it work well for you, and come back with ideas about what actually worked out well (or not) in practice?
",Mr0grog,2017-01-02 21:19:34
574,2017-01-02 21:19:34,"Closing as this as like @Mr0grog said, that isn't _really_ what Nightmare is intended for.  There may be a future where this is doable, but not for now.",rosshinkley,2017-01-02 21:19:34
574,2017-01-03 00:56:20,Github also released [Spectron](http://electron.atom.io/spectron/) sometime after this issue was originally posted. It’s probably a much better way to accomplish this stuff.,Mr0grog,2017-01-02 21:19:34
573,2016-04-15 09:23:18,"If a function passed to `.evaluate` return a promise then nightmare will wait for it to be resolved before sending the value (or reject before sending an error). This allows to execute async tasks in `.evaluate` and closes #552.

Also template strings are used for javascript templates (both `execute` and `inject`) - closes #447.
",lzrski,2016-10-20 18:06:58
573,2016-04-15 11:38:19,"Hmm... Failing tests in CI doesn't seem to be related to the change, esp. since I have only added two test cases and before that CI was passing. I had some troubles with screenshots related tests before. Is it possible they are not deterministic?
",lzrski,2016-10-20 18:06:58
573,2016-04-20 04:32:34,"This change affects `.wait()` as well as they share the same template.  Would it be worth adding a `.wait()` test for promises as well?

As for the failing tests, I issued a rebuild and it appears to have succeeded.  I think your PR was after 2.3.2 was released, so the `xvfb` fix _should_ have been included.  Beyond that, I'm not sure why the tests are failing, might be worth another look if it happens again.
",rosshinkley,2016-10-20 18:06:58
573,2016-04-21 06:55:41,"Thanks for your feedback. I'll be happy to do it.

What do you think should be expected behaviour of wait when promise is returned? I guess Nightmare should wait for it to be settled.

What if it's rejected?

Also, if it's fulfilled, should we care about value?
",lzrski,2016-10-20 18:06:58
573,2016-04-23 21:02:39,"@lzrski Off the cuff, I'd say have the Nightmare process to wait for the promise to be settled, yes.

If it's rejected, I'd think it should handle it like `.evaluate()`: bubble the rejection all the way up.  A failure is a failure.  Thoughts?

As for the fulfillment value, I think it should work like how `.wait(fn)` works - the waited-for value should resolve to `true` to stop waiting.  Fortunately, you've already written the plumbing to do this.  All you _should_ need to do is write the test.
",rosshinkley,2016-10-20 18:06:58
573,2016-04-25 17:24:21,"I looked at existing test cases for `wait` and I think we have a problem here. They are not really testing anything. There are no assertions there. As long as the code doesn't throw the tests are passing even if behaviour is wrong.

Further more following test case executed in current `master`\* passes immediately instead of timing out:

<S_CODE_TOKEN>

Am I right this proves a bug in `wait`? If you agree I will file an issue.

\* i.e. before modifications introduced in this PR, but with them it's the same.
",lzrski,2016-10-20 18:06:58
573,2016-04-25 17:59:30,"> I looked at existing test cases for wait and I think we have a problem here. They are not really testing anything. There are no assertions there. 

What would be asserted?  `.wait()` doesn't have a return/resolution value (what would it return?), so there's nothing really check against.  The existing tests verify that wait eventually returns and doesn't except.  In that regard, they're safeguarding from errant behavior.  The tests _are_ missing expected failure tests, though.  I can add that to my todo if you'd like. 

> Further more following test case executed in current master passes immediately instead of timing out:

Hm, this appears to have something to do with `it.only`, and I suspect it's a problem in `mocha-generators`.  On my local instance leaving it with `it`, the 10s `waitTimeout` default is hit.
",rosshinkley,2016-10-20 18:06:58
573,2016-04-25 18:23:53,"`it.only` problem with mocha genators is confirmed.  See vdemedes/mocha-generators/pull/4.
",rosshinkley,2016-10-20 18:06:58
573,2016-04-25 18:27:00,"You are right about `.only` being a problem. I got expected results (timeout) without it as well. I discovered that you can set `.only` on describe to get reasonably fast test cycle without having this side effect. It is certainly a bug in mocha / mocha-generators though.

What could be asserted is the passing of time. Currently this case looks more like it is testing if element `a` will eventually get text content of `'A'`. The correctness of `.wait` is kind of assumed. If at some point a bug is introduced and `.wait` returns immediately no matter what the return value of callback is, the tests would not discover it.

How about something like this:

<S_CODE_TOKEN>
",lzrski,2016-10-20 18:06:58
573,2016-04-25 18:43:48,"I'm not against that sort of test.  I was thinking more on the lines of rejection testing, which would also catch the problem you've outlined.  Off-the-cuff, something like:

<S_CODE_TOKEN>
",rosshinkley,2016-10-20 18:06:58
573,2016-04-25 18:50:38,"Oh, it's a good idea to test for falsy resolution of a promise! Let me push again :)
",lzrski,2016-10-20 18:06:58
573,2016-04-25 18:51:48,":) I'd say both are reasonable additions.
",rosshinkley,2016-10-20 18:06:58
573,2016-04-26 00:41:00,"Rereading your submission, I spotted something I'm shocked I haven't (and no one else has) spotted.  Having `.wait()` support asynchronous methods _might_ not work as expected.  Consider something like:

<S_CODE_TOKEN>

... would not cause a timeout as the current version of Nightmare to timeout as written.  Wouldn't that cause `waitTimeout`/250 (the tick length) iterations of that promise to run instead of timing out after `.waitTimeout` waiting for the promise?  In fact, now `.wait()` won't time out until (`waitTimeout`/250)*execution time + `waitTimeout`.  This is not good.

Some off-the-top-of-my-head solutions:
- Some sort of watcher method that tracks time elapsed instead of tracking it internal to `.wait()`
- Split the templates for `.wait()` and `.evaluate()`, pass the timeout down to `.wait()`, and have the template source send back an error message if the timeout is hit.
- Leave it as-is.  I'm worrying too much.

Thoughts?
",rosshinkley,2016-10-20 18:06:58
573,2016-04-26 09:33:48,"Yes, when you run test like that:

<S_CODE_TOKEN>

then Nightmare's timeout is never enforced. It's Mocha that times out after 10s. I think it's a legitimate issue and we should deal with it.

Splitting the templates doesn't seem compelling. Shouldn't we have a timeout for `.evaluate` just as well as for `.wait`? It would probably prevent some hard to debug errors in applications using Nightmare. So I would go with your first idea. Just not sure where this logic would fit.
",lzrski,2016-10-20 18:06:58
573,2016-04-26 13:09:08,"It seems the timeout logic is in `waitFn` function in `actions.js`. It seems quite complex. Couldn't simple `setTimeout` be used?
",lzrski,2016-10-20 18:06:58
573,2016-04-26 14:01:16,"It occurs to me that this problem exists now.  Consider:

<S_CODE_TOKEN>

... or any long-running synchronous loop.  Same problem, slightly different cause.

> Splitting the templates doesn't seem compelling. 

I've thought about this a bit more, and realized that pushing the timeout responsibility to the evaluated client script is not a good idea as then the timeout is at the mercy of the client page.  This could lead unintended behavior if the client page clears timeouts.  (I was shooting from the hip.)

> Shouldn't we have a timeout for .evaluate just as well as for .wait?

An evaluation timeout seems like a reasonable addition, so long as the default behavior is the current behavior.

> Just not sure where this logic would fit.

I'll have to think about it, but I _think_ the most logical spot would be actually the `javascript` listener in `runner.js`.  That buys both `.wait()` and `.evaluate()` timeouts.  I'd have to play with the source to determine feasibility, though.

> Couldn't simple setTimeout be used?

Depends on what you mean.  The `.wait(fn)` and I believe `.wait(selector)` methods poll the client page every 250ms to determine if something has changed (eg, something is added, or a DOM element changes color).  I don't think you're proposing simply waiting `waitTimeout` and checking at the end, but if so, that would not be a good idea.

If you are proposing having a `setTimeout` handle the error case where `waitTimeout` has elapsed (and I believe you are, correct me if I'm wrong), that's a good idea.  That may be the best approach, it's then a matter of where to implement it.
",rosshinkley,2016-10-20 18:06:58
573,2016-06-23 17:39:54,"Anything I can do to help this along? 
",carebdayrvis,2016-10-20 18:06:58
573,2016-06-24 11:14:29,"Hey, sorry for abandoning this conversation. It's because my first child was recently born and I was quite occupied with this wonderful if somewhat difficult change in my life :)

@carebdayrvis thanks for asking. Any help is appreciated.

Back to the topic. It seams that `waitFn()` calculates the time elapsed by just adding 250ms after every tick. This way it ignores the time that the evaluation on page took. With async evaluation this can be significant. Am I understanding correctly?

This could be improved by storing the start timestamp and comparing it with current time on every tick, like that:

<S_CODE_TOKEN>

but still wouldn't work for very long running evaluations - it will only timeout after the job is done, and only if the result if negative (`false` is returned). The commit that I've just pushed demonstrates this by introducing a (failing) test case.
",lzrski,2016-10-20 18:06:58
573,2016-06-24 11:29:50,"Whoa! Everything is timing out in the CI.

🤔
",lzrski,2016-10-20 18:06:58
573,2016-06-24 12:13:38,"Ok, merged master into this PR's branch and it **fails as expected** now. Guess the configuration of the CI environment changed and some adjustments were needed in the code base as well.

What's the status of #609? It looks like our efforts may collide.
",lzrski,2016-10-20 18:06:58
573,2016-10-20 18:06:58,"Reimplented and fixed in #819.
",rosshinkley,2016-10-20 18:06:58
572,2016-04-15 09:19:47,"Hello, I'm playing with Nightmare and mostly love the experience. Thanks for this tool.

It seems like electron instance is sometimes (but not always) crushing when openDevTools option is set to `true`. I was not able to find a pattern. Here is a debug log for failing case:

<S_CODE_TOKEN>

I've been also seeing this behaviour with real use (i.e. outside the tests). Might be related to #563.
",lzrski,2016-04-23 22:19:41
572,2016-04-15 18:30:47,"@lzrski I have also been having problems with Nightmare + devtools options spontaneously flaking.  It looks like a segfault internal to Electron, just like #563.  I'll have to carve out some time to see what the details are.
",rosshinkley,2016-04-23 22:19:41
572,2016-04-15 23:30:20,"Ha! I spent all day isolating this in Election (https://github.com/electron/electron/issues/5180) and never even saw this issue :P

There’s a patch for Nightmare: #576. It just needs review.
",Mr0grog,2016-04-23 22:19:41
572,2016-04-16 15:26:35,"@Mr0grog Thank you for putting in the legwork.  Hopefully that electron issue will be resolved soon.
",rosshinkley,2016-04-23 22:19:41
572,2016-04-23 22:19:41,"Should be fixed with #588.  Closing.
",rosshinkley,2016-04-23 22:19:41
571,2016-04-15 07:37:26,"I have been battling this issue for some time now and can not seem to find a solution. When running tests with NightmareJS on mocha on the server they fail.

I have a stackoverflow question: http://stackoverflow.com/questions/36641279/running-nightmarejs-with-mocha-on-server-bamboo-agent

I though that maybe people here would know better.
",maksimluzik,2017-01-02 21:19:47
571,2016-04-15 08:16:17,"Do you get any output with the test failures at all? Any error messages Bamboo is able to report for you?

Do you have XVFB installed and running on your Bamboo server? It’s been a long time since I’ve touched anything with Bamboo and am not sure if it’s built-in. You need it to run Nightmare (well, Chromium, really) without a screen.

You might want to look into some of the stuff on issue #224. There’s a lot of back-and-forth there, but maybe some of it will be helpful to you.
",Mr0grog,2017-01-02 21:19:47
571,2016-04-15 08:16:57,"Yes, I get only that Error: timeout of 30000ms exceeded. Ensure the done() callback is being called in this test.

Thanks Mr0grog, I will check it out...
",maksimluzik,2017-01-02 21:19:47
571,2016-04-15 17:13:36,"Also, if you have XVFB installed but not running, this change in v2.3.2 _may_ make it just work for you: #565
",Mr0grog,2017-01-02 21:19:47
571,2016-04-23 23:04:12,"@mxmz- Are you still having this issue?
",rosshinkley,2017-01-02 21:19:47
571,2016-05-03 11:35:55,"Yes, but now I found out more, it seems the electron is not installed correctly? I get the following error when running:

`nightmare electron child process exited with code 127: command not found - you may not have electron installed correctly`
",maksimluzik,2017-01-02 21:19:47
571,2016-05-03 13:30:28,"Hm, that might be related to #602.
",rosshinkley,2017-01-02 21:19:47
571,2016-08-08 16:53:23,"@mxmz- Did you get this resolved?
",rosshinkley,2017-01-02 21:19:47
571,2016-08-08 17:02:44,"Hey Ross, I didnt get that resolved at the time and now do not work on the
project anymore. But if no-one else is having it maybe it can be closed for
now

On Monday, 8 August 2016, Ross Hinkley notifications@github.com wrote:

> @mxmz- https://github.com/mxmz- Did you get this resolved?
> 
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub
> https://github.com/segmentio/nightmare/issues/571#issuecomment-238298838,
> or mute the thread
> https://github.com/notifications/unsubscribe-auth/AHXcH4ynizSaTOnj_XSSgJHQ8AhHUZRtks5qd18IgaJpZM4IIE-W
> .

## 

Maksim Luzik
+358 50 574 8025
maksim.luzik@gmail.com
",maksimluzik,2017-01-02 21:19:47
570,2016-04-14 03:08:45,"Fixes #449.
",rosshinkley,2016-04-14 03:36:34
569,2016-04-14 02:58:02,"Fixes #551.
",rosshinkley,2016-04-14 03:36:23
568,2016-04-14 02:25:47,"Using a room pointed at my fork as an interim solution until Segment can fix separation of internal/external concerns.  Fixes #272.
",rosshinkley,2016-04-14 03:36:07
568,2016-04-14 15:21:04,"What is internal/external concerns? :confused: 
",fritx,2016-04-14 03:36:07
568,2016-04-14 15:43:28,"@fritx As I understand it, the internal projects at Segment are all kind of lumped together under the `segmentio` account.  To prevent possible security problems, and to avoid [permission issues](https://gitter.zendesk.com/hc/en-us/articles/200178971-You-want-write-access-on-my-private-repos-Are-you-insane-), we'll be using the room for my fork for the time being.  There is work being done at Segment to get the public and private repositories separated.  When that is complete, I'll have the account owner create the gitter room for this repository and transfer the history.  That way we won't lose anything.

Make sense?
",rosshinkley,2016-04-14 03:36:07
568,2016-04-18 02:30:20,"@rosshinkley sounds great! Awesome! :+1:
",fritx,2016-04-14 03:36:07
567,2016-04-13 15:35:03,"I love using Nightmare so far, thanks for creating it :tada: 

Here's a short script that illustrates my questions:

<S_CODE_TOKEN>
1. From this it looks like I can't just return a DOM element from the page context? If that's the case, can you explain to my why? Does it have to do with the magic of distinguishing the script's runtime from that of the page?
2. What is that weird object with the `__jsaction` property?
3. (Somewhat unrelated question; if I don't call `process.exit()` in the final callback, the script just hangs. Can you explain why?)

Thanks!
",ronichoudhury,2016-04-13 17:32:12
567,2016-04-13 16:33:02,"> From this it looks like I can't just return a DOM element from the page context? If that's the case, can you explain to my why? Does it have to do with the magic of distinguishing the script's runtime from that of the page?

`.evaluate()` executes in the page context, and I believe the return value is stripped down to primitives for transport over an inter-process channel.  If you need properties from the element, you'd be better off returning the property or returning a projection.  For example (snipped for brevity):

<S_CODE_TOKEN>

It really depends on what you're trying to accomplish, though.  Why do you need the DOM element in the calling process?

> What is that weird object with the __jsaction property?

That's a good question.  Judging from the minified JS on google, it looks like it might be a container for attaching custom actions to the image (like a Doodle, for example) directly added to the DOM element.  That's a wild guess, though.

> Somewhat unrelated question; if I don't call process.exit() in the final callback, the script just hangs. Can you explain why?

The `.end()` call is queued but not run.  Try changing:

<S_CODE_TOKEN>

to:

<S_CODE_TOKEN>

... and I think you'll have better luck.  Returning the Nightmare `then`able ensures the chain is executed.  It also might interest you to go read #546's thread on `.end()`.
",rosshinkley,2016-04-13 17:32:12
567,2016-04-13 17:31:34,"Thank you for getting back to me so quickly!

On Wed, Apr 13, 2016 at 12:33 PM Ross Hinkley notifications@github.com
wrote:

> From this it looks like I can't just return a DOM element from the page
> context? If that's the case, can you explain to my why? Does it have to do
> with the magic of distinguishing the script's runtime from that of the page?
> 
> .evaluate() executes in the page context, and I believe the return value
> is stripped down to primitives for transport over an inter-process channel.
> If you need properties from the element, you'd be better off returning the
> property or returning a projection. For example (snipped for brevity):
> 
> <S_CODE_TOKEN>
> 
> This makes sense, and confirms my vague intuition of what was happening,
> thanks.
> 
> It really depends on what you're trying to accomplish, though. Why do you
> need the DOM element in the calling process?
> 
> I don't really, I was just poking around to see what is possible. I just
> expected the DOM element to come back out with no problem, and wondered why
> it wouldn't (or whether it was supposed to, and I had done something wrong,
> etc.).

Computing a projection stored and returned in a plain JavaScript object
will be my new SOP.

> What is that weird object with the __jsaction property?
> 
> That's a good question. Judging from the minified JS on google, it looks
> like it might be a container for attaching custom actions to the image
> (like a Doodle, for example) directly added to the DOM element. That's a
> wild guess, though.
> 
> I think you're right. Googling for __jsaction links to some sort of event
> handling magic library and I assume that's what this is. I had really just
> been curious if it was coming from Nightmare somehow (good to know it's
> not).
> 
> Somewhat unrelated question; if I don't call process.exit() in the final
> callback, the script just hangs. Can you explain why?
> 
> The .end() call is queued but not run. Try changing:
> 
> .then(function (_height) {
>   height = _height
> 
>   n.end();
> })
> 
> to:
> 
> .then(function (_height) {
>   height = _height
> 
>   return n.end();
> })
> 
> ... and I think you'll have better luck. Returning the Nightmare thenable
> ensures the chain is executed.
> 
> I had to change them to `return n.end().then()` but that did the trick.
> It feels weird to call `then()` without a callback argument but... seems
> to work.

Any reason I should avoid doing it that way?

> It also might interest you to go read #546
> https://github.com/segmentio/nightmare/issues/546's thread on .end().
> 
> Ah, thanks.
",ronichoudhury,2016-04-13 17:32:12
566,2016-04-13 04:23:27,"Fixes #563.
",rosshinkley,2016-04-14 03:35:55
565,2016-04-12 22:01:21,"Changes the makefile to run tests under an `xfvb` wrapper called `bb-xvfb` under one or more the following conditions:
- `make test` is executed on CircleCI.
- `make test` is executed on a box where `xvfb` is running.
- `make test` is executed in an environment where the `HEADLESS` variable is set and not equal to `1`.

(Disclaimer: my ability with GNU Make is pitiful, any pointers on how to make the Makefile better would be appreciated.)

The wrapper enforces starting `xvfb`, waiting for an X server to be ready, followed by starting `dbus` for IPC messaging, followed by your command.  In the case of `make test`, the unit tests are executed.

The original problem is explained in [Chromium bug 309093](https://bugs.chromium.org/p/chromium/issues/detail?id=309093), and I found that the [Protractor](http://angular.github.io/protractor/#/) project (an Angular test automation suite that uses a Chrome WebDriver to run tests) already had hit this problem.  The scripts used are ~~plagiarised~~ borrowed from [angular/protractor#2419](https://github.com/angular/protractor/issues/2419#issuecomment-156527809).  (Thanks to @tullmann for providing the fix.)

This PR should fix #561.

Thoughts?
",rosshinkley,2016-04-14 03:35:39
565,2016-04-15 00:19:21,"Extra minor note here (sorry I completely missed you posting this PR, @rosshinkley): it might be nice if the two new scripts got sequestered into their own directory since they aren’t really part of the tests per se. Maybe `/scripts` or `/test/scripts`?
",Mr0grog,2016-04-14 03:35:39
565,2016-04-15 00:28:26,"@Mr0grog Ah, that's no problem.  I pulled it in because I was getting frustrated with documentation-only PRs failing in CircleCI.  Irritation-driven acceptance is a thing, right?

Kidding aside, that's not a bad call.  I'll put it on the list. :)
",rosshinkley,2016-04-14 03:35:39
565,2016-04-15 02:47:14,"> Irritation-driven acceptance is a thing, right?

Not until you write a post about it on Medium! ;)
",Mr0grog,2016-04-14 03:35:39
564,2016-04-12 16:03:19,"The output is

<S_CODE_TOKEN>

Running the same code on google.com does not produce the error.
",silenceisgolden,2016-07-08 17:24:59
564,2016-04-13 04:44:32,"At first blush, I'd say it looks like the window and/or web contents have been closed or destroyed before the actions were complete.

Could you provide a minimum test case that reproduces this behavior?
",rosshinkley,2016-07-08 17:24:59
564,2016-04-13 14:42:36,"`screen.js`

<S_CODE_TOKEN>

`package.json`

<S_CODE_TOKEN>

This is the code I'm running, see commands in package.json
",silenceisgolden,2016-07-08 17:24:59
564,2016-04-13 15:37:41,"Hm, I'm not getting the same behavior.  Your script seems to work.

I had missed the interrupt key in your original output: did Nightmare hang?  If so, are you running Nightmare headlessly under `xvfb`?
",rosshinkley,2016-07-08 17:24:59
564,2016-04-13 15:48:07,"Nightmare did hang, after 60 seconds no response.
",silenceisgolden,2016-07-08 17:24:59
564,2016-04-23 23:03:44,"@silenceisgolden Can you upgrade to 2.3.4 and see if you're still getting this issue?  I wonder if it has to do with #375 or possibly #553.
",rosshinkley,2016-07-08 17:24:59
564,2016-05-03 08:59:57,"Hey, I'm also seeing the same issue. Here's my code:

<S_CODE_TOKEN>

and the logs:

<S_CODE_TOKEN>

The command I used was `DEBUG=nightmare:*,electron:* node --harmony nightmare.js` and my `package.json`:

<S_CODE_TOKEN>
",JWMarchant,2016-07-08 17:24:59
564,2016-05-20 03:52:57,"@JWMarchant Have you found a solution? I'm seeing the same problem. It has something to do with the foreach loop. If you run the loop once you don't see the error.
",misbach,2016-07-08 17:24:59
564,2016-05-20 09:03:15,"Hi @misbach. Not yet, no, but in my other issue (#612) @rosshinkley and @Mr0grog seemed to be onto something and there is a pull request (#640) that might solve this.
",JWMarchant,2016-07-08 17:24:59
564,2016-05-21 02:02:52,"@JWMarchant @misbach does using the branch for #640 alleviate this issue for you?
",Mr0grog,2016-07-08 17:24:59
564,2016-05-27 19:58:58,"@JWMarchant @misbach @Mr0grog for what it's worth, #640 has been released with 2.5.0.
",rosshinkley,2016-07-08 17:24:59
564,2016-05-31 16:29:27,"Hi @rosshinkley & @Mr0grog,

Unfortunately it seems I'm still getting the error.

Here is my code:

<S_CODE_TOKEN>

The command I ran was: `DEBUG_FD=3 DEBUG=nightmare:* ELECTRON_ENABLE_LOGGING=true ELECTRON_ENABLE_STACK_DUMPING=true node nightmare.js 3>debug.log`.

My package.json:

<S_CODE_TOKEN>

And the log file: [https://drive.google.com/file/d/0B_3Tmwogoca7eWRYQWo5cFhfVXc/view?usp=sharing](https://drive.google.com/file/d/0B_3Tmwogoca7eWRYQWo5cFhfVXc/view?usp=sharing)
",JWMarchant,2016-07-08 17:24:59
564,2016-06-10 15:11:10,"Is there a way to make the nightmare instances throttle as a workaround (for now; I'd rather have the bug fixed)?
",catblade,2016-07-08 17:24:59
564,2016-06-10 18:48:28,"@JWMarchant as noted over on #640, does using memory partitions and/or randomly named partitions for each instance solve the problem for you? If not, we at least know you are likely experiencing a different issue than the one on #640.

To use memory partitions, construct a Nightmare instance like:

<S_CODE_TOKEN>

To get a unique partition every time, do something like:

<S_CODE_TOKEN>
",Mr0grog,2016-07-08 17:24:59
564,2016-06-10 18:52:49,"I think it’s also worth noting that, even if there aren’t actual errors, opening too many windows at once will inevitably make things really really slow, no matter what. In the last example, the queue is explicitly being set to open 50 windows at a time. I don’t think anyone would expect opening 50 tabs and navigating them all to new URLs at the same exact time would work very well on any computer. On a lot of computers, just having 50 Chrome tabs open, let alone having them all loading a new page simultaneously, can be a heavy load. There are still reasonable limits here.

(And I should also note that 50 Nightmare windows is _way_ more intense on your system than just 50 tabs in Chrome.)
",Mr0grog,2016-07-08 17:24:59
564,2016-06-12 03:15:26,"I'll try it out and leave feedback.  I'm intentionally using a pool of instances and topping out at 5, so it's quite fast; just I get this error every 10-20 minutes of continual traffic.  It might be useful to note that I am not using any nightmare instance more than 50 times.  So, recommendations are basically upgrade to 2.5.0 and then try partitions.  I'll check back soon.  Thank you.
",catblade,2016-07-08 17:24:59
564,2016-06-12 03:16:42,"Also, I am not navigating to more than one URL at a time, so that isn't the issue.
",catblade,2016-07-08 17:24:59
564,2016-06-13 19:29:56,"Upgrade did not work.  Question:  So I'm running independent gotos, but when I run a goto, does nightmare hold something open?  Is there a way to close a tab?  Or are we expected to make new nightmares to close up that tab?  I assumed that when a goto was finished, it was no longer held open.  Is this true?
",catblade,2016-07-08 17:24:59
564,2016-06-13 20:37:29,"Nightmare doesn’t really have “tabs,” per se. Every Nightmare instance corresponds to a new browser window (those windows don’t have sub-windows or tabs or anything). Calling `end()` on the instance will cause the window to be closed at the end of the current queue of actions. After that, the window is pretty much unusable (but you might not get very clear errors if you do try and use it). If you don’t call `end()`, the window is left open in whatever its last state was and you can call more actions on it.

In that sense, I guess you might say a window is “held open” unless you explicitly call `end()`. It’s also possible to wind up running several actions simultaneously in Nightmare window, which might cause you some trouble if that’s not what you were expecting (and is likely if you are pooling instances). For example:

<S_CODE_TOKEN>

This will try and navigate to google and yahoo simultaneously. In newer versions of nightmare, I _think_ the navigation to yahoo will cause an error for the google navigation and the first series of actions will fail (in older versions of nightmare, they'd both succeed and both of the typing actions would try and work on the same page at the same time and you would not enjoy the results).

When pooling instances, the above could easily cause big problems. You might want to:
- Check the `running` property to see if a queue of actions is currently executing on the instance. If it’s true, the instance isn’t yet ready to be re-used.
- Check the `ended` property to see if the nightmare window is still open and usable. If it’s true, you should throw the instance out of the pool and never try to use it again.
",Mr0grog,2016-07-08 17:24:59
564,2016-06-14 16:28:20,"Thank you @Mr0grog.  This is amazingly helpful in helping me make sure I'm properly cleaning everything up.  I've glazed through the nightmare code, but methinks I need to spend a good while staring at it as it is non-trivial code.

Partitions did not fix it.

BUT when I inspect the .running flag on the nightmares, it is sometimes still true.  I'm doing each goto with something like this code snippet:

<S_CODE_TOKEN>

So currently I'm just punting on the nightmare pool request until it is no longer running (and making a new nightmare in cases where I try to reach it too many times while it is still running).  

Do the promises or the .then not force the nightmare to finish running?  Is there a way to do so without ending the instance?  When I refuse to use a nightmare instance when I get a true for ""running"", it ceases to crash, so I suspect the .then is a lie?  Is there some other way I'm unaware of to force the goto to finish?
",catblade,2016-07-08 17:24:59
564,2016-06-14 17:47:43,"> Do the promises or the .then not force the nightmare to finish running?

They do, but not synchronously. If you code is something like:

<S_CODE_TOKEN>

Then you’ll probably wind up with your full pool used up and in a `running` state halfway through the loop—the loop is synchronous, but the running of the nightmare queues is not. Instead, you might do something like:

<S_CODE_TOKEN>

That way, you’re not trying to grab an instance from the pool until one of the instances has completed. There are definitely more elegant ways to write the above, but hopefully it gets the general idea across. Incidentally, this is basically the same thing @JWMarchant was doing above by using:

<S_CODE_TOKEN>

(Where `50` would be the pool size. That param in `async` is the maximum number of simultaneous runs, which you’d want to be the size of your pool.)
",Mr0grog,2016-07-08 17:24:59
564,2016-06-14 18:51:58,"This is fantastic.  I moved the return of the nightmare instance code into the .then function and it is fine now.  It seems slower, but I guess that is to be expected when things weren't fully cleaned up before we blundered onto the next thing.

Thank you.
",catblade,2016-07-08 17:24:59
564,2016-07-08 17:24:59,"#640 is merged, #612 is closed, and it seems like @catblade's issue is resolved, so I'm going to go ahead and close this issue.
",rosshinkley,2016-07-08 17:24:59
563,2016-04-12 00:35:41,"Hi there,

I was trying to get openDevTools to work for debugging, but as soon as it opens the electron instance, it hangs the operation and exits after a few seconds. Is this an issue, since the openDevTools was added recently and I couldn't find any tests to check if I am doing this correctly.

Here is the debug output:

<S_CODE_TOKEN>
",itsyogesh,2016-04-14 03:35:55
563,2016-04-12 14:35:25,"Hm, that's one of mine, and I should have added unit tests for it.  I'll add that to my list.

What bothers me about your particular case is the ""exited with code null"" bit: The only time that happens (at least that I'm aware of) is when a segmentation fault occurs in Electron.  Could you provide a minimum case that reproduces the issue?
",rosshinkley,2016-04-14 03:35:55
563,2016-04-13 03:26:40,"Suspicion confirmed, this is a segfault internal to Electron that appears to happen with the version of Electron Nightmare is currently on.  It does not happen with the current version of `electron-prebuilt` (0.37.5 at the time of this comment).  Curiously, electron/electron#4103 is the closest problem I can find in the repository.  It's not exactly the same thing, but the symptoms are very similar.

At any rate, I'll put together a PR with the requested tests and a version bump.
",rosshinkley,2016-04-14 03:35:55
563,2016-04-14 07:32:54,"In the latest version, `webPreferences` setting on nightmare object causing this problem for me: electron instance is crashing immediately.
",lunow,2016-04-14 03:35:55
563,2016-04-14 17:02:29,"@lunow if that's true, it's likely got a different cause.  Could you open a new issue with a minimal reproduction case?
",rosshinkley,2016-04-14 03:35:55
562,2016-04-11 10:13:19,"hey, 

I get constant warning about memory limits - when I edit the code in IPC.js to prevent the warning and set the level to max - my program constantly crashes due to node reaching max memory limit :( 

Is there something specific you need to keep in mind to prevent memory leakage problem. 
",JoyKrishnaMondal,2016-07-09 16:50:03
562,2016-04-12 16:25:27,"Are you creating a lot of separate instances of the `Nightmare` object? If so, the easiest thing you can do now is just make a few and re-use them. Additionally, version 2.3.1 (released yesterday) has a patch that should significantly reduce memory usage.

Given the notes in #561, I think it’s likely that Nightmare will grow some automatic methods for reducing memory usage, but for now, the best approach is to manage a pool of Nightmare instances yourself so as not to create too many and allocate a lot of memory.
",Mr0grog,2016-07-09 16:50:03
562,2016-04-13 07:51:56,"I do only one 

<S_CODE_TOKEN>

and then reuse browser. The only thing I would ask is 
when do you call ? 

<S_CODE_TOKEN>

I have a lot of code that looks like this 

<S_CODE_TOKEN>

and then 

<S_CODE_TOKEN>

or should I just use a for loop ? 

<S_CODE_TOKEN>
",JoyKrishnaMondal,2016-07-09 16:50:03
562,2016-04-15 07:32:18,"> The only thing I would ask is when do you call `end()`?

`end()` totally shuts down the browser, so you should only call it when you’re finished with everything. By itself, that won’t actually do anything—you have to call `run()` or `then()` afterwards, like so:

<S_CODE_TOKEN>

> I have a lot of code that looks like this
> 
> <S_CODE_TOKEN>

Is this actually the code that you’re running and is it working? It looks like you’re passing the _result_ of your `then` function to `run()` rather than your `then` function itself, which should trigger an error when nightmare finishes running all your actions.

> or should I just use a for loop?

A plain for loop would not be a good idea, since all of Nightmare’s operations are asynchronous. You might want to read up on this article about loops with Nightmare: https://github.com/rosshinkley/nightmare-examples/blob/master/docs/common-pitfalls/async-operations-loops.md
",Mr0grog,2016-07-09 16:50:03
562,2016-07-09 16:50:03,"Closing for age and it looks like the outstanding questions have been answered.  If you are still having problems or have additional questions, feel free to open a new issue.
",rosshinkley,2016-07-09 16:50:03
561,2016-04-11 05:36:50,"I wasn't sure where to put this - a new issue felt the most logical.

Digging into the test failures that happen intermittently, it looks like the behavior that causes the tests to fail also will present in regular applications (albeit seemingly not as often).  Consider the following (extremely contrived) case:

<S_CODE_TOKEN>

This example creates a _lot_ of instance churn, causing Electron instances to be spun up and killed, much like how the unit test suite works.  After running many times (I've had it happen in as few as 8 and as many as ~450 iterations, seems to be luck of the draw), Nightmare will hang.  In a test context, this will cause Mocha to timeout, which at least partially explains the behavior with the intermittent test failures.

The hang appears to happen when a new `BrowserWindow` instance is created.  Enabling `ELECTRON_ENABLE_LOGGING` and `ELECTRON_ENABLE_STACK_DUMPING` doesn't yield useful information.  Piping Electron output directly to the parent process `std*` buffers also doesn't yield anything terribly interesting.

What I'd like to try next:
1. Try to get `node-inspector` working with Electron.  So far, my attempts to get a debugger attached have been met with limited success.
2. Create `BrowserWindow` churn natively under Electron to see if the behavior can be recreated internally to Electron.
3. If that doesn't hang, I'll take a look at creating browser churn with a simplified node process -> electron process.  That should help narrow things down.
4.  If all else fails, I'll try to make a custom Electron build to try and figure out what's going on.

I'm open to suggestions and ideas on all points.

---

Some other peculiar (possibly unrelated?) things that cropped up as a result:
1. The event forwarding method _always_ throws an error after the `.kill()` call is made because the window is destroyed.  I'll be pulling together a small bugfix for that as time permits.  (I don't think it has any bearing on how the rest of the project behaves, but it certainly can't hurt to fix.)
2. The `close` event case for a clean exit never happens unless `win.close` or `win.destroy` are manually called.  In other words, you'll never see [`electron child process exited with code 0: success!`](https://github.com/segmentio/nightmare/blob/master/lib/nightmare.js#L70-L76).
",rosshinkley,2016-04-14 03:35:39
561,2016-04-11 19:42:34,"Quick update: I was going through the CircleCI documents to make sure the above wasn't caused by something silly.  Per the [documentation](https://circleci.com/docs/environment/), CircleCI uses `xvfb`, same as the chroot I was using to recreate the issues on.  For grins, I fired up `xfce` on that chroot to run it under a ""real"" X client, and could not recreate the issue.  It works the same as on my main Ubuntu development box, and it seems to work on pretty much everyone's machine.

To that end, I think this might be `xvfb`-specific.  Anyone else having hanging problems with `xvfb`?
",rosshinkley,2016-04-14 03:35:39
561,2016-04-12 14:17:39,"Now that I know what to look for, if I'm reading this correctly, the Chromium team [has already hit this](https://bugs.chromium.org/p/chromium/issues/detail?id=309093).  It appears to be an issue with forking and a memory allocation deadlock in one of the underlying libraries.

I'm going to take a swing at a workaround.
",rosshinkley,2016-04-14 03:35:39
561,2016-04-12 16:17:39,"👍 to spending some time researching this.

That said, I think it’s probably a given that, since every instantiation of `Nightmare()` creates at _least_ two new processes, that’s going to cause significant overhead. Regardless of deeper potential issues in Electron, it will be better to only create one electron process that handles a collection of windows. We could further pool those windows—when someone calls `end()` on an instance, that’s a signal that we can reuse a window.

Given that Chromium has also hit this, if we add a pooling mechanism as above, that also gives us a way to cap the number of Nightmare instances running simultaneously. We can just queue up the rest to run when a window becomes available.
",Mr0grog,2016-04-14 03:35:39
561,2016-04-12 18:25:01,"Consider the time spent. :)

I've got a fix working locally: I can churn through hundreds of instances and finish without a problem - a huge improvement over the average failure point of a dozen or two.  I also still need to verify CircleCI will use my patch to execute tests.  Once I'm reasonably confident that's working, I'll open a PR for review.

By the by, the fix opens up an avenue of problems having to do with #502.  That's _probably_ a topic best left for that issue or for the eventual PR, and I'll be doing a writeup in one of those spots at some point.

This isn't _necessarily_ a resource problem.  Having more memory or a faster CPU would likely mask the problem, but wouldn't eliminate it entirely.  It has more to do with the underpinnings of `xvfb`, how resources are requested, and how IPC messaging is done internally to `xvfb` and `glib` (at least, that's my tentative understanding).

_(Warning: this thread is about to go offtopic.)_ 

That said, I _completely_ agree with you: spinning up multiple Electron instances gets resource-intensive in a hurry.  I also agree that Nightmare should probably be what amounts to a `BrowserWindow` manager - at least, I think that's the kind of direction you're heading in.  (I also seem to remember you making a similar comment elsewhere, and can't find it offhand now.  It's been something I've wanted to talk to you about since I saw that.)

That approach has a couple of small hurdles:  
- The first `BrowserWindow` Electron opens has a special property where if you close it, the whole process dies.  I don't know if this ""master window"" property is transferable (nor do I know what it's appropriately called).  The Electron process + first browser window would likely need to be protected until `.end()` is called, so that's easy enough to sidestep.  
- Whatever the approach, I would argue it would need to be compatible with the current test suite.  
- Constructing Nightmare-compatible `BrowserWindow`s would probably need to be broken out into its own class, somewhat similar to how you implemented `FrameManager`, and a similar class in the calling process will probably need to be constructed.  
- I'm betting you had parallel execution in mind as well, which makes the problems in #493 all the worse.

I'd also have a couple of questions:
- Do you think Nightmare should return back Nightmare-side instances of `BrowserWindow` (or `NightmareBrowserWindow`?) to perform tasks?  I'm asking to try to get my head around parallel execution.
- What's an acceptable maximum of `BrowserWindow`s that can be open?  How does that memory footprint differ?

That's all I can think of off the top of my head.  I'm willing to dig into the above and start working through some of the implementation bits as time permits.

Thoughts?
",rosshinkley,2016-04-14 03:35:39
561,2016-04-12 18:32:30,"PS: the comment I couldn't find?  I just found. _Of course_ the second I say I can't find it, I happen to spot it.  It's buried in the [middle of #553](https://github.com/segmentio/nightmare/pull/553#issuecomment-207080667).
",rosshinkley,2016-04-14 03:35:39
561,2016-04-13 08:21:09,"> the fix opens up an avenue of problems having to do with #502

Iiiinteresting. All 👂👂👂

> This isn't necessarily a resource problem. Having more memory or a faster CPU would likely mask the problem, but wouldn't eliminate it entirely.

Oh, totally; didn’t mean to imply it was! Just that our heavy resource use probably exacerbates 😬 

> I also agree that Nightmare should probably be what amounts to a BrowserWindow manager - at least, I think that's the kind of direction you're heading in.

Yup.

> The first BrowserWindow Electron opens has a special property where if you close it, the whole process dies.

Well, this is kind of funny. It turns out that, if you use the command line to launch a given app, e.g. `electron path/to/app`, instead of bundling everything up with Electron for distribution, it uses its “default_app” as a sort of launcher (I had no idea this was how it worked). Interestingly, [the default_app installs a handler for the `window-all-closed` event](https://github.com/electron/electron/blob/f403950503eb82bcfa230b13a909572beff75fc0/default_app/main.js#L41) that shuts down the application!

Due to the way it’s written, the solution is to simply add our own `window-all-closed` event. So long as there’s more than one listener (the default_app’s and ours), the default_app one doesn’t do anything. Who knew? (Not I.)

> Whatever the approach, I would argue it would need to be compatible with the current test suite.

Insofar as the test suite confines itself to public methods/properties on `Nightmare` and instances (pretty sure it does), I agree. I’m not totally sure we need to make sure things like `nightmareInstance.child` continues to exist and work the same, though.

> I'm betting you had parallel execution in mind as well, which makes the problems in #493 all the worse.

Indeed :D    I have a private laundry list of things I’d love to see changed in Nightmare, but the only one that is a Big Deal™ (aka the one that gives me that good old “is this a jenga tower” feel [I kid, but still]) is that one. However! I think that issue is _largely_ independent of this one (save that care should be taken not to make it worse).

> Do you think Nightmare should return back Nightmare-side instances of BrowserWindow (or NightmareBrowserWindow?) to perform tasks?

No. I don’t think switching from “N electrons, 1 window” to “1 electron, N windows” should have any externally visible impact on the API (save for private, non-documented bits). The rule that an instance of `Nightmare` == a window in Electron, however it’s accomplished, is pretty simple and straightforward. (If I’m missing what you’re getting at here, let me know.)

> What's an acceptable maximum of BrowserWindows that can be open?

No idea, but:
- 10 seems like a maybe reasonable place to start ¯\_(ツ)_/¯
- This should probably be a constant/global so it’s easy to adjust in future releases or as the work on this goes on
- This should probably be configurable by users at runtime for beefy or light-weight machines (e.g. `Nightmare.setPoolSize(1000)` if you like to live dangerously)
- A fancypants implementation might look at `os.totalmem()` + `os.freemem()` + `electron.screen` and decide for itself, but even then you are likely dealing with some wobbly heuristics.

Back in #479 I wrote:

> For reference, a really simple nightmare session takes 20-30 MB of RAM on my machine, but once a screenshot is taken, that can boost to as high as 360 MB.

The current screenshot API should be much lighter, but I’d guesstimate ~50 MB per window on my machine (13"" retina MacBook Pro, 64 bit). That figure will definitely vary across hardware and OS.
",Mr0grog,2016-04-14 03:35:39
561,2016-04-13 15:00:55,"> Iiiinteresting. All :ear::ear::ear:

TL;DR: Make isn't the friendliest thing to Windows.  There's a night sunk into VMs and tinkering that I haven't had time to do yet.

> Oh, totally; didn’t mean to imply it was! Just that our heavy resource use probably exacerbates :grimacing:

It aaaaabsolutely does.  The results I get under chroot on my Chromebook (4gb of ram with a Tegra K1 processor) vs my main development box (16gb/i5) are pretty different. :)

> Interestingly, the default_app installs a handler for the window-all-closed event that shuts down the application!
> Who knew? (Not I.)

Hhhhhuh.  The more you know. :stars: 

I had seen the event before, but I hadn't realized that Electron internally deals with it in that way, and the documentation is ... misleading?  Thanks for the education, and good eye!

> Insofar as the test suite confines itself to public methods/properties on Nightmare and instances (pretty sure it does), I agree.

I think the only time internal methods - and specifically, `evaluate_now` - are used is during the custom action battery.

> I’m not totally sure we need to make sure things like nightmareInstance.child continues to exist and work the same, though.

Oooh, I'm not sure I agree.  `child` may take on a different meaning (eg, a Nightmare `BrowserWindow` could be attached to an Electron `BrowserWindow`, and I'll get to more on that in a minute).

> However! I think [#493] is largely independent of this one (save that care should be taken not to make it worse).

True.  I have a foul habit of ""since we're going to have this down to the studs anyway, why not also do [insert stupidly complex thing]?""  Reorganizing how Nightmare and Electron interact seems like a good time to think about simultaneous calls/multiple runs/handling messaging spaghetti.

> No. I don’t think switching from “N electrons, 1 window” to “1 electron, N windows” should have any externally visible impact on the API (save for private, non-documented bits). The rule that an instance of Nightmare == a window in Electron, however it’s accomplished, is pretty simple and straightforward. (If I’m missing what you’re getting at here, let me know.)

Mmmm, don't know that I agree.  The ""window manager"" would need to expose methods for listing, retrieving, creating, and closing windows.  One of the biggest side perks to doing this is being able to handle pages that open new tabs/windows: when a new window is created from the browser, it could then be created with the Nightmare sugar and registered with the window manager.

I guess my point is that windows are not just created by users, they can also be created by the site, and both cases should probably be handled.

> 10 seems like a maybe reasonable place to start ¯_(ツ)_/¯

Deathly curious what the memory footprint difference is.  I'd like to put together something about that, if nothing else for justifying the change.

> This should probably be a constant/global so it’s easy to adjust in future releases or as the work on this goes on

Strongly agree.

> This should probably be configurable by users at runtime for beefy or light-weight machines (e.g. Nightmare.setPoolSize(1000) if you like to live dangerously)

I _also_ like to live dangerously.

> A fancypants implementation might look at os.totalmem() + os.freemem() + electron.screen and decide for itself, but even then you are likely dealing with some wobbly heuristics.

Not that I'm against a high-fallutin' implementation like this, but I worry that then you're at the whim and mercy of the OS and may introduce cross-platform problems that are hard to debug/track down.  At least for now, I'm in favor of keeping it simple.

> Back in #479 I wrote:
> 
> > For reference, a really simple nightmare session takes 20-30 MB of RAM on my machine, but once a screenshot is taken, that can boost to as high as 360 MB.
> 
> The current screenshot API should be much lighter, but I’d guesstimate **~50 MB per window** on my machine (13"" retina MacBook Pro, 64 bit). That figure will definitely vary across hardware and OS.

(Emphasis mine.)  Per `BrowserWindow` or per Electron instance?
",rosshinkley,2016-04-14 03:35:39
561,2016-04-13 16:07:52,"> Electron internally deals with it in that way, and the documentation is ... misleading?

Well, if I understand it right, that all only applies for “non-bundled” stuff. So if your electron app is sitting inside electron’s resources folder (as it is when a standalone app is all bundled up for distribution), `default_app` doesn’t get loaded and everything matches the docs. Regardless, that doesn’t matter for us.

> The ""window manager"" would need to expose methods for listing, retrieving, creating, and closing windows.

I guess I was thinking this would be the role of some component that is entirely private—a new nightmare instance would ask that manager for a communications channel to a window when created and would close the channel/tell the manager it’s done when `end`-ed.

> One of the biggest side perks to doing this is being able to handle pages that open new tabs/windows: when a new window is created from the browser, it could then be created with the Nightmare sugar and registered with the window manager.

Ah, hadn’t thought about child windows. This would still necessarily require new API for interacting with those child windows, though, right? Or I guess you could have an event for `new-child-window` or something that includes as a parameter a wrapper for the window. That could definitely be a `Nightmare` instance, though. (_Seems_ like it would be the nicest way to do it for users at first blush.)

> Deathly curious what the memory footprint difference is. I'd like to put together something about that, if nothing else for justifying the change.

\+ 💯 

> I worry that [with complicated heuristics] you're at the whim and mercy of the OS and may introduce cross-platform problems that are hard to debug/track down. At least for now, I'm in favor of keeping it simple.

Toooootally. Said much more clearly than my “wobbly heuristics” note :P

> > I’d guesstimate ~50 MB per window on my machine (13"" retina MacBook Pro, 64 bit). That figure will definitely vary across hardware and OS.
> 
> Per BrowserWindow or per Electron instance?

I have totally forgotten! I _think_ my “20-30 MB normally” and “50-300 MB screenshotting” estimates were a combined 1 Electron + 1 window, so I guess each window would be a bit lighter (but I’m also guessing not a lot—the electron app process is probably relatively light). I also don’t remember whether this was with an essentially blank page or something fairly busy like yahoo.com.
",Mr0grog,2016-04-14 03:35:39
561,2016-04-13 16:21:52,"> Reorganizing how Nightmare and Electron interact seems like a good time to think about simultaneous calls/multiple runs/handling messaging spaghetti.

Not totally disagreeing. I think there are really two different things tied up in #493—one is about pure safety (making sure that two simultaneous attempts to perform a routine in electron’s processes don’t wind up with crossed wires), which fits in more tightly with the work we’re talking about here. The other is whether the overall behavior/API should change to make those kinds of potential crossed-wire situations less likely to occur. That one is a big enough deal all on its own that I think it’s worth separating out.

Both of those changes and this one are all potentially high impact, though. Ideally this process/window management work won’t have any API impact for users, but I suspect there’s a reasonable likelihood it might change the story for plugins. Whatever we do with IPC will almost undoubtedly affect both plugins and end-user usage. It might be worth _releasing_ all these changes together as a major revision given they all might be breaking changes.
",Mr0grog,2016-04-14 03:35:39
560,2016-04-09 00:50:02,,djdavidi,2016-04-11 17:52:18
559,2016-04-08 21:21:23,"When I used nightmare and a mobile useragent, some of the clickable buttons went away and I was trying to fire an enter keypress using `.evaluate`. However, using `.type('document', '\u000d')` is much simpler and easier to fit into the flow of code. Would that be something that I could add to the documentation? Thanks.
",djdavidi,2016-04-12 17:31:41
559,2016-04-08 21:38:33,"@djdavidi I'd be open to including a bit about unicode characters.
",rosshinkley,2016-04-12 17:31:41
559,2016-04-12 16:30:05,"Is this solved by #560? If so, someone should close this.
",Mr0grog,2016-04-12 17:31:41
559,2016-04-12 17:31:41,"@Mr0grog I meant to do that yesterday after 2.3.1 and got sidetracked.  Closing.
",rosshinkley,2016-04-12 17:31:41
558,2016-04-08 17:48:51,"Occasionally because of bugs in Electron such as https://github.com/electron/electron/issues/4733 I run into errors that look like the following:

`Nightmare runner error:`
`TypeError: Cannot read property 'delete' of undefined at ObjectsRegistry.remove (/app/node_modules/electron-prebuilt/dist/resources/electron.asar/browser/objects-registry.js:53:31) at EventEmitter.<anonymous> (/app/node_modules/electron-prebuilt/dist/resources/electron.asar/browser/rpc-server.js:344:26) at emitTwo (events.js:100:13) at EventEmitter.emit (events.js:185:7) at EventEmitter.<anonymous> (/app/node_modules/electron-prebuilt/dist/resources/electron.asar/browser/api/web-contents.js:128:25) at emitTwo (events.js:100:13) at EventEmitter.emit (events.js:185:7)`

These seem to hang Nightmare - they log an error to the console and end the child process. However, I'd like to be able to catch such errors in my code that is using Nightmare. Is there a good way to do this?
",yoz,2016-05-24 17:00:31
558,2016-04-08 19:44:15,"How are you getting these errors?  Are you using custom plugins?

By the time the exception makes it to the `uncaughtException` handler, it's too late.  I don't think you're inside of the Nightmare chain scope anymore, and as such couldn't handle it in such a way to continue execution.
",rosshinkley,2016-05-24 17:00:31
558,2016-04-11 17:25:50,"I am using custom actions I've defined, but I'm fairly confident it was due to the bug in Electron that I linked. (If ""delete"" is confusing to you, it is confusing to me too, because my custom action doesn't involve deletion; it is basically like `nightmare.insert(''); nightmare.insert(x);`)

I see that in Nightmare's handler there's a call to `process.exit(1)` when this happens - what if I don't want to end the parent process?
",yoz,2016-05-24 17:00:31
558,2016-04-12 16:36:20,"> I see that in Nightmare's handler there's a call to process.exit(1) when this happens - what if I don't want to end the parent process?

So… it would be a _very_ bad idea not to exit the process at this point. Electron’s underlying IPC machinery is now in a bad state, so further communication between the your node.js process and the “browser” is not reliable. Worse, the underlying issue is a memory management problem on the C++ side, which means you are prone to crashing if you keep running.

If indeed https://github.com/electron/electron/issues/4733 is the problem, it’s been fixed. When Nightmare next updates its Electron dependency, this should be solved. (You can update the version of Electron you’re using yourself, too. The current release should have the fix for this issue.)
",Mr0grog,2016-05-24 17:00:31
558,2016-04-18 17:18:52,"https://github.com/electron/electron/issues/4733 was reopened, so I think that's still the underlying bug I'm trying to handle. (I had upgraded my version of electron-prebuilt and was still seeing this.)
",yoz,2016-05-24 17:00:31
558,2016-04-18 17:51:26,"@yoz ah, that’s frustrating. It sounds like the issues in Electron are fairly thorny.

I get wanting to be able to continue on after Nightmare fails, but I’m pretty sure Nightmare really does not handle the underlying Electron process failing very gracefully. A lot more would need to be done to fix that if you want it to be safe to not just exit the process when Electron fails. It would probably be a good improvement if you want to work on it, though!
",Mr0grog,2016-05-24 17:00:31
558,2016-04-18 18:01:08,"@Mr0grog yes, unfortunately it's a pretty difficult bug to reproduce. I would look into it if I had an easier time with that. But I think the easiest for me is to downgrade my version of electron-prebuilt to 0.36.8.
",yoz,2016-05-24 17:00:31
558,2016-04-22 08:01:57,":+1:
",bahlo,2016-05-24 17:00:31
558,2016-04-23 22:59:00,"@yoz electron/electron#4733 was fixed/reclosed in electron/electron#5233, which should be in the release of `electron-prebuilt` Nightmare is on as of 2.3.4.  Can you upgrade and see if this issue still exists?
",rosshinkley,2016-05-24 17:00:31
558,2016-05-24 17:00:31,"Closing due to inactivity.  If this is still an issue, feel free to reopen/open a new issue.
",rosshinkley,2016-05-24 17:00:31
558,2017-03-08 11:06:33,"Hi !
How can i catch the 
<S_CODE_TOKEN>
To log it?

I'm on nightmare 2.10.0 / electron 1.4.4.
It's happening since 2-3 days after executing a script when i don't end nightmare and i let the window open. Very weird...
At least i would like to be able to send the error to sentry.
Thanks",GautierT,2016-05-24 17:00:31
558,2017-03-10 06:05:14, +1,Kinzi,2016-05-24 17:00:31
558,2017-03-10 20:14:37,"@GautierT I think this is in reference to rosshinkley/nightmare-download-manager#14, picking up this conversation there.",rosshinkley,2016-05-24 17:00:31
557,2016-04-08 11:11:09,"I'm trying to scrape a webpage with nightmareJS and got stuck.
In my program i pass to the function an array on links which i need to the same data from all of them 
The list can be very long (over 60) and if i try to do a

async.each(Links, function (url, callback) {
    var nightmare = Nightmare(size);
    ...
}
Only the first couple few instances actually return a value , others just hang up and wont load (blank page).When i try to do only three it work perfectly. 
How can i fix it? How can i redistribute the work , for example three in parallel and only when all done it will do the next set? One more thought maybe use the same instance and repeat the steps for all the links?
",AaronTrazona,2016-04-28 01:12:15
557,2016-04-08 20:48:11,"I suspect you're hitting a device limitation.  Electron is kind of resource-intensive, and even on the best of machines, I suspect that the number of concurrent instances you can run is pretty low.

Judging from your source, it looks like you're using [caolan/async](https://github.com/caolan/async), yes?  Why not use `eachSeries` instead of `each`?  Do your operations need to run in parallel?

If you're looking at trying to throttle to a specified number of instances, would [`async.cargo`](https://github.com/caolan/async#cargo) get you close to what you're after?  An off-the-cuff example:

<S_CODE_TOKEN>
",rosshinkley,2016-04-28 01:12:15
557,2016-04-23 22:52:38,"@AaronTrazona Are you still having this problem?
",rosshinkley,2016-04-28 01:12:15
557,2016-04-28 01:12:15,"@rosshinkley  sorry, im busy lately thanks im good.
",AaronTrazona,2016-04-28 01:12:15
557,2016-12-23 10:12:32,"@AaronTrazona: how do you do, in order to make it work?",flexbrane,2016-04-28 01:12:15
557,2016-12-23 10:19:52,"Sorry, problem solved mostly thanks to #104: ""`new Nightmare()`"".

I was calling my function that is located in another file (with `module.exports`). And my `Nightmare` variable was defined on the very begining of my file and not **in the function**.

So, on each loop, when my *master function* call my `Nightmare` function, the same variable was used.

Now, I create the `Nightmare` variable **inside** the function, in order to create a new instance on each function call.",flexbrane,2016-04-28 01:12:15
556,2016-04-07 06:10:33,"Turns out I missed a condition on event subscription in Frame Manager that caused it to always automatically subscribe to frames upon instantiation, dramatically increasing overhead. This should fix that.

(Noticed while working on #553; I think this could be causing the slowdowns and test timeouts there, or at least exacerbating them.)
",Mr0grog,2016-04-11 17:52:11
555,2016-04-06 15:10:40,"Hey guys, thank you for this library, I'm really loving it (especially in comparison with the PhantomJS backend).

I'm creating screenshots of a page with multiple views with the following code.
The views are changed in the `nextView` function.

<S_CODE_TOKEN>

This works great on most pages, but it hangs on a specific page (I'm sorry I can't disclose the contents).
Here is a part of the log:

<S_CODE_TOKEN>

<S_CODE_TOKEN>

As you can see, the screenshot before renders nicely, but the last one does not seem to do anything.
The [`requestFrame` function](https://github.com/segmentio/nightmare/blob/a215dd68fe3134d243a81af1723729474c0d4f85/lib/frame-manager.js#L52) doesn't seem to call its callback.

Do you have any tips for me to debug this? Setting a `waitTimeout` doesn't help since I'm not waiting. 

**Update:** Okay, I tried again with `show: yes` and manually triggered a re-render and it worked. Maybe I'll try to click on something to trigger that render manually every time.

**Update 2:** Since it's only waiting for change after the `screenshot` action, calling `scrollTo` or `click` before doesn't help.

**Update 3:** I tested it and the callback doesn't get called in the `requestFrame` function for this screenshot (all the other shots are working fine).

**Update  4:** I'm just calling the callback directly in `requestFrame` which is bad, but works for me. Gonna leave this issue open though.
",bahlo,
555,2016-04-07 21:51:52,"At first blush, I’d guess you are likely running into this issue: https://github.com/segmentio/nightmare/issues/493 as a result of using a synchronous `for` loop, which will generally not play well with nightmare, where everything is asynchronous.

For a good primer on managing this, you might want to look into any of:
https://github.com/rosshinkley/nightmare-examples/blob/master/docs/common-pitfalls/async-operations-loops.md
https://github.com/segmentio/nightmare/issues/533
https://github.com/segmentio/nightmare/issues/522

Where there are some good explanations. If that doesn’t help, post back here. If possible, too, try and come up with a simplified test case you can share. That makes understanding the details of the problem much easier.
",Mr0grog,
555,2016-04-11 05:34:26,"@bahlo I had some time today and attempted to reproduce your issue, but could not. Here’s what I tried:

<S_CODE_TOKEN>

(Also, upon looking at this again, I realize you haven’t stumbled over the looping problem at all because you don’t call `then()` in the loop. Sorry for my not-so-careful reading there.)

Anyway, in my very simple and generalized case, everything seems to work. The main reason screenshotting might hang in the way you describe is that when `screenshot` attempts to trigger a new frame render in chromium, it fails to actually change the render tree in the browser window. The `triggerRender` function is what does that—mainly by moving around a little 1x1 transparent `div` on screen. It could be that something in your page is causing that div to wind up offscreen somehow.

**The first thing I’d try is setting `position: fixed` instead of `absolute` on line 78 of `frame-manager.js`.**

If that doesn’t help, I imagine it’s going to be something particular with the page you are attempting to render (maybe something your `nextView` function does). If that doesn’t help, maybe you could share the code you’re working with personally via private repo, private gist, or sending a zip?

Otherwise, I’m not sure what to tell you other than to answer any question you have about how and why the screenshotting code works the way it does (which I’m happy to do; it just means I can’t really help you investigate directly).
",Mr0grog,
555,2016-04-11 09:11:50,"@Mr0grog Thank you so much for this. I will try and report back :+1:
",bahlo,
555,2016-04-22 09:32:46,"Okay, I tried `position: fixed`, but that didn't fix the problem. 

`nextView` just calls `window._someObj.nextView();`.
",bahlo,
555,2016-04-24 03:53:44,"Hmmmm, you might also try setting `z-index: 2147483647` and/or `transform: translate3d(0, 0, 0)`.

Knowing that `nextView` calls `window._someObj.nextView();` doesn’t really help—like I said above, screenshotting mainly works by moving around a little 1x1 transparent div on screen to trigger the rendering of a new frame. So we really need to know what in your page might be preventing that div from altering the browser’s model of what’s happening on screen.
",Mr0grog,
555,2016-08-06 01:31:33,"I'm seeing this issue as well.  It seems like .screenshot() gets stuck on waiting for ""unsubscribing from browser window frames"" callback from browser window frame.  It unfreezes when I move the mouse around the window.

An example page:
https://www.google.com/#q=britney+spears&start=10

If I try to take the screenshot for this selector img#uid_0, it seems to be stuck the majority of the time.  I also tried the style.zIndex approach with no luck.

Good DEBUG
  nightmare queueing action ""screenshot"" +7ms
  nightmare running +1ms
  nightmare:actions .screenshot() +0ms
  nightmare running +1ms
  nightmare:log subscribing to browser window frames +1ms
  nightmare:log altering page to force rendering +0ms
  nightmare:log unsubscribing from browser window frames +60ms
  nightmare:actions .screenshot() captured with length 19375 +65ms
Bad DEBUG
  nightmare queueing action ""screenshot"" +8ms
  nightmare running +0ms
  nightmare:actions .screenshot() +1ms
  nightmare running +1ms
  nightmare:log subscribing to browser window frames +1ms
  nightmare:log altering page to force rendering +2ms
  nightmare:log unsubscribing from browser window frames +9s <<<< stuck before this line prints unless I move the mouse.
",temijun1,
555,2016-08-08 07:12:53,"I moved the complete application from Docker to a dedicated VM and it solved nearly everything. Translating or setting the z-index didn't help though.
",bahlo,
555,2016-12-06 11:13:33,@bahlo : Hi ! What was your config for Docker ? I have the same issue and i would like to resolve it for docker. Thanks,GautierT,
555,2016-12-07 11:10:46,"@GautierT As I said before, I moved away from Docker since it wouldn't work (I found a bug in chromium with some value not high enough in Docker, but don't know which anymore). 

Works fine in the VM though 👍 ",bahlo,
555,2016-12-07 18:24:06,@bahlo i tried in VM and have the same problem that in docker. When i launch the same script 4-5 times at the same time some of them finish successfully and some of them crash or timeout or  get stuck in `nightmare:log altering page to force rendering`...,GautierT,
555,2016-12-15 18:09:26,@bahlo : I'm running into this same issue. Can you provide an example of how you manually triggered the callback for `requestFrame` ?,mackermedia,
555,2016-12-15 19:56:28,"Try turning your function and loop to be asynchronous, without knowing more of your code something like this would work:

<S_CODE_TOKEN>

Notice the `*` in the function declaration, which turns the function into a generator function and the use of the keyword `yield`. This is es6 generator function syntax which helps you manage promises more easily. You should be able to take each screenshot serially, as opposed to the code snippet you showed above which would render them in parallel if one screenshot took longer than 2 seconds to render, and could result in something pretty bad happening.

You can use babel to down compile es6 to es5 or if you use a recent enough version of node then you can get it out of the box.",justinmchase,
555,2016-12-16 16:05:52,@bahlo : Nevermind. I found it in your fork ;) https://github.com/bahlo/nightmare/commit/31b17abdf53931cec87cca27b5e2d1f226b611df#diff-bc4eacf94ad1a8e7c9bea8b6b6451251R53,mackermedia,
555,2016-12-16 17:19:44,"Update: The solution that worked for @bahlo (in his fork above) doesn't work for me. In my case, I'm wanting to take a screenshot of a particular rectangle on the page. It appears that manually calling that callback doesn't allow nightmare enough time to move the page to the specified rectangle before taking the screenshot. Still digging for a solution.",mackermedia,
555,2016-12-16 20:11:22,Anyone here experiencing timeouts may want to give the #927 a try. There’s also second approach to solving this over on https://github.com/mr0grog/nightmare/tree/screenshot-with-offscreen-rendering that you might give a try.,Mr0grog,
555,2016-12-19 21:37:16,"@Mr0grog : thanks a ton for your effort! 
It looks like your commit using the debugger highlighting has solved this hanging process issue for me. 
I did notice that once in awhile it seems like the rectangle that I'm passing in (for size & location of screenshot to be captured) is sometimes off. Perhaps that's related to the Electron window size bug you mentioned there?",mackermedia,
555,2016-12-19 22:27:17,"@mackermedia Awesome!

> I did notice that once in awhile it seems like the rectangle that I'm passing in (for size & location of screenshot to be captured) is sometimes off. Perhaps that's related to the Electron window size bug you mentioned there?

That sounds like a problem. It shouldn’t be related to the window size bug; that was a problem with my experimental `screenshot-with-offscreen-rendering` branch, not the PR I submitted. (Sorry if the explanation over there wasn’t clear. I probably shouldn’t have mentioned the other branch at all.)

If you can come up with a way to reproduce it reliably, would you please post it on that PR or as an issue (if the PR gets merged in the mean time)?",Mr0grog,
555,2017-01-07 11:26:47,"As a heads up on this thread, I recently ran into an issue with #927 where a static page (i.e. one with no page updates) would hang after timing out in series due to us not properly cleaning up booleans/timeouts. I've opened https://github.com/segmentio/nightmare/pull/945 to fix up the issue",twolfson,
554,2016-04-05 10:17:12,"Nightmare adds an `uncaughtException` listener to clean up the child process. However adding a listener [overrides the default behaviour](https://nodejs.org/docs/latest/api/process.html#process_event_uncaughtexception) and can cause an exit code of zero.
### Steps to reproduce:

<S_CODE_TOKEN>

And then running `node a.js; echo $?` show the error but reports an exit code of `0`.
### Fix:

Re-throw the error so node can pick it back up. I also changed the `console.log` to a `debug` as the default handler prints a stack trace.
",pci,2016-04-11 17:51:59
554,2016-04-06 07:08:07,"Given that I’m the person who made this mistake, it would be good if this patch included a test (I could easily see myself or someone else screwing this up again in the future). You could probably just check the exit code in the `exit` event in the test: https://github.com/segmentio/nightmare/blob/master/test/index.js#L48 …or write a similar test that does so if the conditions need to be slightly different.
",Mr0grog,2016-04-11 17:51:59
554,2016-04-06 07:58:48,"Hi @Mr0grog, that's for the feedback. I thought about adding a test, but didn't as you're not meant to do anything after an uncaughtException in user space. However I've looked through some of your tests and seen you have some (rather nice!) tests using child processes so I'll have a go at encapsulating a test.
",pci,2016-04-11 17:51:59
554,2016-04-06 08:19:12,"Test added
",pci,2016-04-11 17:51:59
554,2016-04-08 20:12:04,"Thanks for cleaning up my mess! 😅   (looks great!)
",Mr0grog,2016-04-11 17:51:59
554,2016-04-11 08:12:10,"@Mr0grog No problem, it was only because we introduced an error into our test framework that we found this bug, so you're in good company! Do you want this rebased into one commit?
",pci,2016-04-11 17:51:59
554,2016-04-11 14:44:51,"I'm not a committer, so that's above my pay grade. @matthewmueller’s your man (or maybe @rosshinkley; it seems like he might have the commit bit now and is much more active).
",Mr0grog,2016-04-11 17:51:59
554,2016-04-11 14:54:20,"I'd leave it as-is, I like having the history, and this isn't all that noisy.  I don't see a real need for a rebase.  (I also don't _really_ know what would be considered ""most correct,"" but that's the stand I'm taking, at least for now.)

I do have commit rights on github and publish rights on npm.  (Hooray!)  I'll be putting together a milestone + release ... soonish.  At a minimum, I'd like to get this + #553 in.  The underlying Electron PRs (thank you, @Mr0grog) have all been accepted, but I don't think they've all been released (at least at the time of this comment).
",rosshinkley,2016-04-11 17:51:59
554,2016-04-11 15:14:10,"> At a minimum, I'd like to get this + #553 in

If I were going to make a recommendation, I'd say this and #556 are good candidates for a patch release (v2.3.1) since they are small, make minor quality fixes without new features, and are immediately ship-able without other upstream fixes (like #553).
",Mr0grog,2016-04-11 17:51:59
554,2016-04-11 16:05:14,"@Mr0grog fair enough.  Can always cut another patch when #553 is done.  Will do as time permits.
",rosshinkley,2016-04-11 17:51:59
553,2016-04-04 07:43:32,"~~**This is just a work-in-progress at the moment, but filing the PR as there are open questions…**~~

This adds tests (which fail), but no implementation—I need to work out the best solution for https://github.com/atom/electron/issues/5013 and https://github.com/atom/electron/issues/4396 (this second one I can’t actually reproduce, so it may have been fixed). For the former, the simplest solution is probably tracking the URL of the failed page and comparing it to the URL of the main frame. Need to make sure that works right for redirects, though. A more exacting solution might be to track resource requests on the `session` object, though doing so requires a bit more rigamarole.

There is also an open question of how this should behave w/r/t error responses (e.g. 404, 500, etc). For now, I’m planning to take the approach that any valid response (including things like 404s and 500s) are successes (after all, you might be trying to test a 404 page with Nightmare), but I can also imagine someone wanting the option to treat any non-2xx response as a failure. Maybe that’s something to wait for as a feature request, though? Curious what others think.
",Mr0grog,2016-04-19 04:07:02
553,2016-04-04 07:47:49,"Also: As you can see in the tests, I’ve made the assumption here that child frames and sub-resources (images, scripts, stylesheets) failing do not cause `goto` to fail (i.e. it only fails if the HTML itself fails to load). I’m pretty sure that’s the right thing, but happy to take feedback on that.
",Mr0grog,2016-04-19 04:07:02
553,2016-04-06 16:46:46,"> This is just a work-in-progress at the moment, but filing the PR as there are open questions…

I'd like to take a crack at responding considering I +1'd the original issue.  I can't guarantee it'll be _good_ responses; most of this is pondering out loud, coffee in hand.  :)

> For the former, the simplest solution is probably tracking the URL of the failed page and comparing it to the URL of the main frame.

This (at least superficially) seems reasonable, at least until electron/electron#5013 is fixed.

> Need to make sure that works right for redirects, though.

I'd imagine you'd have to look for redirects and set the URL you'd be checking against appropriately.  Child resource redirects should be handled as `did-get-redirect-request` already has `isMainFrame` in the event data.  I don't _think_ you'd end up with a race condition as main frame page loads should not fail _after_ a redirect.  

I have a couple of questions, though.  What if the end user wants to do something custom with redirects - would this effect the ability to handle redirects with a custom action?  Would a (optional) destination assertion or command need to be included?  I'm thinking of cases where you want to explicitly want to check the URL after `.goto()` is executed - you could certainly do it with `.evaluate()`, but it might be nice to include a shorthand.

> A more exacting solution might be to track resource requests on the session object, though doing so requires a bit more rigamarole.

The best thing this would buy you is the filtering mechanism.  However, memory serving, filters aren't terrifically strict.  I don't think you can specify exact URL matches for filters.  Before I take a firm stand on this, though, I think it would be prudent to verify that assertion.  

The bigger problem with using `session.webRequest.onErrorOccurred()` - which admittedly, I'm making the huge assumption that's what you'd use - is I think it gets emitted when there is _any_ problem, not just page load failures.  I'm guessing this is the ""rigamarole"" you're referring to.  With a cursory look at the documentation, I'm not sure the event data would contain everything you'd need to make the distinction.  It's probably worth carving out time for the experiment, though.  I don't know enough about it to be certain.

> There is also an open question of how this should behave w/r/t error responses (e.g. 404, 500, etc).

I would posit that successfully loaded pages with HTTP error statuses are still successful loads for precisely the reason you cite: it's a legitimate test case.  If you needed to treat non-1xx/2xx/3xx as failures, you could hook into [`did-get-response-details`](https://github.com/electron/electron/blob/master/docs/api/web-contents.md#event-did-get-response-details).  Granted, this doesn't give you the ability to handle those responses directly in the Nightmare chain...

> Maybe that’s something to wait for as a feature request, though?

... and continuing my line of thought, I'm curious what you would expect usage to look like.  Are you envisioning an optional parameter for `.goto()`?  Something like `.goto(url[, status])`?  Or does this get back to the shorthand I mentioned above with some sort of destination filter/rule?  I don't know this needs to be solved right now, but it might be worth thinking about.

> Also: As you can see in the tests, I’ve made the assumption here that child frames and sub-resources (images, scripts, stylesheets) failing do not cause goto to fail (i.e. it only fails if the HTML itself fails to load). I’m pretty sure that’s the right thing, but happy to take feedback on that.

I'd say this is a valid assumption and agree.  I don't think internal page errors should explicitly cause Nightmare failures.  I would want Nightmare to behave as close to Real Browser&trade; would behave - as fault tolerant as possible, loading and running as much of a page as it can.  You could always add fail-fast behavior yourself, hooking into the failure events and throwing exceptions.

Thoughts?
",rosshinkley,2016-04-19 04:07:02
553,2016-04-06 19:52:32,"Spent more time than I expected working through the technical issues (and adding a whole bunch more tests as a result) last night. Going to try and clean it up this evening when I have more time and push it up here.

> What if the end user wants to do something custom with redirects - would this effect the ability to handle redirects with a custom action?

I don’t believe it would, since you can’t manipulate the request from that event (you could do something that would abort and start a new one, but we’d be able to see that). That said, I wound up not using `did-get-redirect-request` for a _different_ reason, so this probably doesn’t matter much anyhow.

(Now using `webRequest.onBeforeRequest`, which requires some working around for safety—only one handler can be registered at a time, which means we could clobber a plugin or a plugin could clobber us. But this lets us figure out the _actual_ URL being requested, which may not match the URL a user passed in — `http://somewhere.com` gets requested as `http://somewhere.com/`, for example. Header redirects will cause `onBeforeRequest` to fire again, so the `did-get-redirect-request` becomes redundant.)

> The bigger problem with using session.webRequest.onErrorOccurred()… is I think it gets emitted when there is any problem, not just page load failures.

Well, any problem with a resource that has started loading, which, it turns out, doesn’t cover everything because some load failures pre-empt actual requests (e.g. totally invalid URLs). Aside from that, though, you can sort things out pretty easily w/ the `resourceType` parameter, which is `mainFrame` for the page itself being loaded in the main frame.

> Are you envisioning an optional parameter for .goto()? Something like .goto(url[, status])? Or does this get back to the shorthand I mentioned above with some sort of destination filter/rule?

I was originally thinking “Something like .goto(url[, status])” BUT had a more interesting thought last night, which was this: `goto` should return information about the response when it’s successful (probably using `did-get-response-details` as you mentioned). Filtering acceptable page loads could be another action (perhaps a plugin!) that comes next, e.g:

<S_CODE_TOKEN>
",Mr0grog,2016-04-19 04:07:02
553,2016-04-07 04:54:07,"OK! This works and _seems_ pretty reliable now. As an interesting side note, this is the first time the [not-quite-normal-promise behavior](https://github.com/segmentio/nightmare/issues/527) has caught me in practice! (https://github.com/segmentio/nightmare/pull/553/commits/9acfa0dc4f2616e48748512373e3306065eaafa5#diff-910eb6f57886ca16c136101fb1699231R169)

---

## High level overview

`goto` now produces an error in the page fails to actually load. Completed requests with error _statuses_ (e.g. 404, 500) are successes, not errors in this situation.

When there is an error, `goto` returns an object with the following:
- message: The string 'navigation error'
- code: Chromium's error code describing what went wrong. Note this is _NOT_ the HTTP status code. For more details, see https://code.google.com/p/chromium/codesearch#chromium/src/net/base/net_error_list.h
- details: A string with additional details about the error. This may be null or an empty string.
- url: The URL that failed to load

When `goto` succeeds, it also now returns additional information about the request, so the user or other actions or plugins can do something meaningful with it. Success data is an object with the following:
- url: The URL that was loaded
- code: The HTTP status code (e.g. 200, 404, 500)
- method: The HTTP method used (e.g. ""GET"", ""POST"")
- referrer: The page that the window was displaying prior to this load or an empty string if this is the first page load.
- headers: An object where the property names are the HTTP header names and the values are arrays of the header values (if the same header was sent multiple times, the array will have multiple values).

I’m not totally sure if using `code` for both Chromium’s error code on a failure and the HTTP status code on a success is right. It seemed straightforward and expedient, but my one concern is that someone might expect `code` in an error to be an HTTP status code, which it most definitely is not. However, you can easily differentiate it by the fact that Chromium error codes are all negative values.

## Implementation Bits

There are a lot of tests for all the crazy edge cases I encountered trying to solve this well. Hopefully they are clear.

Additionally, there’s some serious craziness around `webRequest.onBeforeRequest()`. Between the fact that calling that method with a new listener (or no listener) removes any existing listener and the fact that plugins now have access to the Electron process, a plugin could easily clobber the mechanisms `goto` relies on (or vice versa). So I had to do some wacky gymnastics to protect against that.

An `onBeforeRequest` listener is registered immediately when the browser window is created. Then the `onBeforeRequest` method is removed so nobody can clobber the listener that was just registered. It gets replaced by a method with the same signature that tracks any new listener and calls it as appropriate, rather than actually registering it with Electron. The biggest downside here is that Electron’s `filters` parameter is rather poorly approximated by my code. [The actual implementation is not small or simple](https://github.com/electron/electron/blob/master/chromium_src/extensions/common/url_pattern.cc) and this seemed good enough. Would love to hear other better ideas here.

I also thought about replacing the whole of `session.webRequest` with an event emitter, but that seemed like a change that was a) a little large/out-of-scope and b) is questionable in general because it would totally change a big piece of Electron API—it might be better to lobby for the change upstream (but no idea how well a request for that would be received).

Anyway, why is all that hijinx really necessary?? Well, the short answer is that the only way to tell whether a `did-fail-load` event came from the main frame (as a opposed to a sub-frame, which usually means an `<iframe>`) is to compare URLs. And determining the actual URL we’re trying to load is not as straightforward as someone as naïve as me might assume. (Note: I wrote a PR upstream in Electron to give us frame information on the failure event, but no idea if/when it will land: https://github.com/electron/electron/pull/5029)

So, URLs! Between the time we call `loadURL()` and when Electron attempts to make an actual request, it cleans up and reformats the URL—which means we can’t just match the failed URL agains the URL we asked to load. Some examples of how the URL gets modified:
- `   http://fake.domain/   `  ->  `http://fake.domain/`
- `http://///fake.domain/`  ->  `http://fake.domain/`
- `http:fake.domain/`  ->  `http://fake.domain/`
- `http://fake.domain`  ->  `http://fake.domain/`
- `http:// fake.domain`  ->  `http://%20fake.domain/`

Those are just ones I noticed in the course of doing this work. It would probably take a fair bit of Spelunking through Chromium to figure out everything it might do and, even then, we’d be vulnerable to changes in the routine in the future. Better to just let Electron tell us what it’s going to load, which is where `onBeforeRequest` comes in.

It’s also possible to get a failure event before any loading happens. That’s usually because the URL was just totally malformed and fails basic validation. Happily `did-fail-load` is still called in that case, though `webRequest.onErrorOccurred()`—so it’s not feasible to just use webContent events or just use `webRequest` listeners; we have to use them in combination to handle the full range of possible situations.

Whew! I think that covers it; please review for any issues!
",Mr0grog,2016-04-19 04:07:02
553,2016-04-07 06:13:05,"I think #556 might fix the CircleCI issues here. Not 100% sure, though. If not, I’ll have to poke at it more :\ (Tests run fine for me locally.)
",Mr0grog,2016-04-19 04:07:02
553,2016-04-07 06:27:50,"Well, still seeing errors here on Circle even with #556 merged in. Oddly, I don’t see them if I SSH into Circle and run them on the console. Not entirely sure what’s up; probably going to give it a rest for tonight.
",Mr0grog,2016-04-19 04:07:02
553,2016-04-07 14:18:07,"@Mr0grog re your previous comment: like I said, my knowledge there was limited.  Thanks for setting me straight.  :)

I _really_ like `.goto()` returning information about the request.  One question about that, and this may be silly: I see in your tests that [valid redirects are okay](https://github.com/segmentio/nightmare/pull/553/files#diff-910eb6f57886ca16c136101fb1699231R233), but it doesn't check the internal information bubbled up from `.goto()`.  Based on the changes you've put in, would that show the 3xx?  At first blush, I don't think it would - wouldn't it show the 2xx (assuming success) for the final destination (after `did-finish-load`)?

To be clear: I'm not sure `.goto()` should track all of the redirect information from a given request, but I do want to clarify what to expect.  Thoughts?

It looks like atom/electron#5029 has been accepted and as such atom/electron#5013 has been fixed.  I don't know what kind of release schedule Electron is on, but they cut releases often enough that I think I'm willing to wait as it reduces the complexity of your solution (seemingly by quite a bit).  What do you think?

Onto the test issues: I can't get the test suite from your fork to run consistently.  The ""should fail properly if request handler is present"" test fails intermittently.  It looks like once in a while, `did-fail-load` gets emitted after `did-finish-load`.  (That's the difference in debug output anyway.  I'm not clear on the underlying cause yet.)  Coincidentally, that appears to be one of the problems in build 662.  I don't have time to dig into this right this moment, but as time permits today, I'm going to dig into this and the other CircleCI issues.
",rosshinkley,2016-04-19 04:07:02
553,2016-04-07 17:07:04,"9cfef7c should mitigate one of the issues I saw repeated on Circle last night: trying to load an unknown protocol seems to hang. It doesn’t do so locally, nor does it if I SSH into the Circle box and manually run the tests from the command line. Not sure what’s different when Circle does its test run, but  ¯\_(ツ)_/¯

This doesn’t fix the intermittent ""should fail properly if request handler is present” issue you found, @rosshinkley. I noticed that sometimes on Circle, too, but wasn’t able to repro locally and haven’t dug into it yet, so if you’ve got ideas, awesome. 

> It looks like once in a while, did-fail-load gets emitted after did-finish-load. (That's the difference in debug output anyway. I'm not clear on the underlying cause yet.)

_Sigh._ Hope this is not what’s really happening, but that would definitely cause this sort of problem :(

> I see in your tests that valid redirects are okay, but it doesn't check the internal information bubbled up from .goto(). Based on the changes you've put in, would that show the 3xx? At first blush, I don't think it would - wouldn't it show the 2xx (assuming success) for the final destination (after did-finish-load)?

Oh, that’s a good question. I’m pretty sure it would show the 2xx for the final destination, but haven’t tested that case. I’m also not sure I’ve tested the case of invalid redirects.

> I'm not sure .goto() should track all of the redirect information from a given request, but I do want to clarify what to expect.

I actually hadn’t thought about this case _at all!_ It would be interesting to report on all the redirects involved, but I hadn’t really planned to. So yes, no reason to expect that.

> I don't know what kind of release schedule Electron is on, but they cut releases often enough that I think I'm willing to wait as it reduces the complexity of your solution (seemingly by quite a bit). What do you think?

Yeah, I’m not sure either, though they do certainly release often. Buuuuuuut gathering the response details also relies on the URL check, so https://github.com/electron/electron/pull/5029 no longer removes the need for the `onBeforeRequest` madness. I’ve just filed https://github.com/electron/electron/issues/5074, which would fix this for us.
",Mr0grog,2016-04-19 04:07:02
553,2016-04-07 17:48:35,"> 9cfef7c should mitigate one of the issues I saw repeated on Circle last night: trying to load an unknown protocol seems to hang. It doesn’t do so locally, nor does it if I SSH into the Circle box and manually run the tests from the command line. Not sure what’s different when Circle does its test run, but ¯_(ツ)_/¯

Hooray for fixing... but [terrified gasp] at Circle internals.  When I'm done spelunking through Electron's guts, I might have a look at `circle.yaml` and related docs to see if it's a setup problem.  My familiarity with CircleCI is _pretty_ pitiful, so it's worth the exercise.

> I noticed that sometimes on Circle, too, but wasn’t able to repro locally and haven’t dug into it yet, so if you’ve got ideas, awesome.

Working on it.  Again, I want to take a look at the CCI docs, make sure it's not something silly.  For the Nightmare side, more on this in a moment, I want to dump out what I've found so far.

> Sigh. Hope this is not what’s really happening, but that would definitely cause this sort of problem :(

Maybe?  It looks like you were [on to something](https://github.com/electron/electron/issues/5031) with the provisional load failure.  That happens _super_ early in the request cycle,  emitting [`did-fail-load` equally as early](https://github.com/electron/electron/blob/702352804239f58e5abcd0b96dbd748b68ab0278/lib/browser/api/web-contents.js#L150-L156) and omitting that it came from the provisional load.  The handler for the provisional load failure also makes a call to `setImmediate`, which in my understanding (which I will readily admit is probably flawed) could prop up a race condition between `did-fail-load` and the other events.

At any rate, in my sandbox, `did-fail-provisional-load` doesn't get emitted for child parts that fail if I watch it directly. Did you experiment with that event?  If so, why opt against it?

> Oh, that’s a good question. I’m pretty sure it would show the 2xx for the final destination...

Curiosity got the best of me, I gave this a scream.  It does.

> ... but haven’t tested that case.

Explicitly tested that case?  No.  Is it worth adding the checks?  Probably.

>  I’m also not sure I’ve tested the case of invalid redirects.

[This doesn't cover it?](https://github.com/segmentio/nightmare/pull/553/files#diff-910eb6f57886ca16c136101fb1699231R237)

> I actually hadn’t thought about this case at all! It would be interesting to report on all the redirects involved, but I hadn’t really planned to. So yes, no reason to expect that.

It would be neat and make Nightmare more useful as a testing tool, but I'm okay for the moment putting it down as a future enhancement.  Bigger fish to fry, all that. :)
",rosshinkley,2016-04-19 04:07:02
553,2016-04-07 18:31:59,"> The handler for the provisional load failure also makes a call to setImmediate, which in my understanding (which I will readily admit is probably flawed) could prop up a race condition between did-fail-load and the other events.

AH! I had seen that earlier, but didn’t remember it when you mentioned the race condition. This could definitely cause it. Hmmmm.

> in my sandbox, did-fail-provisional-load doesn't get emitted for child parts that fail if I watch it directly. Did you experiment with that event? If so, why opt against it?

I did look into it, but ultimately just used `did-fail-load` as an expedient for not needing to hook an extra event `did-fail-provisional-load` (because one triggered the other). The potential for a race did not occur to me, though. Just hooking `did-fail-provisional-load` to `handleFailure` would fix things if the `setImmediate` call is in fact the real culprit here.

> > I’m also not sure I’ve tested the case of invalid redirects.
> > This doesn't cover it?

I forgot what I wrote! Maybe didn’t get enough sleep last night :P

> [capturing redirect info] would be neat and make Nightmare more useful as a testing tool, but I'm okay for the moment putting it down as a future enhancement.

Agreed 👍 

Side note: I realized while looking at https://circleci.com/gh/Mr0grog/nightmare/13 that I didn’t really do a very good job with the “fail if the response dies in flight” test. Going to rewrite it by adding a server endpoint that just kills the socket, which should make the test reliable.
",Mr0grog,2016-04-19 04:07:02
553,2016-04-07 18:35:08,"Also, on the `onBeforeRequest` stuff still being needed for the `did-get-response-details` event—I’m happy letting this PR sit while we wait to see what happens with https://github.com/electron/electron/issues/5074 if you want.
",Mr0grog,2016-04-19 04:07:02
553,2016-04-07 19:19:00,"> AH! I had seen that earlier, but didn’t remember it when you mentioned the race condition. This could definitely cause it. Hmmmm.

It was a bit of a (pleasant) surprise coming across your name.  I figured you had either forgotten or had a good reason for not pursuing it further.  (Lack of sleep is a legitimate reason.)

> The potential for a race did not occur to me, though. Just hooking did-fail-provisional-load to handleFailure would fix things if the setImmediate call is in fact the real culprit here.

For the sake of completeness, it's probably worth trying, if nothing else than to rule it out.  I'll give it a whirl and report back.

> Side note: I realized while looking at https://circleci.com/gh/Mr0grog/nightmare/13 that I didn’t really do a very good job with the “fail if the response dies in flight” test. Going to rewrite it by adding a server endpoint that just kills the socket, which should make the test reliable.

Right on.  Thanks!

> Also, on the onBeforeRequest stuff still being needed for the did-get-response-details event—I’m happy letting this PR sit while we wait to see what happens with electron/electron#5074 if you want.

Yeah, let's let it ride for a bit.  The maintainers there are _generally_ pretty quick with responses.
",rosshinkley,2016-04-19 04:07:02
553,2016-04-07 20:26:13,"> > The potential for a race did not occur to me, though. Just hooking did-fail-provisional-load to handleFailure would fix things if the setImmediate call is in fact the real culprit here.
> 
> For the sake of completeness, it's probably worth trying, if nothing else than to rule it out. I'll give it a whirl and report back.

I'm still having failures, but I think it's for an entirely different reason.  I'm not sure if it's a resource issue or what, but somewhere in the neighborhood of 50-60 runs, my sandbox (on my low-powered laptop) will hang when starting an Electron process.  (I feel like there's an open issue for this already - #238, maybe?)

Regardless, that's _way_ better than the ~1 in 5 failure rate I was seeing before, and the symptoms are totally different judging from the debug info.  From that, I think it's increasingly likely this is a race condition, and as such, swapping out for `did-fail-provisional-load` is a decent call.  Thoughts?
",rosshinkley,2016-04-19 04:07:02
553,2016-04-07 20:35:55,"Offtopic, but do you (or anyone else) know why `dom-ready` events are emitted even for provisional load failures?
",rosshinkley,2016-04-19 04:07:02
553,2016-04-07 20:44:41,"> I'm not sure if it's a resource issue or what, but somewhere in the neighborhood of 50-60 runs, my sandbox (on my low-powered laptop) will hang when starting an Electron process. (I feel like there's an open issue for this already - #238, maybe?)

Oh, that issue’s interesting; I’d never seen it. I feel like there are potentially a lot of causes there. Things like #493 could potentially contribute. I also recall seeing some issue about listeners not always being properly cleaned up that didn’t seem like it got well resolved (can’t find now). #556 should reduce the load a little, too.

I also wonder if moving to an architecture where every Nightmare instance is just a new `BrowserWindow` rather than a whole new process (so instead of one Electron process per Nightmare instance, one single Electron process that contains many windows, one for each nightmare instance).

But bottom line, no certainties here, other than that I generally suspect more than one cause. :\

> From that, I think it's increasingly likely this is a race condition, and as such, swapping out for did-fail-provisional-load is a decent call. Thoughts?

Seems reasonable to me. Will implement it as soon as I get a change.
",Mr0grog,2016-04-19 04:07:02
553,2016-04-07 20:47:40,"I also switched to generating a new in-memory partition for every test to avoid caching issues in this branch; it’s possible that be exacerbating things, too: https://github.com/segmentio/nightmare/pull/553/files#diff-910eb6f57886ca16c136101fb1699231R81
",Mr0grog,2016-04-19 04:07:02
553,2016-04-07 21:00:05,"Mmmm, I might have jumped the gun in my myopic look at that one test.  Some of the other tests are now failing.  I don't have time right this second to dive into it, but will carve out time tonight.
",rosshinkley,2016-04-19 04:07:02
553,2016-04-07 21:12:40,"> do you (or anyone else) know why dom-ready events are emitted even for provisional load failures?

This is deep deep down (all the load-related events on WebContents come from way deep in Chromium), but it looks like, after sending the failure notification (https://chromium.googlesource.com/chromium/src/+/master/content/renderer/render_frame_impl.cc#3064), Chromium then loads, as part of the same navigation (so no new request cycle), the error page (https://chromium.googlesource.com/chromium/src/+/master/content/renderer/render_frame_impl.cc#3093). That would, I expect, trigger the `dom-ready` event. Not super straightforward, though.
",Mr0grog,2016-04-19 04:07:02
553,2016-04-07 21:15:23,"> Some of the other tests are now failing.

By any chance, is that “should fire an event on page load failure?” If so, 52958f219813f883b85b7dcad909d94349b06b42 should fix it.
",Mr0grog,2016-04-19 04:07:02
553,2016-04-07 21:16:13,"OH MY GOD THE TESTS PASSED ON CIRCLE
",Mr0grog,2016-04-19 04:07:02
553,2016-04-08 02:36:53,"> Chromium then loads, as part of the same navigation (so no new request cycle), the error page ...

Ahhh, that makes sense.

> > Some of the other tests are now failing.
> 
> By any chance, is that “should fire an event on page load failure?” If so, 52958f2 should fix it.

No, it was one of the `.type()` tests, but that family of tests has been flaky for a _long_ time.  It's spookily similar behavior to this: doesn't fail on decent machines, intermittently fails on modest machines, and seems to almost always fail in CI (at least, the first time).  It's next on my bug hunt docket.

> OH MY GOD THE TESTS PASSED ON CIRCLE

/chuckling
",rosshinkley,2016-04-19 04:07:02
553,2016-04-08 20:11:03,"Electron PR for `resourceType` on `did-get-reponse-details` that should allow us to drop the funky stuff this PR does with `onBeforeRequest`: https://github.com/electron/electron/pull/5095
",Mr0grog,2016-04-19 04:07:02
553,2016-04-12 04:10:43,"I just added documentation in the README for this. (Can’t believe I forgot to do that!) I’ve also updated the code so it no longer uses `webRequest` listeners, but will wait to actually push that until there’s an actual electron release that it works with.
",Mr0grog,2016-04-19 04:07:02
553,2016-04-12 14:24:54,"@Mr0grog Thank you for all of the work you've done for this. :)
",rosshinkley,2016-04-19 04:07:02
553,2016-04-13 16:31:39,"The race condition with `did-finish-load` and `did-fail-load` will be solved in the next Electron release, too! https://github.com/electron/electron/issues/5128 Wooo upstream fixes making things easier here :)
",Mr0grog,2016-04-19 04:07:02
553,2016-04-15 17:34:18,"@rosshinkley I think this is good to go. All green and no webRequest stuff.
",Mr0grog,2016-04-19 04:07:02
553,2016-04-15 18:58:50,"@Mr0grog _Awesome._  I'll put this out as soon as I can carve the time out.
",rosshinkley,2016-04-19 04:07:02
552,2016-04-03 11:45:48,"It would be great if there was a means to `.evaluate()` and wait on a promise. For example:

<S_CODE_TOKEN>

This could avoid the unnecessary polling that Nightmarejs currently does while waiting for values to become true in the document. 
",marcoscaceres,2016-10-20 04:56:11
552,2016-04-08 03:00:38,"I'm not clear on what you're asking.  Are you asking if `.evaluate()` could wait on a promise internally?  Or are you asking if Nightmare can somehow pick up document changes via events to make `.wait()` passive?
",rosshinkley,2016-10-20 04:56:11
552,2016-04-08 07:25:48,"> I'm not clear on what you're asking. Are you asking if .evaluate() could wait on a promise internally?

Sorry for not being clear. Yes, that's what I'm asking for. In fact, you could even check if the function passed to evaluate is a GeneratorFunction and underpin evaluate() with promise handling machinery ala async/await or returns a promise. This would allow evalute() to continue to be backwards compatible, but also work with async functions:

<S_CODE_TOKEN>

Or eventually:

<S_CODE_TOKEN>

> Or are you asking if Nightmare can somehow pick up document changes via events to make .wait() passive?

No. Though semantically that could make sense... it would be like `waitUntil(promiseToResolve)` [API in Service Workers](https://www.w3.org/TR/service-workers/#wait-until-method). 
",marcoscaceres,2016-10-20 04:56:11
552,2016-08-08 13:11:11,"Any updates? I'd like to have this implemented as well.
",ivan-kleshnin,2016-10-20 04:56:11
551,2016-04-03 01:33:28,"Documentation for `.header()` appears to be missing.

Related to #309 and #521.
",rosshinkley,2016-04-14 03:36:23
550,2016-04-02 09:18:32,"Hello
I've installed the latest nightmare version on my linux box, and can run the example codes.
I want to do simple screenshot of a web app developed by EXTJS.
here is my simple script:

<S_CODE_TOKEN>

however, running script via node never ends, and activating the show flag brings up a black screen.
",khafan246,2016-05-24 16:57:57
550,2016-04-02 23:09:21,"I suspect you're having two problems.  One, it looks like your actions are not getting run - `.then()` should be called at the end of your chain.  For example:

<S_CODE_TOKEN>

Second, you might be hitting the framebuffer issues first reported in #468 and fixed in #479.  The fix was merged after you asked this question, so it might be worthwhile to upgrade to 2.3.0.
",rosshinkley,2016-05-24 16:57:57
550,2016-04-23 22:51:53,"@khafan246 Are you still having this issue?
",rosshinkley,2016-05-24 16:57:57
550,2016-05-24 16:57:57,"Closing due to lack of activity.  If you're still having this problem, feel free to reopen/open a new issue.
",rosshinkley,2016-05-24 16:57:57
549,2016-03-30 03:47:23,"don't work:

<S_CODE_TOKEN>

work:

<S_CODE_TOKEN>
",suhaotian,2016-04-08 17:32:48
549,2016-04-08 03:57:51,"You might want to consider using [.insert()](https://github.com/segmentio/nightmare#insertselector-text) instead.  That sets the value you send directly.

There's a reason why this doesn't work: `.type()` uses [`webContents.sendInputEvent()`](https://github.com/electron/electron/blob/master/docs/api/web-contents.md#webcontentssendinputeventevent), which restricts input to [accelerator](https://github.com/electron/electron/blob/master/docs/api/accelerator.md) keys.  I'm almost positive you can send unicode characters with `\u` and `webContents.sendInputEvent()`, but at present, Nightmare doesn't support it.  The string you send is simply split, so sending `\u54C8` would result in typing `\u54C8` instead of `哈`.

I've considered adding accelerator support, but there are cases where accelerators don't work like you might expect, like [sending `Return` or `Enter`](https://github.com/electron/electron/issues/5005).  Would sending unicode-encoded characters be useful to you?
",rosshinkley,2016-04-08 17:32:48
549,2016-04-08 17:32:48,"@rosshinkley  thank you
",suhaotian,2016-04-08 17:32:48
549,2016-04-08 21:35:00,"@suhaotian Turns out I was wrong.

Sending `\u54c8` _will_ send the correct character.  So either using `.insert()` or `.type()` with unicode encodings should work.
",rosshinkley,2016-04-08 17:32:48
548,2016-03-30 01:16:58,"I was inspired to do this because some event listeners e.g. 'change' are triggered on blur, so they don't happen until we actually click/focus another element.

P.S. insert and type are very similar - there's some potential for refactoring but I don't know what style we would prefer.
",yoz,2016-04-23 21:48:21
548,2016-03-30 16:36:29,"Although some of the tests are timing out on CircleCI, it looks like that's an issue with flaky tests rather than with my change (tests pass for me locally).
",yoz,2016-04-23 21:48:21
548,2016-04-08 22:07:11,"I'm behind this change.  I can't see any downside to adding blur events to both.

I do have a question, and I realize this is how it currently works - when empty string or a falsey value is passed, the selector's value is set to empty string, but no focus or blur actions are taken.  Won't that cause problems if the intent is to clear the selector and the change event is triggered on blur?  Shouldn't clear events also cause blur?

Re the tests, I kicked off another build, and it passed.  The flaky tests might be a result of event conditions like those found in #553.  I'm attempting to get to the bottom of it.
",rosshinkley,2016-04-23 21:48:21
548,2016-04-15 20:02:31,"@yoz Any updates?

By the by, the tests were fixed with a makefile/shell script stopgap in #565.
",rosshinkley,2016-04-23 21:48:21
548,2016-04-15 20:06:48,"@rosshinkley Sorry, got caught up in other work - I think it makes sense to add focus/blur events when clearing inputs, too. Will hopefully get to that later today.
",yoz,2016-04-23 21:48:21
548,2016-04-16 15:34:14,"@yoz I understand.  Thanks for putting it together!
",rosshinkley,2016-04-23 21:48:21
548,2016-04-20 17:14:53,"Updated to trigger focus/blur events when we clear inputs.
",yoz,2016-04-23 21:48:21
547,2016-03-29 11:33:17,"How do I easily use elements inside an iframe of a page?
Lets assume we have a path like:

`body iframe#id1 #email`

and I want to

<S_CODE_TOKEN>

How do I do that without writing functions to select elements like `document.getElementById('myframe1').contentWindow.document.getElementById('x')`
",AVVS,2016-05-24 16:53:18
547,2016-03-30 04:07:02,"I don't think you can - at least, not yet.  You might want to read through #203  and #496.
",rosshinkley,2016-05-24 16:53:18
547,2016-05-24 16:53:18,"Merging with #203, closing.
",rosshinkley,2016-05-24 16:53:18
546,2016-03-29 03:47:28,"I'm using Nightmare in conjunction with tape in order to produce TAP output from my automated tests.
I have a test where I'm doing a chain of commands and assertions, e.g. assert a button exists, click the button, assert the expected result (opening an iframe) happened.

I've noticed some weird behaviour in ending Nightmare, I cannot call `.end()` after a `.then()` or within a `.then()`, which would be the logical place to put it, example:

<S_CODE_TOKEN>

This code works as expected, my issue is that I need to place `.end()` on the last call to `window` (my nightmare instance) so if I add more steps I need to move the `.end()` call to the last promise.

Putting `.end()` on the last `.then()` doesn't work, nor does calling `window.end()` within the last `.then()`. Is there any way I can do this cleaner than manually ensuring my last call to the nightmare instance is followed by `.end()` ?

Thanks
",wyqydsyq,2016-04-13 04:47:25
546,2016-03-30 04:14:00,"Out of the box, `.end()` puts another action in the action queue, same as anything else.  Modifying your example, excerpted for brevity:

<S_CODE_TOKEN>

Alternatively, you could pass a callback to `.end()` as without it, Nightmare assumes you wanted to add the action to the queue.  Again, using your example:

<S_CODE_TOKEN>
",rosshinkley,2016-04-13 04:47:25
546,2016-04-07 21:30:39,"I know this has been sitting for a bit but wanted to make a minor note here. @wyqydsyq you should be able to make your final `then()` to end the test work by simply _returning_ `t.end()`, like so:

<S_CODE_TOKEN>

As @rosshinkley noted, “`.end()` puts another action in the action queue, same as anything else,” so just calling `.end()` at the end queues up the end action, but never executes it. Returning a thennable from a promise handler causes that thennable to be run automatically, so the above code is _kind of_ like:

<S_CODE_TOKEN>

…but either way, yeah, this is definitely a little confusing :\
",Mr0grog,2016-04-13 04:47:25
546,2016-04-09 10:17:01,"@rosshinkley @Mr0grog your explanations are very helpful but you confuse `t.end()` and `window.end()`. I won't check your code snippets but this works, @wcjohnson11 :

<S_CODE_TOKEN>
",kuraga,2016-04-13 04:47:25
546,2016-04-09 10:23:19,"P.S. @rosshinkley , Add `queue` argument to callbacks, maybe? And why result of `nightmare.then(cb)` isn't chainable? Is it good that `TypeError: nightmare.goto(...).wait(...).exists(...).then(...).end is not a function`?
",kuraga,2016-04-13 04:47:25
546,2016-04-11 00:37:56,"@kuraga Augh, sorry. Did not read carefully :(

Either way, `.then(function() { return nightmare.end(); })` (or `.then(() => nightmare.end())` if you have fat arrow support) will do what you want. Hopefully that, at least, was clear!

As an even more concise bonus, since `tape.end()` takes a potential error as its first argument, you can _probably_ (I haven’t tested this) do `nightmare.end(t.end)` at any point to end your tests, too.
",Mr0grog,2016-04-13 04:47:25
546,2016-04-11 05:50:23,"Oh boy, I didn't read carefully either.  I apologize.  Good catch, @kuraga.

> P.S. @rosshinkley , Add queue argument to callbacks, maybe? And why result of nightmare.then(cb) isn't chainable?

It is... insofar as `.then()` returns a native promise, and can chain promise methods off of it (eg, another `.then()`).

> Is it good that TypeError: nightmare.goto(...).wait(...).exists(...).then(...).end is not a function?

Promises don't expose `.end()`, Nightmare does.  Once you call `.then()`, you're not dealing with a Nightmare instance anymore, you're dealing with a native promise.  If you wanted `.then()` to execute (and clear the queue) _before_ calling `.end()`, something like:

<S_CODE_TOKEN>

... should work.
",rosshinkley,2016-04-13 04:47:25
546,2016-04-11 18:26:35,"@rosshinkley @Mr0grog @wyqydsyq 
Hm, but for `.evaluate` it really doesn't work!

<S_CODE_TOKEN>
",kuraga,2016-04-13 04:47:25
546,2016-04-11 18:40:56,"@kuraga Does your expectation (`expect(text).to.match(/Информация об узле 1:/)`) fail? If so, `console.log(3)` _shouldn’t_ be called, because that’s in a success handler. The failed expectation will throw an exception, which will cause the promise returned by the `then` that it’s in to _reject_ instead of resolve.

So if that’s your problem, you should probably:

<S_CODE_TOKEN>

or

<S_CODE_TOKEN>
",Mr0grog,2016-04-13 04:47:25
546,2016-04-11 19:14:48,"Yeah, you're completely right, thanks!
",kuraga,2016-04-13 04:47:25
546,2016-04-11 19:23:39,"@wyqydsyq you also can use [`t.plan()`](https://github.com/substack/tape#tplann)
",kuraga,2016-04-13 04:47:25
546,2016-04-13 04:47:25,"@wyqydsyq I'm considering this issue resolved.  If you have any more questions, feel free to reopen/open a new issue.
",rosshinkley,2016-04-13 04:47:25
545,2016-03-28 09:57:14,"I'm trying to automate testing paypal integrations and after another annoying update on the paypal side electron starts crashing at the last action, code that I'm posting had worked before (like 4 weeks ago), but then started resulting in a crash. Hopefully some1 can hint me on how to fix/avoid it - I would really appreciate it.

Here are the logs and the code:

https://gist.github.com/AVVS/f641c1535cde2a258e71

<S_CODE_TOKEN>
",AVVS,2017-01-02 21:21:31
545,2016-04-12 18:16:13,"First off, are you on the latest release of Nightmare? There have been some changes to screenshotting lately, which is the thing Nightmare does that is most likely to trigger crashers in Electron. The first thing I might try if you are on the latest Nightmare is to remove all your screenshot calls and see if it still crashes.

Regardless, this sounds like a problem in Electron. Are you using the latest version of electron? If you have Nightmare installed globally, you can check by calling:

<S_CODE_TOKEN>

Or if installed locally:

<S_CODE_TOKEN>

The latest that nightmare will install is 0.36.12 and the latest possible is 0.37.5. To update, you could blow away the directory for `electron-prebuilt` that is in either `node_modules` or `node_modules/nightmare` and then `npm install electron-prebuilt`.

If you’re up-to-date and still crashing, you ought to be able to grab a crash report from somewhere on your system. I’m not sure where to get it on other OSes, but in OS X, you can most easily get it from the Console app in Applications -> Utilities -> Console. You’ll see a line like:

`4/12/16 10:54:50.155 AM ReportCrash[32556]: Saved crash report for Electron[32596] version 0.37.5 (0.37.5) to /Users/rbrackett/Library/Logs/DiagnosticReports/Electron_2016-04-12-105450_Lilpix.crash`

With a little arrow to the left. Click the arrow, then the “Open Report” button that appears to get the crash report. It might help us here, but most likely you’ll just want to submit it to the Electron team over at https://github.com/electron/electron/issues
",Mr0grog,2017-01-02 21:21:31
545,2016-04-22 13:02:00,"I have the latest electron-prebuilt and get exactly the same error (see #587).

Any other ideas?
",bahlo,2017-01-02 21:21:31
545,2016-04-23 22:51:04,"Not sure that it matters, but you might want to also override [the Electron path](https://github.com/segmentio/nightmare#electronpath).  I don't _think_ the paths changed from 0.36.x to 0.37.x, so @Mr0grog's directions should work, but it can't hurt to be sure.  You may also want to run your application with `ELECTRON_ENABLE_LOGGING` in tandem with `DEBUG=nightmare:*,electron:*`.  That might give you a little more information.

What bothers me about the original log text is that the error is a page error from `.onClick()`, so I'm not certain it's because of the screenshot.  If I had to guess, I'd guess that there's a problem in PayPal's client code when you click on `#loadLogin`.  If you run the steps by hand in Chrome with the devtools open, do you get the same error?
",rosshinkley,2017-01-02 21:21:31
545,2016-04-25 19:55:49,"Regardless, since it’s a crash in Electron, getting the crash report would help a lot. It’s extremely hard to know what’s causing the crash without either a reproducible test case or knowledge of what Electron is actually doing when it crashes (from the crash report).

If you can’t get the crash report from the system, you can also try setting `ELECTRON_ENABLE_STACK_DUMPING` (not just `ELECTRON_ENABLE_LOGGING`) alongside `DEBUG=electron:*` as @rosshinkley suggested. That’ll at least get you something similar to the system report.
",Mr0grog,2017-01-02 21:21:31
545,2016-04-25 20:09:08,"@Mr0grog This is about a thousand miles offtopic, but would it be worth implementing a crash report server internal to Nightmare so the child Electron instance submits crash reports directly to the parent process? 
",rosshinkley,2017-01-02 21:21:31
545,2016-04-25 20:15:14,"> would it be worth implementing a crash report server internal to Nightmare

Yeah, that would be really neat to have.
",Mr0grog,2017-01-02 21:21:31
545,2016-04-25 20:16:13,"> Yeah, that would probably be pretty neat to have.

I'll open up a new issue for that so we don't pollute this thread. :)

Throwing it on the todo pile...
",rosshinkley,2017-01-02 21:21:31
545,2017-01-02 21:21:31,"With #598 being done and the recent changes to the screenshot API, I'm going to close this issue.  Feel free to open a new issue if this is still a problem.",rosshinkley,2017-01-02 21:21:31
544,2016-03-24 23:36:36,"- [ ] @reinpk 
- [ ] @matthewmueller
- [ ] @rosshinkley 

This works very similar to the screenshot or pdf actions, except it saves the page as html to disk. Its a pretty straight forward pass through to the corresponding electron api.
",justinmchase,2016-04-02 22:22:33
544,2016-03-26 02:17:28,"Two nits: one, consider adding a link to the [`webContents.savePage()` documentation](https://github.com/atom/electron/blob/master/docs/api/web-contents.md#webcontentssavepagefullpath-savetype-callback) for easy reference to `saveType`.  Two, make sure this PR is properly unit tested.
",rosshinkley,2016-04-02 22:22:33
544,2016-03-27 23:15:33,"@rosshinkley Ok will do!
",justinmchase,2016-04-02 22:22:33
544,2016-03-28 15:58:36,"Done. I added a passing test and the link to the documentation as requested.
",justinmchase,2016-04-02 22:22:33
544,2016-04-02 22:22:28,"Thanks, @justinmchase.  Merging.
",rosshinkley,2016-04-02 22:22:33
543,2016-03-24 16:21:55,"Hi all, 
I'm triyng to build a scraper for a site that needs login with captcha. I want that a certain point nightmare waits for the user to fill in the solution for the captcha in the prompt, then submit the form.
Basically, the problem is that I can't write async code in an evaluate function. Is it possible at all? Here is my code:

<S_CODE_TOKEN>
",johncornell,2016-03-30 03:43:49
543,2016-03-25 00:34:14,"I assume you're using [prompt](https://www.npmjs.com/package/prompt)?  It's not included in the sample you provided.

If so, the first issue is `.evaluate()` is intended for executing code on the page.  I'm guessing you want to prompt the user for the captcha.  For that, you should probably have that inside of a `.then()`.

Setting that aside, one option is wrapping `prompt.get()` in a new Promise.  Something like: 

<S_CODE_TOKEN>
",rosshinkley,2016-03-30 03:43:49
543,2016-03-25 14:01:53,"Thanks @rosshinkley, it's all clearer now. I still have some doubts about the general behaviour of the framework: when I try to do some action after an evaluate-then couple, I get an error. So what if I want to do some stuff, then evaluate something on the page, then continue the navigation (i.e. go to a second link of the site with goto)? This is useful if I want to use always the same Electron window to retain the logon credentials.
",johncornell,2016-03-30 03:43:49
543,2016-03-25 14:17:20,"> ... when I try to do some action after an evaluate-then couple, I get an error. 

Could you provide a minimal example?

> So what if I want to do some stuff, then evaluate something on the page, then continue the navigation (i.e. go to a second link of the site with goto)? 

In keeping with using the Promise API, you could return a Nightmare chain from the `.then()` to the next `.then()` call.  An example would be helpful.  Reusing the previous, this time with added actions:

<S_CODE_TOKEN>
",rosshinkley,2016-03-30 03:43:49
543,2016-03-26 21:27:25,"That made the job. Thanks again and sorry for the silly questions, I just didn't get how nightmare works. 
",johncornell,2016-03-30 03:43:49
543,2016-03-30 03:43:49,"@johncornell No problem.  Closing.
",rosshinkley,2016-03-30 03:43:49
543,2016-10-28 05:23:56,"thanks
",dcy0701,2016-03-30 03:43:49
542,2016-03-21 21:58:47,"Type() stopped working for me in 2.2.0. Works fine with 2.0.2 with exact same code. 

> Empty or falsey values provided for text will clear the selector

 What are falsey values ? Something specific changed in 2.2.0 for type() ? 
",xpiqu,2016-08-08 16:50:48
542,2016-03-22 16:00:52,"> What are falsey values ?

A value where `!value` is `true`.  `undefined`, `null`, `0`, `false` are all falsey.  In Nightmare's case, empty string (`''`) is also included.

> Something specific changed in 2.2.0 for type() ?

Not in 2.2.0, but 2.1.5 and 2.1.1 might be of interest.  Falsey or empty values clear the element retrieved by `selector` .

> Works fine with 2.0.2 with exact same code.

Could you provide an example of what is broken?
",rosshinkley,2016-08-08 16:50:48
542,2016-03-24 18:18:33,"`.type( '#search form.form-inline input' , ""something"")`
`.wait(1000)`
`.click('#search form.form-inline .pull-right')`

Using `var nightmare = new Nightmare({show: true});` the site returns 

> Search for """" 0 results 

Seems like I'm using a falsey value - empty string - in 2.2.0 but it gives me several results in 2.0.2
",xpiqu,2016-08-08 16:50:48
542,2016-03-25 01:15:16,"That fragment looks okay to me.  What happens immediately before the first call to `.type()`?

Would it be possible to supply a more complete example or a minimum reproduction case?
",rosshinkley,2016-08-08 16:50:48
542,2016-03-25 01:23:05,"It's also worth pointing out that in 2.0.2, `.type()` set the text instead of trying to issue key events.   [`.insert()`](https://github.com/segmentio/nightmare#insertselector-text) is closer (although not exactly) to how `.type()` worked.  Might be worth a look.
",rosshinkley,2016-08-08 16:50:48
542,2016-03-26 15:33:46,"Hey Ross,

Below my code snippet and what I did to find the problem.

<S_CODE_TOKEN>

I tried `.insert()`, same problem. 
I tried different  selectors, meaning I replaced `#search` with its parent divs. e.g. `#nav_bar div.container div.row div.col-md-3 div.ui-front form.form-inline input` ( `div.ui-front` is the same element as `#search` ) This time I saw 'something' being typed in the inputfield using type() - while previously I didn't saw this happening - but still 0 results.

Meanwhile I found a simpler method :
`.goto('https://somesite/search?z=something)` and it works.

Also worth mentioning is I used similar code on another inputfield on the same site and it works. Difference is this inputfield isn't  linked to the url, meaning `.goto('https://somesite/search?z=something)` isn't possible for this inputfield. 
",xpiqu,2016-08-08 16:50:48
542,2016-04-08 21:53:23,"Hm... that sounds like something strange in the input bindings on the site.  It's almost like the changes to the input aren't being picked up by whatever the site mechanism to issue a search is.

Have you tried using the method in 2.0.2?  Something like...

<S_CODE_TOKEN>

Possibly related to #548?
",rosshinkley,2016-08-08 16:50:48
542,2016-05-24 16:56:34,"@xpiqu With #548 included, can you give this another try?
",rosshinkley,2016-08-08 16:50:48
542,2016-08-08 16:50:48,"Closing due to inactivity.  If this is still a problem, feel free to reopen/open a new issue.
",rosshinkley,2016-08-08 16:50:48
541,2016-03-21 05:40:00,"I am trying to enter multiple lines of text in a text area using nightmare. This is my sample code snippet.

<S_CODE_TOKEN>

  })

how can this be done? 

I tried using 
`.type('textarea[id=""demobox""]', '/n')`
 but didn't work 
",sanathko,2016-04-13 04:48:18
541,2016-03-21 16:09:28,"Nightmare's `.type()` splits the string into characters blindly, causing `\n` to be typed as `['\', 'n']`.

There are two alternatives I can think of.  One, [use `.insert()`](https://github.com/segmentio/nightmare#insertselector-text).  The `.insert()` method adds text without triggernig keyboard events.  Text will be entered into the selector as passed, honoring newlines, backspaces, etc.  

Two,  use `.evaluate()`.  If you need keyboard events (eg `keyup`, `keydown`, etc) to occur with the typed text, use `.type()` as you are now followed by an `.evaluate()` call.  Something like:

<S_CODE_TOKEN>

It's worth pointing out that the keyboard events will not be fired for the newline.  Do you need the keyboard events for the newline?
",rosshinkley,2016-04-13 04:48:18
541,2016-03-22 12:53:05,"I was able to move to a new line using insert with \n. Thanks for that.
I am trying to use google input tools (http://www.google.com/intl/cn/inputtools/try/), so that after each letter I need to use the enter key. will this be possible?
",sanathko,2016-04-13 04:48:18
541,2016-04-08 21:43:46,"@sanathko I think so.

A little more research (and some later issues, notably #549 and #559) shows that you could also include a unicode character.  Something like `.type('#demobox', 'typing text line 1\u000d')`.
",rosshinkley,2016-04-13 04:48:18
541,2016-04-13 04:48:18,"@sanathko I'm considering this issue closed.  If you have more problems with this, feel free to reopen/open a new issue.
",rosshinkley,2016-04-13 04:48:18
540,2016-03-20 22:14:01,"I would like to load up a page and block all scripts that aren't from the same domain as well as block all requests for css files. Can someone point me in the right direction to figure out how to do this?
",justinmchase,2016-03-27 23:34:06
540,2016-03-21 16:20:19,"You can't... yet.  Nightmare does not expose `win.session.webRequest.onBeforeRequest` directly.  

This topic was discussed in #461: #425 would allow for hooking into the Electron events directly.  I put together [a load filter plugin](https://github.com/rosshinkley/nightmare-load-filter) to be published once that PR is accepted.
",rosshinkley,2016-03-27 23:34:06
540,2016-03-21 17:53:49,"Cool, I'll check those out and see if I can help. Thanks.

On Mon, Mar 21, 2016, 11:20 AM Ross Hinkley notifications@github.com
wrote:

> You can't... yet. Nightmare does not expose
> win.session.webRequest.onBeforeRequest directly.
> 
> This topic was discussed in #461
> https://github.com/segmentio/nightmare/issues/461: #425
> https://github.com/segmentio/nightmare/pull/425 would allow for hooking
> into the Electron events directly. I put together a load filter plugin
> https://github.com/rosshinkley/nightmare-load-filter to be published
> once that PR is accepted.
> 
> —
> You are receiving this because you authored the thread.
> Reply to this email directly or view it on GitHub
> https://github.com/segmentio/nightmare/issues/540#issuecomment-199363272
",justinmchase,2016-03-27 23:34:06
540,2016-03-25 00:11:03,"This PR appears to implement the feature I was looking for: #495
",justinmchase,2016-03-27 23:34:06
540,2016-03-26 02:31:35,"#495 _could_ work, but it's not as flexible as #425.  You lose access to other parts of the Electron internals as well as the ability to pass arguments (or do any kind of variable lifting) to the handlers themselves.
",rosshinkley,2016-03-27 23:34:06
540,2016-03-27 23:34:06,"Yeah after looking at the load filter plugin you made, I do think I like that. It appears to be the same thing only as an extension and more explicitly related to ""filtering"". Thanks for the explanations.
",justinmchase,2016-03-27 23:34:06
540,2016-08-21 23:20:12,"For those people landing here, you would want to try this:

<S_CODE_TOKEN>

For testing purposes, you can display the URL being filtered from the listener:

<S_CODE_TOKEN>

then run your script using:

<S_CODE_TOKEN>
",sebastienbarre,2016-03-27 23:34:06
539,2016-03-20 12:49:21,"The application I've built in electron is based on nightmare to fetch and create content.
I have nightmare on dependecies. When I build the application with electron-builder it does not give me errors.
When I start the packaged electron application the console tells me that ""there's no electron-prebuilt node modules""
",tomsotte,2016-04-03 04:02:03
539,2016-03-22 13:34:27,"Anyone?
Maybe I've explained it badly, are any clarification needed?
",tomsotte,2016-04-03 04:02:03
539,2016-03-22 15:54:45,"keep track of #393 , i will find time to support that 
",bjrmatos,2016-04-03 04:02:03
539,2016-03-22 15:57:50,"I need nightmare to make the app I'm working on to run, as I've not found a better alternative for electron.
Thanks, I really aprreciate!
",tomsotte,2016-04-03 04:02:03
539,2016-04-03 04:02:03,"This should be merged with #393, closing.
",rosshinkley,2016-04-03 04:02:03
539,2016-08-29 06:43:18,"hi guys! how's it going?

I just need to include nightmare in a electron application
",starInEcust,2016-04-03 04:02:03
538,2016-03-19 05:50:26,"Adds support for 'login' event.
See: https://github.com/atom/electron/pull/3250

Adds a new option defaultAuthentication
",neekolas,2016-03-30 03:57:34
538,2016-03-26 02:22:19,"I think this is a good inclusion, provided it's unit tested.  I think using something like [`basic-auth`](https://www.npmjs.com/package/basic-auth) with the test Express server would work.
",rosshinkley,2016-03-30 03:57:34
538,2016-03-26 15:31:44,"Looks like a duplicate #475 
",brrd,2016-03-30 03:57:34
538,2016-03-27 23:14:49,"#475 looks like a simpler version of this with tests already.
",justinmchase,2016-03-30 03:57:34
538,2016-03-30 03:57:34,"@brrd I'm sorry, I must have missed #475.

@justinmchase Agreed, closing as duplicate.
",rosshinkley,2016-03-30 03:57:34
537,2016-03-15 19:37:57,"Good day!
1. Why does

<S_CODE_TOKEN>

work but only with `yield`? What's the magic here?
1. Can I get a `Promise` instance without calling `Nightmare.prototype.then`?

Thanks!
",kuraga,2016-03-30 03:40:47
537,2016-03-16 19:07:07,"I presume this is wrapped in a generator and probably run with `vo` or `co` or something similar?

Nightmare (partially) implements promises, as you have already discovered.  A very condensed, hand-waving description:  the `.then()` call is called by `yield`, the result of which is returned to `exists`.  Without `yield`, `exists` will be the Nightmare instance itself.

Your example, rewritten with the promise implementation for what it's worth:

<S_CODE_TOKEN>

As for your other question about getting a `Promise` instance without calling `.then()`, I'm curious why you would want to do that.  You could probably use the Nightmare instance itself, but that might have side effects you don't want.  What are you trying to accomplish?
",rosshinkley,2016-03-30 03:40:47
537,2016-03-16 19:42:51,">  the `.then()` call is called by `yield`

That's logical but I don't see this this behavior in articles about generators... About `.next()` call only not `.then()`. Who does call `.then()`?

I want to understand:
1) the schema (of Nightmare and generators),
2) if I can use Nightmare with vanilla NodeJS and without Mocha.

Thanks!
",kuraga,2016-03-30 03:40:47
537,2016-03-16 23:29:58,"> That's logical but I don't see this this behavior in articles about generators...

My original hand-waving explanation buries almost all of the complexity involved, and frankly, I'm not sure I have a _great_ grasp on it myself.  I'll give it a try, at least.

> About .next() call only not .then(). Who does call .then()?

This requires a longer explanation.

---

#### Iterators

I think it's important to first talk about [iterators](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterator), the return type of generators.  They are comprised of two parts: a `done` member, which is true if the iterator is past the end of the iterated sequence, and a `value` member, which can be any value.  With that in mind, let's take a look at an example:

<S_CODE_TOKEN>

...which will output:

<S_CODE_TOKEN>

Here, we can see that `yield` returns `""hello""` and waits for `.next()` to be called.  When it is, the generator iterates with `done` being `true`.

#### Promises and iterators

You can also yield on promises, although it's not as pretty.  Calling `.then()` is up to the calling code.  The following example is a bit trickier:

<S_CODE_TOKEN>

...which will output:

<S_CODE_TOKEN>

It's a little bit uglier, but not all that different than before: the generator function yields the promise, which the calling code resolves.  The calling code then calls `.next()` with the resolved value with some additional information, passing that argument back to `x`.  Finally, `x` has `""!""` added and returned for the last return value.

#### `co` and `.then()`

Now, with that background out of the way, I'm going to focus on `co` because I think `vo` relies on it (via `wrapped`) for generators.  Additionally, I think `co` is the most straightforward way to answer your question.

`co` wraps promises up for you so you can execute generator code without intermediate calls to `.next()`.  It will return the resolved value back to `.next()` and ultimately back to what `yield` is setting or being passed to (`x` in our previous example).  You lose the ability to run intermediate code, but gain the ability to run complex generators without having to manage the `yield` chain yourself.  In your original question, `var result = yield page.exists('h1.title')` works because `co` handles `.then()` for you: since Nightmare is a `then`able, `co` will resolve the value returned by `.exists()`.

#### Further Reading

If you're interested, I've put together a couple of places in the `co` source that might help your understanding:
- `co` uses next [internally](https://github.com/tj/co/blob/master/index.js#L65)
- `co` [promisifies](https://github.com/tj/co/blob/master/index.js#L100) all `.next()` values
- `co` uses an internal [`next` function](https://github.com/tj/co/blob/master/index.js#L98-L104) to determine if the generator is complete and to resolve values if complete, and if not, issue a call to `.then()` on the value that has been made into a promise

Hopefully the above makes sense.  Please let me know if you have questions.

---

> if I can use Nightmare with vanilla NodeJS and without Mocha.

Of course!  As of Node 4.x, promises are natively supported.  This means you can use vanilla javascript to control Nightmare.  For completeness, the decision to move to using native promises over something like `co` is explained (at length) in #491.

An example on using Nightmare with native promises [is provided in the readme](https://github.com/segmentio/nightmare#examples).
",rosshinkley,2016-03-30 03:40:47
537,2016-03-17 10:43:21,"@rosshinkley big thanks about explanation!

> > if I can use Nightmare with vanilla NodeJS and without Mocha.
> 
> Of course! As of Node 4.x, promises are natively supported.

I meant ""without `mocha-generators`, `mocha`, `co` and `vo`"".

> Please note that the examples are using the `mocha-generators` package for Mocha, which enables the support for generators.

Is this description wrong here? Do you mean ""which wraps generator function with `co`/`vo`"" instead of ""enables the support for generators""? NodeJS 4.2 does support generators (so they are already ""enabled"") but seems like code doesn't work without `mocha-generators`.
",kuraga,2016-03-30 03:40:47
537,2016-03-17 19:43:39,"@kuraga No problem.

> I meant ""without mocha-generators, mocha, co and vo"".

You don't need `co` or `vo` to run Nightmare.  ES6 promises are native - meaning no library is required - and work fine.  You _can_ run [Nightmare with callbacks](https://github.com/rosshinkley/nightmare-examples/blob/master/docs/beginner/callbacks.md), but it's not directly supported.  Maybe I don't understand what the problem is?

> Is this description wrong here? Do you mean ""which wraps generator function with co/vo"" instead of ""enables the support for generators""? NodeJS 4.2 does support generators (so they are already ""enabled"") but seems like code doesn't work without mocha-generators.

I think it's a little misleading.  Generators are native to Node 4.x.  I think the point the documentation is trying to make is that the tests are written using generators and run using `mocha-generators` which I believe works like `co` or `vo`.
",rosshinkley,2016-03-30 03:40:47
537,2016-03-18 09:52:35,"The problem is that `yield promise` doesn't call `promise.then()` in vanila NodeJS (if I use example with generators but without `mocha-generators`. Promises and generators are enabled). Seems like it just yields `promise` instead.
",kuraga,2016-03-30 03:40:47
537,2016-03-18 16:32:07,"> The problem is that `yield promise` doesn't call `promise.then()` in vanila NodeJS...

No, it does not.  If you use `vo` or `co` or `mocha-generators`, it takes care of that for you.  If you wanted to use `yield` and `.then()` in vanilla JS with no dependencies, you'd have to manage the promise chain yourself.  That's the point I was trying to make in [this comment](https://github.com/segmentio/nightmare/issues/537#issuecomment-197603932).  

I also feel like maybe there's a misunderstanding of how Nightmare is intended to be used.  You don't _need_ to use `yield`.  Using generators adds convenience, but isn't strictly necessary.  You could use the resolved callback of `.then()` to get values from the Nightmare `then`able.  That's how the example at the top of the readme works.

Backing all the way up to your original example, you could check for/assert for existence without yield or the need for generators.  I know I wrote it before, but presented again, consider:

<S_CODE_TOKEN>

This will take the existing page, queue up an existence check, then run the queue and call back with the result of that existence check.  Is this method causing problems?  Do you have a more complete example?
",rosshinkley,2016-03-30 03:40:47
537,2016-03-18 18:08:25,"> No, it does not. If you use vo or co or mocha-generators, it takes care of that for you. If you wanted to use `yield` and `.then()` in vanilla JS with no dependencies, you'd have to manage the promise chain yourself. 

That's exactly I wanted to hear. Remember my words:

> > Please note that the examples are using the `mocha-generators` package for Mocha, which enables the support for generators.
> 
> Is this description wrong here? Do you mean ""which wraps generator function with `co`/`vo`"" instead of ""enables the support for generators""?

Let's precise documentation?

Thanks, @rosshinkley !
",kuraga,2016-03-30 03:40:47
537,2016-03-18 22:40:12,"> That's exactly I wanted to hear. Remember my words:

I understand what your point is now, I think.  The documentation doesn't explicitly say how and when to use `yield`, generators, etc.  I don't think the documentation _should_:  Nightmare is designed for use out of the box with plain ES6 promises.  It's up to you, the user, to determine what's best for your application's flow control.

I'd be curious to hear if anyone is using ES6 managing promises with yields themselves.  I doubt yielding on a promise outside of a flow control library is common, but don't have any evidence to back that assumption.

> Let's precise documentation?

We talked about documentation at length in #491 (it's a very, _very_ long read).  Ultimately, this is why I started [nightmare-examples](https://github.com/rosshinkley/nightmare-examples/) - it was evident the documentation and usage tripped people up, so adding supplementary documentation and examples here and there to try and clear up some of the common problems made sense.  How `co` et al interacts with `yield` and promises might make for a useful addition.
",rosshinkley,2016-03-30 03:40:47
537,2016-03-30 03:40:47,"I believe this issue is resolved.  If this is still a problem, feel free to reopen/open another issue.
",rosshinkley,2016-03-30 03:40:47
536,2016-03-15 16:28:38,"The OS is Ubuntu 14.04 on DigitalOcean. I've installed all of these libraries:

<S_CODE_TOKEN>

I'm leveraging the `xvfb` NPM package to start them up inside my Node script and everything works, except for this:

I'm logging in to this website so that I can re-use the logged in session state for subsequent crawls, but for some reason, the session is not persisting.

I've tested this script on OSX, though without the usage of the `xvfb` NPM package, and it works.

Is there something that `xvfb` does that prevents the session from persisting?

Note: The `enterIframe` is from [this PR](https://github.com/segmentio/nightmare/pull/496).

<S_CODE_TOKEN>
",rclai,2016-03-16 13:17:52
536,2016-03-15 17:06:23,"Found out that if I run this script like this:

`xvfb-run node index.js`

The session persistence works. Persistence doesn't work when I start up `xvfb` inside the Node script.
",rclai,2016-03-16 13:17:52
535,2016-03-15 02:45:30,"Thought I would add this here to as it may be helpful to others:

Trying to get Nightmare up and running with a local dev site with self signed certificates.

Link to full question here: http://stackoverflow.com/questions/36001701/setting-up-a-nightmare-js-test-with-electron-and-a-self-signed-certificate
",CrashyBang,2016-03-16 20:19:29
535,2016-03-16 17:44:10,"Looks like you removed your question on SO.  Also, this _might_ be a duplicate of #530.

I'm assuming you're having trouble with the self-signed certificate giving you security problems.  Is that the issue you're having?

If so, you should be able to use [`ignore-certificate-errors` switch](https://github.com/segmentio/nightmare#switches) to clear that up.  A quick example might be useful.

The Express server using a self-signed SSL certificate:

<S_CODE_TOKEN>

The Nightmare script:

<S_CODE_TOKEN>

... prints ""hello world"" without issue.
",rosshinkley,2016-03-16 20:19:29
535,2016-03-16 20:19:29,"Hey @rosshinkley,

Thank you, yeah sorry I removed my SO question should have updated here I actually did not have my `.dev` domain added to me ehosts and Chromes `.dev` magic was working for me but electron obviously does not do that.

Sorry for the question felt like a fool when I figured it out.

Cheers,
Otis.
",CrashyBang,2016-03-16 20:19:29
535,2016-03-16 20:21:45,"@CrashyBang Ahhh, okay.  That makes sense.  Glad you got it sorted out.
",rosshinkley,2016-03-16 20:19:29
534,2016-03-13 21:04:05,"My team and I are developing an application that monitors our other servers so we can be the first to know when a server goes down. We've used nightmare to achieve this, and it's really reliable.

.....That is, it's really reliable on our development machines and mac minis in our office. We tried to upload our code to an AWS instance running ubuntu 14.04.3 and had no success. After some research, we discovered that electron was the problem. For whatever reason, electron-prebuilt does not come with the right stuff to be run off of ubuntu and work as expected.

Because electron does not work, we suspect the headless browser does not get created, and therefore tests that we run fail silently. No errors are thrown, but we can see that as soon as the first test is hit no further progress is made and during the next testing cycle the first test is hit again before stopping and waiting until another testing cycle begins.

Is there a way around this? Maybe a different version of electron can be used? Has anyone else had problems running nightmare on an AWS instance, or been able to get nightmare working on one?
",mwiegant,2016-04-11 13:19:34
534,2016-03-13 22:59:21,"You can use Xvfb (virtual framebuffer). See https://github.com/segmentio/nightmare/issues/224#issuecomment-182470015
",inversion,2016-04-11 13:19:34
534,2016-03-13 23:05:23,"If I absolutely cannot get [zombiejs](http://zombie.js.org/) to work, which is what I am now trying to use, I will go back and try your suggestion.  It sounds like the guys who were participating in your linked thread were having to try some very involved processes which is a red flag for me.

Thanks for taking the time to reply,
",mwiegant,2016-04-11 13:19:34
534,2016-03-13 23:14:27,"I've had success on Ubuntu 14.04 Server from installing the prerequisite packages (see the Dockerfile in the linked comment) and just running node with `xvfb-run node ...`.
",inversion,2016-04-11 13:19:34
534,2016-03-14 03:22:18,"Xvfb is how we use Nightmare in-house. it's not nearly as complicated as its been made out to be either. I can help you get it setup if you like @mwiegant 
",stephenmathieson,2016-04-11 13:19:34
534,2016-03-14 03:26:05,"linking #421 due to the underlying hidden failure here 
",stephenmathieson,2016-04-11 13:19:34
534,2016-03-20 19:58:16,"I have gotten it working on travis-ci using this script:

<S_CODE_TOKEN>

I'm pretty sure that travis is just using linux on AWS
",justinmchase,2016-04-11 13:19:34
534,2016-03-22 21:01:15,"I was able to get my tests running by prefixing `npm` with `xvfb-run`. E.g.

`$ xvfb-run npm test`
",lukebussey,2016-04-11 13:19:34
534,2016-04-11 13:19:34,"I believe this is a duplicate of #224, closing.
",rosshinkley,2016-04-11 13:19:34
533,2016-03-12 18:01:55,"How best way to get in cecle?
`
function clickBtn(){
    nightmare
        .goto('https://site.com/')
        .type('input[name=""test-input""]', 'text')
        .click('.add-test')
}

for(var i= 0; i<5; i++) {
    clickBtn();
}
`
",6pm,2016-04-13 18:34:38
533,2016-03-16 18:26:52,"This is similar to #522.  Nightmare's calls are asynchronous, but can only run one instruction at a time.  Your example is also queueing operations, but never executing them.

There are a couple of options for getting results in series.

### Use `Array.reduce`

You could prepare several operations in a loop, pushing each promise onto an array and then executing the promises in series using `Array.reduce`.  For example:

<S_CODE_TOKEN>

Note the call to `.then()` in the loop.  Without this, Nightmare will queue the `.goto()` and `.title()` calls 5 times, executing them for the first then in the `.reduce()` series.  This will result in one instance of the title and four undefined array members.

### Use [`vo`](https://github.com/lapwinglabs/vo)

Style-wise, vo might be closer to what you have in mind.  This would let you yield in the loop to get the information you want.  For example:

<S_CODE_TOKEN>

### Use [`co`](https://github.com/tj/co)

`co` is similar to `vo`, but instead of taking a callback, it returns a promise.  For example:

<S_CODE_TOKEN>
",rosshinkley,2016-04-13 18:34:38
533,2016-04-13 18:34:38,"I believe this issue is resolved.  If you have more questions about this topic, feel free to reopen/open a new issue.
",rosshinkley,2016-04-13 18:34:38
533,2016-06-12 18:24:10,"Maybe you can add this to the documentation? 

I guess it's a very common case, e.g. when you screen-scrape something and want to download a lot of documents (like invoices) available from a single page, for example.
",rmoriz,2016-04-13 18:34:38
533,2016-06-15 03:31:24,"@rmoriz There is _some_ of that in [`nightmare-examples`](https://github.com/rosshinkley/nightmare-examples).  The Nightmare documentation is lean, to be sure, but much of that is intentional.
",rosshinkley,2016-04-13 18:34:38
532,2016-03-12 13:53:24,"How can we save HTML content?
",nick2012,2016-03-30 03:38:09
532,2016-03-13 15:21:57,"Hello. Run this code:
`var Nightmare = require('nightmare');
var nightmare = Nightmare({ show: true });
var fs = require('fs');

nightmare
  .goto('http://site.com')
  .evaluate(function () {
    var page =  document.querySelector('body').innerHTML;
    fs.writeFile('page-html.txt', page, function (err) {
        if (err) return console.log(err);
        console.log('Hello World > helloworld.txt');
     });
    return page 
  })
  .end()
  .then(function (result) {
    console.log(result)
  })`
it must be works.
",6pm,2016-03-30 03:38:09
532,2016-03-13 15:45:43,"I've tried this:

<S_CODE_TOKEN>

but it gives the following error:

<S_CODE_TOKEN>
",nick2012,2016-03-30 03:38:09
532,2016-03-16 18:32:46,"What version of Node are you running?  I suspect you're running with <=0.12.x.

If that's the case, you may want to consider running with the `--harmony` switch, including a Promise polyfill like [`promise-polyfill`](https://www.npmjs.com/package/promise-polyfill), or upgrading to a more recent version.
",rosshinkley,2016-03-30 03:38:09
532,2016-03-16 20:59:49,"rosshinkley, you are right about that. 
I've updated it, using this tutorial: http://stackabuse.com/how-to-install-node-js-on-ubuntu/
I don't know if everything is ok now, but, now the following happens:

1) I can see Electron opening the page. 
2) I cannot find the saved file. 

This is what I've just ran:

<S_CODE_TOKEN>
",nick2012,2016-03-30 03:38:09
532,2016-03-16 21:22:17,"@nick2012 At a glance, the linked article should work fine.  Glad you got that sorted.

For your source, you're trying to write the file inside of an `.evaluate()` call, which runs in the Electron instance, not in your source.  Evaluated functions are stringified, transmitted to the wrapped Electron instance, and rebuilt using the `Function` constructor.  The variable lifting you're doing with `fs` won't work as the function is constructed and run in an entirely separate context, and `fs` is not included in the context object.  (Off the top of my head, I don't think `require` is even on the context object that is applied against `.evaluate()`.  Even if you wanted to include it there, I don't think you could.)

Fixing it should be straightfoward: rather than trying to write the file interior to `.evaluate()`, move the write out to `.then()`.  Something like:

<S_CODE_TOKEN>

... should get you headed in the right direction.
",rosshinkley,2016-03-30 03:38:09
532,2016-03-16 21:37:17,"Thank you very much, rosshinkley.
You've really helped me a lot, also in understanding how it does work.
",nick2012,2016-03-30 03:38:09
532,2016-03-17 17:45:38,"rosshinkley, may I ask you a few more questions?
1) How can I feed this line from a txt file filled with links? "".goto('http://site.com')"" so that the script would connect and save a bunch of different links?
2) Can I somehow make it save the cookies, so that it doesn't login each time I run the script using the credentials that I provide?
",nick2012,2016-03-30 03:38:09
532,2016-03-17 20:35:36,"> rosshinkley, may I ask you a few more questions?

Of course.  I'm happy to help. :)

> 1) How can I feed this line from a txt file filled with links? "".goto('http://site.com')"" so that the script would connect and save a bunch of different links?

It depends on how sophisticated you need to be.  The following example will work with reasonably small file sizes and uses `Array.reduce` to run promises sequentially:

<S_CODE_TOKEN>

> 2) Can I somehow make it save the cookies, so that it doesn't login each time I run the script using the credentials that I provide?

I thought the session information is persisted to the default session.  This _should_ work out of the box.  However, if you open an instance, log in, and open a second instance with the same persistence data before closing the first, the session information doesn't appear to be shared (or the data from the first session isn't persisted or shareable yet).  Does this differ from the behavior you're seeing?

You may also want to take a look at [`webPrefereces.partition`](https://github.com/atom/electron/blob/master/docs/api/browser-window.md#new-browserwindowoptions), as well as [`options.paths`](https://github.com/segmentio/nightmare#paths).  #398 might also interest you.
",rosshinkley,2016-03-30 03:38:09
532,2016-03-17 21:14:22,"Thank you. Everything that you wrote works perfect. 
Now I realize that I have to handle various scenarios, like selector has a different prefix, and the script does not click it, or selector doesn't exist at all and the script should continue with the next page. :)
You are right about the cookies also. At first it didn't keep it, but now it does. Strange.

Do you think there's something simpler for crawling than Javascript based APIs? 
I find it so hard to advance with all these restrictions. 
I liked so much the freedom of Perl. Too bad that mechanize::firefox fails for some unknown reason to me.
",nick2012,2016-03-30 03:38:09
532,2016-03-17 22:42:07,"> Thank you. Everything that you wrote works perfect.

No problem, although it sounds like it might be insufficient.

> Now I realize that I have to handle various scenarios, like selector has a different prefix, and the script does not click it, or selector doesn't exist at all and the script should continue with the next page.

You can still do that, but it requires increasing complexity inside the `Array.reduce`.  It's also worth mentioning that you could write arguably neater code using something like `vo` or `co`.  For example, the above rewritten using `vo` might look like this:

<S_CODE_TOKEN>

... that might make it simpler to add conditions and add logic you need.

> You are right about the cookies also. At first it didn't keep it, but now it does. Strange.

I tried digging into this when looking at #398, but didn't get terribly far.  For now, I'm accepting that it's a known quirk, but I'd love to know the underlying reason.

> Do you think there's something simpler for crawling than Javascript based APIs? 
> I find it so hard to advance with all these restrictions. 

Have a look at the above `vo` example.  It sounds like using generators + a flow control library might make more sense to you.
",rosshinkley,2016-03-30 03:38:09
532,2016-03-30 03:38:09,"I believe this matter is closed.  Closing.
",rosshinkley,2016-03-30 03:38:09
532,2016-05-06 19:52:17,"removed
",nick2012,2016-03-30 03:38:09
531,2016-03-07 13:34:02,"It seems like setting a cookie always fails. Below is my config object:

`
{
    show: false,
    images: false,
    waitTimeout: 5000,
    paths: {
        userData: path.join('./appData/userData'),
        temp: path.join('./appData/temp'),
        home: path.join(./appData/home')
    }
}
`

What I have done is: 
start a nightmare instance A to url , login to somewhere, extract all cookies as array, close instance A
then start a another instance B, set cookies to extracted ones from instance A

Problem is B.cookies.set(array) always fails...
`
B.cookies.set(array).then(null, function(err) {
  // err is an empty object...
});
`
One of cookie entry has attribute like:
""domain: something.abc.com"",""hostOnly"":true,""path"":""/"",""secure"":false,""httpOnly"":true,""session"":true,""expirationDate"":0
It is the one that fails all the time...
Looks like it is because setting cookie to domain 'something.abc.com' when you are not on that page is causing this problem...
Can anyone help please...
",Velissel,2016-07-09 16:51:55
531,2016-03-14 20:28:52,"I am having this issue as well. My cookies are not transferrable from one nightmare instance to another, even when using cookies.set.
",rclai,2016-07-09 16:51:55
531,2016-03-16 18:54:09,"I don't think you can transfer cookies across domains.  The [current specification](http://tools.ietf.org/html/rfc6265) that most browsers honor says the domain requested from the browser must match the cookie's origin domain or be a subdomain.  I'm paraphrasing, of course, but that's the spirit.  [This article on the current state of cookie domains](http://bayou.io/draft/cookie.domain.html) does a much more comprehensive job explaining how this works than I could do here.

@Velissel's example appears to be trying to put cookies from one domain onto another, which is forbidden to the best of my knowledge.

@rclai _might_ be talking about something different: are you trying to reuse cookies from the same domain across Nightmare instances?
",rosshinkley,2016-07-09 16:51:55
531,2016-03-16 18:58:26,"@rosshinkley I figured it out, this issue is not relevant to me anymore. I used the persistence options.
",rclai,2016-07-09 16:51:55
531,2016-03-16 19:09:30,"@rclai Ah, okay.  Good to know.  Thanks for the response. :)
",rosshinkley,2016-07-09 16:51:55
531,2016-03-16 23:26:45,"@rosshinkley, problem is even with .something.abc.com, it does not work. What I wanted to do is as simple as set cookies before I start anything, but still can not find out a way
",Velissel,2016-07-09 16:51:55
531,2016-03-16 23:35:57,"> ... set cookies before I start anything...

Are you trying to set cookies before your first call to `.goto()`?  I don't think `.cookies.set()` will work prior to a page being loaded.
",rosshinkley,2016-07-09 16:51:55
531,2016-03-17 02:16:45,"@rosshinkley, the procedure is like this, I firstly go to google, then try to set cookies of a session I extracted from something.abc.com so that multiple newly opened instances will have the same session when I change those instances to something.abc.com, but it fails all the time no matter if domain is .something.abc.com or something.abc.com.

I tried it with phantomJS, it works with dot prefixed. Maybe it is the implementation of electron preventing it?

As far as I know, cookies without dot as prefix is usually set through set-cookie header section of a server's response, but most modern browsers consider cookies with or without dot at beginning the same now, so I was expecting electron to act the same...

BTW, using persist:somthing does not work for the website I am working on
",Velissel,2016-07-09 16:51:55
531,2016-03-17 21:05:32,"> ...  I firstly go to google, then try to set cookies of a session I extracted from something.abc.com so that multiple newly opened instances will have the same session when I change those instances to something.abc.com...

@Velissel I understand you want to preload the cookies before navigation, but I don't think Nightmare allows for adding cookies _prior_ to navigation.  I still don't think adding cookies across domains like you're doing is permitted.

With #425, you could probably extend Electron to add a hook to the `'did-start-loading'` event to add cookies prior to the page loading.  If it interests you, I could pull together an experimental plugin to prove feasibility.

> I tried it with phantomJS, it works with dot prefixed. Maybe it is the implementation of electron preventing it?

I'm skeptical it works in exactly the manner you're describing under Phantom.  I'd have to put together an experiment to see for myself.

> As far as I know, cookies without dot as prefix is usually set through set-cookie header section of a server's response, but most modern browsers consider cookies with or without dot at beginning the same now, so I was expecting electron to act the same...

This is correct - with or without is considered equivalent, at least to the best of my knowledge.

> BTW, using persist:somthing does not work for the website I am working on

Could you expand on this?  What exactly isn't working?
",rosshinkley,2016-07-09 16:51:55
531,2016-04-04 01:02:23,"> Could you expand on this? What exactly isn't working?

If I get purpose of persist partition correct, the scenario I am having is like this:
1. start an instance with partition set as 'persist:SAHRED_SESSION'
2. open www.example.com
3. type credentials to login
4. page is redirected to something.example.com and cookies for session is set at this point
5. start another instance with partition set as 'persist:SHARED_SESSION'
6. open something.example.com
I was expecting new instance will stay at something.example.com, but the fact is it gets redirected back to www.example.com because session in first instance is not shared with new instance

> @Velissel I understand you want to preload the cookies before navigation, but I don't think Nightmare allows for adding cookies prior to navigation. I still don't think adding cookies across domains like you're doing is permitted.
> With #425, you could probably extend Electron to add a hook to the 'did-start-loading' event to add cookies prior to the page loading. If it interests you, I could pull together an experimental plugin to prove feasibility.

If persist partition works then there is no issue on this at all. I know setting cross-domain cookie using javascript is definitely not permitted for safety reason, but when it comes to testing, having a way to preload cookie to keep session status is resonable I feel
",Velissel,2016-07-09 16:51:55
531,2016-04-08 04:10:35,"> start another instance with partition set as 'persist:SHARED_SESSION'

Ah!  I think I see the issue.  I first hit this problem in trying to address #398, and then again in #532 (specifically, [this comment](https://github.com/segmentio/nightmare/issues/532#issuecomment-198070852)).  If you open an instance, log in, and open a second instance with the same persistence data before closing the first, the session information doesn't appear to be shared (or the data from the first session isn't persisted or shareable yet).  I'm _still_ not sure why this is the case.

> ... but when it comes to testing, having a way to preload cookie to keep session status is resonable I feel

I agree, but from the sound of it, you shouldn't have to preload your session cookie to begin with.  That session should persist.
",rosshinkley,2016-07-09 16:51:55
530,2016-03-04 18:49:35,"Hello. First of all, thanks for everyone that contributed to this awesome project!

Is there an equivalent to `--ignore-ssl-errors` (command line parameter in Phantom) in Nightmare?

I was able to find an option to the Nightmare constructor, `ignoreSslErrors` but it doesn't seems to be working (the page gets all dark and nothing happens). I found it outside of official documentation, so I don't really trusted it would work after all.

Thanks!
",nubunto,2016-03-18 13:25:05
530,2016-03-04 23:51:41,"I _think_ you should be able to use the `ignore-certificate-errors` switch as documented under [switches](https://github.com/segmentio/nightmare#switches):

<S_CODE_TOKEN>

Does that work for you?
",Mr0grog,2016-03-18 13:25:05
530,2016-03-14 02:31:33,"I've been out of the project where I was prototyping with Nightmare, but I'll check it first thing tomorrow and get right back.
",nubunto,2016-03-18 13:25:05
530,2016-03-16 17:45:48,"I can validate that works with the switch enabled.  I posted a brief example in #535.
",rosshinkley,2016-03-18 13:25:05
530,2016-03-17 11:52:46,"It worked here as well. Thanks for the help!
",nubunto,2016-03-18 13:25:05
530,2016-03-17 15:19:06,"No problem. @nubunto, do you mind closing this issue since you’ve got it figured out?
",Mr0grog,2016-03-18 13:25:05
529,2016-03-04 13:10:31,"Audio may be required to be played in certain circumstances, this allows
the default audio mute state to be overridden.
",Oceanswave,2016-04-01 15:22:40
529,2016-03-04 13:16:23,"Ug. getting random CI test timeout failures from unrelated code.
",Oceanswave,2016-04-01 15:22:40
528,2016-03-03 14:51:46,"Audio may be required to be played in certain circumstances, this allows
the default audio mute state to be overridden.
",Oceanswave,2016-03-04 13:06:21
527,2016-03-03 03:28:38,"In attempting to explain the behavior of `run` and `then` for #516, I realized the details of how Nightmare’s `then` method works means you can’t just say “works like `promise.then`.” The difference is minor and the likelihood of it tripping someone up is probably low, but it could still happen, especially given the promise-y expectations the method’s name sets up. Since `then` is now the preferred API, it should really be documented and, in doing so, the details of `then` should be made clear.

In the spirit of @rosshinkley’s comments on #491:

> I am certain it's going to come up in questions again and I wanted to have a reference to point at.

It might be helpful to understand _why_ Nightmare’s `then` method does not behave in accordance with a promise’s `then` (or any Promises/A+ compliant thenable) in order to better document it.

Specifically, _if an error occurs in the success callback that is passed as the first argument to `then` (or if that callback returns a promise that rejects), the error callback passed as the second argument to `then` will handle it instead of it bubbling up the promise chain._

Is this difference intentional? If so, what was the intent behind that decision? What was it meant to enable or prevent, if anything? If not, is this a bug to be fixed?
",Mr0grog,2016-04-23 21:49:05
527,2016-03-03 15:39:38,"I suspect the difference is a side effect of ensuring `vo`, `co`, and possibly `mocha-generators` Just Work&trade;.  Consider the following (admittedly contrived) example:

<S_CODE_TOKEN>

Out of the box, `vo` runs the promise and passes internal methods to `fulfill` and `reject` as prescribed by [the native promise documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise).  If you remove the `.catch()` call from Nightmare under `.then()`, the above example hangs.  Simillarly, with `co`, the rejection callback is never called (for hopefully obvious reasons).

All of that said, I agree with you that it is a _little_ misleading that you couldn't modify my original example to something like the following:

<S_CODE_TOKEN>

... which is the situation I think you have in mind.  I think this top-level `.catch()` is a legitimate use case.  I don't think it's as much of an edge case as you're leading us to believe. :)

And with that in mind, [I played around with Nightmare in an attempt to address this issue](https://github.com/rosshinkley/nightmare/blob/527/lib/nightmare.js#L321-L343).  I haven't opened a PR for it _just_ yet, I wanted to get feedback from you first.  Thoughts?

---

PS: excellent explanation at #516.  Thank you for taking the time to do that. :)
",rosshinkley,2016-04-23 21:49:05
527,2016-03-04 21:44:17,"Ok, I’m suddenly realizing that my initial post was super hand-wavey on what the exact difference was, and it’s that we are doing this:

`nightmare.then(onSuccess, onError)  -->  promise.then(onSuccess).catch(onError)`

instead of:

`nightmare.then(onSuccess, onError)  -->  promise.then(onSuccess, onError)`

which is only very subtly different (namely, it conflates an error in the thing being promised [actions in Nightmare] with an error in user code _handling_ the promise). More below…

> If you remove the .catch() call from Nightmare under .then(), the above example hangs.

Right—but you wouldn’t want to just remove the `catch`, call; you’d want to pass the `reject` callback as the second argument to `then`'s internal `then`. So then the implementation of `then` would then be:

<S_CODE_TOKEN>

If I make that change, I see identical behavior to the previous implementation when using Vo/Co (we get to logging 'done', but not to actually closing down nightmare). Is that what you see, or am I misunderstanding what you were getting at here?

> All of that said, I agree with you that it is a little misleading that you couldn't modify my original example…

Wellllll, as long as `console` is present (which it is), that example works “right” in promise terms, though it doesn’t (and arguably shouldn’t) do the same thing as your previous generator example. If you always want “done” to get logged, you’d have to do it after handling the error:

<S_CODE_TOKEN>

But anyway, none of that really changes if `then` behaves like it currently does or if exactly like `promise.then`. Here’s (I think) the only difference in practice:

<S_CODE_TOKEN>

In a normal promise, our error handler would never run because the only error here is in the success callback. The way Nightmare implements `then`, though, it does—the console logs `[TypeError: console.oops is not a function]`.

If you used `catch` (or a second `then`) instead of a two-arg `then`, you’d both expect (with a standard promise) and get the same behavior Nightmare produced in the above example:

<S_CODE_TOKEN>

That’s why I don’t think a lot of people will trip over this—the above is generally the recommended way to do things (to ensure you catch your own errors in your handler) and it behaves just fine with Nightmare right now.

> And with that in mind, I played around with Nightmare in an attempt to address this issue.

So assuming we _wanted_ `then` to behave exactly like a promise’s then (which I am trying not to assume is the case), I think the relevant change would be my first example at the top of this comment.

In your experiment, you’re handling a lot of different conditions explicitly, but still using the `then(onSuccess).catch(onError)` construct, which is the source of the difference in behavior. That is to say, I don’t think your change there would “solve” what I was trying to get at with this issue, though it might solve something else I wasn’t thinking about :)
",Mr0grog,2016-04-23 21:49:05
527,2016-03-05 03:46:03,"As I'm rereading what I originally wrote, and the original content of my little experiment, three things jump out: one, that I was hopelessly vague; two, that your solution was staring me in the face and I didn't spot it off the bat; and three, I am pretty certain I am way, _way_ off.  (And now I feel silly.  More on your solution/my feelings in a moment.)

>  Is that what you see, or am I misunderstanding what you were getting at here?

I'm following now, and thank you for the clarification.  I can see why you were confused, though: I had gotten it in my head that the way Nightmare implemented `.then()`, it might be eating the exception, making a `.catch()` at the end of a chain never get called.  Clearly not, as `.then()`/`.catch()` with falsey arguments still returns a promise.  Looking over my original notes and sandbox, I'm not entirely sure how I got to the ""eats exceptions"" conclusion.

> If you always want “done” to get logged, you’d have to do it after handling the error:

No, I wouldn't expect ""done"" to always get logged, and this is where I _knew_ I had been vague, and was reasonably certain I had done something improperly.  See previous paragraph.  I was well into the weeds and wrong whole cloth.

> So assuming we wanted then to behave exactly like a promise’s then (which I am trying not to assume is the case),

I think expecting Nightmare's `.then()` implementation to behave like a compliant promise seems reasonable.  Why would that be an unfair assumption?  Is there something I'm not thinking of?  More to the point, would there be a reason for Nightmare's `.then()` _not_ to behave like Promise's `.then()`?

> That is to say, I don’t think your change there would “solve” what I was trying to get at with this issue, though it might solve something else I wasn’t thinking about :)

It doesn't, at least nothing your implementation doesn't also solve.  I was fighting my own ignorance - again, see above.

Setting self-deprecation and self-disappointment aside, I agree - especially now that I think (hope?) I understand the problem - this is a pretty minor inconsistency, but an inconsistency nonetheless.  I'd prefer to err on the side of compliance over not.  Thoughts?
",rosshinkley,2016-04-23 21:49:05
527,2016-03-05 07:53:47,"> Looking over my original notes and sandbox, I'm not entirely sure how I got to the ""eats exceptions"" conclusion.

I’m betting that might be at least partially my fault; I think I said something to that effect in my description on #516. _In fact,_ that is exactly what I thought was happening at the time, before I sat down to really think about it when writing this very issue. The original title was “difference**s** between…” before I realized that wasn’t actually happening :P

> Is there something I'm not thinking of? More to the point, would there be a reason for Nightmare's .then() not to behave like Promise's .then()?

Not that I can think of; that’s why I raised the issue! Hopefully @matthewmueller will fill us in at some point.

> I'd prefer to err on the side of compliance over not. Thoughts?

I would generally agree. But since @matthewmueller didn’t write any docs and didn’t invite any discussion or review of the feature, I didn’t want to make an assumption about whether the non-compliant behavior was intended or just a bug. So I asked by way of this issue :)
",Mr0grog,2016-04-23 21:49:05
527,2016-04-18 05:04:37,"> > I'd prefer to err on the side of compliance over not. Thoughts?
> 
> I would generally agree. But since @matthewmueller didn’t write any docs and didn’t invite any discussion or review of the feature, I didn’t want to make an assumption about whether the non-compliant behavior was intended or just a bug.

Since this has sat for more than a month with no feedback from @matthewmueller , I’m going to go ahead and just transform it from a question to a statement and call it a bug:

`then()` **should** act like Promises/A+ `then()` and ES6 Promise `then()`. The second argument should not be called because of an exception while running the first argument.

If that’s cool with you, @rosshinkley. The implications are minor and, I think, an improvement.
",Mr0grog,2016-04-23 21:49:05
527,2016-04-18 20:07:40,"> If that’s cool with you, @rosshinkley. The implications are minor and, I think, an improvement.

👍 Absolutely.  Please, go ahead.
",rosshinkley,2016-04-23 21:49:05
526,2016-03-02 16:34:28,"I am trying to loop over array and call nightmare but I get this error:

<S_CODE_TOKEN>

I am using version 2.2.0 with node 5.7

<S_CODE_TOKEN>
",NetanelBasal,2016-04-03 03:54:27
526,2016-03-05 08:35:09,"It might be that the maximum number of listeners should be boosted, but you may still want to restructure your code slightly anyway. As a side benefit, doing so might alleviate the problem, too.

Try rewriting `getLinks()` this way:

<S_CODE_TOKEN>

Each nightmare instance represents one browser window; if you don’t wait for all the actions in that window to complete before triggering new actions, you can easily run into problems. In this case, your original code would likely result in the window constantly browsing to new URLs before ever getting around to looking for a selector, so most of your attempts to get the `href` from the selector would wind up getting it from the wrong page. Doing each query in a new Nightmare instance keeps it safe.

Alternatively, you could wait for each series of actions to complete before asking for the next link:

<S_CODE_TOKEN>

The flow is a little more complicated there, but you can avoid running lots of electron processes at once this way.
",Mr0grog,2016-04-03 03:54:27
526,2016-03-06 03:01:08,"Thanks you!
",NetanelBasal,2016-04-03 03:54:27
526,2016-04-03 03:54:27,"This issue seems to be resolved, closing.  If you are still having this issue, feel free to reopen or open a new issue.
",rosshinkley,2016-04-03 03:54:27
525,2016-03-02 13:15:24,"This is just a question and not really an issue: 
Have you experienced any troubles with CI integration, (I believe your using circleci) after updating to 2.1.4?

Thanks
",antpaw,2016-06-07 07:15:24
525,2016-04-03 03:53:49,"@antpaw Yeah, there are intermittent failures I haven't gotten to the bottom of.  Have you had any luck?
",rosshinkley,2016-06-07 07:15:24
525,2016-04-03 11:27:58,"no I still have no idea, we are using jenkins and installed bunch of plugins to get electron working, and it still is, but with the newst version it just ""hangs"" without any errors or logs. no idea how to debug it.
",antpaw,2016-06-07 07:15:24
525,2016-05-24 16:55:18,"@antpaw Have you given this a try with later versions?  I wonder if you're hitting the `Xvfb` hang from #561.
",rosshinkley,2016-06-07 07:15:24
525,2016-05-31 14:18:34,"@rosshinkley hey, i've just checked the 2.5.0 version, it still hangs without any logs. the highest version it works for me is 2.1.3
",antpaw,2016-06-07 07:15:24
525,2016-05-31 14:21:56,"@antpaw Do you have `DEBUG` output?  What version of Node are you running?
",rosshinkley,2016-06-07 07:15:24
525,2016-05-31 14:27:09,"node version 4.2.6

just turned debugging on and saw this:

<S_CODE_TOKEN>

""...may not have electron installed correctly"" but it doesn't exit the process
",antpaw,2016-06-07 07:15:24
525,2016-05-31 15:36:54,"Can you run it again with `DEBUG=*,-mocha*` under 2.5.0?  Also, what operating system/version are you running?
",rosshinkley,2016-06-07 07:15:24
525,2016-05-31 18:10:03,"ah, thanks now its possible to see much more. I assume it fails every test very slowly or tries to recover over and over again.

<S_CODE_TOKEN>
",antpaw,2016-06-07 07:15:24
525,2016-05-31 19:04:29,"I just hit this when working on the Circle tests to include multiple NodeJS versions.  I had a sneaking suspicion you were missing libnotify.  If you're on Ubuntu, installing `libnotify-bin` with `apt-get` _should_ solve it for you.
",rosshinkley,2016-06-07 07:15:24
525,2016-05-31 19:33:44,"That's what I though when I opened this issue! Thanks so much, I will try it tomorrow (gmt)
",antpaw,2016-06-07 07:15:24
524,2016-03-01 20:08:50,"Fixes #523 (if #476 is also included).

I'm not _real_ clear on why the injection was done twice to begin with, and perhaps @reinpk could shed some light on that?

On top of fixing that, I went through every version of jQuery core to determine which work with `.inject()` and which don't.  This may help address #323.  The following versions of jQuery _are not_ injectable with Nightmare (most throw syntax errors):
- 1.0.1
- 1.0.2
- 1.0.3
- 1.0.4
- 1.1.1
- 1.1.2
- 1.1.3
- 1.11.0 beta 1 min
- 1.9.0 min
- 2.1.0 beta 1 min

Other versions seem to work with basic queries.
",rosshinkley,2016-04-02 22:21:31
524,2016-03-08 07:13:15,"> The following versions of jQuery are not injectable with Nightmare (most throw syntax errors)

All those versions need to be looked at, but I suspect they might share similar issues to 1.9.0.min: it ends in a line comment for a sourcemap like so:

<S_CODE_TOKEN>

And it just so happens that our injection template has code after the injected source on the same line (https://github.com/segmentio/nightmare/blob/master/lib/javascript.js#L46):

<S_CODE_TOKEN>

So the fix is as simple as inserting a newline after the injected file’s source code:

<S_CODE_TOKEN>

Kinda ridiculous, but works great and is generally more safe!
",Mr0grog,2016-04-02 22:21:31
524,2016-03-08 07:31:44,"…after a very quick deeper look:
- `1.11.0 beta 1 min` and `2.1.0 beta 1 min` have the same issue as `1.9.0.min` and are fixed by the newline as noted above.
- `1.1.3` and older expect to be loaded and run in global scope. They just define `var $ = ...` instead of `window.$ = ...`. Since the injection template wraps all the code in a function, that variable never escapes the function’s scope and gets attached to the global object. That’s a more fundamental incompatibility; “fixing” older jQuery (and other scripts that behave like it) would necessarily break other features.
",Mr0grog,2016-04-02 22:21:31
524,2016-03-08 14:57:25,"> So the fix is as simple as inserting a newline after the injected file’s source code:

@Mr0grog Ah, thank you.  I haven't had time to double back and take a look at why the versions that are excepting were causing syntax errors.

> So the fix is as simple as inserting a newline after the injected file’s source code:

Simple, yes - this makes me wonder how common a practice it is to _end_ a minified file with a sourcemap or comment.  It's out of scope for this question, but I'm still curious.

At any rate, I'll add the newline into the template .  Changes shortly.

> 1.11.0 beta 1 min and 2.1.0 beta 1 min have the same issue as 1.9.0.min and are fixed by the newline as noted above.

Good to know.  I think 1.9.x is probably the biggest offender.

> 1.1.3 and older expect to be loaded and run in global scope. They just define var $ = ... instead of window.$ = .... Since the injection template wraps all the code in a function, that variable never escapes the function’s scope and gets attached to the global object. That’s a more fundamental incompatibility; “fixing” older jQuery (and other scripts that behave like it) would necessarily break other features.

I'm unsurprised.  I vote leaving <1.1.x broken until compelling case to fix it is made.

That said, I wonder what use case exists where one would be purposefully injecting jQuery <1.1.x with Nightmare.  I could understand pages that already have early versions of jQuery included, but I can't think of a good reason to inject an old version other than for an experiment to determine what Nightmare works with.
",rosshinkley,2016-04-02 22:21:31
524,2016-03-08 17:33:15,"> this makes me wonder how common a practice it is to end a minified file with a sourcemap or comment.

Totally speculative, but I’ll bet it’s only becoming more common with modern tooling. It’s good unixy practice to always end files with a line break (which would have avoided this issue), but that’s obviously not something we can rely on.

> I vote leaving <1.1.x broken until compelling case to fix it is made.

At the very least, a change to support <1.1.x would be a big enough change I think it’s out of scope here, so from that perspective, I agree :)

> I wonder what use case exists where one would be purposefully injecting jQuery <1.1.x with Nightmare.

I doubt there is one (or at least that there is one that’s particularly compelling). However, plenty of other libraries could behave the same way (which is, of course, hypothetical until we hit one that’s modern and does, which again is unlikely since I think most libraries today will use some UMD-esque syntax, which would generally not run afoul of this issue).

That said, I can definitely see an expectation on the part of the user that:

`inject('js', 'path/to/file.js')`

would behave just like

<S_CODE_TOKEN>

in which case a script that behaves like old jQuery would work. Maybe worth a “known issues” document over at https://github.com/rosshinkley/nightmare-examples
",Mr0grog,2016-04-02 22:21:31
524,2016-03-22 16:45:47,"@Mr0grog A bit late, but I've added [a first draft](https://github.com/rosshinkley/nightmare-examples/blob/master/docs/known-issues/globally-defined-variables.md) of the globally defined variables example.
",rosshinkley,2016-04-02 22:21:31
523,2016-03-01 11:35:44,"I have two questions about script injections. 

The first one looks like a bug. 
Just use this pretty simple nightmare-script...

<S_CODE_TOKEN>

...with this script for inject (*_testScripts.js)

<S_CODE_TOKEN>

Result is: 

<S_CODE_TOKEN>

---

Second question exactly about the example: So, why if I use `console.log('Hello from script');` it doesn't work properly in the contrast of `setTimeout(function() {console.log('Hello from script');}, 0);` ?
",Deliaz,2016-04-02 22:21:31
523,2016-03-01 17:43:48,"With respect to the `console` calls doubling, I believe this is a leftover hack from 2.0.1 to patch jQuery to be injectable.  [Injected javascript gets injected twice.](https://github.com/segmentio/nightmare/blob/master/lib/actions.js#L411-L416)  I'll look into fixing this.

With respect to your second question, I think this has to do with #476 and the changes made in 2.1.0 for `console` calls.  That should be fixed when that PR is accepted.
",rosshinkley,2016-04-02 22:21:31
522,2016-03-01 07:48:34,"I cannot seem to get Nightmare to work in a loop. Given this quick simple example:

<S_CODE_TOKEN>

On the first item nightmare instance is instantiated and tested, the second and third not. Can someone explain to me what I am doing wrong? Thanks
",kokujin,2016-03-03 15:10:39
522,2016-03-01 17:17:31,"I'm guessing judging from your example you're using [Tape](https://github.com/substack/tape) or some variant of Tape.  I'm also not clear on what you're expecting to happen: the `result` from the `.then()` call is going to be undefined as it's the result of the `.wait()` call.  

There are other internal issues with the test, but let's set those aside.  The bigger issue is with asynchrony.  That loop is going to issue multiple queues against the same Nightmare instance, which is going to lead to problems.  Nightmare can only handle one instruction set at a time (see #493).  You'll want to let one instruction set finish before the next one begins.  You could do this using `Array.reduce` and native promises, something like: 

<S_CODE_TOKEN>

If you're interested in something that looks a little closer to how the Nightmare test suite works, I'd suggest using [`co-tape`](https://github.com/rektide/co-tape/blob/master/test-co-tape.js).  The example from above rewritten:

<S_CODE_TOKEN>
",rosshinkley,2016-03-03 15:10:39
522,2016-03-03 15:10:39,"Nice! Thanks for your patience and time @rosshinkley 
",kokujin,2016-03-03 15:10:39
521,2016-02-29 20:15:55,"I need to add custom header to the every request. Using `nigthmare.header()` method sends those only with `goto` call, so for instance if I have an XHReq in the app I'm automating with `nightmare`, the header isn't sent with it. Is there any way to make it happen?
",michalbe,2016-07-09 16:59:08
521,2016-02-29 22:42:47,"I don't think `.header()` was intended to wrap _every_ request from Electron.  (If I'm wrong on that, someone please correct me.)

If you wanted to add headers to every XHR request from the site's client code, you could conceivably use a [custom preload script](https://github.com/segmentio/nightmare#custom-preload-script) to override how `XMLHttpRequest.send()` works.  Something like this at the end of a custom preload script:

<S_CODE_TOKEN>

... would add `'x-foo'` to every request

Disclaimer: I don't think overriding the constructor for `XMLHttpRequest` is the best of ideas, but for a controlled, non-production test environment, it is probably okay.

Is that closer to what you had in mind?
",rosshinkley,2016-07-09 16:59:08
521,2016-03-01 08:58:53,"Thanks @rosshinkley .
The app I'm automating uses jQ for all of the requests so I just added this snippet that forces every XHReq to contain those headers, what is close to what you proposed.

<S_CODE_TOKEN>

Anyway, is there a chance to have a feature like this in Nigthmare? Or how to achieve this in Electron?
",michalbe,2016-07-09 16:59:08
521,2016-07-09 16:59:08,"Looking at this again, it looks like you can use [`webRequest.onBeforeSendHeaders()`](https://github.com/electron/electron/blob/2cf0843f82af4eae283ad759d806360973bbd869/docs/api/session.md#webrequestonbeforesendheadersfilter-listener) to amend the request headers.  You could pretty readily write a plugin with `.action()` to take care of that for you.

With that, I'm going to consider this issue resolved, seeing as how I think we've covered how to do it with a preload and from within Electron.
",rosshinkley,2016-07-09 16:59:08
520,2016-02-29 14:21:54,"Makes it possible to listen for `media-started-playing` and `media-paused` with the on method.

Useful in testing apps that deal with audio playback.
",davidnaas,2016-12-30 19:00:14
520,2016-12-30 19:00:30,👍 thanks!,reinpk,2016-12-30 19:00:14
519,2016-02-29 11:41:31,"How can I retrieve a value set on the browser ""window"" object and log it to the console?
My test below does not work.

<S_CODE_TOKEN>
",kokujin,2016-02-29 18:09:50
519,2016-02-29 11:50:52,"I think I've found a way

<S_CODE_TOKEN>

It works, but I doubt if this is the best practice. Any ideas?
",kokujin,2016-02-29 18:09:50
519,2016-02-29 16:15:01,"I'd have to see a more complete example to be sure, but your original example should work.  Something like this, using the promise API:

<S_CODE_TOKEN>
",rosshinkley,2016-02-29 18:09:50
519,2016-02-29 18:09:50,"Works! Thanks
",kokujin,2016-02-29 18:09:50
518,2016-02-29 11:18:43,"Give this application code:

<S_CODE_TOKEN>

I am trying to do something based on the console output. So using this snippet

<S_CODE_TOKEN>

Nightmare logs out:

<S_CODE_TOKEN>

The formatter, ""%s"" is completely ignored. Is there a workaround for this? Thanks
",kokujin,2016-03-03 14:36:05
518,2016-02-29 16:11:37,"Take a look at the [preload redefinition of `console.log`](https://github.com/segmentio/nightmare/blob/master/lib/preload.js#L13-L16).  The string interpolation for ordinary logging calls isn't applied when `console.log` is called.  The arguments are applied to the log event, allowing for more flexibility in using `console` events in Nightmare.

In your example, you could do:

<S_CODE_TOKEN>

... which would produce `LOG TEST :: 1` or whatever the product ID is set to.

In general, if you wanted the default behavior, you could apply the arguments slicing off the `type` argument.  Something like:

<S_CODE_TOKEN>
",rosshinkley,2016-03-03 14:36:05
518,2016-03-03 14:36:05,"Thanks @rosshinkley 
",kokujin,2016-03-03 14:36:05
517,2016-02-27 09:44:00,"`javscript` → `javascript`
",pra85,2016-03-21 15:26:32
517,2016-03-21 15:26:30,"thanks!
",reinpk,2016-03-21 15:26:32
515,2016-02-26 23:32:25,"My screenshots always result in 936px height, despite the fact that I call `.viewport()` with a larger height:

<S_CODE_TOKEN>

I noticed that 936px is actually `window.innerHeight`, so I wonder why the screenshot is created based on the window height rather than document height.

What am I missing here?

I'm using version `2.2.0`.
",moroshko,2016-03-05 12:33:38
515,2016-02-27 11:45:02,"Looks like `{show: true}` is causing the issue.
",moroshko,2016-03-05 12:33:38
515,2016-02-28 04:20:12,"`{show:true}` is the ""problem"", although it's not a bug.  Since you're forcing it to render to a physical output that is smaller than the viewport you specify, Electron will render to the maximum size it can for that physical output.  Without `{show:true}`, the viewport renders in the framebuffer which is practically infinite.

For completeness, this was first identified as a part of [the second bullet of this comment](https://github.com/segmentio/nightmare/issues/328#issuecomment-159311982) in #328.
",rosshinkley,2016-03-05 12:33:38
515,2016-03-05 12:33:38,"Thanks @rosshinkley. Your answers are very helpful!
",moroshko,2016-03-05 12:33:38
514,2016-02-26 17:42:51,"Fix #513
",fritx,2016-12-30 19:10:27
514,2016-03-24 23:57:49,"What if they want to explicitly return?

<S_CODE_TOKEN>
",justinmchase,2016-12-30 19:10:27
514,2016-03-25 08:14:19,"@justinmchase yeah, sorry for this.. this does make a change of the `inject` usage.

They have `result` returned with `func1();func2();result`.
If they want to have a function injected like yours, maybe they could use `evaluate` instead? 
",fritx,2016-12-30 19:10:27
514,2016-03-26 03:52:02,"If you run Nightmare with `DEBUG` with your `error.js`, you will get a page error.  (It's true, though, the Nightmare process does hang as the `'javascript'` event is never emitted.)  If your `.inject()`ed code throws an exception, that gets bubbled up to the calling error handler.  If I'm reading this correctly, you want the syntax error to _also_ bubble up to the caller, correct?

If that's the case, I don't think you need to change how the injected script is executed, nor how the source is passed to the injection template.  You could modify the `'page'` handler in `runner.js` to something like:

<S_CODE_TOKEN>

... which I think satisfies your requirements and tests.  However, this might have unintended side effects for someone working with a page that has errors internally.

Instead, you could add an _extremely_ permissive [`jslint`](https://github.com/reid/node-jslint/blob/master/doc/jslint.md) call to verify the `.inject()`ed file is valid javascript.

All of that said, I'm not sure I agree with the premise that `inject()`ed files should bubble up an exception, especially since they're under user control and the tools already exist to debug them.  Thoughts?
",rosshinkley,2016-12-30 19:10:27
514,2016-08-16 15:15:28,"Can we close this or accept it? I'm tired of seeing it in my PR list :)
",justinmchase,2016-12-30 19:10:27
513,2016-02-26 17:41:03,"**Test Case**

<S_CODE_TOKEN>

<S_CODE_TOKEN>

<S_CODE_TOKEN>

**Source Code**

<S_CODE_TOKEN>

<S_CODE_TOKEN>

**Note: this solution uses `eval`, but I guess it is safe cuz the `src` is `JSON.stringify()`d.**

Before the fix, the test case would hang util timeout.
Related: #511 
",fritx,2017-01-02 21:22:08
513,2017-01-02 21:22:08,Closing with the closure of #514.,rosshinkley,2017-01-02 21:22:08
512,2016-02-26 17:37:52,"Fix #511
",fritx,2016-04-14 03:35:23
512,2016-04-14 03:13:07,"I like this change.  Marking for inclusion in the next release.
",rosshinkley,2016-04-14 03:35:23
512,2016-04-18 02:26:01,"Thanks!
",fritx,2016-04-14 03:35:23
511,2016-02-26 17:29:45,"**Test Case**

<S_CODE_TOKEN>

**Source Code**

<S_CODE_TOKEN>

Before the fix, the test case would hang util timeout.
Related: #513
",fritx,2016-04-14 03:35:23
510,2016-02-26 02:23:24,"#### Question

When I click on a given button in my app it opens a popup window using good ol' `window.open(url)`. Can I somehow access it's content? I don't have an access to the `window` object returned by `window.open` in the app because it's in the closure and rebuilding the architecture to gain this access in tests is IMHO an overengineering.
#### Example

Let's say I'm doing something similar to this:

<S_CODE_TOKEN>

Any clues?
",michalbe,2016-05-23 16:41:10
510,2016-02-28 04:15:37,"I had experimented with creating a plugin solution for this using #425 to solve [this StackOverflow question](http://stackoverflow.com/questions/34912579/how-can-i-get-a-screenshot-of-a-popup-window-after-login-with-nightmarejs).  I had shelved the experiment because there are a couple of nasty problems - for starters, you can't arbitrarily reassign the `win` reference for the browser window Nightmare uses.  (Doing so would require _significant_ refactoring.)  Second, since the windows Nightmare uses are ostensibly hidden, the provided solution would have to handle/mock focus internally.  Finally, you will lose the ability to run ordinary Nightmare commands against the newly-created window (again, without significant refactoring).

With those limitations in mind, I humbly submit [the outgrowth of that experiment](https://github.com/rosshinkley/nightmare-window-manager).  It has a flavor of `.evaluate()` so you can still do _most_ of what Nightmare offers.  Feedback welcome.
",rosshinkley,2016-05-23 16:41:10
510,2016-05-23 16:41:10,"Merging into #593.
",rosshinkley,2016-05-23 16:41:10
509,2016-02-25 22:22:36,"Is it possible to log to the console midway the nightmare session? Here is some code to clarify

<S_CODE_TOKEN>

In the code above, I am using the search field twice on the Yahoo site and I am trying to log the result each time to the console for monitoring purposes.

. The console.logs() do not work in both cases
. One can only use evaluate once

Can some explain how I can achieve multiple eval and logging? Thanks
",kokujin,2016-05-24 17:03:33
509,2016-02-26 15:34:31,"I think these are two separate questions.  For the logging, the `console` calls were condensed and simplified in 2.1.0, but the template for `.evaluate()` didn't get updated to reflect those changes.  This was also reported in #504 and a proposed fix was submitted in #476.

As for evaluate: I think you're hitting a problem with element existence and Nightmare not being terribly good at warning you when you're performing actions on elements that don't exist.  The following will complete and print out the result of the `href`, but I doubt it does exactly what you want:

<S_CODE_TOKEN>

The second search doesn't clear the searchbox, and will prepend ""ghosts"" to the original ""github nightmare"" search term.
",rosshinkley,2016-05-24 17:03:33
509,2016-02-29 10:33:56,"Hmm, which version are you using? I have just tried ""nightmare"": ""^2.2.0"" and I cannot execute multiple evaluate calls
",kokujin,2016-05-24 17:03:33
509,2016-03-05 04:32:33,"I'm using 2.2.0 as well.  Are you getting exceptions?

To be certain that you cannot execute multiple evaluate calls, I think it's worth trying a simpler example.  Consider:

<S_CODE_TOKEN>

This should print:

<S_CODE_TOKEN>

Does the above work for you?
",rosshinkley,2016-05-24 17:03:33
509,2016-03-06 13:02:02,"Once again, thanks @rosshinkley.

Actually, I think your firs example was more what I was looking for. May I clarify? I would like to test processes, for example a questionnaire or a wizard: I would like to evaluate the outcome after each step, in most cases a click and log the output to the console.

I am still having problems with the snippet, even with your fork

<S_CODE_TOKEN>
",kokujin,2016-05-24 17:03:33
509,2016-04-02 23:13:02,"@kokujin #476 has been merged.  Could you upgrade to 2.3.0?
",rosshinkley,2016-05-24 17:03:33
509,2016-05-24 17:03:33,"Closing due to inactivity.  If you're still having this problem, feel free to reopen/submit a new issue.
",rosshinkley,2016-05-24 17:03:33
508,2016-02-25 22:00:50,"I noticed that it is not possible to resolve the promise returned by a nightmare session multiple times. From the docs:

<S_CODE_TOKEN>

Am I mistaken? Thanks
",kokujin,2016-02-29 10:40:35
508,2016-02-26 15:12:06,"This seems to work under 2.2.0 - what version of Nightmare are you using?

By the by, your second `.then()`'s result will be undefined as the previous `.then()` didn't return anything.
",rosshinkley,2016-02-29 10:40:35
508,2016-02-29 10:40:35,"Ok. Thanks. it works under 2.2.0
",kokujin,2016-02-29 10:40:35
507,2016-02-25 20:29:18,"Hi! I'm a huge fan of the framework!!!

I just have one problem, that I do not know how to solve:
One of my webpages renders ""virtual"" buttons inside a <canvas> element.
Is there a way that I can simulate a click inside this canvas?
",csysmans,2016-03-30 03:33:15
507,2016-02-26 15:52:46,"Not yet.  `.click()` doesn't support clicking at arbitrary coordinates.  Even if it did, you'd have the added problem of trying to figure out the absolute coordinates of items rendered in the canvas.  Do you have that ability?
",rosshinkley,2016-03-30 03:33:15
507,2016-02-26 16:54:09,"Hi Ross,

I have the exact x y coordinates available.
However, I found another solution, so this feature is not urgent anymore.

Thanks for the help!

> On 26 Feb 2016, at 16:52, Ross Hinkley <notifications@github.com <mailto:notifications@github.com>> wrote:
> 
> Not yet. .click() doesn't support clicking at arbitrary coordinates. Even if it did, you'd have the added problem of trying to figure out the absolute coordinates of items rendered in the canvas. Do you have that ability?
> 
> —
> Reply to this email directly or view it on GitHub https://github.com/segmentio/nightmare/issues/507#issuecomment-189335520.
",csysmans,2016-03-30 03:33:15
507,2016-02-26 16:56:38,"@csysmans no problem.  After I walked away, I realized I also hadn't mentioned that this could be pretty readily accomplished using `.evaluate()`.

Anyway, glad you found a solution. :)
",rosshinkley,2016-03-30 03:33:15
507,2016-03-02 08:24:30,"Yeah, I use the evaluate extensively when the nightmare module does not offer what I need.
However, I do not know of a way to simulate a click on a canvas from JavaScript or something like that. I was hoping ""nightmare"" + ""electron"" had a way to overcome this limitation of basic browsers.
",csysmans,2016-03-30 03:33:15
507,2016-03-30 03:33:15,"Issue resolved.  Closing.
",rosshinkley,2016-03-30 03:33:15
506,2016-02-25 15:17:02,"Fixes (or at least shows) an example of how to address #505.
",rosshinkley,2016-04-02 22:20:35
505,2016-02-25 11:31:00,"Is there a built-in method to open DevTools for debugging purposes?

I tried to integrate [electron-debug](https://github.com/sindresorhus/electron-debug), but no luck (Electron was throwing errors).
",moroshko,2016-03-02 08:33:30
505,2016-02-25 15:19:59,"I created #506 to show how you can open DevTools.

For more information, you may want to go have a look at the [`webContents` documentation](https://github.com/atom/electron/blob/master/docs/api/web-contents.md) for Electron, specifically the [DevTool specific parts](https://github.com/atom/electron/blob/master/docs/api/web-contents.md#webcontentsaddworkspacepath).
",rosshinkley,2016-03-02 08:33:30
505,2016-02-25 22:39:50,"This is great, does that mean that we can use the 'detach' parameter too?

<S_CODE_TOKEN>
",kokujin,2016-03-02 08:33:30
505,2016-02-26 02:03:31," Sure, I've updated #506 to reflect that.  You can now pass a hash in with `openDevTools` that get passed directly to `openDevTools()`.
",rosshinkley,2016-03-02 08:33:30
505,2016-02-26 13:05:32,"Thanks @rosshinkley, but the flag is just to open the devTools drawer but not detach it. Correct? 
",kokujin,2016-03-02 08:33:30
505,2016-02-26 15:00:46,"@kokujin No, the latest update will accept either `true` (to show the devtools) or an options hash that gets passed directly to `webContents.openDevTools()`.  For example:

<S_CODE_TOKEN>

...would detach the devtools window.
",rosshinkley,2016-03-02 08:33:30
505,2016-02-27 00:07:53,"@rosshinkley Thanks a lot for #506! Let's leave this issue open until #506 is merged. At least, for now, I can patch it in `node_modules` to debug things :)
",moroshko,2016-03-02 08:33:30
505,2016-02-29 11:24:28,"Still cant get this to work, is this under 2.20 or another branch? Thanks
",kokujin,2016-03-02 08:33:30
505,2016-02-29 16:31:33,"@kokujin #506 hasn't been accepted, and as such, is not a part of Nightmare.

If you absolutely need it, you could use the [branch on my fork](https://github.com/rosshinkley/nightmare/tree/505) instead.  For the nightmare dependency, you could have an entry in your `package.json` like:

<S_CODE_TOKEN>

Alternatively, you could fork Nightmare yourself and pull the changes in from that branch on my fork.
",rosshinkley,2016-03-02 08:33:30
505,2016-03-01 22:14:09,"Great! Thanks @rosshinkley 
",kokujin,2016-03-02 08:33:30
504,2016-02-25 11:10:49,"Is it possible to `console.log()` from `evaluate()` to Node context?

I tried the following, but it doesn't work:

<S_CODE_TOKEN>
",moroshko,2016-02-26 05:36:39
504,2016-02-25 15:48:58,"Changes were made in 2.1.0 to consolidate how logging works, but the template for evaluating client-side javascript didn't get updated.  This is fixed in #476.

What you have there would work fine if you used `console.warn`, say.
",rosshinkley,2016-02-26 05:36:39
504,2016-02-26 05:36:39,"Thanks a lot!
",moroshko,2016-02-26 05:36:39
503,2016-02-25 10:24:40,"I'm trying to define a custom action:

<S_CODE_TOKEN>

But, I get:

> TypeError: Cannot read property 'click' of undefined

What am I doing wrong?
",moroshko,2016-02-26 05:21:26
503,2016-02-25 16:20:00,"Offhand, I think fat-arrow (`=>`) notation changes the meaning of `this`.  When actions are run, `this` is supplied using `function.apply()`.  If I'm not mistaken, I think what you're doing there is redefining `this` unintentionally.  I think changing the arrow to a traditional function might fix it.
",rosshinkley,2016-02-26 05:21:26
503,2016-02-25 22:19:21,"Thanks @rosshinkley! I should have guessed this.

Now, the error has gone, but the action still doesn't work:

<S_CODE_TOKEN>

This works fine:

<S_CODE_TOKEN>

What am I missing here?
",moroshko,2016-02-26 05:21:26
503,2016-02-26 01:52:01,"I should have taken a closer look at the content of your method.  I saw the arrow and responded off-the-cuff.  Time for a closer inspection!

The function parameter for `.action()` accepts a `done` parameter that must be called.  The [`.action()`](https://github.com/segmentio/nightmare#nightmareactionname-actionnamespace) docs show it in the examples, but don't explicitly say it.  (That should _probably_ be fixed.)

The other thing that jumps out at me: you typically don't want to wrap multiple actions in the way you're doing it because it probably won't do what you expect.  Consider the following:

<S_CODE_TOKEN>

On the face of it, you'd think the order of operations might look like:
1. goto
2. wait
3. screenshot
4. wait
5. goto
6. then
7. end

... but it won't be.  The `.example()` call will add the calls to `.screenshot()` and `.wait()` to the _end_ of the queue, resulting in a picture of Yahoo's homepage.

This is the kind of activity that [`.use()`](https://github.com/segmentio/nightmare#useplugin) is intended for, I think.  Using my previous example:

<S_CODE_TOKEN>

... will produce the desired result of a picture of example.org's homepage.

For completeness, if you really want to use `.action()`, I think you _technically_ still can.  You could have the Nightmare instance interrupt the queue with a call to `.then()` inside of the action.  Consider:

<S_CODE_TOKEN>

... will also produce the desired result of a picture of example.org's homepage.

I don't think this was the intent of `.action()`, though.  I can't think of any immediate problems with this, but it wouldn't surprise me if it had downstream consequences.
",rosshinkley,2016-02-26 05:21:26
503,2016-02-26 05:21:26,"Thanks a lot @rosshinkley. This was very insightful!
",moroshko,2016-02-26 05:21:26
502,2016-02-25 07:39:54,"https://github.com/segmentio/nightmare/blob/master/Makefile
so that we can just run the test on windows seamlessly
makefile seems to be unfriendly to windows

<S_CODE_TOKEN>
",fritx,
502,2016-04-14 18:24:54,"The makefile buys automatic installation of dependencies if the package has been touched since the last make.  With the inclusion of #561, the makefile will also allow headless systems to run the unit test suite (specifically, CircleCI) without internal problems to Electron/Chromium.  Mimicking these two behaviors with simple NPM scripts would be difficult to do in a cross-platform friendly way (although not impossible).

I'm in favor of modifying the build process to make it friendlier, and would like to get some feedback on what we should do.  Off the cuff, I'd suggest something like Gulp, but that may be a bit heavy-handed for what we ultimately want to accomplish.

Has anyone had trouble building this on Windows or any other OS where the makefile won't work?  If so, have you been able to work around it?  What does your make process look like?  Do you have suggestions for build tools?
",rosshinkley,
502,2016-04-15 08:16:23,"This is a little tangential, but #571 made me wonder if the scripts added in #565 should really be part of Nightmare itself instead of the tests. That is, using Nightmare as a testing tool on a CI server somewhere seems like a major use-case. As it stands now, every user of Nightmare will have to know that they need to replicate Nightmare’s testing setup. If Nightmare just did all of that on its own before launching Electron, that would not only solve the deadlock for Nightmare’s own tests but also for other tests that leverage Nightmare.

Doing so would also simplify the test script to the point where we might not need to worry about adding Gulp or some other solution to get things working on Windows.

(Note I have no idea whether this is the problem being encountered in #571; that issue just made me think of this.)
",Mr0grog,
502,2016-04-15 18:27:12,"> If Nightmare just did all of that on its own before launching Electron, that would not only solve the deadlock for Nightmare’s own tests but also for other tests that leverage Nightmare.

I'm going to purposefully totally ignore the NPM automagic make gives and focus on the framebuffer issues for the moment.  I'm tentative on if we should automagically include the ""run with `xvfb-runner`"" magic.  My main dev box is running both X and Xvfb - what if I want to see the Electron instance?  What should Electron run under?

Implementing your proposed changes has other setup complications, I'd think: I would want to preemptively check for an available framebuffer, but I don't know off the top of my head how to do that, especially in a cross-platform-friendly way.  I'd love to hear your thoughts on that.  Maybe I'm making it _way_ more complicated than it needs to be.

> Doing so would also simplify the test script to the point where we might not need to worry about adding Gulp or some other solution to get things working on Windows.

Gulp is nice insofar as it skirts cross-platform issues.  The runner task could also be exposed/registered.  Introducing the complexity of managing the framebuffer ourselves is unpleasant at first blush, but does also mean avoiding another (large) dependency, and _possibly_ fixing #224 .  Which devil is worse? :P
",rosshinkley,
502,2016-04-15 19:00:03,"> My main dev box is running both X and Xvfb - what if I want to see the Electron instance? What should Electron run under? Implementing your proposed changes has other setup complications, I'd think: I would want to preemptively check for an available framebuffer, but I don't know off the top of my head how to do that.

It might be enough to just be dumber. Maybe an env var like `NIGHTMARE_USE_XVFB` opts into the automagic. It’s easy enough to set that on your local box or on any CI platform.
",Mr0grog,
502,2016-04-15 19:09:31,"@Mr0grog Yeah, this may be a case of me trying to do an awful lot of work to save someone (me, if I can be totally selfish) ten seconds of setup grief.

As time permits, I'll throw together a proposal on running Xvfb internally to Nightmare.  Sound good?
",rosshinkley,
502,2016-04-15 19:41:09,"Works for me. Rewriting those scripts in JS makes sense, regardless, since it would still have to be done to get rid of the makefile.
",Mr0grog,
502,2016-04-29 19:51:19,"I have this (at least partially) working:  instead of spinning up an Electron process directly, if the `NIGHTMARE_USE_XVFB` environment variable is set, Nightmare will spawn `xvfb-run`, `dbus`, and finally Electron, akin to how the Makefile runs the test suite now.

The main problem was that sending `child.kill()` would kill the `xvfb` instance and leave the Electron process intact.  Having an action to make the Electron process exit internally causes the process chain to end.  Unfortunately, this breaks the ""should kill Electron"" test as the `child.kill()` kills the wrong process.  I'm not exactly sure how to make that a valid test.  I'm certainly open to suggestions.
",rosshinkley,
502,2016-04-29 20:27:32,"Is that https://github.com/rosshinkley/nightmare/tree/502 ?
1. Maybe start xvfb separately and, once it’s running, then start Electron? This might be better anyway because we need to handle multiple instances of Electron starting/ending/overlapping at different times. I’m not sure if `xvfb-run` takes care of all that for you or not.
2. Can you get the PID for Electron somehow? I don’t see anything obvious on `xvfb-run`’s manpage, but my knowledge of it is pretty rudimentary.
3. Directly killing Electron is sort of a simple expedient; you could re-write it as an IPC call that asks the Electron process to quit.
",Mr0grog,
502,2016-04-29 20:44:18,"@Mr0grog Yes, at least for the moment.  I should probably go ahead and create a PR for it, but I know there are still some problematic tests.  Anyway!

> Maybe start xvfb separately

Well, it is.  Kind of.  Right now, each new Nightmare instance creates an Xvfb instance as well as an Electron instance (so Xvfb, Electron and Nightmare instances area all 1:1:1).  They are created together, and in my opinion, should end together.

> Electron starting/ending/overlapping at different times. I’m not sure if xvfb-run takes care of all that for you or not.

I don't know that handling a single Xvfb instance is going to work very well, at least not without the single-instance stuff getting done.  I also don't think starting an instance and leaving it running is particularly clean.  I'd prefer Nightmare to clean up after itself when it's finished.

I'm going to lump these together:

> Can you get the PID for Electron somehow? 
> Directly killing Electron is sort of a simple expedient; you could re-write it as an IPC call that asks the Electron process to quit.

Yes - from within Nightmare - but not without a bit of patching to how `.action()` works.  (It doesn't have an ambient reference to `process`.)  With that, you can bubble the Electron PID up to the parent process.  It's ugly.

I don't know you can get the PID from the process tree, either.  Maybe?  I had problems with killing the process tree (that was my first attempt), but this might be worth a second look.

The current incarnation adds another action to have Electron exit internally rather than killing the process from the parent.  This works, but again, breaks the kill test.
",rosshinkley,
502,2016-04-29 20:56:41,"> Well, it is. Kind of.

I guess I _mainly_ meant: as a separate process. Start the xvfb server, then start Electron so you have two process handles instead of doing it together with `xvfb-run`. I think (?) you could still maintain 1 nightmare instance : 1 xvfb : 1 electon, even if I wasn’t directly proposing that. This is where my knowledge of what xvfb is doing isn’t deep enough. I don’t know what happens if you try to run two xvfb server instances at once, but was assuming (maybe wrongly) that you couldn’t.

> I'd prefer Nightmare to clean up after itself when it's finished.

I wasn’t suggesting that it shouldn’t! Obviously this whole method requires more bookkeeping: whenever an Electron process ends, you’d have to check and see whether any others are running in order to know whether to stop xvfb. For that purpose, though, it could be as simple as a counter.
",Mr0grog,
502,2016-04-29 21:04:53,"Side note: I _suspect_ the `xvfb-run` method will cause problems for dealing with the exit code of the Electron process (https://github.com/rosshinkley/nightmare/blob/502/lib/nightmare.js#L128), since `xvfb-run`’s manpage makes it sound like the exit code is not preserved.
",Mr0grog,
502,2016-04-29 21:11:02,"> The current incarnation adds another action to have Electron exit internally rather than killing the process from the parent. This works, but again, breaks the kill test.

If I’m reading right, think that’s just because you’re changing the API. You’d have to update [`test/files/nightmare-unended.js`](https://github.com/rosshinkley/nightmare/blob/502/test/files/nightmare-unended.js) to pass back the right PID. (`nightmare.proc` is no longer the Electron process with your changes.)
",Mr0grog,
502,2016-05-01 17:40:32,"> I don’t know what happens if you try to run two xvfb server instances at once, but was assuming (maybe wrongly) that you couldn’t.

This is ripe for science.  I, too am not certain how `xvfb` (or more to the point, `xvfb-run`) works under the covers when there are multiple instances.  From my very rudimentary testing, it looks like you _can_, but it also looks like Electron (or any process that requests a framebuffer) picks up the first available display instead of the `xvfb` instance it is a child process of.  This can cause problems like the Electron instance being mid-execution when the buffer suddenly quits.  This is where I stopped as I knew that how it worked in my mind was not how it was working in reality, and am going to try to circle back.

> Obviously this whole method requires more bookkeeping: whenever an Electron process ends, you’d have to check and see whether any others are running in order to know whether to stop xvfb.

It's not _just_ `xvfb` but also `dbus` that would need to be tracked.  I also wonder if running them independently but started in series if that's going to have any ill effect?  At any rate, I understand what you're getting at.  It's worth a look.

> ... since xvfb-run’s manpage makes it sound like the exit code is not preserved.

I figured as much.  It's being wrapped twice.  The exit code is an almost guaranteed lie. :P

> If I’m reading right, think that’s just because you’re changing the API. You’d have to update test/files/nightmare-unended.js to pass back the right PID. (nightmare.proc is no longer the Electron process with your changes.)

Yes, and I did that locally, but at that moment, I thought it was not in the same spirit without modifying how Nightmare handles interrupts to call the newly-minted Electron self-desctruction mechanism.  With a little distance, having the Electron PID bubbled up and having the signal handler call `ending`, and then using the `exit` message to catch the `xvfb-run` instance being destroyed might work and still be in the spirit of the original test.

That said, it won't catch the other processes being orphaned (if they even can be), which gets at your point of running them independently.

---

With all of that in mind, I think my next steps are to:
1. experiment with one running instance of `xvfb` and `dbus` managed by the Nightmare constructor.
2. write a test to have two overlapping Nightmare instances where the first ends before the second completes, making sure either shared instances are okay or instances are completely independent
3. re-run original Xvfb-churn test for independently managed processes approach
4. make sure that whatever approach is settled on doesn't break the popular suggestions/fixes in #224 
",rosshinkley,
502,2016-05-23 21:10:25,"Update (aka ""So what'd we learn?""):

> experiment with one running instance of xvfb and dbus managed by the Nightmare constructor.

You _can_ run the processes independently, but it would appear that Electron picks whatever display is first available when not running as a child process.  Unfortunately, this leads back to the same locking issue.  I can kill off all of the X servers for a build up front, but that feels incorrect.  Also, once in a while - with X started internally to Nightmare - Electron won't ""pick up"" the framebuffer.  I need to spend some time to see if it can be remedied with using `xdpyinfo` or something to wait for the display to become available.  So far, using plain ol' dumb `setTimeout`s have not been effective, leading me to believe that approach is probably flawed and I've run aground of a different problem.

Again, I need to spend more time with this - it's possible I'm not using Xvfb properly.  Open to suggestions.

Also worth noting: this necessitated moving the Electron process start to the Nightmare queue instead of doing it directly in the constructor.  The constructor starting Electron has been a long-standing bugbear for me, and I may split that part out into it's own PR.  Thoughts?

> write a test to have two overlapping Nightmare instances where the first ends before the second completes, making sure either shared instances are okay or instances are completely independent

Works great, provided the right X instance is picked up.  The Electron instances share the running X instance just fine.

> re-run original Xvfb-churn test for independently managed processes approach

Also works with the same provisions as above.

> make sure that whatever approach is settled on doesn't break the popular suggestions/fixes in #224

This would not break anything as it requires an environment variable to be set to be used.  Currrently, I have it set up to pick up if Nightmare is running under Circle, but I think I may remove that.  I don't want to add new behavior to existing builds that may already account for Nightmare/Electron's special needs.

---

Another thought crossed my mind as I was playing with moving the Electron start to the Nightmare queue: what about a retry?  In the case of a lock, I believe the `browser-initialize` event does not respond.  What if a timeout was propped up around that (say, 5s?) that if hit, would kill the Electron process and restart it?  I think that would sidestep the issue as the hang only seldom happens (1 in ~300 starts on my box) and (almost) never happens back to back (again, on my box).  This would allow for the `npm test` to use `xvfb-maybe` ([as suggested here](https://github.com/segmentio/nightmare/issues/224#issuecomment-219913947)) to run mocha.

I thought I'd at least float the idea for feedback.
",rosshinkley,
502,2016-05-24 06:46:05,"> You can run the processes independently, but it would appear that Electron picks whatever display is first available when not running as a child process.

Did you try setting the display via `app.commandLine.appendSwitch('display', 'displaynum')`? (http://peter.sh/experiments/chromium-command-line-switches/#display)

Alternatively, do the various XVFB displays show up in `electron.screen`? (http://electron.atom.io/docs/api/screen/) If so, we could possibly use that to make sure the window goes to the right display.

> The constructor starting Electron has been a long-standing bugbear for me, and I may split that part out into it's own PR. Thoughts?

Sounds good to me.

> What if a timeout [for `browser-initialize`] was propped up around that (say, 5s?) that if hit, would kill the Electron process and restart it?

Sounds not-so-lovely, but it probably would be a reliable end-run around the problem. Sometimes the ugly fix is the one that works best, though. If it seems like the automatically running XVFB stuff is working, I might want to avoid it, personally. But if this is all proving too crazy and problematic, than letting it lie and taking the timeout/retry approach might be the right thing to do.
",Mr0grog,
502,2016-05-24 13:13:06,"> Did you try setting the display via app.commandLine.appendSwitch('display', 'displaynum')? 

I (embarrassingly) had forgotten about the Chromium command line switches.  No, I have not, and will carve out some time to give that a whirl.

> Alternatively, do the various XVFB displays show up in electron.screen? 

I wasn't trusting anything to come out of Electron.  I didn't know how reliable the information that fell out would be.  I can give this another peek and report back.

> But if this is all proving too crazy and problematic, than letting it lie and taking the timeout/retry approach might be the right thing to do.

I'll do one more round of experiments to see if I can nudge this into a working state.  The Chromium arguments seem promising, though.  Thanks for that!
",rosshinkley,
501,2016-02-23 20:06:01,"Should fix: #500 
",h2non,
501,2016-04-14 03:25:08,"I don't know that having a `.run()` call with an internally defined callback makes sense.  Consider:

<S_CODE_TOKEN>

... which doesn't actually _do_ anything with the results of `someFunction`.  The only cases I can maybe see this being useful is with `.screenshot()`, `.pdf()` or `.html()`.  Even at that, it's only the most trivial of cases of each.  Is there a usecase I'm not thinking of?

I would advocate for something closer to how #512 works - validating the input and throwing an exception if it's not acceptable.

Thoughts?
",rosshinkley,
501,2016-04-15 00:41:06,"> The only cases I can maybe see this being useful is with .screenshot(), .pdf() or .html(). Even at that, it's only the most trivial of cases of each.

On the one hand, even the most trivial cases should arguably be accompanied by a callback—you want to handle, or at least be notified of, failures.

However, I think it's useful to make things super simple for someone just getting started with Nightmare and trying things. I also think simply loading a page and taking a screenshot or saving a PDF is a Big Deal of a use case (that’s all I was trying to do when I discovered Nightmare and wound up writing all the frame manager stuff).

I like allowing no callback to be passed to `run`—with one tweak: the default callback should probably `console.error()` when errors occur. Otherwise I’d agree with @rosshinkley. Bottom-line, either solution would be _much_ better than the current situation.
",Mr0grog,
501,2016-04-15 13:18:28,"The (apparently deleted?) #516 dealt with this... sort of.  `.run()` is _really_ intended for internal use and usage isn't directly supported.  Should it be?  I feel like that discussion might be a bit off-topic, but I'd like to hear thoughts from you or anyone else.

Back to something more germane:  

> On the one hand, even the most trivial cases should arguably be accompanied by a callback—you want to handle, or at least be notified of, failures.

Could not agree more, and I guess I was erring on the side of protecting users from themselves, which now I'm realizing _might_ be overstepping a bit.  Consider:

<S_CODE_TOKEN>

This is legitimate, and could certainly cause a ""silent"" (if run without `DEBUG`) error.  Also, consider something like:

<S_CODE_TOKEN>

... which is also completely legitimate.  Without context, it doesn't make a whole lot of sense, but now that I think about it, it's possible that you just want to click ""OK"" on a page in a test suite or something.  There are legitimate use cases, I suppose.

> I like allowing no callback to be passed to run—with one tweak: the default callback should probably console.error() when errors occur.

... I have to begrudgingly agree.  I am not sure I can articulate why I'd prefer input validation over this, but because that's almost precisely how `.then()` behaves, it's kind of hard to argue.

> Bottom-line, either solution would be much better than the current situation.

Yes sir.  Something would be better than nothing.
",rosshinkley,
501,2016-04-15 17:10:03,"> ...I have to begrudgingly agree. I am not sure I can articulate why I'd prefer input validation over this, but because that's almost precisely how .then() behaves, it's kind of hard to argue.

I think whether it’s best to throw an error vs. just handle “bad” input is pretty fuzzy, so I totally get you here.

One of my _very general_ rules of thumb is that it’s good to throw an error when “bad” input is meaningless (e.g. `sum(3)` makes no sense without a second argument) or is ambiguous in its intent. In the case of no callback for `run`, the intention is still clear and the behavior still has meaning and value.
",Mr0grog,
501,2016-04-15 18:56:27,"> ...the intention is still clear and the behavior still has meaning and value.

Your skilled reasoning has convinced me (twice over, in fact).  Coupled with the fact that `.then()` works that way _anyway_, I feel like my original exception position is pretty indefensible.
",rosshinkley,
501,2016-04-15 19:44:24,"@h2non this patch would be awesome if you want to add some logging of errors to the default `fn` (unless you disagree with that notion). Thanks for writing it!
",Mr0grog,
501,2016-05-30 13:11:31,"I would prefer throwing the error if no callback function was provided, that's how all the bundled libs with Node.js works (e.g. `fs`)
",LinusU,
501,2016-05-31 04:29:54,"> that's how all the bundled libs with Node.js work (e.g. fs)

Maybe they used to and no longer do? Or I'm misunderstanding what you meant, @LinusU. I just tried the following in Node 4.4, 5.11, and 6.2; none of them threw an error:

<S_CODE_TOKEN>
",Mr0grog,
501,2016-05-31 14:11:43,"@LinusU Are you referring to `*sync` methods and when they except, maybe?
",rosshinkley,
501,2016-05-31 14:14:59,"Sorry for being unclear, I'm referring to the asynchournous version when they are not being given a callback.

e.g.

<S_CODE_TOKEN>

running this file will throw an error.

Basically I mean making this the default callback:

<S_CODE_TOKEN>
",LinusU,
501,2016-05-31 14:32:24,"> e.g. `fs.readFile('/i/do/not/exist', 'utf8')`

True enough! _But it does not throw because of the missing callback._ The error message refers to the non-existent file. If you run the same code with the path to an existing file, it does not throw.

While I think there are good arguments for throwing, I don't think “built-ins do it” is one of them. Some do (e.g. `fs.access`) and some don’t (e.g. `fs.read/writeFile`). When it comes to Node’s standard library, this behavior is inconsistent at best.
",Mr0grog,
501,2016-05-31 14:43:46,"Just to clarify one more time, if no callback is provided and everything goes well, I do not want any error thrown. When no callback is provided and something does go wrong, I want that error to be thrown.

I believe that this behaviour is what _all_ apis in Node.js does.

However, some apis throws an error directly when the function is being called without callback (e.g. `fs.access`). While I like that behaviour as well, that would be an backwards incompatible change (I think? maybe not).

I guess that there are four levels
1. When no callback is given, don't report any errors
2. When no callback is given, `console.error` if an error happens
3. When no callback is given, `throw` if an error happens
4. When no callback is given, `throw` immediately

What I was saying is that I would rather see 3 than 2 since that is what Node.js builtin api does.

As you correctly point out, Node.js builtin api is split between option 3 and 4. But none of them uses option 1 or 2, and for good reasons, and I don't think that we should either.
",LinusU,
501,2016-05-31 14:47:39,"Option 1. 😱 

<S_CODE_TOKEN>

Option 2. 😢 

<S_CODE_TOKEN>

Option 3. 👍 

<S_CODE_TOKEN>

Option 4. 👌 

<S_CODE_TOKEN>
",LinusU,
501,2016-05-31 15:28:45,"An important distinction to make: I was originally advocating for input validation, which is too heavy-handed.  (Meaning, option 4 isn't going to work.)  Throwing on errors when no callback is present _after_ execution is probably worth talking about.
",rosshinkley,
500,2016-02-23 19:55:14,"I'm getting the following exception using `nightware@2.2.0`. Everytime I'm calling `.end(cb)` I'm passing a `function`, so I can't realize the nature of the issue from API consumer point of view.

<S_CODE_TOKEN>
",h2non,
499,2016-02-23 17:25:05,"I have code that looks for the `change` event on a text field.  In browsers, this is fired once the affected field loses focus (for example, when hitting the ""submit"" button).

Using the new `insert` method to clear out a field and then changing focus does not result in the `change` event being fired.

I seem to remember the previous implementation of `type` would work as expected, but now that `type` lacks the ability to clear text, that also doesn't work.

I can work around the problem for now by simulating clearing text using `evaluate` statements, but this is moving in the wrong direction, as I want things like the new `type` that behave more like we'd expect from a user typing things into a browser.

Happy to prepare a pull, but I can't figure out when to trigger the change without breaking the flow in the other direction (i.e. triggering the change too soon, when a real browser would wait until the loss of focus).

Any thoughts on addressing this? 
",the-t-in-rtf,2016-04-23 22:37:28
499,2016-02-24 08:35:19,"I thought about this overnight, and did some tests.  I now have a workaround that I would like to propose as a solution.

If I pass the backspace key (`\b`) to `type`, it will erase one character of the existing text.  I would propose that when `type` receives a ""falsy"" value, it should look at the current value and type `\b` `value.length` times.

If this approach seems reasonable, I am happy to submit a pull request.
",the-t-in-rtf,2016-04-23 22:37:28
499,2016-02-25 06:37:57,"yah, i'm +1 to that idea. and then have `.insert` just clear things out. 
",matthewmueller,2016-04-23 22:37:28
499,2016-04-03 03:51:41,"@the-t-in-rtf Any progress on the PR suggestion?
",rosshinkley,2016-04-23 22:37:28
499,2016-04-03 15:22:55,"Does PR #548 do what you want here? I submitted it because I was also trying to get 'change' events.
",yoz,2016-04-23 22:37:28
499,2016-04-23 22:37:28,"I agree with @yoz.  I think #548 fixes this, and as such, I'm closing this issue.
",rosshinkley,2016-04-23 22:37:28
498,2016-02-23 11:36:32,"First of all, thanks for the great library!

In order to take a whole page screenshot, I'm trying to set the viewport after evaluating `body`'s width and height. But, I'm not sure how to use the evaluated `width` and `height` when calling `.viewport()`:

<S_CODE_TOKEN>

I found [this example](https://github.com/segmentio/nightmare/issues/328#issuecomment-159311982), but it uses generators. I wonder if it's possible to achieve the same without generators?
",moroshko,2016-04-23 20:31:16
498,2016-02-23 15:55:25,"Yes.  As of v2.2.0, `.then()` returns a native `Promise`.  That original example from #328, rewritten without generators, using only promises:

<S_CODE_TOKEN>

You could use your favorite native promise-supporting library to do flow control as well.
",rosshinkley,2016-04-23 20:31:16
498,2016-02-24 05:10:28,"@rosshinkley Thanks a lot for this! 
Just wondering, why `.wait(1000)` is required before taking the screenshot?
",moroshko,2016-04-23 20:31:16
498,2016-02-24 05:22:48,"No problem!

With respect to the call to `.wait()`, that is a _great_ question.  It has to do with allowing Electron's internal backing frame storage to catch up to the current rendering of the page.  If you don't allow this to take place, the image will be of the previous viewport dimensions distorted to the new dimensions.

You might want to take a look at #468 which outlines the issue and #479 which addresses the problem.
",rosshinkley,2016-04-23 20:31:16
498,2016-02-25 11:37:07,"@rosshinkley Ah! So, once #479 is merged, we'll no longer need the `.wait(1000)`?
",moroshko,2016-04-23 20:31:16
498,2016-02-25 12:23:07,"I'm going to dump this here due to no(obvious) better place (does nightmare have a irc/slack/gitter/etc?).

Using this method, the screenshot dimensions are exactly double the dimensions I set.  Am I missing something?
",mousemke,2016-04-23 20:31:16
498,2016-02-25 19:53:41,"@moroshko That's right.  Once #479 is fixed, no more ""magic"" wait calls.

@mousemke #272 was opened to petition for a gitter room, you might want to go give that some support. :)

Addressing your question: that's curious.  Is that the case for _any_ screenshot, or only screenshots taken with getting the body dimensions first?
",rosshinkley,2016-04-23 20:31:16
498,2016-02-26 08:11:37,"screen shots appear to always be double sized. in this case either 2048x1600 or double the supplied dimentions

<S_CODE_TOKEN>
",mousemke,2016-04-23 20:31:16
498,2016-02-26 08:13:09,"btw: this was node version `5.0.0`.  I now updated to `5.7.0` and it has the same issue
",mousemke,2016-04-23 20:31:16
498,2016-03-05 04:56:40,"Hm, I still can't reproduce this behavior.

Even if you start a fresh project with a fresh install of Nightmare, doing a simple shot produces this result?  Something like:

<S_CODE_TOKEN>
",rosshinkley,2016-04-23 20:31:16
498,2016-04-03 03:51:04,"@mousemke Are you still having this issue?
",rosshinkley,2016-04-23 20:31:16
498,2016-04-03 12:31:42,"Yes, but I've just learned to deal with it. Havn't looked into fixes in a while 
",mousemke,2016-04-23 20:31:16
498,2016-04-16 01:56:24,"@mousemke sorry if this is obvious and you already thought of it, but are you on a device with a retina or other high-res display, like a Chromebook pixel, Retina MacBook Pro, etc? Electron will definitely give you a screenshot with “double the pixels” (or something else if you have a more than 2x display). The viewport dimensions you set are in “effective pixels” or “CSS pixels,” not device pixels.

I’m not sure there’s any way to explicitly change that, but writing a plugin will give you access to all the relevant modules in Electron: [`screen`](http://electron.atom.io/docs/v0.37.6/api/screen/) will tell you the scale factor for each display; [`WebFrame`](http://electron.atom.io/docs/v0.37.6/api/web-frame/) will let you do zooming, which you could use then use to counteract the scale factor—set the viewport to half your desired size and zoom to 0.5 to get 1:1 pixels, for example.
",Mr0grog,2016-04-23 20:31:16
498,2016-04-19 15:44:26,"Able to reproduce on a high-dpi device: the screenshot is 2x the height/width set in nightmare. @Mr0grog's  reasoning about the source seems valid.
",pci,2016-04-23 20:31:16
498,2016-04-23 20:31:16,"@Mr0grog @pci Of course! High device resolution!  That makes sense.

With that last mystery solved, I'm closing this issue as I think it has been fully resolved.
",rosshinkley,2016-04-23 20:31:16
498,2016-07-14 01:44:27,"The retina thing should probably go in the readme.  Just threw me when I tried it, and it totally makes sense! But should note that it ss's to dpi rather than strictly 1x1 pixels.
",dtipson,2016-04-23 20:31:16
498,2016-12-09 05:17:29,"@Mr0grog  I'm struggling on this one, how do you access WebFrame to do the zooming, from `evaluate()` ? I get a `webFrame is not defined`. Thx",sebastienbarre,2016-04-23 20:31:16
498,2016-12-09 07:08:10,"`WebFrame` and `screen` are Electron APIs, so you either need to get them by writing a plugin using [the `action` method](https://github.com/segmentio/nightmare#nightmareactionname-electronactionelectronnamespace-actionnamespace) or by using a [custom preload script](https://github.com/segmentio/nightmare#custom-preload-script).

If you just *always* want rendering at a particular resolution, you can also use the Chromium command line `force-device-scale-factor` switch. Here’s an example: https://github.com/segmentio/nightmare/blob/master/test/index.js#L1830 You can't change that after you start Nightmare, though.",Mr0grog,2016-04-23 20:31:16
498,2016-12-09 14:25:53,@Mr0grog `force-device-scale-factor` did the trick -- many thanks.,sebastienbarre,2016-04-23 20:31:16
498,2016-12-09 20:57:42,"Funny thing, my screenshots are now distorted too.
Capturing a simple screenshot worked. But capturing a rectangle produces a screenshot distorted vertically.

<S_CODE_TOKEN>
I'm not touching the viewport in this scenario. Should I make the viewport infinitely high?

UPDATE: yes apparently I do need to set the viewport to the whole `body` dimensions before capturing a specific DOM element.",sebastienbarre,2016-04-23 20:31:16
498,2016-12-09 23:21:02,"I take that back, I can't set the viewport to the the `body` dimensions, because it completely messes pages that use CSS `background-image` in cover mode.

Would you guys know why getBoundingClientRect would return ""distorted"" coordinates? Do I need to convert them to some physical pixel units through a multiplier? It doesn't look related to the device pixel ratio I'm on.",sebastienbarre,2016-04-23 20:31:16
497,2016-02-23 03:54:44,"Anyone have experience deploying nightmare.js to run on heroku? Curious if I should anticipate any problems.
",kanethal,2016-03-30 03:28:35
497,2016-02-23 04:14:32,"Yes, it's possible but somewhat complicated because of the limitations of the Heroku environment.

You will need Xvfb for a virtual framebuffer. It doesn't work out of the box on Heroku, so it needs some patching. You also may run into an issue with /dev/shm being too small, which manifests itself as Electron crashing after a few operations in Nightmare. This is fixed in a very recent Chromium (m49) so I'm not sure when it will be reflected in Electron (http://electron.atom.io/#electron-versions).

Here are some relevant links:
- https://github.com/segmentio/nightmare/issues/224
- http://stackoverflow.com/questions/28687120/is-it-possible-to-run-xvfb-on-heroku/
- https://bugs.chromium.org/p/chromium/issues/detail?id=522853
",yoz,2016-03-30 03:28:35
497,2016-02-23 04:40:26,"Thank you so much for that. Can you by chance recommend a cloud solution that might work better?
",kanethal,2016-03-30 03:28:35
497,2016-02-23 18:36:48,"Not specifically, but one that gives you full control over a VM would make it easier (you'd only have to install Xvfb via your distro package manager).
",yoz,2016-03-30 03:28:35
497,2016-03-30 03:28:35,"Closing as (at least a partial) duplicate of #224.
",rosshinkley,2016-03-30 03:28:35
496,2016-02-22 17:34:34,"Enable support for IFrames, fixes #203

It creates two variables in the browser object `__nightmare`: `currentDocument` and `rootDocument`.

`rootDocument` is a reference to the main `document` used normally.

`currentDocument` starts as a reference to the main `document` but is updated to be a reference to the `document` of an iframe element by the action `Nightmare.prototype.enterIframe(selector)`.

The method `Nightmare.prototype.enterIframe(selector)` also works from inside iframes, so it allows traversing an arbitrary tree of iframes.

The method `Nightmare.prototype.exitIframe()` gets out of the iframes and comes back to the root `document` element.

An example would be:

<S_CODE_TOKEN>

It would print to the console:

<S_CODE_TOKEN>

The two additional actions (`.enterIframe(selector)` and `exitIframe()`) are also documented in the `Readme.md`.

---

The way it works is by embedding the functions called with `.evaluate_now()` in a closure (to have an independent scope that allows overriding the `document` variable) giving them a `document` variable extracted from the `__nightmare.currentDocument` in the browser. That way, other actions (methods of `Nightmare.prototype`) don't have to be modified and user's code using `.evaluate()` would also work as expected.
",tiangolo,2016-07-09 18:55:05
496,2016-02-22 18:10:12,"I see there are failing tests, I'm checking them (first setting up the environment to check them).
",tiangolo,2016-07-09 18:55:05
496,2016-02-23 09:26:12,"- I fixed the errors
- refactored the creation of the variables to handle  `document` variables for iframe navigation (`__nightmare.currentDocument`)
- created fixtures for testing navigation with iframes
- created tests for navigation with iframes
",tiangolo,2016-07-09 18:55:05
496,2016-03-08 21:38:19,"This would be super helpful for us since we use iframes in our widgets. :+1: 
",erikdonohoo,2016-07-09 18:55:05
496,2016-03-14 15:13:06,"When will this be reviewed/merged?
",rclai,2016-07-09 18:55:05
496,2016-03-14 18:46:15,"I'm nervous that this project hasn't seen a commit in almost a month.  Its like it just died off completely.
",erikdonohoo,2016-07-09 18:55:05
496,2016-03-14 18:51:13,"Me too @erikdonohoo. I guess Segmentio folks are too busy to develop the project further, but they could al least merge PRs...
",tiangolo,2016-07-09 18:55:05
496,2016-03-14 18:54:42,"In the meantime, maybe you could try it @erikdonohoo and @rclai to see if you find any bug or misbehavior... 

You could clone my fork, checkout to the branch with the fix and copy the code to your project's `node_modules` directory to test it... I guess if someone from the Segmentio team sees that others have tested this PR and agree that it's working it will be easier for them to merge it....
",tiangolo,2016-07-09 18:55:05
496,2016-03-15 16:31:54,"It works great @tiangolo, thanks for this. I haven't seen any issues so far.
",rclai,2016-07-09 18:55:05
496,2016-03-15 17:33:51,"> As I was working on [my issue](https://github.com/segmentio/nightmare/issues/536), I ran into this error:
> 
> <S_CODE_TOKEN>
> 
> I'm thinking it's coming from [here](https://github.com/tiangolo/nightmare/blob/e1476d3f3f9dd41888f829818ca03ecf0bae933b/lib/actions.js#L293).
> 
> I got this error when I ran my Node script but using the Xvfb server instead of the `xvfb` NPM package.
> 
> <S_CODE_TOKEN>

My mistake, nevermind that. The iframe wasn't there because I was already logged in.
",rclai,2016-07-09 18:55:05
496,2016-03-15 18:17:18,"Actually perhaps a better error should be thrown indicating that the iframe does not exist?
",rclai,2016-07-09 18:55:05
496,2016-03-16 21:00:24,"@rclai I'm glad it's working! And thanks for testing it :smile: 

---

For your issue / suggestion, I guess there are these approaches:
1. The user checks if the IFrame exists before entering in it, maybe using `.exists()`: https://github.com/segmentio/nightmare#existsselector
2. Nightmare checks if the IFrame exists before entering in it, and only proceeds if the IFrame exists.
3. Nightmare checks if the IFrame exists before entering in it and throws an error if it doesn't.

Nevertheless, I think none of the other methods check or throw any error, for example, if you run `nightmare.type('.weird .non .existent .selector', 'some text that never gets typed')` you don't receive any error either.

I think that options 1 or 2 would be the most similar to how the rest of the code works.

---

But now, I'm actually worried that no one from Segmentio has even entered the conversation, and it has been quite some time... :disappointed:  

...even though this seems a useful feature (at least for the three of us).
",tiangolo,2016-07-09 18:55:05
496,2016-03-16 21:41:55,"Is it possible to turn it as a plugin? Or does it modify some internal stuff? 
",rclai,2016-07-09 18:55:05
496,2016-03-16 21:56:18,"@rclai: It modifies internal stuff (quite ""core"" internal stuff).

It changes the preloaded JS sent to the browser.

I actually first tried creating a plug-in, but it wouldn't work without changing the core, or I would have had to override every method (and every future method) in Nightmare...

BTW, debugging tip (related to the internal stuff): It saves the root document object in `__nightmare.rootDocument` and the current IFrame's document object in `__nightmare.currentDocument`.

So, you can check in your Developer Tools (the console in your Nightmare Chromium window) if your `__nightmare.currentDocument` is pointing to the document that you expect to be in.
",tiangolo,2016-07-09 18:55:05
496,2016-03-18 08:27:38,"Nice feature, works perfect 
",mbernabeu,2016-07-09 18:55:05
496,2016-03-18 13:01:11,"Great! Thanks @mbernabeu for testing it!
",tiangolo,2016-07-09 18:55:05
496,2016-03-26 19:32:55,"merge this please, i really need the iframe support
",yunicz,2016-07-09 18:55:05
496,2016-04-11 16:11:39,"@tiangolo I think this would be better served as a plugin for Nightmare.  Thoughts?
",rosshinkley,2016-07-09 18:55:05
496,2016-04-11 16:16:14,"@rosshinkley, I tried that first but it's impossible as it modifies internal stuff. 

Check the full answer to that same question 4 comments above: https://github.com/segmentio/nightmare/pull/496#issuecomment-197568154
",tiangolo,2016-07-09 18:55:05
496,2016-04-11 16:42:20,"@tiangolo I saw the comment, thanks for the pointer.

I'm not entirely convinced it's not possible to turn this into a plugin.  Unlike, say, popups that make a new `BrowserWindow` which won't have _any_ of the Nightmare sugar baked in, the IFrames you're dealing with should still be in the same context.  I can see with modifying preload this might not be possible.  I'd have to play around with this PR to be sure.

Even if it weren't possible, I would be more inclined to modify the current plugin functionality to allow for functions like this.

Thoughts?
",rosshinkley,2016-07-09 18:55:05
496,2016-04-11 16:49:58,"Just my 2¢ as someone who is interested in this, but not currently hurting from a lack of it (i.e. please take this with a grain of salt):

Having this is super awesome (really!), BUT, reading the code, it seems like this will only really affect actions that use `evaluate` or `evaluate_now` under the hood. Even then, it only works for ones that confine themselves to `document`—so it won’t confine actions like `scrollTo` or `back` to the specified iframe because they use `window` (though that is an easy bug to fix here). `inject`, similarly, will have surprising results (in an iframe, the `document` jQuery is dealing with will be different from the `document` someone calling `evaluate` is dealing with).

It also might have surprising effects for someone using the `evaluate` action and touching the `window` object, using event constructors or other built-in functions, any globals, or, writing code that tests types (since code is running in the parent frame but meant to interact with content from the iframe, where constructor identities for things like `Array`, `Object`, etc. will be different).

And of course, does this work well with `type` and `insert`? (That’s a legit question; I’m really not sure.) It certainly _won’t_ work with injecting CSS, `goto`, `size`, `userAgent`, `screenshot`, `html`, and `pdf`. Some of those are probably OK (I don’t think anyone would expect `size` to just resize the iframe), but others are more questionable. What should happen when I do:

<S_CODE_TOKEN>

…and so on? If the current behavior above with this PR is OK, the fact that some actions will behave a little oddly should definitely be made clear in documentation.

Bottom-line, though, it seems to me that there are a lot of caveats to this that haven’t been talked through here.
",Mr0grog,2016-07-09 18:55:05
496,2016-04-11 19:06:52,"@rosshinkley, I tried at first all the ideas I had to make it a plug-in, but I had to throw all that code away and start from scratch because I found that I had to modify deeper functionality in Nightmare.

If you find a way to get that same behavior with a plug-in I would love to know how.

@Mr0grog that's a good point, not **every** action would work. I think the first approach would be to document which actions wouldn't work.

But at least for some cases, the actions that work seem to be quite useful for some of us.

I'm sure it works with `.type` (that's what I made it for).
I'm pretty sure it would also work for `.insert`, as the code is almost the same and also depends on `document`: https://github.com/segmentio/nightmare/blob/master/lib/actions.js#L175

Could you list all the _caveats_ that you find that _haven’t been talked through here_? How would you like to assess better those caveats so that we all know what would have to be done?
",tiangolo,2016-07-09 18:55:05
496,2016-04-25 00:04:41,"I finally had some time to circle back to this.  The short version is you _can_ do this with a plugin, but  not without overriding the `evaluate_now` method on the prototype.

The `document` (really, `window.top.document`) variable isn't settable (which is I'm guessing why @tiangolo had trouble with the plugin route).  Because of that, you can't set the `document` variable from within a regular plugin method.  This has the consequence of the only place remaining to alias `document` - at least in the current implementation of Nightmare - is in `evaluate_now`.  You _can_ override the Nightmare prototype's `evaluate_now`, and I've thrown together [a (horrifying) sample](https://github.com/rosshinkley/nightmare-iframe-manager).  (Use at your own peril.)

Patching `evaluate_now` to wrap `document` _technically_ works, but suffers from the same issues that implementing frame support directly suffers from.  Off the top of my head:
- `.scrollTo()` only scrolls the window, not the interior selected frame.  Scrolling interior to an `iframe` would have to be written.
- `.screenshot()` will still take a shot of the bounding rectangle if provided, including the parent frame(s).  Not that this is unexpected, but it may catch new users off guard.
- `.html()` and `.pdf()` will still return output for the entire page rather than the selected child frame.  Again, expected behavior, but not what I'd expect as a new user.

There might be other issues with some of the more advanced functions (authentication, for example), but I haven't had a chance to set up testing yet.
",rosshinkley,2016-07-09 18:55:05
496,2016-04-25 02:00:39,"I should have reread the _entire_ thread before posting: [@Mr0grog covers issues](https://github.com/segmentio/nightmare/pull/496#issuecomment-208445167) more comprehensively than I did.  (Price of being in a hurry, apologies.)  I still think there are almost certainly other corner cases, though.  As time permits, I'll set up some test cases to verify what @Mr0grog outlined.

Setting that aside, it frames need to be a first-order citizen in Nightmare (along with `BrowserWindow`s).  I think this should make it onto the list for vNext.
",rosshinkley,2016-07-09 18:55:05
496,2016-04-25 17:11:22,"> Could you list all the caveats that you find that haven’t been talked through here?
- Globals variables (both built-ins and ones from scripts in the page in the frame). I think this is, far and away, the biggest thing. If people are expecting `evaluate` to execute code in the iframe, which is exactly the expectation this sets up, they would very reasonably expect to be able to access all the globals in that frame. They’d also expect to be able to be able to do things like compare constructors (e.g. `someFunctionInFrameThatReturnsArray().constructor !== Array`). There are an infinitely ridiculous number of use cases and ways people could trip over this.
- I think there’s a reasonable argument that it should probably work with `inject`. There are several issues related to users `inject`-ing jQuery (or a helper library of their choice) so they can use it when calling `evaluate`, so we know it’s something people are doing. On a cursory reading, it looks like it should _sort of_ work with JS (caveat the global issues above), but won’t work with CSS.
- Obviously, a discussion of all the Nightmare methods that are/aren’t affected. @rosshinkley listed a few. If you’re going to address possible caveats, you should list them all out. Ross also noted “there might be other issues with some of the more advanced functions (authentication, for example), but I haven't had a chance to set up testing yet.” No offense to anyone here, but… testing and validating that shouldn’t be on Ross. There are _a lot_ of issues and PRs here that need attention and Ross appears to be the only active maintainer.
- I think the issue of security is kind of a big deal here. The patch adds documentation that suggests setting `{'webPreferences': {'webSecurity': false}}` without really discussing that someone should at least think twice before doing that. There are a few issues that demonstrate people are using Nightmare to do tasks in very security-sensitive settings (e.g. #545); setting `websecurity: false` while doing something like that is a Really Bad Idea™. It may even be worth fixing https://github.com/electron/electron/issues/5115 upstream first to alleviate this.

Not a caveat, but probably also a good idea to have tests that cover all the other methods that are affected by this. e.g. `can type into elements in iframe`.

Other minor nit: maybe worth renaming to `enterFrame` since this is just as applicable to other kinds of frames? (`<frame>`, `<iframe>`, `<object>`)

And an open question, because there’s been no discussion of it here and I think it’s important for any new API being added to core: is this the best API for working with subframes?
- The original issue (#203) had an API using functions that could have eliminated the need for a second method call to “exit” the frame.
- If this is going into core, would it better to change the methods that take selectors to allow special selectors that reach into frames? e.g. `.click('.some > iframe / #a .button-in-the-frame')`
",Mr0grog,2016-07-09 18:55:05
496,2016-06-09 11:47:41,"Thank you @rosshinkley and @Mr0grog for paying attention to this.

I see that there are several issues that would be hard to deal with in trying to integrate this into Nightmare. And probably the way to go would be a new module as the one @rosshinkley built that patches `evaluate_now`.

Nevertheless, I'm being unable to use @rosshinkley's https://github.com/rosshinkley/nightmare-iframe-manager, its code never gets executed in the current environment. Maybe I'm doing something wrong, but I cloned the repo and tried to run the tests (after installing a couple undeclared packages) but they all seem to fail. Again, I'm probably doing something wrong, but maybe you can guide me on how we should use your package / module to get this feature.
",tiangolo,2016-07-09 18:55:05
496,2016-06-09 12:34:10,"@tiangolo I'd suggest opening issues at nightmare-iframe-manager.  (Looking at it offhand, I'd bet there's a problem with the Nightmare version.  I put the plugin together more as a proof of concept than anything.)  Time permitting, I'll see if I can fix the glaring problems.  If you could report the issue(s) you had there, that would help tremendously.
",rosshinkley,2016-07-09 18:55:05
496,2016-06-09 12:59:03,"OK, get it @rosshinkley. 

Are you planning on uploading it later to NPM? Do you want to keep it just as a proof of concept or do you want to keep developing it?
Or do you want me to fork it, try to fix my issues and then upload to NPM?
",tiangolo,2016-07-09 18:55:05
496,2016-06-09 13:12:57,"> Do you want to keep it just as a proof of concept or do you want to keep developing it?

I can keep developing it, but remember: it's going to be _very_ fragile.  Using it is probably not a good idea.

> Are you planning on uploading it later to NPM?

I was/am reluctant to do so because it modifies a core part (virtually _everything_ touches `evaluate_now()`) of how Nightmare works.  I don't know that I can make the disclaimer large enough.  I can publish it to NPM if it solves anything, but keeping it confined to Github keeps it in the realm of ""you can, but probably shouldn't.""
",rosshinkley,2016-07-09 18:55:05
496,2016-06-12 03:49:01,"For the other Nightmare users in this thread that wanted this functionality (with all the risky security concerns already mentioned), using @rosshinkley's plug-in is working now. 

His plug-in is based on this PR and even improves the functionality.

Check his documentation at: https://github.com/rosshinkley/nightmare-iframe-manager

(Make sure to update your code as the names and meaning of the methods changed a little bit).

As there isn't an NPM package, to install it in your projects you need to run:

<S_CODE_TOKEN>

NPM will understand that it needs to go for the GitHub repo (but you will need to have git installed).

---

@rosshinkley and @Mr0grog, with that plug-in I have the functionality I (and I think most of us in this thread) wanted (with all the risks / security up to us). For me it's OK if you just reject and close this PR now. Thanks!
",tiangolo,2016-07-09 18:55:05
495,2016-02-19 07:53:46,"I added the [`webRequest` API](https://github.com/atom/electron/blob/master/docs/api/session.md#seswebrequest) feature which is related to #461.

Please consider the way of working except name of api.

Still, I prefer to make this as a plugin like the way of @rosshinkley [made](https://github.com/rosshinkley/nightmare-load-filter).
",kyungw00k,2016-04-14 03:55:00
495,2016-04-14 03:55:00,"With the inclusion of #425, I think it's safe to close this PR in favor of it becoming a plugin if needed.

Closing.
",rosshinkley,2016-04-14 03:55:00
495,2016-04-26 08:12:41,"Use [nightmare-webrequest-addon](https://github.com/kyungw00k/nightmare-webrequest-addon)
",kyungw00k,2016-04-14 03:55:00
495,2016-09-21 06:10:58,"hi, how can i use nightmare-webrequest-addon?
",skysilence,2016-04-14 03:55:00
495,2016-09-28 01:53:23,"@skysilence See https://github.com/kyungw00k/nightmare-webrequest-addon/blob/master/README.md first
",kyungw00k,2016-04-14 03:55:00
494,2016-02-19 01:28:48,"If a page fails to load, `goto()` should probably call back with an error instead of indicating success. This is a contrived example, but consider a time when the site you are trying to load is down:

<S_CODE_TOKEN>
",Mr0grog,2016-04-20 13:44:15
494,2016-03-03 03:34:39,"Happy to work on a PR for this if the general idea seems reasonable. Just let me know.
",Mr0grog,2016-04-20 13:44:15
494,2016-03-30 03:27:24,"@Mr0grog Ooh, that's not great.  I'd +1 for a PR.
",rosshinkley,2016-04-20 13:44:15
494,2016-04-20 13:44:15,"Fixed in #553.
",Mr0grog,2016-04-20 13:44:15
493,2016-02-19 01:13:07,"Originally found as a byproduct of #465, also noted over in the discussion on #491.

If two queues on the same Nightmare instance are operating simultaneously and both call the same action (e.g. `evaluate()`), it is possible for one call to pick up the results from the first call and finish early, continuing its cue with the wrong data.

Here's an example from #465:

<S_CODE_TOKEN>

Or with typing:

<S_CODE_TOKEN>

Obviously there are more complicated questions with that one, but the salient bit here is that the queue typing ""github nightmare"" returned early. You can watch the window and see that it is still typing after the results are printed to the console.

You can do this with `goto()`, too, but that one's also somewhat complicated by the fact that `goto()` actually doesn't know how to fail (which is a different issue altogether). But it would fail to fail (ha!) if navigation were pre-empted by a second, simultaneous `goto()` call.

Obviously this is a little edge-case-y, but I suspect users will hit things like this more now that the ""official"" way to use Nightmare is via the `then()` API instead of with generators (where you have to go out of your way to trigger simultaneous actions).

There are a few potential ways I can think of to fix this.
1. Every cross-process call gets a unique ID. Replies would include that ID so the right listener handles it. (This could all be wrapped in up in a nice callback or promise based API, of course)
2. Ensure that multiple actions cannot be executed at once (two queues could be interleaved, but while queue A is executing an action, queue B would have to wait until that action is finished to execute its next action). This probably requires much more overhead to manage, but would fix issues like interleaved characters from two calls to `type()`. On the other hand, you might want most actions to be able to be simultaneous and `type()` might just be a little special.
3. Eliminate the possibility for multiple queues on a single nightmare instance altogether. Actions queued after a `run()` call would queue after `run`'s callback (or possibly immediately before the callback, but after the actions it was running).
4. Something else? Those three are all I've got.
",Mr0grog,
493,2016-02-19 01:15:13,"It might also be worth noting that, while this is generally an edge-case, deep extensions of the sort that #425 aims to enable might be more prone to triggering these sorts of issues if they are slow and highly asynchronous.
",Mr0grog,
493,2016-04-13 17:50:25,"Some notes about thoughts I’ve had since I first posted this issue (or, an expansion of stuff from #561):

I think (1) or some flavor of it is essential. No matter what, it’s likely that some actions will have to do call multiple operations in the Electron process and those operations could collide. Even if everything in Nightmare’s core is extra careful, plugins could easy trip over things.

Given how often people run into problems with loops (#533, #526, #522 to name just a few recent ones) and how complex [explaining the problem and various solutions](https://github.com/rosshinkley/nightmare-examples/blob/master/docs/common-pitfalls/async-operations-loops.md) is, I think (3) above or a variation on it is also a good idea. If all actions go onto a single, long-lived queue, even after the queue starts executing, that will completely eliminate looping issues.

As much as I like the idea of the power-user capability of being able to do multiple operations at once in the same window, I’m not sure there are a lot of concrete, real-world use cases for it. If there are good use-cases, I think they are sufficiently uncommon as to justify requiring a bit more work to enable them. Maybe an API like `nightmareInstance.getQueue()` would give you a new queue that you can add operations to (e.g. `nightmareInstance.getQueue().click('#something').title().then(...)`) and executes simultaneously with the “default” queue.
",Mr0grog,
493,2016-04-14 17:49:48,"> I think (1) or some flavor of it is essential. 

I agree. Having instances (whatever the final instance implementation is) be independent _including_ the messaging bus is important.

> Given how often people run into problems with loops and how complex explaining the problem and various solutions is, I think (3) above or a variation on it is also a good idea.

I tentatively agree.  The question that immediately jumps to my mind is handling something like:

<S_CODE_TOKEN>

I'm guessing you'd expect the first three actions to execute prior to the actions in `.then()`, right?  Are you envisioning `.then()` being an action that acts like Underscore's/Lodash's `.tap()`, or would there be a differentiation between the queue being executed and the queue that is accruing tasks?

This could also lead to unintended consequences with memory for sufficiently large sets, but I'm okay (at least for the moment) with assuming that if you're using Nightmare to do an arbitrarily large number of tasks, you already Know What You're Doing&trade;.

> As much as I like the idea of the power-user capability of being able to do multiple operations at once in the same window, I’m not sure there are a lot of concrete, real-world use cases for it. 

I would be inclined to support something closer to [async's `.parallel()`](https://github.com/caolan/async#parallel).  Something like:

<S_CODE_TOKEN>

Thoughts?
",rosshinkley,
493,2016-04-15 01:37:33,"Since we are in agreement that (1) should happen and since it resolves the critical _safety_ issue, some notes on that first:

High-level goals:
1. Prevent two simultaneously performed actions from being able to mix up their results/errors
2. Be really easy to use (ideally, easier than the current method)
3. Support progress/streaming results? I think this would be neat, but I don’t think any existing Nightmare actions have need of it. Not sure how much of a priority to make it, but I suspect it would at least be wise not to implement a design that closes the door on it.

Proposed API:

<S_CODE_TOKEN>

This uses callbacks in order to be consistent and composable with Nightmare’s action API. That way, you can just pass the callbacks along:

<S_CODE_TOKEN>

(If we wanted to change Nightmare’s API for actions to be promise-based, then I’d say this new API should be promises, too, but I don’t think anybody is pushing to do that).

On handling progress data, `this.child.send()` could be an event emitter (or a stream?) that emits anything the handler of `parent.on('command')` `emit`s to its `done` argument. All events emitted there will only be received on the emitter created by calling `this.child.send()`:

<S_CODE_TOKEN>

Internally, every call to `this.child.send()` would generate a unique ID (this could just be a incrementing an integer) and send a message named `'command'` over IPC with the arguments: `'command-name', id, [command arguments]`. Using the string `'command'` as the event name allows us to safely differentiate between internal management commands and calls to actions.

On the electron side, a handler for `'command'` events is responsible for creating a callback that will send a message back over IPC named `'command-result'` with the arguments `id, error, result`.

Will post on queueing stuff in a bit.
",Mr0grog,
493,2016-04-15 06:53:20,"Heeeeeeere we go...

> I'm guessing you'd expect the first three actions to execute prior to the actions in .then(), right?

Yes.

> Are you envisioning .then() being an action that acts like Underscore's/Lodash's .tap(), or would there be a differentiation between the queue being executed and the queue that is accruing tasks?

I’m struggling to follow with what you’re getting at here and I may be about to go way off the rails (sorry if so). Slightly reconfigured:

<S_CODE_TOKEN>

Are you asking whether `action3` or `action2` runs first? i.e. whether `then()` would be like pushing its onResolved handler onto the queue as an action, needing to complete before the next action (`action3`) runs? That is, is the resulting queue:

<S_CODE_TOKEN>

At the very least, **if `then1` is expected to run before `action3`** (as opposed to simultaneously or after), I think that would mean `action2` would have to run before `action3`, so it matches the basic behavior of promises. That is, if a promise’s onResolved/onRejected handlers return a then-able, they should not “complete” until the then-able they returned does. So the `then1` action wouldn’t complete (enabling the queue to move on to `action3`) until the promise for the result of `action2` completes.

That is to say, I do not think this would be acceptable because it either violates the expectation of promises/then or puts you in a deadlock (can't continue to action3 until action2 is done but action2 can't be performed until after action3):

<S_CODE_TOKEN>

(Except the above _is_ what would theoretically happen if `then1` didn’t _return_ the nightmare instance (no more deadlock concern). But, mechanistically, it would be complicated to differentiate between the two. Hmmm.) Not to mention the question of what happens here:

<S_CODE_TOKEN>

So. I think I would go with the second flow of events above (with the very complicated chart) because the implementation seems very straightforward. Except. Complicated flow. :(

But then I want to imagine a magical land of fairies and unicorns where this works:

<S_CODE_TOKEN>

Which begs the question: is that different than the above code snippet? Reading it naively, it would definitely imply behavior like the first timing diagram above. You would really expect `then1` to participate in the queue of actions and come before `action3`. Maybe it is:

<S_CODE_TOKEN>

I think (if I’m thinking right, but I’m getting a headache now) that emulates the behavior of the first timing chart but under the implementation that matches the second (very complicated timing chart). Or, under the first technical approach, the two code snippets function the same, while they function differently under the second.

How is that _really_ different? Well... (deep breath)

<S_CODE_TOKEN>

Would be:

<S_CODE_TOKEN>

And this is starting to get crazy enough that I’m almost beginning to regret coming down this path. Sigh.

Or were you getting at what happens here?

<S_CODE_TOKEN>

Being one of:

<S_CODE_TOKEN>

And I’m pretty sure I’ve gotten myself lost. Fresh eyes in the morning. Not going to get to explicit parallelism yet.
",Mr0grog,
493,2016-04-16 16:42:41,"### process/execution safety

I agree with just about everything you said, including that this is a safety problem first and foremost.  There are a few (many?) devils in the details, but I don't think they're worth touching until development is underway.

I _really_ like the idea of progress events, especially for debugging.  Implementing something like that would have made sussing out several bugs much easier.  It also adds a new layer of power for actions/plugins.

I do have a question: how do you propose to have callbacks callable child->parent?  I don't think you can call back like that, at least not without writing something reasonably fancy to manage the events for you.  I feel like this is what you were getting at but never explicitly said it.  I'm _also_ feeling like maybe I've missed something important.

### queues

And this is where the brain-bending _really_ gets into full swing.  It might be useful to explain what I was driving at: `.then()` would be an action, (almost) the same as anything else.  It would let you put in custom code between other actions.  

Skipping ahead a bit, that buys having the whole of the Nightmare API hung off of the `.then()` so you can get to your ""magical land of fairies and unicorns"".  I'd add puppies and sunshine, but that's my two pence.

There are a couple of things with this approach that bother me.  For one, I _think_ the Nightmare instance doing the queueing would arguably need to be a full-on capital-P Promise implementation (whether that's done explicitly or with inheritiance).  That would let it remain compatible with existing tools like the `vo`/`co`/`mocha-generators` family of libraries.

Second, and maybe more importantly, when does execution start if not with `.then()`?  Is it the last `.then()` on a chain?

Moving on (well, backwards really), and borrowing your example here, and trying to clear up how this works in my brain:

<S_CODE_TOKEN>

The resulting queue would look like:

<S_CODE_TOKEN>

Which if I'm reading your diagrams properly, should match up with:

<S_CODE_TOKEN>

With respect to actions that return actions, I'd think that it _wouldn't_ add an implicit then and instead alter the queue.  Based on my above fun magical land commentary, and again borrowing your example:

<S_CODE_TOKEN>

(Aside: you're right, this gets nightmarish [har] in a hurry.)

I would expect this to look like:

<S_CODE_TOKEN>

... I think.  I'm getting turned around trying to puzzle through this.  Dearth of coffee.

And ultimately, I'm still head-tilting at arranging Nightmare calls in this way.  It would run deterministically (unlike the wild of now), but I still don't think it would Do What You Mean&trade;.  A naive reading of the above makes it look like you're doing two completely independent chains of actions on a single nightmare instance, and based on what we're describing here, that's just not the case.  (Nor should it be.)

With that said, now I'm starting to question what the ultimate goal is with the changes to queueing.  I would advocate for 1) deterministic results and 2) easily usable/intuitive calls from `.then()`.  Is that fair?

Re parallelism, yeah, that gets into a _bit_ of a different bailiwick, but my two previous rules should still apply.  I can think of ways to accomplish this, but I would like to see the queueing problem solved first.  If I'm thinking about _that_ properly, parallelism might fall very well fall out for cheap.  Like you said, the implementation doesn't need to have it day zero, but I wouldn't want to completely close the door on it.

Oooookay.  I've re-read your comments several times now, and my thinking parts are turning into mush.  I know I've only scratched the surface here.  I'll continue to let this marinate and comment again if I have more thoughts.
",rosshinkley,
493,2016-04-18 03:25:29,"> There are a few (many?) devils in the details, but I don't think they're worth touching until development is underway.

BOOM: #579. Now we’ve got a separate place to discuss that one.
",Mr0grog,
493,2016-12-07 18:31:10,"After reading everything you said i still dont understand why i can't run multiple instance of new Nightmare() on the same machine.
If i launch the same script  5 or 6 times at the same time then some of them are going to hang (nothing happen or stay on `nightmare:log altering page to force rendering`) or crash (`nightmare:log crashed [{},false]`)
Do you have some idea to help me debug that ? Thanks !",GautierT,
493,2016-12-08 08:38:51,"@GautierT I think you might be a bit mixed up here—nothing on this issue is about problems running multiple instances of Nightmare at once (in fact doing so *solves* the issues here; this is about doing multiple sets of actions with *one* Nightmare instance).

Your problem sounds a lot like #612. One thing you might want to try is using random partition names or memory partitions, like so:

<S_CODE_TOKEN>

If that doesn’t help, you might want to make a separate issue, since your problem is definitely off-topic for this thread.",Mr0grog,
493,2016-12-08 10:01:43,"@Mr0grog : Ok. Sorry for the miss understanding.. !
My current partition setting is 
`webPreferences: {
       partition: 'nopersist'
 },
`
and i haven't set `session`.
I will try with a random partition number !",GautierT,
493,2016-12-08 18:37:39,@GautierT No worries! I hope you get it figured out.,Mr0grog,
492,2016-02-17 18:50:10,"To repro (on Mac OS X), simply have a nightmare browser window open (`show: true`) and wait long enough. Click the reed cross to close the window: the Nightamre runner will crash and the parent process with it.
",gyril,2016-08-03 03:54:47
491,2016-02-17 14:59:34,"Fixes #490, addresses @Mr0grog's comments from #482.  Also removes `vo` from the CNN example based on [@matthewmueller's comment](https://github.com/segmentio/nightmare/pull/482#issuecomment-184525044).

That being said: why the move to excise `vo`?  Is it to remove the external dependency?  I still think showing an example of using `vo` or `co` with `yield` is helpful.  Thoughts?
",rosshinkley,2016-02-18 03:04:24
491,2016-02-17 17:45:51,"Thanks! Wasn't sure if any maintainers (is that just @matthewmueller?) were going to do anything about that since nobody replied on that thread.

My 2¢: I think it's good to have the main examples rely on as few third-party libraries (like vo) as possible—there's a surpising amount of friction added to getting started when you have to learn a second tool in order to learn the once you want to use. (Of course I'm biased: I'm not really using vo in my own work w/ Nightmare.)

That said, libraries like vo are great tools that make the async nature of this stuff a little easier in some cases. Those who don't know about them might never find out if not for the examples. I think it would be great to have a section that talks about how Nightmare pairs well with and gives examples of:
- ES-next `async/await` (maybe with a note about how to set it up with Babel?)
- Tools for generators: vo, co, Bluebird's `Promise.coroutine()`, etc.
- Mocha-generators, Jasmine-co, etc. (for testing)
",Mr0grog,2016-02-18 03:04:24
491,2016-02-17 22:14:26,"@Mr0grog no problem.  I apologize if I zapped any of your efforts, but I saw #490 this morning and figured that since I was in there, I may as well patch up the other stuff you pointed out.

As for not including external libraries: I agree.  Adding additional dependencies with their own quirks and learning curve only serves to make the learning process more difficult.  I use `vo` when it's convenient, but I guess the main takeaway here is that you don't _have_ to use any outside libraries to use Nightmare.  Recommending using `.then()`, though?  Always?  That makes me ... uncomfortable.  It's hard for me to articulate why outside of aesthetic reasons.  Right tool for the job, I suppose.

Which brings me to your next point: I think adding examples for common usecases and popular libraries would be wildly helpful - something along the lines of Including an examples directory with documentation for each example.
",rosshinkley,2016-02-18 03:04:24
491,2016-02-17 22:19:22,"By the by, #472 is a _great_ case study for the need of detailing usage with different approaches.
",rosshinkley,2016-02-18 03:04:24
491,2016-02-17 23:59:25,"@rosshinkley Oh, no, you didn't zap any of my efforts at all; no worries! I held off on making any changes in that area since it sounded like @matthewmueller was making a bunch ideological changes that aren't written down anywhere, so I figured I'd wait to hear back or see what he did before _I_ tried to actually do anything more.

> Recommending using .then(), though? Always? That makes me ... uncomfortable. It's hard for me to articulate why outside of aesthetic reasons.

Well… we could focus on `run` or `end` instead. Then you have the ""callback API"" and the ""promise API."" To be honest, though, I'm not sure I have the same aesthetic concerns with `then`—I kind of like it ;)

The biggest thing I'm concerned with about moving away from generator-based examples is that several things are buggy in Nightmare if you ask it to handle multiple queues at once—and that's easy/inviting to do if you focus on the run/end/then API. See, for example, #465. On the other hand, I'd bet those issues exist because early authors focused on using generators and so rarely tripped over bugs that happen when multiple operations are going on simultaneously. But all that is a big discussion that is somewhat separate from how things are documented! So I'll shut up on that for now.

> I think adding examples for common usecases and popular libraries would be wildly helpful - something along the lines of Including an examples directory with documentation for each example.

Ooh, definitely! I think the documentation, in general, could be vastly improved. Several of the issues and questions in #472 are ones I ran into when I first started looking at Nightmare, too (I also think it would be great if all methods returned a promise or thunk—there's no reason a nightmare instance can't actually be one of those things, but that's _way_ out of scope here).

_[Rant warning:]_ Anyway, I'd _would_ love to volunteer to help with that, but… I'm personally a bit wary of diving into major changes to docs (or other changes of similar scope). There's no documentation here relating to direction or process for the project. I'm not sure whether there are people at Segment (or outside it) who are acting as maintainers other than @matthewmueller. And when he makes a sudden change in project direction and only announces that change in a comment on a random issue/PR, as happened in #482, or makes surprising API changes with nary a PR or even a comment in an issue (like making `then` act more like a promise after much discussion against or not very in favor of it in #256), or even when issues and PRs can sit for months (e.g. #222) with no maintainer feedback at all (even just a ""no thanks""), I don't have much confidence that big contributions will be well respected.

That's especially true for docs. It's hard to do a good job with them when you don't know what direction the project is headed. What parts should be focused on? What things should be downplayed because owners/contributors don't feel great about them? What's deprecated and going away? What are the known gotchas? And so on. #482, again, is a great example here: in previous issues, @matthewmueller talks about `then()` as a private API, only there to make vo behave properly. Now, with no other discussion in between, it's suddenly the primary front-and-center way to use Nightmare.

Anyway, I know you weren't necessarily asking for my help and sorry for the sudden rant there. I hate to heap on a lot of criticism when I've only been observing the goings-on here for a couple weeks. I hope there's not a mailing list or something I'm totally missing out on. It felt like it needed to be said somewhere, though.
",Mr0grog,2016-02-18 03:04:24
491,2016-02-18 00:13:44,"(And to be clear, none of that is to say that Nightmare is a bad or project or that anybody is doing bad work—merely that it's not super friendly to big outside contributions.)
",Mr0grog,2016-02-18 03:04:24
491,2016-02-18 03:03:30,"thanks @rosshinkley for the fixes – though i'm a bit surprised about the id change since I tested this two days ago. I wonder if yahoo is doing something weird with rendering.

---

@Mr0grog you mentioned a lot here so let me address a few things:

**1. I apologize about the API change**

I changed my mind about returning a promise, mostly because you can now use Promises natively in latest node, so you don't need to include Bluebird or anything big.

I should have mentioned something, but to be honest I'm not sure it broke anyone's code. Let's be clear, the only API change is: _.then() returns a promise and not a nightmare instance_

The goal of this change was to make it more familiar to newcomers and remove the additional dependency that was confusing in the first place.

**2. I strongly disagree that big contributions aren't welcome**

If you go back in the merged PRs, there are some really big PRs that have been merged. It does take time to go through some of the bigger ones though since a lot of people depend on this library and I have other commitments outside of working on Nightmare.

**3. Direction**

The next two things on my TODO list for nightmare is to get @rosshinkley's #425 merged and create better documentation (a quick how-to video) on how to run Docker on linux.
",matthewmueller,2016-02-18 03:04:24
491,2016-02-18 17:28:03,"I realize that this PR is closed, but I feel compelled (and somewhat responsible) to respond to the commentary.  I'm going to _try_ to respond to both of your comments.  (This is going to be a bit of a missive; strap in for a long read.)

> Oh, no, you didn't zap any of my efforts at all; no worries!

I'm relieved. :)  Duplicate work is the worst kind of work.

> Well… we could focus on run or end instead. Then you have the ""callback API"" and the ""promise API."" To be honest, though, I'm not sure I have the same aesthetic concerns with then—I kind of like it ;)

I guess getting back to a point @Mr0grog made: I am biased for using `yield`.  No real reason other than ""it looks nice"" and it has fit in well with what I've done with Nightmare.  And it's not like I'm _losing_ that ability, but I do think it's worth providing a usage sample.

> The biggest thing I'm concerned with about moving away from generator-based examples is that several things are buggy in Nightmare if you ask it to handle multiple queues at once—and that's easy/inviting to do if you focus on the run/end/then API. 

This may be - is? - getting a bit off topic, but while running parallel operations on a single page should Just Work&trade;, running parallel operations across multiple domains with a single Nightmare instance won't work.  It can't work.  At least not in the current incarnation.

That said, I am very interested in the outcome of #465.  I suspect there's other issues in the guts of Nightmare to getting single-page parallel operations to work.  I haven't carved out time to really get into it, though.

While I'm on this tangent, documenting single-domain (well, single URI anyway) parallel operations would be kind of tricky.  They would have to state outright that you cannot perform actions across domains at the same time.  However...

>  But all that is a big discussion that is somewhat separate from how things are documented! So I'll shut up on that for now.

Yeah, I should too.  I propose we move that conversation over to #465.  Hopefully I'll have something constructive to add there soon. :)

> Ooh, definitely! I think the documentation, in general, could be vastly improved.  Several of the issues and questions in #472 are ones I ran into when I first started looking at Nightmare, too 

Same.  I'm not above sandboxing for a bit, and that sort of work doesn't frustrate me.   I can totally understand and relate to where it would be frustrating, especially to someone not terribly familiar with javascript.  Example usage - at least, non-issue, non-test case example usage - to flog this horse I'm pretty sure is already dead, would be great.

> (I also think it would be great if all methods returned a promise or thunk—there's no reason a nightmare instance can't actually be one of those things, but that's way out of scope here).

As you pointed out, this is also kind of out in the weeds, but I just wanted to quickly point out that all of the methods _do_ return a thennable as Nightmare itself (partially) implements promises.  Having Nightmare directly inherit from `Promise` opens a bit of a can of worms.  (I touched on this briefly in #472.)

> [Rant warning:] 

Off topic, but I have to admit, that 1) this gave me a chuckle and 2) thank you.  I'm going to skip around a bit now, as I think the bulk of the ""rant"" should be addressed with @matthewmueller's comment.

> #482, again, is a great example here: in previous issues, @matthewmueller talks about then() as a private API, only there to make vo behave properly. Now, with no other discussion in between, it's suddenly the primary front-and-center way to use Nightmare.

This was what I was getting at with my original question about excising `vo`.  I had seen commentary for both ways and wanted clarification - and perhaps more importantly, justification - written down somewhere for posterity.  I am _certain_ it's going to come up in questions again and I wanted to have a reference to point at.  (The poor, poor souls that get this PR as a reference in the future.  Apologies to future readers everywhere.)

To be honest, even with my self-reported biases, I don't really care what the suggested usage is.  It needs to be documented, and big shifts in usage need to be justified.

Moving on...

> thanks @rosshinkley for the fixes – though i'm a bit surprised about the id change since I tested this two days ago. I wonder if yahoo is doing something weird with rendering.

No problem.  I feel like Yahoo has changed IDs of either the search bar or button or both in the past.  I have this nagging memory of seeing this issue before, but a cursory glance through the issues yielded nothing.  On a related note, I suspect it's not the last time it'll happen.

> I should have mentioned something, but to be honest I'm not sure it broke anyone's code.  The goal of this change was to make it more familiar to newcomers and remove the additional dependency that was confusing in the first place.

I also doubt it broke much, if anything.  It _does_ make usage a bit strange, though.  Calling `.end()` before `.then()` looks kind of odd to me.  It's also worth pointing out that adding something akin to [Underscore's `tap`](http://underscorejs.org/#tap) method so you can interact with values from functions like `.evaluate()` before `.then()` might be handy.  Food for thought, and I'd be willing to work on that if it's something worth including.

Also, thank you for the clarification on the removal.

> @Mr0grog 
> 
> > ... or makes surprising API changes with nary a PR or even a comment in an issue (like making then act more like a promise after much discussion against or not very in favor of it in #256), or even when issues and PRs can sit for months (e.g. #222) with no maintainer feedback at all (even just a ""no thanks""), I don't have much confidence that big contributions will be well respected.
> 
> @matthewmueller
> 
> > If you go back in the merged PRs, there are some really big PRs that have been merged. It does take time to go through some of the bigger ones though since a lot of people depend on this library and I have other commitments outside of working on Nightmare.

Not having the change documented via a PR is a bit frustrating, if for no other reason that there's no real trail to hold up as when and why the change was made.  With respect to the PRs, I understand the bigger ones take time to review.  Especially ones that change the shape and surface of Nightmare, like #425 (not to toot my own horn).  I also understand that Nightmare competes for attention and priority.  Commentary or updates on PRs are nice to have, and help encourage contribution.

> @Mr0grog 
> 
> > That's [being contribution consideration] especially true for docs. It's hard to do a good job with them when you don't know what direction the project is headed. What parts should be focused on? What things should be downplayed because owners/contributors don't feel great about them? What's deprecated and going away? What are the known gotchas? And so on.
> 
> @matthewmueller 
> 
> > The next two things on my TODO list for nightmare is to get @rosshinkley's #425 merged and create better documentation (a quick how-to video) on how to run Docker on linux.

Thank you for the todo list, and I'm thrilled that #425 is on deck.

Based on my observations in this project, the direction (at least since moving off of Phantom and onto Electron) has been ad hoc.  Folks wanting certain functionality ask for it, and in general, that piece is discussed and added or fixed in isolation.

With that in mind, I don't know that a more comprehensive project map is possible.  Again, most of the changes I've seen have been an outgrowth of issues or desired behavior, and that kind of thing is tough to predict.  And if I'm being totally honest, I'm not sure the onus is on the ownership to suss that out.  Iterating based on feedback makes for a better project, in my humble opinion, and has the added benefit of being relatively easy.

And with _that_ in mind, this gets back to a motif:  Documentation.  I very (emphasis on very) strongly agree that deprecation and gotchas should be documented.  I also think - and I know I've made this clear already - that changes should be documented.  While I'm repeating myself, I'll mention again that documenting common use cases with popular libraries should also probably be included.

What would be nice - and I think might go a long way to addressing @Mr0grog's list - would be guidelines for requesting functionality, guidelines for submitting issues, and guidelines for submitting PRs.  Perhaps even some general notes on what to expect with those items.  #425 magnifies the above problems, adding the question of what belongs in the core of Nightmare vs. what should be a plugin.  Thoughts?

---

Finally, thank you both for the commentary and criticism.  I think this discussion is an important one and needed to be had.
",rosshinkley,2016-02-18 03:04:24
491,2016-02-18 18:49:15,"Technical notes first, feelingsy stuff about how stuff gets done second:

> while running parallel operations on a single page should Just Work™, running parallel operations across multiple domains with a single Nightmare instance won't work.

Exactly! The issues at the end of #465 are all on the same page and should just work, but don’t. The major underlying issue is that communication between Nightmare’s process and the Electron process (and similarly between the Electron browser and renderer processes) doesn’t differentiate between which actual call to do  a given operation they are responding to. That’s not a problem until there are two simultaneous calls to do the same kind of operation (in #465, that was `evaluate`, but really it could be any operation). I’m actually going to go make an issue for that now (I think it’s separate from the actual thing #465 was trying to fix).

(Another note for better docs: it would be good to clarify that you need multiple nightmare instances to work on multiple pages at the same time.)

> Having Nightmare directly inherit from Promise opens a bit of a can of worms. (I touched on this briefly in #472.)

Yep! I think it would require a lot of discussion. There are multiple ways to skin that cat (and, as you say, reasons to not to skin it at all). I haven’t written an issue or PR yet because I haven’t taken the time to really think through and articulate it well.

---

Project process stuffs:

> 1. I apologize about the API change

Oh, you don't need to apologize for the change! It's a good change, too (in my opinion, at least).

> I should have mentioned something, but to be honest I'm not sure it broke anyone's code.

Given the way `then` previously worked (clearing the queue), that's probably true—you'd likely get more confusion than utility out of chaining off of `then`. But it is much easier to be confident in that assertion if you let people know about the change in advance and give them at least a few days for feedback. It may or may not break users' code, but it _is_ a breaking change and certainly has the potential to do so. As you said, “a lot of people depend on this library,” which I think only makes this sort of thing a bigger deal.

Maybe @rosshinkley put this better than me above:

> I had seen commentary for both ways and wanted clarification - and perhaps more importantly, justification - written down somewhere for posterity. I am certain it's going to come up in questions again and I wanted to have a reference to point at. (The poor, poor souls that get this PR as a reference in the future. Apologies to future readers everywhere.)

Again, I think the change itself is great! I hear and agree with your reasoning for it 100%. It's the _manner in which the change was made_ that I'm concerned about.

> there are some really big PRs that have been merged

Definitely! Being accepting and being _welcoming_ (maybe “inviting” or “supportive” would be a better terms for what I’m trying to get at here) are different things though. My point is that I think big and good contributions have been made in spite of an environment that might not be as supportive of them as it could be.

I do want to clarify, too, that I used the word “major” rather than “big” because I’m talking about changes that are highly impactful to how someone uses Nightmare. Mainly, that means things like breaking API changes and adding or removing new classes of behavior. Your change to `then` is a good example—it’s small in terms of lines of code, but potentially major in impact. #479 might be a good counter-example if it’s accepted. It’s big-ish in terms of lines of code (at least relative to most PRs here), but relatively isolated and not particularly impactful to how Nightmare works. Users won’t see it as anything but a slight improvement. (Note that that _doesn’t_ mean it won’t require careful review. It’s still a lot of code.)

> It does take time to go through some of the bigger ones

And it should! This stuff should be (and is, I think) reviewed with a careful eye. I am nothing but :thumbsup: :thumbsup: :thumbsup: on that font. I should say that my personal experience hasn’t been one where I think anything has taken too long. It’s only other issues and PRs that I see sitting for a while.

OSS projects are, by nature, done in most people’s off-hours, so taking a few days to reply doesn’t seem bad to me. Even if it takes longer than a few days to come up with substantive feedback, that’s fine. But in my experience, it _really helps_ people feel better about what’s going on if, after a few days, a maintainer at least says “hey, thanks for issue/PR/whatever; we’re super busy right now, but I should be able to take a closer look in a few days/a week/whenever.”

> The next two things on my TODO list…

Thanks for the info! But this is more-or-less exactly what I’m talking about. Now _I_ know what’s on the docket, but this info is still buried away at the bottom of a closed PR. Who is going to see that besides you, me, and @rosshinkley?

> the direction… has been ad hoc… with that in mind, I don't know that a more comprehensive project map is possible.

Ah, good to know! I haven’t been here long enough to get a sense for whether things are mostly just ad-hoc or whether there is a tacit roadmap that only exists in a few people’s heads. @rosshinkley makes some really good points here and I think I agree on what would really be helpful:
- Guidelines for requesting functionality
- Guidelines for submitting patches
- A commitment that project maintainers will also follow a public process (the same process as other contributors?) for making changes.
- Clear documentation about deprecation, and gotchas, etc.

I don’t think any of these things need to be exceedingly exact or heavy-duty; even a little guidance helps. For me, the biggest one by far is having project maintainers/committers following a public process for proposing/making changes, especially for changes that affect the API surface or intended usage.

> Finally, thank you both for the commentary and criticism. I think this discussion is an important one and needed to be had.

Glad to know I’m not just a crazy man off screaming in the corner! Thanks for your feedback, too, it was probably clearer and more concrete than mine :D
",Mr0grog,2016-02-18 03:04:24
491,2016-03-04 19:50:30,"@Mr0grog I didn't have a _great_ place to put this, but this seems the most logical.

I decided to pull together an external [examples project](https://github.com/rosshinkley/nightmare-examples) as to not pollute the Nightmare package with extraneous libraries.  That said it's (I hope) close to what we had originally discussed.  So far it has basic usage on `vo`, `co`, promises and semantic callbacks, as well as a couple of known problems.  I'll be adding more stuff to it as time permits, and would love to have your and possibly @matthewmueller's feedback, availability permitting.
",rosshinkley,2016-02-18 03:04:24
491,2016-03-04 21:45:12,"@rosshinkley cool! I’ve been a little busy this week, but will definitely check it out.
",Mr0grog,2016-02-18 03:04:24
490,2016-02-17 12:19:14,"In sample.js, nightmare.end() is called before promise is resolved.
I've tried placing nighmare.end() inside the .then() section but it doesn't help.

Is it possible to have a working example that shows how to get nightmare.end() to only execute only after the .then() statement has finished executing? 
",rafaelb,2016-02-18 03:04:24
490,2016-02-17 15:04:22,"Two problems: one, move `.end()` to before `.then()`, and two, the name of the search button has changed:

<S_CODE_TOKEN>

I opened up a PR to fix this + the questions posed in #482.
",rosshinkley,2016-02-18 03:04:24
489,2016-02-17 04:10:22,"I need use proxy credentials but how to do this in nightmare ? 
In electron this solve simple http://electron.atom.io/docs/v0.36.7/api/web-contents/#event-login
But how to do this in nightmare ? I need send event.preventDefault(), but how it can over ipc ?
",sintanial,2016-04-03 03:49:18
489,2016-04-03 03:49:17,"With #475 merged, this should be fixed.  Closing.
",rosshinkley,2016-04-03 03:49:18
488,2016-02-16 20:32:02,"Does exist any way to do it? Something similar to [Full Page Screen Capture Chrome extension](https://chrome.google.com/webstore/detail/full-page-screen-capture/fdpohaocaechififmbbbbbknoalclacl) do.

The only way I though was:
- Get the document height
- go scrolling at the end and taking screenshots
- use some external tool to compose a new image 
",icaromh,2016-02-16 20:45:07
488,2016-02-16 20:40:03,"Take a look at #328, specifically [my comment](https://github.com/segmentio/nightmare/issues/328#issuecomment-159311982).  The basic gist is to get the dimensions of the body element (using `scrollHeight`/`scrollWidth`), and then use `Nightmare.viewport` to set the viewport dimensions.  After that, you should be able to take a screenshot of the entire page.

The biggest gotcha is waiting for the internal frame backing store to catch up to your request, outlined in #468 and fixed in #479.  Both are probably worth a read.
",rosshinkley,2016-02-16 20:45:07
488,2016-02-16 20:45:07,"Oh! Thanks a lot @rosshinkley  :+1: 
",icaromh,2016-02-16 20:45:07
487,2016-02-16 17:08:46,"If the process Nightmare is running in exits or is killed (via a graceful process.exit() call, interrupt signal, etc), this ensures that the underlying Electron process Nightmare is managing also gets closed and cleaned up so users don't have have tons of rogue Electrons running.

Fixes #474.
",Mr0grog,2016-02-18 03:15:24
487,2016-02-16 17:11:09,"+1 for the PR, and a double +1 for the remote branch name. ;)
",rosshinkley,2016-02-18 03:15:24
487,2016-02-18 03:15:25,"thanks @Mr0grog !
",matthewmueller,2016-02-18 03:15:24
487,2016-02-18 17:29:29,":+1: No problem, happy to help out.
",Mr0grog,2016-02-18 03:15:24
486,2016-02-16 06:10:37,,BerndErnst,2016-12-30 19:03:26
486,2016-03-02 09:30:01,"Status?
",BerndErnst,2016-12-30 19:03:26
486,2016-12-30 19:03:23,thanks!,reinpk,2016-12-30 19:03:26
485,2016-02-16 05:11:19,"This causes the .type() to get cut off. My guess is that the page isn't ready before we try focusing, but it needs more investigation.
",matthewmueller,2017-01-02 21:23:38
485,2016-09-27 18:57:15,"I've seen this a few times recently as well.
",marckubischta,2017-01-02 21:23:38
485,2017-01-02 21:23:38,"Closing this issue for now as I have not seen this issue in quite a while.  If anyone sees this, I'd be happy to reopen.",rosshinkley,2017-01-02 21:23:38
484,2016-02-16 01:55:18,"You state:

> Under the covers it uses Electron, which is similar to PhantomJS but faster and more modern.

Can you show us some proof like benchmarks or documentation to proof that?

Greets
",BerndErnst,2016-02-16 06:00:15
484,2016-02-16 04:56:45,"Certainly. Here's some results from awhile back. This is from an old email.

---

Phantom has been very slow for us, and so I was experimenting around with using Electron as a web driver in instead. It turns out Electron is quite a bit faster. Here's some of the benchmarks for selecting `document.title`:

Nightmare (via Phantom):

<S_CODE_TOKEN>

Nightmare (via Electron):

<S_CODE_TOKEN>
",matthewmueller,2016-02-16 06:00:15
484,2017-03-13 20:32:46,"@matthewmueller You wouldn't happen to have the benchmarking code would you? I did some basic benchmarking on a 2016 Macbook Pro between Nightmare (using Electron) and Capybara with PoltergeistJS (Ruby interface to PhantomJS), and Nightmare is usually around 1.5x - 2.5x slower for me",boxtown,2016-02-16 06:00:15
484,2017-03-17 16:36:47,"It is unclear to me what those benchmark numbers even mean or if they are even accurate...

I ran Nightmare locally and Electron takes 2300ms~ to get page title from google.com, this is using the latest build available on NPM.

A truly fast headless browser - zombie.js, the results are very promising: 700ms~ to get page title from google.com",abacaj,2016-02-16 06:00:15
484,2017-03-17 17:09:36,"@boxtown weird maybe phantom has improved a lot since these were run. Don't have the old code on me, but you can probably just download nightmare 1.x and nightmare 2.x to run them side by side.

@abacaj if you can use a headless browser with a fake DOM implementation, then you should. Last I checked zombie was still using jsdom, you could improve that further with cheerio. Nightmare is built for sites that are javascript heavy and need to be able to run the client-side javascript code.",matthewmueller,2016-02-16 06:00:15
483,2016-02-15 20:38:08,"I am scraping a site that declares  a global function in it's head tag : 

<S_CODE_TOKEN>

Inside an evaluate() I call this function and get this error message
###### error occured : 'caller' and 'arguments' are restricted function properties and cannot be accessed in this context.
",max-l,2016-05-19 18:24:09
483,2016-02-17 15:30:50,"As an experiment, I propped up a sample on a branch on my fork ([test](https://github.com/rosshinkley/nightmare/blob/client-script/test/index.js#L196-L203), [fixture](https://github.com/rosshinkley/nightmare/blob/client-script/test/fixtures/evaluation/index.html#L6-L10) if you're curious) as a minimal case.  The function call works and the test passes.

I wonder if you're hitting something internal to the client function?  Is there a more complete error description or stacktrace?
",rosshinkley,2016-05-19 18:24:09
483,2016-05-19 18:24:09,"Closing this issue due to inactivity.  If this is still a problem, feel free to reopen/open a new issue.
",rosshinkley,2016-05-19 18:24:09
482,2016-02-15 18:41:31,"Figured the docs should be updated so more people don't have trouble as in #477.

I wound up making significant changes to the last example so that it would actually still work safely in the case of an error. It seems that, if the vo callback that is handling the error throws, then vo just continues execution as normal in the `run` function and doesn't raise the error. So `undefined` is logged and it looks like no error happened, but no title was found, either. I changed it to log the error, but that also means the handler has to call `process.exit()` otherwise it hangs because `nightmare.end()` is never called because of the error getting the title. Maybe it would just be better to use try/catch/finally instead, since generators allow that:

<S_CODE_TOKEN>
",Mr0grog,2016-02-16 05:16:05
482,2016-02-16 05:16:05,"Ahh sorry about this, I forgot that we were installing vo from latest. I went ahead and removed vo altogether from the example. We'll be recommending you use `.then()` from here on out. 
",matthewmueller,2016-02-16 05:16:05
482,2016-02-16 05:28:54,"So… the new first example doesn't work because the `end()` call happens simultaneously with the queue being used to get the link. It kills the electron process before the queue can complete.

The second example (down near the end under the heading ""Execution"") is still using vo.
",Mr0grog,2016-02-16 05:16:05
482,2016-02-16 05:31:01,"Also, _both_ those examples should probably:

`var Nightmare = require('nightmare')`

rather than:

`var Nightmare = require('./');` (the first one) and
`var Nightmare = require('../nightmare');` (the last one).
",Mr0grog,2016-02-16 05:16:05
481,2016-02-15 14:46:25,"Hi all.
How to detect, when redirect is complete, and all site is loaded ?
For example, i visit google.com, set some query in input, then press search button, next i choose some site, and click on reference, then browser is loading new site. How to detect when this site is loaded ? 
func ""wait"" not helped, because i don't know how long site is loading.
Or another example, i click some advertise, which have 5-6 redirects until finish page is loaded, how to detect this ? when finish page is loaded ?
For example zombie.js has eventloop, in which puts events like page loaded, or script evaluated, or css loaded ant etc.... And when i call wait(), then func ""wait"" waiting until all events in eventloop completed ! 
Is there something like zombie behavior ?
",sintanial,2016-02-16 15:24:07
481,2016-02-16 05:46:25,"I have not tried this, but I believe you can use [.on('did-finish-load', cb)](https://github.com/segmentio/nightmare#onevent-callback)?
",geraldyeo,2016-02-16 15:24:07
481,2016-02-16 09:36:29,"yes, i can, but how can i evaluate script after callback is fired ? wait ? wait has bug https://github.com/segmentio/nightmare/issues/251 :(
",sintanial,2016-02-16 15:24:07
481,2016-02-16 14:47:51,"I created wrapper for wait electron events. I posted this code here, if someone needed:

<S_CODE_TOKEN>

Example for use:

<S_CODE_TOKEN>
",sintanial,2016-02-16 15:24:07
481,2017-01-10 00:38:54,"TLDR, wouldn't this work?
<S_CODE_TOKEN>
Could use a timeout option, tho.",fzzle,2016-02-16 15:24:07
481,2017-01-16 10:07:56,"Just a quick fix for https://github.com/segmentio/nightmare/issues/481#issuecomment-184709699 on @sintanial code
`self.optionWaitTimeout` should be `self.options.waitTimeout`

See: https://github.com/segmentio/nightmare/pull/716/commits/384b752604ed1450a0bda996feba20566dad736f",navossoc,2016-02-16 15:24:07
481,2017-03-24 01:01:09,@sintanial  thanks for this code example.  Works fine. :D ,cicerohen,2016-02-16 15:24:07
480,2016-02-15 14:13:50,"I have the following code (nightmare v2.1.6 and  node v4.3.0)

<S_CODE_TOKEN>

Nightmare gives me a ""_ is not defined"" error

I have verified that the path of underscore.js is correct, since I can do : 

 var _ = require('./node_modules/underscore/underscore.js')

inside my nodejs script.
",max-l,2016-04-23 22:37:45
480,2016-02-15 15:03:54,"What you have there ought to work.  Out of curiosity, is the `.goto()` causing a redirect?  What happens if you move the injection to after `.wait("".someClass"")`?
",rosshinkley,2016-04-23 22:37:45
480,2016-04-03 03:46:36,"Upon deeper inspection, injected scripts [do not inject to global scope](https://github.com/rosshinkley/nightmare-examples/blob/master/docs/known-issues/globally-defined-variables.md).  That's why your call to `_.map()` is not working.
",rosshinkley,2016-04-23 22:37:45
479,2016-02-15 07:18:05,"This is meant to address #468.

The basic gist of the change is to add a `FrameManager` object that emits events whenever the browsers renders a new frame and use that to figure out when to call `capturePage()`.

Some notes:
- At current, this can trigger pretty massive memory consumption. Due to a bug in Electron (https://github.com/atom/electron/issues/4441), trying to unsubscribe from frames can cause a crash (and there's no way to know whether that will happen ahead of time and smartly wait until it's safe). That means that, once we start subscribing, we don't stop until the window is closed (i.e. until nightmare's `end()` method is called).
  
  For reference, a really simple nightmare session takes 20-30 MB of RAM on my machine, but once a screenshot is taken, that can boost to as high as 360 MB. (You can actually watch V8 manage memory here—the electron process will slowly grow to a few hundred megabytes and then get chopped back down to less than 50, then start growing again…)
  
  Anyway, there's already a patch on the way for this in Electron (https://github.com/atom/electron/pull/4451), but I don't know when it will land and ship. Once it does, the code here can be very easily adjusted to smartly unsubscribe if it's safe based on the version of Electron we're running in: https://github.com/Mr0grog/nightmare/blob/a179e2ed6e7b1d72d8cd518a9b464c0bf0a68220/lib/frame-manager.js#L11
- FrameManager is an event emitter, so it could pretty easily support some interesting other behaviors in the future, like rendering video of the page in action. It knows how to manage frame subscriptions in Electron when listeners are attached/detached.
- It's likely this would be better off in that future case as a readable stream, but managing push/pull/buffering vs. whenever Chromium decides to render a frame seemed potentially non-trivial (or at least require lots of testing and probably some nuance with finding an appropriate high-water mark), so I didn't bother with that for now.

Anyway, hope this helps and looks good to you all. It's covered by tests, too. Let me know if there's anything that should be changed.
",Mr0grog,2016-04-02 22:25:23
479,2016-02-22 00:13:14,"There is a shipping version of Electron with the fix for the crash now! I've added semver support for checking the electron version to see if it's safe to unsubscribe. Alternatively, we could just bump the minimum required version of electron-prebuilt in `package.json`.
",Mr0grog,2016-04-02 22:25:23
479,2016-02-22 23:49:42,"I'd vote for simply upping the Electron version, barring other changes made internally to Electron.  Is there a reason not to?

At any rate: +1 for this PR. :)
",rosshinkley,2016-04-02 22:25:23
479,2016-02-22 23:51:03,"@rosshinkley No reason not to bump the version as far as I'm aware. Figured I'd go for safety first, though, since I didn't know if there was any policy around Electron versions.
",Mr0grog,2016-04-02 22:25:23
479,2016-02-23 00:06:15,"@Mr0grog I can't find it with a cursory search, but I'm almost positive the version has been upped to accommodate changes like this before.  There are plenty of issues surrounding version changes where Electron changed some sort of internal convention (preference names like `web-preferences` to `webPreferences`, for example).  I think I'd still rather manage the version bump fallout over managing version compatibility, though.
",rosshinkley,2016-04-02 22:25:23
479,2016-02-23 05:00:37,"@rosshinkley Makes sense, thanks for the feedback. Bumped the version and eliminated all the `CAN_UNSUBSCRIBE` stuff in f4499d0ff5145a6082c7630dfba51c100a760d1f. :thumbsup:
",Mr0grog,2016-04-02 22:25:23
479,2016-03-03 03:31:56,"Howdy! It’s been a few weeks with no official feedback, so I’m just checking in. Any idea when you might get a chance to take a look at this?
",Mr0grog,2016-04-02 22:25:23
479,2016-12-11 12:28:21,"@Mr0grog I'm using the `FrameManager` code and from time to time I still experience problems with incomplete/blank captures.
Perhaps it has to do with the fact that we rely on the first `buffer` event, but I've noticed that sometimes I get 2 and more events (depends on the complexity of the item being rendered?)
I've noticed that adding `beginFrameSubscription(debounce(receiveFrame, frameDebounce)` produces more consistent results.",mikeys,2016-04-02 22:25:23
479,2016-12-14 19:18:04,"> Perhaps it has to do with the fact that we rely on the first buffer event, but I've noticed that sometimes I get 2 and more events (depends on the complexity of the item being rendered?)

Well, anything that happens in the window that causes rendering (even moving the mouse around) can cause frames to be rendered, so I don’t think it would be at all surprising to see more than one frame event. I suppose it’s possible that there could also be frames already queued up at the time of subscription that we receive when first subscribing, so you might also be seeing that.

Given that, I can definitely see how debouncing could be improve accuracy (though at a significant time cost). You should submit a PR! (FYI I’m not a maintainer/committer here; I can’t approve or merge anything for you.)",Mr0grog,2016-04-02 22:25:23
478,2016-02-15 05:04:22,"generators have been supported since Node.js v4 which was released in Sep 2015.
I guess `--harmony` option is already unnecessary as default.
",koba04,2016-04-01 09:11:42
477,2016-02-15 03:28:19,"I run the exact code snippet  and evaluate() returns null
(i.e. the ""console.log(result);"" below returns null)

I tried many other examples using vo(), and I can never obtain the result of evaluate()

nightmare 2.1.6
node 4.3.0 

<S_CODE_TOKEN>

This other example (found in issue #347) also outpuns null on the console

coult it be that something has changed in recent nightmare versions ? 

<S_CODE_TOKEN>
",max-l,2016-03-30 03:24:15
477,2016-02-15 07:57:13,"Hey @max-l, it looks like the problem you're having is actually a change in Vo, not Nightmare. In Vo version 2 (just released yesterday!), it says: ""In the first version return values were passed on to the next function by default. In this version the default uses fixed arguments you pass in when you call vo.""

So, you have to use the `pipeline()` method to get the v1 style behavior:

<S_CODE_TOKEN>

The docs on Nightmare probably aren't updated yet since the Vo release just happened.
",Mr0grog,2016-03-30 03:24:15
477,2016-02-15 12:56:30,"@Mr0grog thanks for that quick response, it works ! 
",max-l,2016-03-30 03:24:15
477,2016-03-30 03:24:15,"Looks like this issue is resolved, closing.
",rosshinkley,2016-03-30 03:24:15
476,2016-02-14 15:49:33,"Currently, `on('console', function() {})` cannot catch `console.log` event when it is called in `nightmare.click(selector)`.

I guess nightmare injects wrong `ipc.send` for `console.log` at `lib/javascript.js`.
nightmare injects an event for `console.log` at `lib/preload.js` already. So the injecting at `lib/javascript.js`  seems to be unnecessary.
Additionally, it doesn't match the interface in between `lib/preload.js` and `lib/javascript.js`.

https://github.com/segmentio/nightmare/blob/master/lib/preload.js#L14
",koba04,2016-04-02 22:15:19
476,2016-02-25 15:48:32,"+1.  This corrects bugs introduced in 2.1.0.
",rosshinkley,2016-04-02 22:15:19
476,2016-04-04 00:37:36,"Thanks!
",koba04,2016-04-02 22:15:19
475,2016-02-12 14:17:42,"Electron now supports basic authentication : https://github.com/atom/electron/pull/3250
This PR adds an `.authentication()` method to Nightmare.
",brrd,2016-04-02 22:26:02
475,2016-03-08 16:04:18,"+1 need this.

> #489
",fentas,2016-04-02 22:26:02
475,2016-03-21 18:17:34,"+1
",fabien,2016-04-02 22:26:02
474,2016-02-11 01:41:55,"Since I started working on #468, I noticed that exiting a process that is using Nightmare doesn't end the electron process that Nightmare is controlling. At first, I had no idea this was happening because I was running nightmare with `{show: false}`, but I soon discovered I had _a lot_ of electron processes floating around:

![lotsofelectrons](https://cloud.githubusercontent.com/assets/74178/12967599/30b896ec-d01d-11e5-8823-5eafb5e52853.jpg)

Unless there's an important reason for that, it seems like simply adding a listener to the process's `exit` event in Nightmare's constructor that kills electron would be both simple and helpful:

<S_CODE_TOKEN>

That is, I don't think I'm unique in sometimes forgetting to call `end()` ;)
",Mr0grog,2016-02-18 03:15:24
474,2016-02-15 15:14:03,"Put me down for +1.  I've run `killall` a _shameful_ number of times.
",rosshinkley,2016-02-18 03:15:24
473,2016-02-10 18:06:54,"This makes sure the Nightmare browser session in cookie tests uses a temporary in-memory store so that it doesn't pick up cookies from other runs of nightmare (not a problem in CI because it's a clean environment every time, but a big help when developing locally). Ran into this while working on #468 because some of the cookie tests were failing right off the bat for me!
",Mr0grog,2016-04-02 22:13:44
472,2016-02-10 16:21:35,"I tried code like this:

<S_CODE_TOKEN>

![image](https://cloud.githubusercontent.com/assets/4067115/12953183/4723f962-d054-11e5-89f8-072f97fee59b.png)

And I found that both `goto` & `evaluate` return the Nightmare instance. Shouldn't `evaluate` return a promise or a thunk? How can I use nightmare without the vo module? How can I use nightmare with co?
Please doc the return value of method. Tks.
",magicdawn,2016-03-30 03:23:31
472,2016-02-10 16:55:26,"If you don't want to use generators, you can use the internal `.run()` method, but you'll have to manage the control flow yourself:

<S_CODE_TOKEN>
",rosshinkley,2016-03-30 03:23:31
472,2016-02-12 08:55:20,"@rosshinkley Oh, I get this https://github.com/segmentio/nightmare/blob/2.1.6/lib/nightmare.js#L309-L319

the Nightmare instance is implicitly using `then` to perform a fake Promise instance. so it can be yield to a flow control tool like co or vo. And this is weird & should be documented.
",magicdawn,2016-03-30 03:23:31
472,2016-02-12 08:59:05,"Let me explain why this is weird:
1. you know the flow control tool will call `yield_result.then`
2. you implement a `then` method
3. It just works.
",magicdawn,2016-03-30 03:23:31
472,2016-02-12 16:16:03,"I realize now I only answered one of your questions, figuring this boiled down to a control flow issue.  I think I understand what you're asking now, especially with respect to promises.  Let me attempt a more comprehensive answer:

> And I found that both goto & evaluate return the Nightmare instance. Shouldn't evaluate return a promise or a thunk? 

No.  They return the Nightmare instance so the calls can be chained.  (I'll get to the promise/thunk question in a moment.)

> How can I use nightmare without the vo module?

You can use `co`:

<S_CODE_TOKEN>

Conceivably, you could also use the promise-like behavior of Nightmare to control behavior:

<S_CODE_TOKEN>

... or control the flow yourself, as I did in my previous comment.

> the Nightmare instance is implicitly using then to perform a fake Promise instance. so it can be yield to a flow control tool like co or vo. 

Getting back to the promise question, yes, Nightmare (partially) implements a promise so it can be yielded in `co` or `vo`.  The `.then()` implementation is ultimately what causes the queue to be processed when using flow control libraries.  If Nightmare inherited from a promise implementation, I'd think the `.then()` behavior would have to be overridden to support the custom behavior needed to execute the queued commands, which I think would be much more strange.  Do you have a suggestion for an alternative? 

> And this is weird & should be documented.

Not sure I agree that it's weird, but I can understand wanting a broader explanation of how the guts of Nightmare work with `vo`/`co`.  I'm not sure where this would be included, but it's probably worth doing.

---

I have a question for you: what problem were you having or trying to solve where this question came up?  I'm curious why and where the promise implementation was causing issues.
",rosshinkley,2016-03-30 03:23:31
472,2016-02-14 14:23:40,"> what problem were you having or trying to solve where this question came up

I was familar with Promise & co, and I know we should yield a thunk or promise so it can be `next(resolved_val)` to the yield left value. But code like this

<S_CODE_TOKEN>

I was thinking maybe the `evaluate` method is ending the chain operation and return a thunk or promise whatever. I tried, and found I was wrong. So I get confused & don't how it works. Then I request to document the return value of each methods. Next tick I step into the co method, and I found that the nightmare instance is treated as a promise instance because it got a `then` method. https://github.com/tj/co/blob/4.6.0/index.js#L198 I'm not confused anymore. Thanks.

> If Nightmare inherited from a promise implementation, I'd think the .then() behavior would have to be overridden to support the custom behavior needed to execute the queued commands, which I think would be much more strange. Do you have a suggestion for an alternative?

I use superagent a lot. It use chain methods too. Normally I will add an `endAsync` to the prototype

<S_CODE_TOKEN>

the promisified `endAsync` return a standard promise, it can be thened too

After figuring out how Nightmare works, I can use like

<S_CODE_TOKEN>

Conclusion: someone(like me :joy:) don't like the implicit then, and it did not return a standard promise instance, just for control flow to work. The `run` method is real hero, I suggest document the `run` method. Thanks.
",magicdawn,2016-03-30 03:23:31
472,2016-02-16 10:15:15,"After using nightmare for a while, I found it's pretty nice to use the implicit then with co. Thank you.
",magicdawn,2016-03-30 03:23:31
472,2016-02-28 22:00:05,"<S_CODE_TOKEN>

This returned an error for me: `co(...).then() is not a function`
Was that a fully fleshed example, or am I supposed to know something about co to interpret it?

I was also having a hard time returning data out of nightmare, This information is very helpful, thank you
",kanethal,2016-03-30 03:23:31
472,2016-02-29 17:13:01,"@kanethal Out of curiosity, what version of `co` are you using?
",rosshinkley,2016-03-30 03:23:31
472,2016-03-01 02:38:25,"@kanethal yeah, that's a full example, and will log the page title

![image](https://cloud.githubusercontent.com/assets/4067115/13415848/4297e634-df99-11e5-8588-546eb9bcf5a4.png)

maybe you are using an old verison of co(before v4.0 probably)~
",magicdawn,2016-03-30 03:23:31
472,2016-03-02 20:43:03,"I had grabbed a fresh version I thought... I'll double check when I get
home.
On Feb 29, 2016 7:38 PM, ""Tao"" notifications@github.com wrote:

> @kanethal https://github.com/kanethal yeah, that's a full example, and
> will log the page title
> 
> [image: image]
> https://cloud.githubusercontent.com/assets/4067115/13415848/4297e634-df99-11e5-8588-546eb9bcf5a4.png
> 
> maybe you are using an old verison of co(before v4.0 probably)~
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/segmentio/nightmare/issues/472#issuecomment-190504589
> .
",kanethal,2016-03-30 03:23:31
472,2016-03-30 03:23:31,"I'm considering this matter closed.  If any of you are having problems, feel free to open a new issue.
",rosshinkley,2016-03-30 03:23:31
471,2016-02-10 13:59:08,,stigkj,2016-02-16 05:18:49
471,2016-02-16 05:18:51,"thanks!
",matthewmueller,2016-02-16 05:18:49
470,2016-02-10 07:52:13,"Fixed by #465 
",Crazometer,2016-04-02 23:10:55
470,2016-04-02 23:10:55,"#465 has been merged, closing.
",rosshinkley,2016-04-02 23:10:55
469,2016-02-10 01:15:10,"When using `.type()` and showing the Electron window, I can see how the text I put in gets typed. Is there a way to control the typing speed?
",jviotti,2016-06-21 03:23:39
469,2016-02-10 05:39:41,"not right now :-) do you want to speed it up or slow it down?

we have a delay in place as a hack to ensure the characters are entered in the correct order.
",matthewmueller,2016-06-21 03:23:39
469,2016-02-11 18:34:45,"@matthewmueller I wanted to speed it up. How much do you think we could increase the speed without compromising the ordering?
",jviotti,2016-06-21 03:23:39
469,2016-06-08 14:55:06,"I've tested my tests with `0` timeout on the `.type()` function and can't report any keystrokes being emitted in the wrong order. 

Using the `setTimeout(fn, 0);` hack to defer the event to the next event loop of JavaScript should be just fine. 

I was tempted to make this timeout a configurable variable to aid debugging without making test suites run longer than necessary, but I did not want to introduce a breaking change. 
",kylewelsby,2016-06-21 03:23:39
468,2016-02-09 18:05:44,"In trying to use Nightmare for doing some screen captures of highly dynamic web pages, I've discovered that the screenshots are often out-of-sync with the state of the web page being captured. After a lot of investigation, it turns out that this is actually an underlying issue in Electron—it generates a screenshot by simply copying from Chrome's backing store, which is not actually guaranteed to be up-to-date (see [Electron issue 1049](https://github.com/atom/electron/issues/1049) and [this Chromium-dev discussion](https://groups.google.com/a/chromium.org/forum/#!topic/chromium-dev/o2aUtFAIlyQ)).

I believe this is probably the underlying issue behind a few other nightmare bugs, such as: https://github.com/segmentio/nightmare/issues/33, https://github.com/segmentio/nightmare/issues/129, the long wait @rosshinkley suggests adding in his solution to https://github.com/segmentio/nightmare/issues/328

But! It turns out there is a way to address this. In Electron's `BrowserWindow.webContents`, you can call `beginFrameSubscription(callback)`, which seems (in my testing) to guarantee that the backing store is up-to-date when your callback is called. So if you changed [line 252 of `lib/runner.js`](https://github.com/segmentio/nightmare/blob/master/lib/runner.js#L252) to:

<S_CODE_TOKEN>

You ought to have a much more deterministic result when calling `.screenshot()`.

Unfortunately, I don't have a great reduced test case for this, but I'm more than happy to submit a patch if desired.
",Mr0grog,2016-04-02 23:15:15
468,2016-02-10 05:41:04,"awesome! we'd love to see a patch for a more deterministic result!
",matthewmueller,2016-04-02 23:15:15
468,2016-02-10 14:03:56,"@Mr0grog Glad to finally have an answer to that question, and good eye for finding that issue!  Especially good to know it's not a framebuffer-dependent issue.

I agree: anything to make the behavior deterministic.  I do have an edge-case question, though - in my read of the documentation, the `beginFrameSubscription` callback is called for any display event.  If the screenshot is taken well after the page is rendered, will the callback still be called?
",rosshinkley,2016-04-02 23:15:15
468,2016-02-10 17:18:52,"@matthewmueller Great, I'll try and put together a PR this week.

@rosshinkley That is a really good question! I will poke around and see what I can see. In the worst case, twiddling with something on the page, such as adding and removing an element, ought to work to trigger it.
",Mr0grog,2016-04-02 23:15:15
468,2016-02-11 01:52:06,"Spent a little time on this today and discovered:
1. If the page is all settled and idle, the callback won't be fired (as you surmised @rosshinkley), so we do have to do something to the page to trigger it. That something has to affect the render tree—adding comment nodes, empty text nodes, etc. won't do it. Happily, adding a transparent 1x1 div to the top left corner of the page (even if the top/left corner isn't in view!) works.
   
   (Also interesting: even though adding it to the top of the page when the top of the page isn't visible does work adding it where it never _could_ be drawn, e.g. `left: -10000px` does _not_ work. ¯_(ツ)_/¯ )
2. It's easy to crash electron while doing this (see https://github.com/atom/electron/issues/4441), so the whole technique may be a bit problematic in the end. If we stay subscribed to frames for the lifetime of the window, I think we could reliably avoid the crash, but I can imagine that easily getting resource intensive.
",Mr0grog,2016-04-02 23:15:15
468,2016-02-22 23:00:55,"@Mr0grog Would [window.requestAnimationFrame()](https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame) trigger the render tree?
",Zn4rK,2016-04-02 23:15:15
468,2016-02-22 23:05:31,"It certainly triggers the render tree, but this isn't actually a render tree issue. Also, I tried the same thing when I was first exploring this ;)

It's fundamentally an issue with how Chrome's _backing store_ gets updated, which is actually largely unrelated to what is getting rendered to the screen inside the renderer process (where the web page is being drawn to the screen). In any case, there is a complete fix for this issue in #479, it just needs reviewing.
",Mr0grog,2016-04-02 23:15:15
468,2016-04-02 23:15:15,"#479 has been merged, closing.
",rosshinkley,2016-04-02 23:15:15
467,2016-02-09 01:57:13,,codeskyblue,2016-02-09 08:42:19
467,2016-02-09 08:42:17,"thanks!
",matthewmueller,2016-02-09 08:42:19
466,2016-02-06 20:00:30,"Hi,
Is it possible to upload files using nightmare.type('#input-element-id', '/tmp/img001.jpg'), similar to what selenium supports?
http://www.seleniumeasy.com/selenium-tutorials/uploading-file-with-sendkeys-method

If not, is there a suggested alternative way to achieve the same, which is to programatically initiate a file upload, without having to open a file browser?
",mgsh,2016-04-03 03:43:54
466,2016-02-13 16:36:12,"+1
",danielyogel,2016-04-03 03:43:54
466,2016-02-23 20:16:45,"Unfortunately not :/

The only thing that might work is to fake a drop event with the file(s) attached. But one would probably run into some other browser restrictions, but it might be worth a try. 

If the above approach does not work, then this is not possible until Electron adds some way of intercepting the file dialog or manually setting the file(s). There's more to read in the [other issue](https://github.com/segmentio/nightmare/issues/235) regarding uploading files.
",Zn4rK,2016-04-03 03:43:54
466,2016-04-03 03:43:54,"Merging with #235.  Closing.
",rosshinkley,2016-04-03 03:43:54
465,2016-02-06 17:12:02,"Previously if you had multiple instances of nightmare spun up and all using .wait() they would all share a single waitTimeout counter. This resulted in some elements firing incorrectly and others not firing when they should. Instead the waitTimeout value has been attached to the nightmare instance which also makes it observable. Alternatively you could create a closure but I think this is nicer.
",Crazometer,2016-04-02 22:13:14
465,2016-02-11 17:39:09,"_(Apologies for just poking my head in here, but for some reason this piqued my attention…)_

FWIW, I think this should be a closure—not because it shouldn't be observable, but because it's not instance-level information and could result in conflicts. If you don't use the `yield`-based API, you can have two chains of actions going at once and thus two different `waitfn` functions running at the same time. You wouldn't want the timeout from one to trample the other:

<S_CODE_TOKEN>

Granted, the current functionality already shares timers in a way that causes the same problem, but it seems like it would make sense to fix this at the same time.
",Mr0grog,2016-04-02 22:13:14
465,2016-02-12 04:31:35,"@Mr0grog, thanks for poking your head in here. I can see the use case for the point above but I'm kind of confused on the implementation. When I ran you're example I found tried swapping around the order of the waits and found the second always fired first, probably related to both occuring in the same event loop. In Australia we get a regionalized version of yahoo anyway, so the example might work better on your end.

The behaviour I expected from looking at your code/the source code was that the `.wait()`'s would be placed in a queue and executed in order. For example if we modified your example slightly to use chaining instead it reads as though it would do one before executing the other. I'm still kind of new to async chaining though so if I'm missing something obvious forgive me.

<S_CODE_TOKEN>

As a sidenote, when I was testing things I found that setting `var _timeoutMs = 1;` could cause strange results. Noteably both would fire in the beneath

<S_CODE_TOKEN>
",Crazometer,2016-04-02 22:13:14
465,2016-02-12 04:47:44,"> Aren't the .wait()'s placed in a queue?

Yes, but every time you call `run()` or `then()`, the current queue is split off and run independently. So:
1. Queue up some operations
2. Call `run()`
   1. Inside run, a copy of the the nightmare instance's queue is made
   2. The nightmare instance's queue is reset to an empty list
   3. The copy of the queue starts getting worked on—all the queue work is entirely inside a closure in `run()`.
3. Queue up some more operations
   - These are placed on the freshly empty queue made in (2.ii), so they aren't really queued up behind the first set of operations
4. Call `run()` again
   - Now we do the same steps as in (2). As a result this set of operations is running simultaneously with (instead of after) the operations from step (1). It's all about when you call `run()`.

Does that make sense?

> As a sidenote, when I was testing things I found that setting var _timeoutMs = 1; could cause strange results. Noteably both would fire in the beneath

Hmmm, I'm not entirely sure what you mean by this. You should always have both of those `run()` callbacks fire, regardless of timeout (unless `_timeoutMs` was infinity and one of the wait functions never returned `true`).

I may have worded things poorly when I said ""race for completion"" earlier—they both run to completion, just simultaneously instead of in sequence, so they could finish in a different order than you start them (e.g. you could get the message that the search box was focused before the one that the ad was loaded).
",Mr0grog,2016-04-02 22:13:14
465,2016-02-12 05:28:00,"Thanks a ton for the explanation, that really clears things up. I'll swap it over to a closure once I get the chance.

As for the `timeoutMs` thing, if you look closely at the selector in the second call you will see that it is bogus. `return false` works equally well to demonstrate the point.
",Crazometer,2016-04-02 22:13:14
465,2016-02-12 06:13:16,"d'oh! I didn't notice the test condition at all :P

Either way, both should still fire; the bad one will just do so by timing out. The `err` param should be a timeout error. Is that what you mean? Or is something else odd happening?
",Mr0grog,2016-04-02 22:13:14
465,2016-02-12 06:57:02,"Edit: Please disregard the `_timeoutMs` discussion, it seems to occur all the time in the current implementation. I'll adjust it to a closure first and then observe the new behaviour.

<S_CODE_TOKEN>

The order the waits are specified also seems to have some effect
",Crazometer,2016-04-02 22:13:14
465,2016-02-12 19:18:17,"Oh, this is actually a neat little race condition/bug. The first thing you have to know for this one is that, if you ask Electron to execute JS code before the browser window has even started to load a page, it waits until the page is available to call it (looks like after DOM ready, but not 100% sure here, the implementation is in Chromium, not Electron). So this is what's happening (it's kind of complicated):
1. `page.goto('http://yahoo.com');` doesn't do anything (yet) because `run()` isn't called immediately after.
2. We add the never-will-succeed test to the queue (so now the queue is: [load page, run test]
3. We start that queue running
4. We create a new queue with the test for the ad and start _it_ running.
5. Because queue 2 isn't waiting for anything, it starts _immediately,_ before any page has even started to load (a browser request has been made, but the response hasn't started to be received yet).
   1. Nightmare registers listeners for the results of the wait function (the one for the ad)
   2. Electron waits a while before executing the actual javascript. Meanwhile…
6. In queue 1, the page finishes loading and we attempt to execute our will-always-fail wait function
   1. Nightmare registers listeners for the results of the wait function—critically _these listeners do not distinguish between **which** wait function_
   2. Electron queues up the wait function to run
7. Electron knows the page is ready now, so it starts running any queued-up JS functions (at this point, that's _both_ of our wait functions)
8. The first wait function runs
9. _Both_ sets of listeners for the wait functions hear the results of the first wait function as if it were the wait function they were intended for. The ones for the function registered first (the one written _second_ in our code) is right. The other one is wrong and reports back the wrong results.
   
   In your code above, that means the listeners that were set up for the will-always-fail function are actually reporting the results of the test for the ad.

That's why your results are different if you change the order. The first function you write is the second one to get registered, which means it reports the results of the first one to get registered. You'll notice different results if you call `run()` immediately after `page.goto(...)`, because then that means that the first wait function _does_ get registered before the second wait function!
",Mr0grog,2016-04-02 22:13:14
465,2016-02-19 14:04:29,"Swapped it over to a closure. Should be good to merge now.
",Crazometer,2016-04-02 22:13:14
464,2016-02-05 16:46:33,"This pull is like #84 
I creating another pull request because i deleted the oldest one(don't ask me why please).
Past the response from @reinpk 

""thanks @Max93! sorry i never got to this with v1... it looks like an interesting abstraction for other events... what events were you interested in? closing for now but may bring the idea into v2 with more info here. thanks!""

Thanks again @reinpk 
",Max93,2016-12-30 19:44:33
464,2016-02-06 04:22:27,"cool i like it :-)

what kind of events are available by making this more generic? I can think of click and dblclick. would this also include mousedown, mousemove, etc?

additionally, maybe we can rename it to `.mouse(selector, event)`?
",matthewmueller,2016-12-30 19:44:33
464,2016-12-30 19:44:33,"def open to this abstraction, would be great to see something like `doubleclick` or similar implemented to make the abstraction worthwhile though. maybe re-open with a PR that adds something like that?",reinpk,2016-12-30 19:44:33
463,2016-02-02 19:43:17,"Error appears after a `.scrollTo()` if that helps.

<S_CODE_TOKEN>

Took a look at where the error was coming from, tried adding a `waitTimeout` and **it went away**.

Running Nightmare 2.1.3 with Node 5.5.0.
",raypatterson,2016-02-03 18:38:42
463,2016-02-03 04:04:58,"I believe this was fixed in #443, which was released in (I think) 2.1.4.  Can you upgrade to that version or better?
",rosshinkley,2016-02-03 18:38:42
463,2016-02-03 18:34:25,"Yep, that was it, thanks @rosshinkley. Next time I'll make sure to upgrade before reporting anything.
",raypatterson,2016-02-03 18:38:42
462,2016-02-02 05:43:01,"G'day, I have the following bit of code that I can't get to work for the life of me. I have the preview window on and can see electron navigating around properly but I can never get the ""hello"" to come up as the result.

<S_CODE_TOKEN>

I've tried about a million different combinations where the only I could get to work involved using .run where the second parameter returned ""hello"" instead of the nightmare instance. Previously I had `yield a = nightmare.click(link).wait(return_button).evaluate(function() {return ""hello""})` all in one line. In that case res was returning an instance of nightmare. Since I've split them res is now undefined.  I'm new to generators and co/vo in js so any help would be greatly appreciated!
",Crazometer,2016-02-09 08:38:30
462,2016-02-02 16:33:42,"I don't know if this is the entirety of your problem, but this line:

<S_CODE_TOKEN>

...should read:

<S_CODE_TOKEN>

The former waits for an assignment of what `.evaluate()` returns, which is a Nightmare instance.  The latter awaits fulfillment of what `.evaluate()` yields.
",rosshinkley,2016-02-09 08:38:30
462,2016-02-03 05:15:31,"Thanks for that! I knew it would be something simple. [This article](https://davidwalsh.name/async-generators) really helped me to understand what was going on with co. Feel free to close
",Crazometer,2016-02-09 08:38:30
462,2016-02-09 08:40:41,"it would be a great help if you can close your own issues once the problem is resolved. this repo has a lot of traffic, so it helps us know what issues need our attention and which are resolved.
",matthewmueller,2016-02-09 08:38:30
461,2016-02-02 03:27:14,"Hi,

whats the best way to get access to `win.session.webRequest` object through Nightmare?
(looks like it s in revision 36+, not the currently electron version used in nightmare, but i was able to use it by passing the `electronPath`)

A use case for me
when scraping sites using Nightmare, there are a lot of ads/tracking pixels firing. they slow down the page dramatically.
i want to filter out those request (request not originating from the domain i m interested in).
i was able to do this by adding the `win.session.webRequest.onBeforeRequest` handler.

wondering if theres a way to do this through the `plugin/action` extension pattern.

thanks
",yoshi95,2016-04-02 23:16:44
461,2016-02-02 03:29:24,"looks like the `cookies.get/set` should be using `win.session` object, but i am unable to find the usage in the Nightmare code base.
",yoshi95,2016-04-02 23:16:44
461,2016-02-02 04:06:50,"it's here: https://github.com/segmentio/nightmare/blob/master/lib/runner.js#L303-L306

`win.session` is a recent change, right now we're using the old reference (that still works).

I'd be interested to see a PR that supports this or when we land #425, it could be a plugin too :-)
",matthewmueller,2016-04-02 23:16:44
461,2016-02-05 03:27:33,"Selfish +1 for making this a plugin.  I'd be happy to put it together. :)

Half-kidding aside, though, if you would rather have this be a part of core I'd be happy to throw together a PR.  Which would you prefer?
",rosshinkley,2016-04-02 23:16:44
461,2016-02-09 08:41:56,"depends on the use case :-) i'd probably prefer a plugin, but i think there could be an argument for providing a high-level way to intercept requests in nightmare.
",matthewmueller,2016-04-02 23:16:44
461,2016-02-09 16:53:45,"[Curiosity got the best of me](https://github.com/rosshinkley/nightmare-load-filter).  If that seems like something worth submitting for core, I'd be happy to do it.  I'd love to hear your arguments for including it. :)
",rosshinkley,2016-04-02 23:16:44
461,2016-02-22 06:33:38,"@yoshi95 I added `nightmare.webRequest.onBeforeRequest` in PR #495 
@matthewmueller In order to make plugin like this, I think some apis are needed which can access electron side api or event message receiver written in `runner.js` just like [this](https://github.com/segmentio/nightmare/pull/495/files#diff-b3b53682a18f203ac8d29b0e277cad26R353) which is the same as the way of cookie api.
",kyungw00k,2016-04-02 23:16:44
461,2016-02-23 00:10:11,"@kyungw00k the API you're requesting is done.  For more information, read through #391 and #425.
",rosshinkley,2016-04-02 23:16:44
461,2016-02-23 01:45:13,"@rosshinkley the API will be available to use after #391 is completed, right?
",kyungw00k,2016-04-02 23:16:44
461,2016-02-23 01:48:57,"@kyungw00k Correct.
",rosshinkley,2016-04-02 23:16:44
461,2016-04-02 23:16:44,"#425 has been merged, and [nightmare-load-filter](https://github.com/rosshinkley/nightmare-load-filter) has been released.  Closing.
",rosshinkley,2016-04-02 23:16:44
461,2016-04-25 15:31:08,"@yoshi95 now, you can use `webRequest.onBeforeRequest` handler with [nightmare-webrequest-addon](https://github.com/kyungw00k/nightmare-webrequest-addon)
",kyungw00k,2016-04-02 23:16:44
460,2016-02-01 20:01:30,"I'm trying to work on a page on which some data is loaded in the background. There is a progress bar (in some div) indicating that process isn't completed. Usually it takes 4-6minutes for this process to complete. After that, box with progress bar disappears, page is fully loaded and I can continue working on data. 
After checking the page's code I figured out, that visibility of this box is being set to ""hidden"", so the way to handle this would be checking within wait(fn) what is the status of visibility. Unfortunately this doesn't work for me. Just when the progress bar disappears
`nightmare:actions .wait() for fn +3m`
is triggered in console (indicating that wait(fn) returned true?) and the process halts.
I've tried this on nightmare 2.0.8 and 2.1.6

Here is the code:

<S_CODE_TOKEN>

What I see in console:

<S_CODE_TOKEN>

Any ideas?
",paranoiq1,2016-03-01 14:24:12
460,2016-02-02 16:17:34,"Where is the `sleep()` function defined?  I suspect you're encountering an evaluation error interior to Electron.

I don't think you need to do that yourself at any rate.  The `.wait(fn)` method polls on its own every 250ms, memory serving.  You could change that wait function to something like:

<S_CODE_TOKEN>

... which should work, provided `y.waitDlg` exists.

If you really wanted the 10s wait between checks, you could write the wait as a `.wait(ms)` and `.evaluate(fn)` combination.  Off the top of my head without being able to test it, something like:

<S_CODE_TOKEN>

...should yield your desired result.
",rosshinkley,2016-03-01 14:24:12
460,2016-02-02 18:06:01,"That's true, I accidentally ignored 250ms pause in `wait(fn)`. Tried the first solution of yours, but the result is the same. I'm not sure if it's not a bug, because below script (exactly as it's printed) run with 2.1.6:

<S_CODE_TOKEN>

ends up with the same problem - script hangs up just after `wait(fn)` has finished

<S_CODE_TOKEN>

Same problem seems to be with `evaluate(fn)`. Could you try to replicate this
",paranoiq1,2016-03-01 14:24:12
460,2016-02-03 03:38:41,"Hm, I can recreate the behavior almost as-is - I added a `yield` before `nightmare` on the line where it's by itself.  However, if you actually have Nightmare load a page with `.goto(url)` first, it works.  You would _probably_ be using it that way anyhow.

In your second example, I suspect the page context for javascript isn't created with the default webview.  A quick read of the Electron documentation [doesn't really say](http://electron.atom.io/docs/v0.36.5/api/web-contents/#webcontents-executejavascript-code-usergesture) one way or another.  I'll have to dig into it when I have a little more time.  (Does anyone happen to know offhand?)

Does your source try to evaluate prior to loading a page?

Setting that aside and going back to your original question: I would probably start by taking a look at the contents of your wait function, ensuring the parts you're expecting exist.  I still think you might be hitting an evaluation error.
",rosshinkley,2016-03-01 14:24:12
460,2016-02-04 17:20:30,"I digged into logs and tried some other approaches. Seems, there's no need to do `wait(fn)`. Unitl bar dissappears there is still some data exchanged in background. When the process is finished two events are triggered: `did-stop-loading` and `navigated to`.

Current situation is that once a while program works as designed and other time - `evaluate(fn)` is not triggered. What I've found in logs is that  `did-stop-loading` and `navigated to` events are triggered three times until page is fully loaded and progress bar disappears. Unfortunately on some situations (no schema) next command after `goto` (command `wait(25000)`) is triggered after second `did-stop-loading` event (so page is not fully loaded, because data is still being exchanged, progress bar is visible and... page functions are disabled). I belive this can be problem with my situation. 

Is there any way to force nightmare to wait longer before passing to next command, so it could be aware (despite `did-stop-loading` event), that the page is still loading?

Below is my current code:

<S_CODE_TOKEN>
",paranoiq1,2016-03-01 14:24:12
460,2016-02-05 03:38:59,"I can believe you're getting finished loading events for the page before the page is really ""done"" loading/rendering.

For clarity, and so I get a better grasp on what you're asking, you said:

> page functions are disabled

This sounds like elements in the loaded page are disabled (or perhaps styled to look that way).  If that's the case, could you use `.wait(fn)` to wait for those to become available?
",rosshinkley,2016-03-01 14:24:12
460,2016-02-05 13:00:10,"There is one big transparent div on top of the page, so page functions are loaded but are not accessible because of this div. Later when div style is set to `display='none'` all functions get accessible. I tried to `wait(fn)` for this div to change style to `display='none'`, but this leads me to first problem - `wait(fn)` hangs...
What I've mentioned earlier - `wait()` is triggered after first (or second) of three `did-finish-load` events. It's hard to debug it, but it's possible that JS context it's not loaded yet, what could leads us to problem - using `wait(fn)` without earlier `goto` use...

So...my script works depending on when `wait(time)` or `wait(fn)` was triggered by nightmare. If nightmare triggered it too early - it would fail. If nightmare triggered it later - it would work as intended
",paranoiq1,2016-03-01 14:24:12
460,2016-03-01 14:24:12,"Resolved problem in the easiest way by adding few additional `wait(time)` before `wait(fn)`. When one of `did-finish-load` events occurs,`wait(500)` function is triggered allowing to continue loading page. Simple and easy.
",paranoiq1,2016-03-01 14:24:12
460,2016-03-11 08:11:47,"@paranoiq1 can you provide the updates to your above code that allowed you fix this please? I think I have a similar problem
",SantoshSrinivas79,2016-03-01 14:24:12
460,2017-01-18 15:39:49,"I think I may have just had a similar issue.

On my desktop, viewing my script, it always worked: It would do a `click` and then `wait` for an element on the result page. I even made sure to clear if that element existed.

Somehow, on the server this would fail. I even attached vnc to watch, but no difference. It seemed, _somehow_ the `wait` was triggered too early and somehow returned true. Simply adding a `.wait(1500)` after the `click` allowed my next wait to evaluate the page properly... weird.",avimar,2016-03-01 14:24:12
460,2017-03-21 13:41:58,"it somehow depends on when the timer in waitfn (actions.js:441) is started, I have some not trivial scenario involving up to 3 redirects in a row (company SSO) .. if I don't wait for some time before starting waiting for some element (even if it's static html element in the page from the start), it _sometimes_ stops checking for existence after few ticks .. the only difference between un/successful executions I see is the order in which other assets from the pages are 'loaded' (css, other js, etc), so they might interfere ..",vagnerj,2016-03-01 14:24:12
459,2016-01-30 20:03:09,"Yesterday, I ran up against #224, and before finding all of the helpful info there (_thank you everyone_), I was doing my own debugging based on the [exit code](http://tldp.org/LDP/abs/html/exitcodes.html) of the electron child process. This should hopefully make it easier to identify potential issues when [""it just quits.""](https://github.com/segmentio/nightmare/issues/224#issuecomment-177268035)

If you're seeing exit code 127, you may not have electron installed correctly.
If you're seeing exit code 126, you may not have all the necessary dependencies for electron (:wave: gtk).
If you're seeing exit code 1, xvfb is a likely suspect in my experience.
If you're seeing exit code 0, electron appears to be working fine and it's something else.

Do you agree the exit code is helpful when debugging? Should these possible problems be included in the source, README, or wiki?
",maxbeatty,2016-04-02 22:11:52
459,2016-02-01 06:43:51,"Yes, I love this idea! But I think it should be baked into the code itself instead of in the readme. Basically just: 

<S_CODE_TOKEN>

mind updating this PR to get this started?
",matthewmueller,2016-04-02 22:11:52
459,2016-02-01 07:11:44,":+1: I like when software tries to help me directly, too
",maxbeatty,2016-04-02 22:11:52
459,2016-03-08 19:45:48,"Is there anything else I can do for this PR before merging? 
",maxbeatty,2016-04-02 22:11:52
458,2016-01-29 18:42:36,"If a wait function times out and throws an error with functions queued up (i.e. the wait function is not the last step in a chain of actions) execution should fail immediately, yielding the error that was thrown.

If anything else is missing from this PR let me know and I'll be happy to address. Thanks for all the hard work that has gone into this project, it's a pleasure to use!

It seems like the following GitHub issues are related:
https://github.com/segmentio/nightmare/issues/397
https://github.com/segmentio/nightmare/issues/171
",joshgummersall,2016-02-01 06:49:45
458,2016-02-01 06:49:42,"good catch, thanks! :-)
",matthewmueller,2016-02-01 06:49:45
457,2016-01-27 23:52:18,"Is there some way to use nightmare without a headless browser, like include it tampermonkey plugin?
",lancevo,2017-01-02 21:07:02
457,2016-01-28 05:55:17,"not at the moment, but adding adapters would be a cool addition :-)
",matthewmueller,2017-01-02 21:07:02
457,2016-01-28 16:45:15,"For clarity: are you asking if Nightmare could be used under TamperMonkey?

If you're asking if TamperMonkey could be included as an extension for a Nightmare process, that is currently not possible.  Electron does not have a plan to [include Chrome's extension APIs](https://github.com/atom/electron/issues/1498).
",rosshinkley,2017-01-02 21:07:02
457,2016-01-29 15:25:23,"I'm not writing an extension for TamperMonkey. I just want to use nightmare API to write scripts in TamperMonkey. Thank you for your replies.
",lancevo,2017-01-02 21:07:02
456,2016-01-27 14:16:51,"How to start nightmare (electron) with clean resources (session, cookies, localStorage, etc..)
",AveVlad,2016-01-27 15:08:25
456,2016-01-27 14:54:14," Possibly a duplicate of the original intent of #398?

I have a _slight_ improvement on that answer, though.  Three methods, depending on what you need:
1. Use [`webPrefereces.partition`](https://github.com/atom/electron/blob/master/docs/api/browser-window.md#new-browserwindowoptions).  Example:
   
   <S_CODE_TOKEN>
2. Use [`options.paths`](https://github.com/segmentio/nightmare#paths).  Example:
   
   <S_CODE_TOKEN>
3. Remove the default Electron cache/config/session directory.  I think where this is depends on your setup, but at least on Debian systems with the current version of `electron-prebuilt` (0.35.2 at the time of this answer), it's at `~/.config/Chromium/Electron`.
",rosshinkley,2016-01-27 15:08:25
456,2016-01-27 15:08:24,"@rosshinkley Thank you very much!
",AveVlad,2016-01-27 15:08:25
455,2016-01-27 10:37:13,"See [this issue](https://github.com/segmentio/nightmare/issues/454) for details.
",the-t-in-rtf,2016-01-28 05:59:13
455,2016-01-28 05:59:16,"thanks @the-t-in-rtf !
",matthewmueller,2016-01-28 05:59:13
455,2016-01-28 08:44:24,"You're very welcome, Nightmare has been a huge help in my work and I'm happy to contribute where I can.

Quick question, any idea when the next release is due?  I'm also waiting on the default value for waitTimeout that's currently only in master.
",the-t-in-rtf,2016-01-28 05:59:13
455,2016-01-28 08:45:56,"Never mind, I see that it's out!  Awesome!
",the-t-in-rtf,2016-01-28 05:59:13
454,2016-01-27 10:34:17,"When using Nightmare 2.1.2 and 2.1.3, we see the following warnings,  but only on Windows.

<S_CODE_TOKEN>

I am preparing a pull request to fix each of these warnings now.
",the-t-in-rtf,2016-02-01 04:47:48
454,2016-01-27 10:37:38,"The PR is here: https://github.com/segmentio/nightmare/pull/455
",the-t-in-rtf,2016-02-01 04:47:48
454,2016-01-27 10:38:14,"The ""url"" fixes were trivial.  The ""ipc"" change was not, so I left that for now.  This will at least get rid of 2/3 warnings.
",the-t-in-rtf,2016-02-01 04:47:48
454,2016-02-01 04:47:48,"this should be fixed in the new release :-)
",matthewmueller,2016-02-01 04:47:48
453,2016-01-27 10:13:47,"This should go away once a new release is cut that includes [this commit](https://github.com/segmentio/nightmare/commit/24d9efa4a42a9937910650b860eed37bec0b1b1b).  I am making a note of it here to help anyone else who encounters the problem with version 2.1.3.

In version 2.1.3, which includes [this change](https://github.com/segmentio/nightmare/commit/f75b48aad09339b1407f3d3422a1dd51b936c2f0), a call to `nightmare.wait(ms)` will fail unexpectedly as demonstrated in the following code:

<S_CODE_TOKEN>

This consistently outputs `.wait() timed out after undefinedmsec`.  The solution (until a new release is cut that sets a default value) is simply to set the required option, as in `new Nightmare({ waitTimeout: 30000})`.
",the-t-in-rtf,2016-01-28 06:07:03
453,2016-01-28 06:07:03,"thanks for the note, this should be fixed in 2.1.4 :sparkles:
",matthewmueller,2016-01-28 06:07:03
452,2016-01-25 17:40:23,"this electron flag seems to stop the fullscreen context switching described in #434 
",emars,2016-02-01 06:50:22
452,2016-01-28 05:57:57,"thanks!

@MiguelOller can you test this in your environment?
",matthewmueller,2016-02-01 06:50:22
452,2016-01-28 16:24:49,"@matthewmueller it works! (I npm installed the current release, so I'm unsure if @emars fix was reflected in that.)

---

Aside:
While testing it I ran the Yahoo! example in the readme and it doesn't work anymore because the class for the submit button isn't present.

<S_CODE_TOKEN>

`getElementsByClassName` returns an empty list in this case.
",migueloller,2016-02-01 06:50:22
452,2016-02-01 06:50:30,"thanks :-)

i'll fix the classname
",matthewmueller,2016-02-01 06:50:22
451,2016-01-25 09:45:23,"I am total newbie to JS and node and I am trying out the first example (immediately after executing ""npm install vo nightmare"" with success) and I get the following error
# node --harmony yahoo.js

yahoo.js:4
vo(function\* () {
           ^
SyntaxError: Unexpected token *
    at Module._compile (module.js:439:25)
    at Object.Module._extensions..js (module.js:474:10)
    at Module.load (module.js:356:32)
    at Function.Module._load (module.js:312:12)
    at Function.Module.runMain (module.js:497:10)
    at startup (node.js:119:16)
    at node.js:929:3

Could you please help? Thanks in advance.
",chocolait,2016-01-26 02:38:23
451,2016-01-25 12:24:35,"@chocolait Out of curiosity, what version of node are you using?
",rosshinkley,2016-01-26 02:38:23
451,2016-01-26 01:54:09,"node --version
v0.10.36
",chocolait,2016-01-26 02:38:23
451,2016-01-26 02:03:36,"Correct me if I'm wrong, but off the top of my head I don't think generator support was introduced until v0.11.x or v0.12.x.  Is an upgrade possible?
",rosshinkley,2016-01-26 02:38:23
451,2016-01-26 02:38:23,"That's the package manager default (fedora). I'll try using the latest version.  
Thank you for your help.
",chocolait,2016-01-26 02:38:23
450,2016-01-22 15:18:33,"can we expose __timeoutMs_ to option as well, so that users can override this value if they want, 250ms sometimes sounds relative long, for example measuring page loaded time..

<S_CODE_TOKEN>
",joychester,2016-08-03 03:54:30
450,2016-07-09 16:33:47,"Using, say, `will-navigate` and `did-stop-loading` and taking the time difference between the two might be a better approach barring redirects (or other edge cases I'm sure I'm not thinking of).

I could agree that `_timeoutMs` should be an option you can set, but I'm also not sure I understand the utility of doing so.  Is there a use case beyond measuring page load time?
",rosshinkley,2016-08-03 03:54:30
450,2016-07-10 07:34:35,"Hi, @rosshinkley , measuring page load time is the case i can think of currently which matters most for the accuracy to the test numbers.
",joychester,2016-08-03 03:54:30
449,2016-01-22 15:08:25,"Comments mismatched for waitelem in actions.js line 302:

<S_CODE_TOKEN>
",joychester,2016-04-14 03:36:34
448,2016-01-21 16:59:28,"How would I go about using Nightmare.js within an Express route?

I have tried the following but it is not working ...

<S_CODE_TOKEN>

Any ideas?
",adrianparr,2016-04-11 13:13:39
448,2016-01-21 19:02:39,"Just to get some context, is this all the code that you're running?
",shri3k,2016-04-11 13:13:39
448,2016-01-21 19:23:33,"No, I have other Express code that initialises the server etc (in separate files). The code above is just what gets run when the '/' route is matched.
",adrianparr,2016-04-11 13:13:39
448,2016-01-21 19:33:38,"Oh..which version of nightmare are you using?
",shri3k,2016-04-11 13:13:39
448,2016-01-21 20:26:38,"What you have _should_ work.  What happens when you run it?  Have you tried running it with `DEBUG`?

In addition to version, are you running this headlessly?  (I suspect since you have `show: true`, the answer is no, but it's worth double-checking.)  How are you running the node process?
",rosshinkley,2016-04-11 13:13:39
448,2016-01-21 21:53:14,"@shri3k I have `""nightmare"": ""^2.0.7""` in my package.json file.

@rosshinkley When I run it I never get a response back and the PNG screenshot doesn't get created. 
Do you mean run it like ...
`$ DEBUG=app bin/www`

I want it to run headlessly. I have changed it to `new Nightmare({ show: false })` but it hasn't made any difference.

I know the route is matched and running ok, as I have put `console.log`'s in there and I can see them in Terminal.

I'm just about to go on holiday for a week. So I won't be able to reply to this thread. But when I get back I'll put together a simple(r) demo that I can share with you.

Thanks in advance.
",adrianparr,2016-04-11 13:13:39
448,2016-01-21 22:03:52,"Electron requires a framebuffer to render, and I'd wager your headless solution doesn't have a framebuffer running.  If you are running headlessly - and testing what you provided as a sample headlessly - you're probably going to want to at least read through #224.  It has some proposed solutions to try.  I have a sneaking suspicion you're hitting the same issue.
",rosshinkley,2016-04-11 13:13:39
448,2016-04-03 03:42:36,"@adrianparr Are you still having this issue?
",rosshinkley,2016-04-11 13:13:39
448,2016-04-03 06:27:44,"@rosshinkley I think you were right. I am having the same issue as #224. I managed to get it working locally, but I need it to run on Digital Ocean (headlessly. It appears I'm not the only one having problems with this, judging by the thread on #224.
",adrianparr,2016-04-11 13:13:39
448,2016-04-11 13:13:38,"@adrianparr Ah, okay.  Closing and merging with #224.
",rosshinkley,2016-04-11 13:13:39
447,2016-01-21 15:36:08,,inversion,2016-05-19 16:57:17
447,2016-04-14 03:57:41,"@inversion I'm definitely in favor of the change, but it needs to be updated to be current.  Would you mind updating this?
",rosshinkley,2016-05-19 16:57:17
447,2016-05-15 09:40:10,"@rosshinkley now updated
",inversion,2016-05-19 16:57:17
447,2016-05-18 17:21:56,"Thanks, @inversion!
",rosshinkley,2016-05-19 16:57:17
446,2016-01-20 12:31:16,"#419
",emars,2016-01-24 11:25:23
446,2016-01-24 11:25:28,"looks good, thanks!
",matthewmueller,2016-01-24 11:25:23
445,2016-01-20 11:48:49,,inversion,2016-04-06 08:58:59
445,2016-01-28 06:03:16,"hmm, can you give me an example of when you'd want to throw? these are all asynchronous events, so i don't think throwing would actually work as expected.
",matthewmueller,2016-04-06 08:58:59
445,2016-01-28 09:54:25,"This is because there is no default reject function, so if you fail to pass one then you will get an unhelpful error à la `undefined is not a function`. Throwing it allows your `uncaughtException` handler to log out the actual error.
",inversion,2016-04-06 08:58:59
445,2016-04-06 07:31:48,"@inversion I think the issue you were trying to solve here was fixed when @matthewmueller changed `.then()` to return a promise: https://github.com/segmentio/nightmare/commit/54f81d3dd9e6e4dad861f749a4a3064e2ce98dd0

If so, it would probably help to close this PR.
",Mr0grog,2016-04-06 08:58:59
445,2016-04-06 08:58:56,"With that change it will now log out properly so closing.

<S_CODE_TOKEN>
",inversion,2016-04-06 08:58:59
444,2016-01-20 11:44:59,"See http://blog.atom.io/2015/11/17/electron-api-changes.html
",inversion,2016-01-28 06:01:43
444,2016-01-28 06:01:48,"thanks!
",matthewmueller,2016-01-28 06:01:43
443,2016-01-19 11:45:19,"fixes: #442 
bug introduced by: #438 
",emars,2016-01-24 11:20:00
443,2016-01-24 11:20:08,"okay great, thanks :-)
",matthewmueller,2016-01-24 11:20:00
442,2016-01-19 11:34:28,"#438 doesn't handle the case for an undefined waitTime.

without specifying wait time you get:

<S_CODE_TOKEN>
",emars,2016-01-24 11:20:00
441,2016-01-18 23:28:31,"The dock icon is now hidden by default by the following pull request:
https://github.com/segmentio/nightmare/pull/426

This OS X specific option allows the dock icon to be shown again, mainly
for testing purposes, and makes no harm in other operating systems.

Fixes: https://github.com/segmentio/nightmare/issues/377
",jviotti,2016-01-28 05:59:55
441,2016-01-18 23:29:17,"Let me know if you have any suggestions, mainly regarding the documentation!
",jviotti,2016-01-28 05:59:55
441,2016-01-19 03:17:36,"Hmm, I'd probably prefer `dock: false` and `dock: true`. Otherwise it looks good!
",matthewmueller,2016-01-28 05:59:55
441,2016-01-19 12:25:39,"@matthewmueller Renamed `showDock` to `dock`!
",jviotti,2016-01-28 05:59:55
441,2016-01-28 05:59:53,"thanks :-)
",matthewmueller,2016-01-28 05:59:55
440,2016-01-18 11:31:59,"fixes #428 
",emars,2016-01-18 21:49:31
440,2016-01-18 21:49:29,"awesome, thanks!
",matthewmueller,2016-01-18 21:49:31
439,2016-01-17 13:27:48,"Sometimes the ""should type integer"" test will fail.

It appears to be pretty random.

`mocha -g ""type integer""`
",emars,2016-02-01 06:39:32
439,2016-01-18 22:00:41,"I believe this is related to this: https://github.com/segmentio/nightmare/issues/414
",matthewmueller,2016-02-01 06:39:32
439,2016-02-01 06:39:32,"this should be fixed in 2.1.5 :-)
",matthewmueller,2016-02-01 06:39:32
438,2016-01-17 13:23:12,"fixes #429 
",emars,2016-01-18 21:50:25
438,2016-01-18 21:50:23,"looks great. thanks @emars !
",matthewmueller,2016-01-18 21:50:25
438,2016-01-19 03:25:25,"hi - i had a problem with this change because i wasn't specifying a waitTimeout and so it was hitting the failure case instead. I think we need a check for undefined.

https://github.com/segmentio/nightmare/blob/f75b48aad09339b1407f3d3422a1dd51b936c2f0/lib/actions.js#L250

Also, for the odd (isn't it?) case when a ms timeout is >= than the optionWaitTimeout, what is the benefit in waiting for a guaranteed failure?

 Couldn't we just either:
- throw an error immediately
- wait for the optionWaitTimeout but don't throw an error
",squirmy,2016-01-18 21:50:25
438,2016-01-19 10:57:38,"@squirmy , yep it is kind a negative case to have timeout wait value >= the option WaitTimeout i tested :)
currently it has an issue without setting it as you mentioned(hanging from my side with 2.1.3 release). 
I would suggest that we can have a default value of option WaitTimeout(30000ms for example), or user can overwrite it in options explicitly.
",joychester,2016-01-18 21:50:25
438,2016-01-20 02:58:50,"@emars Thank you for fixing this! :+1: 
",joychester,2016-01-18 21:50:25
437,2016-01-15 11:59:20,"fixes #431 
",emars,2016-01-18 21:50:58
437,2016-01-18 21:50:56,"Killer. Great fixes. Thanks!
",matthewmueller,2016-01-18 21:50:58
436,2016-01-14 18:13:38,"I'm having issues getting NightmareJS to work on Ubuntu Linux 14.04 on DigitalOcean.

I documented this on Stackoverflow: [Nightmare.js not working as expected on Ubuntu Linux cloud server](http://stackoverflow.com/questions/34795037/nightmare-js-not-working-as-expected-on-ubuntu-linux-cloud-server).

It might also help to provide a guide on how to get NightmareJS working on Linux as I've been searching for a fix for close to 2 hours and can't seem to figure out why it won't work.
",obihill,2016-01-14 19:52:44
436,2016-01-14 19:53:30,"Closed this because I managed to fix it. See answer via above link.
",obihill,2016-01-14 19:52:44
435,2016-01-14 16:33:01,,emars,2016-01-14 17:13:51
435,2016-01-14 17:13:49,"awesome, thanks @emars !
",matthewmueller,2016-01-14 17:13:51
434,2016-01-14 02:04:14,"Say that there's a Nightmare script called `index.js`. When running  `node index.js` from the terminal (OS X) in full screen and passing `{ show: true }` to the Nightmare constructor, it will switch to the first virtual desktop and open the Electron window. This works as expected.

If you pass nothing or `{ show: false }` it will still switch to the first virtual desktop even though it doesn't open an Electron window. This is very annoying because you have to jump back to the terminal every time you test the script. Is this an easy fix?
",migueloller,2016-01-28 16:25:39
434,2016-01-17 12:36:54,"I'm using iTerm2 in fullscreen mode and couldn't reproduce this.

Also tried it with the regular terminal.

Here is my code:

<S_CODE_TOKEN>
",emars,2016-01-28 16:25:39
434,2016-01-17 19:53:14,"I ran your code with the regular terminal in my machine (OS X El Capitan Version 10.11.2) and it still happened.

Can anybody else reproduce this on their machine?
",migueloller,2016-01-28 16:25:39
434,2016-01-28 16:25:39,"Fixed with #452!
",migueloller,2016-01-28 16:25:39
433,2016-01-12 07:27:30,"https://github.com/segmentio/nightmare/blob/master/package.json

![screen shot 2016-01-12 at 8 23 49 am](https://cloud.githubusercontent.com/assets/546900/12257365/4393a028-b906-11e5-9eed-e86c4c59634b.png)
",thisconnect,2016-01-12 23:11:23
433,2016-01-12 19:01:52,"lol
",stephenmathieson,2016-01-12 23:11:23
433,2016-01-12 23:11:23,"hahaha we'll do our best.
",matthewmueller,2016-01-12 23:11:23
432,2016-01-10 04:59:39,"How can call a local site hosted in IIS and using windows authentication using nightmare?
",neeldeep,2017-01-02 21:24:36
432,2016-01-12 22:53:54,"i'm not really sure. don't have access to an IIS box at this time. does anyone have any ideas?
",matthewmueller,2017-01-02 21:24:36
432,2016-07-08 14:12:44,"Struggled with it too for a while. Solution / workaround (because `authenticate()` didn't work):

<S_CODE_TOKEN>

…correctly used NTLM authentication in my case. Fixing `authenticate()` would be the best option though.
",rehael,2017-01-02 21:24:36
432,2016-07-08 17:14:22,"@rehael I'd be curious if NTLM causes the [`login` event](https://github.com/electron/electron/blob/master/docs/api/web-contents.md#event-login) to be fired.  I suspect the answer is no - which would explain why `.authenticate()` doesn't work - but I'd appreciate it if you (or someone else) would double-check.
",rosshinkley,2017-01-02 21:24:36
432,2016-07-08 17:58:59,"@rosshinkley I'm fairly sure I've tried `.on('login', …)` but let's wait until Monday when I check this at work. Nb. I've had exactly the same problem with Casper/Phantom.
",rehael,2017-01-02 21:24:36
432,2017-01-02 21:24:36,Closing due to age and viable workaround.,rosshinkley,2017-01-02 21:24:36
431,2016-01-08 22:24:15,"Is there a reason for why `.screenshot()` with no path provided will return the buffer data, but `.pdf()` has no ability to do the same? Or does it just have to be implemented?
",derrickpelletier,2016-01-18 21:50:58
431,2016-01-15 12:01:36,"It currently is set up to use electron as the underlying implementation:

see:
https://github.com/atom/electron/blob/master/docs/api/browser-window.md#browserwindowprinttopdfoptions-callback
and:
https://github.com/atom/electron/blob/master/docs/api/web-contents.md#webcontentsprinttopdfoptions-callback

It appears to just not have been implemented.

I just submitted a pull request that should take care of it.
",emars,2016-01-18 21:50:58
431,2016-01-15 17:56:15,"Awesome, thanks!
",derrickpelletier,2016-01-18 21:50:58
430,2016-01-07 23:12:46,"I'm wanting to use the users session in my nightmare instance, to generate a pdf.

Is it possible to somehow push the express session for the request into the nightmare instance when initialized?
#398 seemed like it might have been relevant but not sure how to use those suggestions towards what I need.
",derrickpelletier,2016-01-08 18:08:40
430,2016-01-08 17:04:33,"The short answer: possibly, but it would require a lot of effort and (probably frustrating) experimentation, and I suspect whatever implementation you came up with would be flaky at best.  #398 (I believe) is more at sharing sessions across Nightmare instances, possibly across machines.

A slightly longer answer: I also suspect based on what you said that you're doing this on the server where the Express instance lives.  If that's the case, you already have access to the user session, consequently the information you need, and can build the HTML required for the PDF there.  That buys you a couple of options off the top of my head:
1. Expose a new unauthenticated web method that examines the headers for a unique key, then have Nightmare add the key to the headers for the request.  Not exactly the most secure option, but it would work.
2. Use the same approach as option 1, but in a different service that isn't publicly exposed.
3. Write the HTML to disk in a temporary file, and point Nightmare to that file.
",rosshinkley,2016-01-08 18:08:40
430,2016-01-08 18:08:40,"Thanks for your feedback. Yeah, my inclination is that it would be quite hacky. I'm not super familiar with sessions but it sort of seems like it goes against the core of what sessions are for. 

I had already implemented what you suggested as point 2, so I'll probably just roll with that.

Thanks!
",derrickpelletier,2016-01-08 18:08:40
429,2016-01-07 06:59:23,"From the Readme doc it says:
waitTimeout
This will throw an exception if the .wait() didn't return true within the set timeframe.

<S_CODE_TOKEN>

however, in my dummy tests, it does not work if we set .wait() in following:

<S_CODE_TOKEN>

this test will still running 30 seconds instead of 15 seconds we set in the option, it had better to describe in the doc if 'waitTimeout' only works in the .wait(selector) function :)
Thanks!
",joychester,2016-01-18 21:50:25
429,2016-01-08 17:17:00,"Possibly related: #397, and to a lesser extent #375
",rosshinkley,2016-01-18 21:50:25
428,2016-01-07 01:01:57,"Can't toggles the selector checkbox element if default value of checked=""checked""
https://github.com/segmentio/nightmare#checkselector
",nathanielvarona,2016-01-18 21:49:31
428,2016-01-08 16:37:00,"Looking at the source, it looks like `.check()` will only check checkboxes, not uncheck.  I would suspect this is intentional behavior, but then why `.uncheck()` isn't also in core is a mystery.

That aside, you could add your own `.uncheck()` with `.action()`:

<S_CODE_TOKEN>
",rosshinkley,2016-01-18 21:49:31
427,2016-01-05 16:09:39,,koba04,2016-01-06 18:23:11
427,2016-01-06 18:23:09,"awesome, thanks!
",matthewmueller,2016-01-06 18:23:11
427,2016-01-07 01:22:09,"Thanks!
",koba04,2016-01-06 18:23:11
426,2016-01-05 13:51:44,"Hiding the application dock icon gives a more polished experience and
abstracts the user from Nightmare's internals.

I believe this was commented out by mistake.
",jviotti,2016-01-18 21:52:22
426,2016-01-05 13:56:17,"`app.dock` seems to be `undefined` in CircleCI, which I believe happens when nightmare is run in a platform other than OS X.

<S_CODE_TOKEN>

---

I'll update my PR to check for the existence of `app.dock`.
",jviotti,2016-01-18 21:52:22
426,2016-01-06 19:20:29,"has this been a problem for you? or more just for better UX? i'm just a little apprehensive with hiding it right now just because it's nice to know if you accidentally opened up a ton of processes.

definitely want to merge this, but just not sure if it should be now.
",matthewmueller,2016-01-18 21:52:22
426,2016-01-07 12:20:21,"@matthewmueller I'm shipping an electron app which uses Nightmare under the hood, and thus a new electron icon is shown in the dock for a while, which looks very awkward.

> i'm just a little apprehensive with hiding it right now just because it's nice to know if you accidentally opened up a ton of processes.

I see, this issue hit me a few times already. What about allowing a custom opt-in option to hide it from the dock (`hideDock`?) on the `Nightmare` constructor, that way users can enable it on demand, knowing the possible implications.
",jviotti,2016-01-18 21:52:22
426,2016-01-07 12:21:28,"BTW, Circle CI seems to be failing with a sporadic error:

<S_CODE_TOKEN>

Can you restart the build for me?
",jviotti,2016-01-18 21:52:22
426,2016-01-18 21:52:21,"Okay, yah that makes sense. I'll merge this and I'lll add an option to show the icon in the dock for testing purposes.
",matthewmueller,2016-01-18 21:52:22
425,2016-01-04 22:37:25,"This is a possible implementation for solving #391.  Not _exactly_ what was requested, but hopefully close.

Some things to ponder, in no particular order:
1. This amends the instance, not the prototype.  I did this largely because Nightmare does not share Electron instances between Nightmare instances.  It didn't seem sensible to force the prototype to have Nightmare actions for which there were no Electron actions.  This also allows separate instances of Nightmare to use different plugins.
2. Adding Nightmare and Electron actions together makes more sense to me than adding Electron actions alone.  Thoughts?
3. I readily acknowledge this sort-of-kind-of steps on `.action()` (and to a lesser extent, `.use()`).  I considered updating `.use()` for plugins, but decided not to introduce breaking changes for this proposal.  Suggestions for naming conventions or restructuring welcome.
4. Constructed function scoping works a little differently.  This is why the constructed function binds to an object that passes in `require` (it's _slightly_ cleaner than using `eval`).  This allows `require` calls to be made in the Electron action.  I considered stuffing that object with `parent`, `win`, etc - this would make the Electron actions look closer to what is in `runner.js`, but decided to leave them as explicit parameters for the time being.  Thoughts?
",rosshinkley,2016-04-02 22:31:32
425,2016-01-06 19:29:47,"@rosshinkley thanks for putting this together! I really have to think about this one a bit. After I get back from holiday vacation, I will take a closer look. My initial thoughts: 

> This amends the instance, not the prototype. I did this largely because Nightmare does not share Electron instances between Nightmare instances. It didn't seem sensible to force the prototype to have Nightmare actions for which there were no Electron actions. This also allows separate instances of Nightmare to use different plugins.

This could be confusing with how `.action` works, but is sort of inline with `.use`. I'm not crazy about having all these sorta different, but obscure ways to extend nightmare. I think it was discussed a bit in https://github.com/segmentio/nightmare/issues/379. 

I'm not sure the best way to fix this atm but I think where we're headed is going to lead to more confusion. It could just be a documentation thing though.

> Adding Nightmare and Electron actions together makes more sense to me than adding Electron actions alone. Thoughts?

Yah, I think you're right, but maybe actions/use could be nightmare-side only and there's an optional electron side.

> I readily acknowledge this sort-of-kind-of steps on .action() (and to a lesser extent, .use()). I considered updating .use() for plugins, but decided not to introduce breaking changes for this proposal. Suggestions for naming conventions or restructuring welcome.

Need to think on this more. But in general, I agree. It needs to be consolidated a bit more.

> Constructed function scoping works a little differently. This is why the constructed function binds to an object that passes in require (it's slightly cleaner than using eval). This allows require calls to be made in the Electron action. I considered stuffing that object with parent, win, etc - this would make the Electron actions look closer to what is in runner.js, but decided to leave them as explicit parameters for the time being. Thoughts?

Explicit params is probably fine if there's not going to need to be any additional params (or different ordering). If not, we should probably just pass a params object in.
",matthewmueller,2016-04-02 22:31:32
425,2016-01-06 19:31:47,"Some general aestetic thoughts: I'm not crazy about passing an object in with `nightmareAction`, `electronAction`. I think two functions would make more sense since folks are used to `.evaluate(browser_fn, server_fn)` but I'd be open to other solutions too :-)

Thanks again for getting this started though. I think this is going to be a great addition.
",matthewmueller,2016-04-02 22:31:32
425,2016-01-07 17:18:16,"@matthewmueller no problem, happy (at least to try) to help.

> This could be confusing with how .action works, but is sort of inline with .use. I'm not crazy about having all these sorta different, but obscure ways to extend nightmare. I think it was discussed a bit in #379.

I thought something eerily similar, and I actually had a point about that originally that got edited out as I couldn't make it constructive enough.  I opted to go the way I did just to get the gist of the idea on virtual paper and not stomp on stuff that already existed.  I agree that, as it stands, this will be _very_ confusing, even with more/better documentation.

> Need to think on this more. But in general, I agree. It needs to be consolidated a bit more.

I think I'm going to go ahead and update this to put all of this into `action` - that seems to be a logical consolidation step.  I also think it'll help to have a rough cut of what that would look like.  More on that when I finish.

> Explicit params is probably fine if there's not going to need to be any additional params (or different ordering). If not, we should probably just pass a params object in.

I don't _think_ there will be additional parameters, but the required signature is a bit verbose.  I'm also not crazy about wrapping the function in a context - it makes the parameters feel a bit ""magic"", but I thought I'd put it on the table as an option.  

> Some general aestetic thoughts: I'm not crazy about passing an object in with nightmareAction, electronAction.

A parameters hash is a bit... icky?  I'm not enthusiastic about it either.  As an aside, the reason I did it that way with `plugin` was a personal preference: I'll use a hash when I don't know what the final signature will be.  It's a vestige of experimentation. :)
",rosshinkley,2016-04-02 22:31:32
425,2016-01-08 04:48:10,"@matthewmueller This update keeps the additions of the extensions together, as well as consolidates `.action()` and `.plugin()` into a single `.action()` function.  I've also kept the order of parameters similar to `.evaluate()` where the (optional) client method comes before the Nightmare action.

There are a couple of differences (and possible pitfalls?) in this update.  For starters, to keep the current behavior of `.action()` consistent, I decided it made the most sense to have the Electron plugin(s) be added for all instances.  The child actions are cached on the nightmare constructor, similar to how namespacing for `.action()` works.  Consequently, the addition of those child actions are added to the queue in the constructor such that all child action additions are executed prior to the first user-specified action.  (And they're silent, something I've got mixed feelings about.)

Thoughts?
",rosshinkley,2016-04-02 22:31:32
425,2016-01-12 22:59:19,"aestetically and complexity-wise, I like this **a lot** more :-). can you explain what you see as a pitfall of adding the electron plugin to all instances?
",matthewmueller,2016-04-02 22:31:32
425,2016-01-13 02:40:22,"@matthewmueller When I wrote that sentence about possible pitfalls, I had two things in mind:
1. I was changing how `.plugin()` behaved considerably - originally, you could add Electron functionality piecemeal.  This meant the execution time/complexity to add Electron extensions was only as big as the instance required, whereas now, actions for _every_ plugin are queued for every instance before execution can even start.  On reflection, since the plugin action is uniform (except in what's actually transferred), I'd bet the performance impact is (almost) negligible.  At any rate, it's not anywhere near dealbreaking, only the fringiest (is that a word?) of fringe cases would be using multiple Nightmare instances with different bolt-ons.  TLDR: adding plugins to every instance isn't going to be a problem. :)
2.  I know I mentioned this already: queued plugin actions execute silently before the first user call.  Should they at least make a `debug` call or something?

Finally: anything else I can do to help this PR along?
",rosshinkley,2016-04-02 22:31:32
425,2016-01-18 22:57:23,"@matthewmueller I went ahead and added the debug, and also went ahead and merged in the recent changes.  Special thanks to @emars for fixing the build, something I just hadn't had time to do. :)
",rosshinkley,2016-04-02 22:31:32
425,2016-01-21 21:16:00,"@matthewmueller I've gone ahead and thrown together a couple of proposed plugins: [additional events](https://github.com/rosshinkley/nightmare-custom-event) (from #376) and [download management](https://github.com/rosshinkley/nightmare-download-manager) (from #382).  From that, I got to use this PR for ""real"" applications, and as such, made a couple of touchups to include options in the Electron method, as well as attaching the options hash to the instance.  This allows for making/expecting options in the Nightmare options for plugin use.
",rosshinkley,2016-04-02 22:31:32
425,2016-02-09 18:14:03,"A note on `require`'s context: The Electron context does have `require` attached, but it's worth noting that it'll require things from the local Nightmare install's node modules, not the plugin's node modules due to how the Electron function is created.  Plugin-installed modules can be required if they are specified with absolute or relative paths passed from the Nightmare plugin to the Electron plugin.

An example may be helpful.  Say we wanted to do some date manipulation in Electron and wanted to use Moment to help:

<S_CODE_TOKEN>

... won't work.  You'll get an exception from `runner` saying it couldn't find moment.  However, if you pass the module path down:

<S_CODE_TOKEN>

... allows Moment to be required.

---

I considered trying to make `require` automagically work: the `.action()` method would need to determine the caller location (which can be done by sifting through an artificial stacktrace, or use of `module.parent`, both of which have problems).  Then, Electron's `require` would need to be wrapped in a function that determines if it's a bare package name or path, require, and return the package, and I'm sure there's other complexity buried there.  

In other words, it's complicated, and probably too much complexity to introduce when 1) using `require` from Electron is probably going to be rare and 2) passing the path explicitly avoids complication entirely.

I'm certainly open to suggestions or thoughts. :)

---

Is it worth including something akin to the above in the documentation to clear up possible problems with `require` from Electron?
",rosshinkley,2016-04-02 22:31:32
424,2016-01-04 17:26:10,"Is dynamic paging possible with Nightmare? By dynamic paging I mean a sort of ""do while"" function that will continue to goto and evaluate pages. 

I'm attempting to scrape ajax pages which require a bit of setup. It appears the evaluate function doesn't allow javascript functions to be passed in as arguments and I'm stuck. 

Any potential assistance is greatly appreciated. My apologies if this is the wrong spot for such inquiries. 

TIA

Nightmare and Electron appear to be a promising modern alternative to PhantomJS with CasperJS. The simplicity of the examples with generators as opposed to a mess of callbacks is very appealing. Kudos to the team! 
",designerx2,2016-03-30 03:19:42
424,2016-01-04 19:42:14,"Below is a simple example of returning the links found on page 1 of a google search. For examples sake I'd like to return the links of all result pages (as of this writing there were 13 result pages.) 

<S_CODE_TOKEN>
",designerx2,2016-03-30 03:19:42
424,2016-01-04 22:43:15,"You also might want to have a look at [my comment](https://github.com/segmentio/nightmare/issues/402#issuecomment-166948532) in #402.  It seems to be pretty close to what you're asking for.
",rosshinkley,2016-03-30 03:19:42
424,2016-01-05 19:29:27,"@rosshinkley ,  Yes.. that is very helpful. thank you for pointing it out. It appears multiple instances of Nightmare are fired up, I'm not sure I understand how Nightmare retains it's page scope yet fire up multiple instances. Oddly it is currently returning results of only 12 of the 14 result pages for me at this point.   I attempted searching a different term with greater than 100 page results and was presented with only 33 links, I haven't identified the problem yet. To resolve the EventEmitter errors I used the fix mentioned here: EventEmitter memory leak (https://github.com/segmentio/nightmare/issues/350).  

<S_CODE_TOKEN>
",designerx2,2016-03-30 03:19:42
424,2016-01-05 20:45:38,"@designerx2 I think there are two problems here.  The first is one I should have thought of and missed in my haste.  The example in #402 - and the one you're showing here - is naive and will miss the last page (if there is a ""last"" page) as the `#pnnext` button won't exist.  The second has to do with how Google shows pages.  I added a `scrollTo` to look at the pages before clicking `#pnnext`, and at page 13, the results fall below the omission threshold.  A picture might be helpful:

![test](https://cloud.githubusercontent.com/assets/1823131/12127088/36b0d5e4-b3c3-11e5-9961-74172bf6b8e6.png)

In short: there are only 13 result pages and the last one is being omitted.
",rosshinkley,2016-03-30 03:19:42
424,2016-01-06 14:02:03,"Wow, It's cool!
",YueShuXie,2016-03-30 03:19:42
424,2016-03-30 03:19:42,"I'm considering this issue resolved.  If you're still having this problem, feel free to reopen/open a new issue.
",rosshinkley,2016-03-30 03:19:42
423,2016-01-02 02:16:37,"I found that the Examples <<Let's search on Yahoo:>> can't run correctly in ubuntu & centos. When I run the examples in window 8, It's can run and output the result. But when I run the examples in ubuntu & centos, it run fast and exit at once, and no result output. It seems like that nightmare just push action into queue, but do nothing.

Can anybody else have such issues?
",YueShuXie,2016-01-06 19:00:17
423,2016-01-02 02:41:20,"## output in window8:

> node yahoo.js

https://github.com/segmentio/nightmare

## output in centos:

[root@test]# DEBUG=nightmare node --harmony yahoo.js  
nightmare starting...  
  nightmare queueing action ""goto"" for http://yahoo.com +0ms 
  nightmare queueing action ""type"" +5ms  
  nightmare queueing action ""click"" +2ms  
  nightmare queueing action ""wait"" +0ms  
  nightmare queueing action ""evaluate"" +0ms  
  nightmare running +1ms                                     
",YueShuXie,2016-01-06 19:00:17
423,2016-01-04 22:50:13,"Without spinning up a Centos VM, this sounds suspiciously like there's no X-compatible framebuffer running.  Take a look through #224, possible duplicate of #269.
",rosshinkley,2016-01-06 19:00:17
423,2016-01-06 13:43:33,"Thank you very much. 
I have take a look through #224, and make some upgrade for my ubuntu server.
Now my program has been running in ubuntu correctly.

Thank you!
",YueShuXie,2016-01-06 19:00:17
423,2016-01-06 19:00:16,"closing since this is a dup of #224 
",matthewmueller,2016-01-06 19:00:17
422,2015-12-31 09:50:39,"Hello,

I have a form that respond to submission with a CSV file. Do you know how I could test it ?
- test that a file in responded ?
- test the file name ?
- test the file size ?
",borisschapira,2016-04-03 03:41:21
422,2016-01-04 23:13:05,"TLDR: You currently cannot test downloads this way.  There are plans to address this issue.

A slightly longer explanation: use-cases for how Electron handles downloads - the `will-download` event - are very different.  PR #382 attempts to manage downloads, but it was decided that downloads should be handled in one or more plugins (see #391) - one for handling them in parallel, and possibly another for handling them inside of the Nightmare pipeline.  It may also be worth reading #332, #371, and #151 for more background.
",rosshinkley,2016-04-03 03:41:21
422,2016-01-05 06:20:30,"Thanks a lot for this detailed explanation that/certainly took time to
write. It's much appreciated !

Le mar. 5 janv. 2016 00:13, rosshinkley notifications@github.com a écrit :

> TLDR: You currently cannot test downloads this way. There are plans to
> address this issue.
> 
> A slightly longer explanation: use-cases for how Electron handles
> downloads - the will-download event - are very different. PR #382
> https://github.com/segmentio/nightmare/pull/382 attempts to manage
> downloads, but it was decided that downloads should be handled in one or
> more plugins (see #391 https://github.com/segmentio/nightmare/issues/391)
> - one for handling them in parallel, and possibly another for handling them
>   inside of the Nightmare pipeline. It may also be worth reading #332
>   https://github.com/segmentio/nightmare/issues/33%0D%202, #371
>   https://github.com/segmentio/nightmare/issues/371, and #151
>   https://github.com/segmentio/nightmare/issues/151 for more background.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/segmentio/nightmare/issues/422#issuecomment-168840916
> .
",borisschapira,2016-04-03 03:41:21
422,2016-04-03 03:41:21,"With the release of #425 in 2.3.0, I've gone ahead and released plugins that will take care of downloads:
- [nightmare-download-manager](https://github.com/rosshinkley/nightmare-download-manager)
- [nightmare-inline-download](https://github.com/rosshinkley/nightmare-inline-download)

I'm considering this issue resolved.  If you have further questions or problems, please open a new issue.
",rosshinkley,2016-04-03 03:41:21
422,2016-04-03 19:01:05,"Thanks a lot, @rosshinkley, what a great bunch of plugins, that's awesome!
",borisschapira,2016-04-03 03:41:21
421,2015-12-29 19:18:25,"we're currently swallowing errors, making debugging nightmare timeouts incredibly difficult:

**timeout.js**

<S_CODE_TOKEN>

**output**:

<S_CODE_TOKEN>

---

running `dist/electron` directly yields:

<S_CODE_TOKEN>

... any reason we're not sending this to `stderr`, or at least notifying the user that something went wrong?
",stephenmathieson,2016-04-23 21:49:17
421,2016-03-20 00:43:13,"I'm trying to run nightmare on GCP and get a similar error:

<S_CODE_TOKEN>
",shauvik,2016-04-23 21:49:17
421,2016-04-18 05:41:20,"Since this was filed, it looks like Nightmare has gotten a _little_ better at surfacing electron errors: https://github.com/segmentio/nightmare/blob/master/lib/nightmare.js#L70

…but that really wouldn’t give nearly as much detail as it could. A user would never see the message above from electron, for example:

<S_CODE_TOKEN>

One option would be to just send Electron’s stderr through the parent process’s stderr. Users would see deprecation notices and possibly a number of other bits of noisy output from Electron. There’s probably some good to be had there (in trying this, I noticed Nightmare uses several deprecated APIs), but I can imagine there might be other output that is more noisy than helpful.

Another option might be to buffer up Electron’s stderr and emit it when/if Electron exits with a non-zero exit code. Any thoughts?
",Mr0grog,2016-04-23 21:49:17
421,2016-04-18 17:07:44,"_Bringing this over from #582._

I had been thinking about was wrapping the Electron instance stdout and possibly stderr up with calls to `debug` (rather than piping them straight through to the parent process stdio).  Then I started thinking about possibly having log levels and _maybe_ introducing something slightly more complex than debug like [winston](https://github.com/winstonjs/winston) or [loglevel](https://www.npmjs.com/package/loglevel).  Thoughts?
",rosshinkley,2016-04-23 21:49:17
421,2016-04-18 18:46:15,"My very minor 2¢: sending Electron’s stdout/stderr to debug channels like `electron:log/election:error` seems like a great idea and gives people lots of flexibility for getting various output. I’m somewhat skeptical that a new, heavier logging tool needs to come along for the ride, but can definitely see ways that doing so might be helpful. Maybe the main question is: what’s the pain point you’re trying to solve switching logging implementations?
- loglevel is great for when you need something light and simple, especially in the browser. That said, switching to it will sacrifice some nice things Nightmare currently has: automatic coloring, prefixing, and timing in log output, plus automatic filtering of loggers by environment variable. That will all have to be re-coded (if we still want it). (Also full disclosure: I wrote loglevel’s multiple-logger support, so I may be somewhat biased in regards to it.)
- winston is really heavy-duty, but will probably get you all you need straight away with very little extra work. I think you can also query/re-play logs, which might be useful if, say, Electron logging is suppressed but then Electron crashes and we want to output its logs anyway.
",Mr0grog,2016-04-23 21:49:17
421,2016-04-18 19:43:26,"> sending Electron’s stdout/stderr to debug channels like electron:log/election:error

Yep.  I'd agree. :)  Frankly, for now, I think we _should_ keep it simple, routing electron's stdout/stderr through DEBUG.

> I’m somewhat skeptical that a new, heavier logging tool needs to come along for the ride, but can definitely see ways that doing so might be helpful.

I am too, and I apologize if I didn't make that clear.  I wanted to float the idea to see what everyone thought.  I was tinkering with the idea more seriously after you (@Mr0grog) submitted #579: With the progress events, it might be helpful to add logging there, but would make running Nightmare with DEBUG _wildly_ verbose.  There are probably other events - like any of the events that are simply forwarded - that could be dropped to a lower log level.  My main goal was to help manage verbosity, but that may very well be a misguided early optimization.

winston was at the tip of my brain, and I had to go look up loglevel from a previous project to remember that.  I was throwing out possibilities, they certainly aren't the only two solutions out there.  I'm willing to entertain alternatives.
",rosshinkley,2016-04-23 21:49:17
421,2016-04-18 20:07:59,"> running Nightmare with DEBUG wildly verbose. There are probably other events - like any of the events that are simply forwarded - that could be dropped to a lower log level.

Getting off topic from this bug, but _oh, certainly._ I think it’s already a little verbose. One simpler thing to do might be just having more granular logging channels, e.g. browser events, script execution, runner actions, queueing, process management, etc. One could potentially manage just as well by message type as by severity.
",Mr0grog,2016-04-23 21:49:17
421,2016-04-18 20:18:52,"@Mr0grog Yeah, it's getting a _bit_ into the weeds. :)

> One simpler thing to do might be just having more granular logging channels, e.g. browser events, script execution, runner actions, queueing, process management, etc. One could potentially manage just as well by message type as by severity.

For sure.  It's a little bit more of a hassle to set up DEBUG rules to get exactly what you want, but I'm on board.

To that end... with an eventual PR, would it be helpful to include common(ish) DEBUG setups over at nightmare-examples, especially as the more complicated parts start coming in?
",rosshinkley,2016-04-23 21:49:17
420,2015-12-29 12:53:40,"untested
",antpaw,2016-01-28 06:03:46
420,2016-01-01 22:11:26,"what does this fix?
",matthewmueller,2016-01-28 06:03:46
420,2016-01-02 10:46:01,"it logs to the bash the page events like alert and error with `DEBUG=nightmare:log`
",antpaw,2016-01-28 06:03:46
420,2016-01-04 23:31:07,"The change to `page` from `page-error`, `page-log` etc was an intentional one.  Take a look at the default preload script, specifically at how [page errors are handled](https://github.com/segmentio/nightmare/blob/master/lib/preload.js#L6-L8) and consequently [transmitted to Nightmare](https://github.com/segmentio/nightmare/blob/master/lib/runner.js#L90-L92).  All of the messages are (to the best of my knowledge) still being logged to `debug`, but are logically grouped together using the same event.
",rosshinkley,2016-01-28 06:03:46
420,2016-01-05 08:44:41,"it was intentional and i understand this change how ever only the child process does this correct (as you mentioned). https://github.com/segmentio/nightmare/blob/master/lib/runner.js#L90-L92 

the parent process doesn't listen to `page` it listens to `page-error` and thats what die pr is fixing. https://github.com/segmentio/nightmare/blob/master/lib/nightmare.js#L111-L117
",antpaw,2016-01-28 06:03:46
420,2016-01-05 17:37:24,"@antpaw Ah, I see.  I must have misread the original diff.  It looked like in passing it was adding the `page-*` events back.  At any rate, I think you are correct. The parent process should listen to `page`.  +1. :)

One nit: I think the page handler should handle variable arguments.  Something like:

<S_CODE_TOKEN>

... or if the `page-*` convention should be kept for `debug`, something like:

<S_CODE_TOKEN>

Re testing, the tests for ensuring `page` is handled are already there ([alert](https://github.com/segmentio/nightmare/blob/master/test/index.js#L688-L694), [prompt](https://github.com/segmentio/nightmare/blob/master/test/index.js#L704-L721), and [confirm](https://github.com/segmentio/nightmare/blob/master/test/index.js#L704-L721) are good examples), but simply test that the events are emitted from the child and not submitted to debug.  Testing debug output would probably require using a mock (like mockery).
",rosshinkley,2016-01-28 06:03:46
420,2016-01-06 19:21:39,"> I think the page handler should handle variable arguments

+1

then i think we're good to go :-)
",matthewmueller,2016-01-28 06:03:46
420,2016-01-28 06:03:48,"thanks!
",matthewmueller,2016-01-28 06:03:46
419,2015-12-28 17:57:02,"It seems like electron has suddenly become quite verbose, transmitting any small browser error for me to read in my node console. I think I must have performed a rebuild, because I don't recall seeing all these messages before:

`Renderer process started:` 

I see this every time the scraper goes to a new URL. Is this normal behavior? I recall seeing this message once when the scraper first initialized, but now I see it with every page change.

`[10800:1228/105431:ERROR:cookie_monster.cc(1742)] Found 1 duplicate cookies for host='....`

I never used to see these kind of messages. Actually I don't remember seeing many messages from Electron at all, previously. The scraper is still performing well, it's just quite noisy now.
Any tips on how to tone down the noise? Thanks!
",kanethal,2016-07-09 16:20:22
419,2016-01-20 12:17:37,"in `lib/nightmare.js` it appears the only messages being logged to the console directly are `uncaughtException`'s so unless you are using `DEBUG` there shouldn't be a ton of output. 

I'll update the README with a list of DEBUG flags for more targeted logging? 
",emars,2016-07-09 16:20:22
419,2016-01-21 02:32:29,"Interesting... I really have no idea what is causing the behavior. I
remember attempting to put my console into debug mode once upon a time,
does that state persist after closing powershell? Thanks for responding,
BTW.
On Jan 20, 2016 5:17 AM, ""Evan Marsland"" notifications@github.com wrote:

> in lib/nightmare.js it appears the only messages being logged to the
> console directly are uncaughtException's so unless you are using DEBUG
> there shouldn't be a ton of output.
> 
> I'll update the README with a list of DEBUG flags for more targeted
> logging?
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/segmentio/nightmare/issues/419#issuecomment-173186573
> .
",kanethal,2016-07-09 16:20:22
419,2016-01-21 11:33:31,"Not 100% sure because I'm on OSX, but try:
`Get-ChildItem Env:`
in powershell and look for the `DEBUG` flag. 
",emars,2016-07-09 16:20:22
419,2016-02-22 23:01:24,"Here's an example of the errors that I didn't used to see until rebuilding:

![nightmarejserrors](https://cloud.githubusercontent.com/assets/8418137/13235833/73517546-d97d-11e5-98ef-4740b673a5ea.jpg)
",kanethal,2016-07-09 16:20:22
419,2016-04-11 13:12:46,"@kanethal Do you have `ELECTRON_ENABLE_LOGGING` set?  It might be worth to check your environment variables against [the Electron environment variable flags](https://github.com/electron/electron/blob/master/docs/api/environment-variables.md).
",rosshinkley,2016-07-09 16:20:22
419,2016-04-11 13:19:28,"I hadn't explicitly set any conditions like this. It's possible they are
enabled in the nightmare package? I'm using v2.0.2. Thank you so much for
the link, I had been trying to find these flags.
On Apr 11, 2016 6:12 AM, ""Ross Hinkley"" notifications@github.com wrote:

> @kanethal https://github.com/kanethal Do you have
> ELECTRON_ENABLE_LOGGING set? It might be worth to check your environment
> variables against the Electron environment variable flags
> https://github.com/electron/electron/blob/master/docs/api/environment-variables.md
> .
> 
> —
> You are receiving this because you were mentioned.
> Reply to this email directly or view it on GitHub
> https://github.com/segmentio/nightmare/issues/419#issuecomment-208333064
",kanethal,2016-07-09 16:20:22
419,2016-04-11 13:29:48,"@kanethal No problem!

As for them being enabled for 2.0.2, I don't think so.  I don't see the same behavior.  I'd be curious if you'd get the same behavior with a different version.  Could you upgrade to 2.3.0 and run it again?
",rosshinkley,2016-07-09 16:20:22
419,2016-04-11 13:34:33,"I'd be happy to try!
On Apr 11, 2016 6:29 AM, ""Ross Hinkley"" notifications@github.com wrote:

> @kanethal https://github.com/kanethal No problem!
> 
> As for them being enabled for 2.0.2, I don't think so. I don't see the
> same behavior. I'd be curious if you'd get the same behavior with a
> different version. Could you upgrade to 2.3.0 and run it again?
> 
> —
> You are receiving this because you were mentioned.
> Reply to this email directly or view it on GitHub
> https://github.com/segmentio/nightmare/issues/419#issuecomment-208342334
",kanethal,2016-07-09 16:20:22
419,2016-04-23 22:33:46,"@kanethal Did you have any luck with an upgrade?
",rosshinkley,2016-07-09 16:20:22
419,2016-04-23 23:34:01,"Hi Ross, I believe there had been some semantic changes between the two
versions, and was going to have to reconfigure the scraping script and
haven't had time to focus on that. I'm sorry, I wish I had time to play
with it some more!
On Apr 23, 2016 5:33 PM, ""Ross Hinkley"" notifications@github.com wrote:

> @kanethal https://github.com/kanethal Did you have any luck with an
> upgrade?
> 
> —
> You are receiving this because you were mentioned.
> Reply to this email directly or view it on GitHub
> https://github.com/segmentio/nightmare/issues/419#issuecomment-213848706
",kanethal,2016-07-09 16:20:22
419,2016-07-09 16:20:22,"Closing due to lack of information/age.  If you're still experiencing this problem, feel free to reopen/open a new issue.
",rosshinkley,2016-07-09 16:20:22
418,2015-12-27 15:30:41,"Was going through the documentation and noticed a missing #. Will come up with a better PR next time.
Cheers!
",juanpaulo,2015-12-27 20:08:29
418,2015-12-27 20:08:28,"thanks!
",matthewmueller,2015-12-27 20:08:29
417,2015-12-27 12:58:37,"Fix being able to construct nightmare with user defined paths. The electron method takes 2 arguments instead of 1.
",Velinsky,2015-12-27 20:08:04
417,2015-12-27 20:08:14,"yikes, thanks for the fix!
",matthewmueller,2015-12-27 20:08:04
417,2016-01-14 22:03:54,"@matthewmueller is there any timeframe on when this fix will be released? I noticed it's not included in the latest NPM release.
",joshgummersall,2015-12-27 20:08:04
416,2015-12-26 19:07:02,"Hi,

Seems that there is an issue with the file runner.js when it run the statement require('browser-window').
I have tried several examples but I 'm always getting the same error.
I'm running this on windows 10 and my node environement works fine for other applications.

<S_CODE_TOKEN>

Can you help me to fix this issue ?

Thanks
",erch,2016-04-03 03:39:45
416,2015-12-27 20:17:16,"`browser-window` needs to be run by the electron process. it seems it's trying to do: `node runner.js`, which won't work.
",matthewmueller,2016-04-03 03:39:45
416,2015-12-28 08:54:35,"Hi matthew,

Do you mean that I should run the application differently than with : `node <myapp>` ?
",erch,2016-04-03 03:39:45
416,2016-03-30 03:15:51,"@erch Are you still experiencing this problem?
",rosshinkley,2016-04-03 03:39:45
416,2016-03-31 07:21:55,"@rosshinkley : thanks for the inquiry , I switched the project to my linux box and it works on it. I suppose that there was a issue with my windows node js installation.

Eric
",erch,2016-04-03 03:39:45
416,2016-04-03 03:39:45,"@erch Thanks for the response, sounds like it's resolved.  If this crops up again, feel free to reopen/open a new issue.
",rosshinkley,2016-04-03 03:39:45
415,2015-12-26 05:40:19,"As I mentioned in #414, `type()` has an issue that `done()` is called before Electron actually fires an input event.
This is an limitation of Electron's API, but it causes populating a long text into an element to fail in a certain situation.

So this pull request add a `populate` action to provide a more reliable way to populate a text.
",nodaguti,2016-02-01 06:41:46
415,2015-12-27 20:11:53,"yikes, i had a feeling that API is asynchronous. i don't like adding two methods to do nearly the same thing, but we're definitely going to need to solve this. i'll open an issue on electron to see if they have any advice.
",matthewmueller,2016-02-01 06:41:46
415,2016-01-28 18:49:05,"As reported in #394, the new version of type() breaks backward compatibility, so for those applications where it's preferable to simply set the value, instead of sending keystrokes and potentially appending to an existing value, it would be good to have a supported method that works the way type() used to.

Workarounds of course include writing, rather verbosely,
`nightmare.evaluate(function(selector, value) { document.querySelector(selector).value = value; }, selector, value);`
(neglecting the focus/blur that I mentioned above)
",yoz,2016-02-01 06:41:46
415,2016-02-01 06:41:46,"thanks for this PR, i've added an `.insert()` command based on the feedback here.

`.type()` should be more robust now, but i recommend you use `.insert()` if you don't care about the keyboard events.
",matthewmueller,2016-02-01 06:41:46
414,2015-12-26 05:33:20,"I found that `nightmare.type()` does not wait for actually finishing the typing since v2.1.0 (i.e. starting to use `sendInputEvent`), which causing populating a long text into an input element to fail in an certain situation.
I created a sample application to describe this issue:

https://github.com/nodaguti/nightmare-type-issue

In this app, `click('[type=submit]')` is executed before finishing to type a long message, resulting that only a partial message is submitted.

This issue is annoying especially when you test a login page or something like that because you have to put `wait(100)` before every `type()` actions to ensure the entire user ID and password are populated.

`type()` is still useful to trigger keyboard-related events like `keypress` properly, so I suggest adding another action `populate(selector, text)` to enter a text into an element synchronously by executing `element.value = text`.

I also created a pull request to implement `populate` action.
",nodaguti,2016-02-01 06:39:49
414,2015-12-27 20:18:51,"Let's track this issue: https://github.com/atom/electron/issues/3930
",matthewmueller,2016-02-01 06:39:49
414,2015-12-29 03:20:24,"Thanks for creating an issue for Electron about this problem!
Indeed the root of this issue lies `sendInputEvent` 's asynchoronous, so it's perfect if it is resolved on Electron side.
",nodaguti,2016-02-01 06:39:49
414,2016-01-12 23:52:08,"Okay this is turning into a pretty tricky issue. According to atom/electron#3930, there's not a good way to track asynchronous events. Right now I'm considering two options but could use some feedback.

1) Send less events. Programmatically set the value, then trigger the last character's events (like you're just finishing typing something)

2) Keep current functionality. I've tested it manually, and I haven't been able to reproduce this issue on smaller bodies of text (yet), so it at least it seems somewhat rare. Add an point in an FAQ on how to either override or add a custom action like populate to nightmare (via `.action()`)

I'm leaning towards 1), but I could use some feedback :-)
",matthewmueller,2016-02-01 06:39:49
414,2016-01-13 22:30:04,">  I haven't been able to reproduce this issue on smaller bodies of text (yet)

i've had intermittent failures typing small chunks of text (email addresses) :/
",stephenmathieson,2016-02-01 06:39:49
414,2016-01-13 22:36:53,"I'll be adding this once there's a version bump in electron: https://github.com/atom/electron/pull/4080

:-)
",matthewmueller,2016-02-01 06:39:49
414,2016-01-14 03:32:27,"rad dude =)
",stephenmathieson,2016-02-01 06:39:49
414,2016-01-27 16:18:34,"Glad it's not just me.  Rather than just a +1, I thought I'd share a workaround.

I often experience problems when using `type` back to back, where part of the first field's text is intermittently typed into the second field.  For example:

<S_CODE_TOKEN>

You can easily end up with fun stuff like a username set to `userna` and a password set to `mepassword`.  I found that adding a long enough `wait` call between two `type` calls avoids this for now.

Looking forward to the full fix, thanks in advance for following up.
",the-t-in-rtf,2016-02-01 06:39:49
414,2016-01-28 05:47:59,"hey guys, sorry for the delay on this, i know this is not in a great state right now.

I tested out `sendInput` and it looks like `sendInput` will not work as I was hoping. it will send `input` events, but not `keydown`, `keyup` and `keypress` events. You can read more about it here: https://github.com/atom/electron/issues/3930#issuecomment-172671004

The goal is to make it as much like pressing keys as we can. Unfortunately, there's no way to send keyboard events serially, so I think the approach I will try next is:

**typing ""hi"":**

<S_CODE_TOKEN>

the delay will be used to mimic human typing behavior, but more importantly it should ensure that the events are done in order.

Let me know if you have anything thoughts on this otherwise I plan to fix this over the weekend.

/cc @zcbenz in case he has any other ideas :-D
",matthewmueller,2016-02-01 06:39:49
414,2016-02-01 06:39:45,"this is now in 2.1.5 :-)

i've also added an `.insert()` command to handle entering text when you don't need the keyboard events.
",matthewmueller,2016-02-01 06:39:49
413,2015-12-25 23:27:13,"I want to send page down input events to the browser window to scroll down instead of scrollTo()

It seems that the keycode is 34, but should i use type() for this and not a special function?
",rrva,2016-04-11 14:00:59
413,2015-12-26 03:35:17,"i believe you can pass something like this to the type function:

https://github.com/atom/electron/issues/2269#issuecomment-147362688

I'm not sure what page down is, but it should be in hex.
",matthewmueller,2016-04-11 14:00:59
412,2015-12-25 17:39:29,"Closes #408 

Feel free to reject allowing `object` strings to be typed.
",chrisgeo,2015-12-25 23:24:03
412,2015-12-25 23:24:01,"incorporated your changes and tests. thanks!
",matthewmueller,2015-12-25 23:24:03
411,2015-12-24 12:30:10,"Nightmare works fine when we start with...

<S_CODE_TOKEN>

assuming cnn.js has....

<S_CODE_TOKEN>

is there a way to write the whole code inside X Virtual Frame Buffer, so that we can execute in normal way

<S_CODE_TOKEN>
",sriducati,2016-01-06 19:01:18
411,2015-12-25 03:01:05,"You can use [headless](https://github.com/kesla/node-headless) to create xvfb child process for you. And get the screen id of background xvfb. Then set DISPLAY=:id to process.env. So that when you start nightmare program, it will find its screen automatically.
",dingziran,2016-01-06 19:01:18
411,2016-01-04 22:55:51,"Possible duplicate of #224.

I've had reasonable luck with running `Xvfb` on its own.  See [this comment](https://github.com/segmentio/nightmare/issues/224#issuecomment-141575361) for an example.
",rosshinkley,2016-01-06 19:01:18
411,2016-01-06 19:01:17,"yep, dup of #224
",matthewmueller,2016-01-06 19:01:18
410,2015-12-24 11:51:09,"Support [Chrome command line switches](https://github.com/atom/electron/blob/master/docs/api/chrome-command-line-switches.md) (e.g. proxy-server, ignore-certificate-errors).
",juanpaulo,2015-12-25 23:13:40
410,2015-12-25 23:13:38,"wow awesome, thanks!
",matthewmueller,2015-12-25 23:13:40
410,2016-05-12 16:38:49,"Hey, can we change proxies on the fly or just on the opening of nightmare?
",catblade,2015-12-25 23:13:40
410,2016-07-19 08:04:06,"using proxy-server switch use http proxy,
how can I set it to sock proxy ?

Thanks
",geostant,2015-12-25 23:13:40
410,2016-07-19 08:31:26,"This PR adds support for electron's [Chrome command line switches](https://github.com/electron/electron/blob/master/docs/api/chrome-command-line-switches.md). I haven't tried changing proxies on the fly nor use socks proxy so I can't really say that it works or not. Feel free to try them yourself and please don't forget to share how you did it if it works! ;)
",juanpaulo,2015-12-25 23:13:40
410,2016-11-27 10:55:25,@catblade have you found how to change proxies on the fly? I'm going to open a issue for  that.,wiliame,2015-12-25 23:13:40
410,2016-11-28 17:13:23,@wiliame There is a way.  I'll get you a code snippet this evening.  ,catblade,2015-12-25 23:13:40
410,2016-11-28 17:31:07," @catblade thanks, I figured it out.

https://github.com/segmentio/nightmare/issues/908

I'm now trying to figure this other one:

https://github.com/electron/electron/issues/8089",wiliame,2015-12-25 23:13:40
409,2015-12-24 03:40:32,"<S_CODE_TOKEN>

Right now `.end()` force kills the process, and on OSX this makes the OS prompt you the next time you open it, asking if you meant to kill it and if you want to reopen the process again. I'm spinning up and closing down a ton of instance rapidly, so my OS after a while looks like this:

![](https://cldup.com/KVjMblaitc.png)

Each one of these is a lingering process that is only closed by clicking ""no"" - and eventually I get an ENFILE error because there are too many processes open.
",contra,2016-03-31 02:52:43
409,2015-12-24 20:24:23,"I think killing with a SIGHUP will fix this.

A temporary workaround:

<S_CODE_TOKEN>
",contra,2016-03-31 02:52:43
409,2015-12-25 23:16:39,"haha woah. really surprised that this hasn't come up before. needs more investigation
",matthewmueller,2016-03-31 02:52:43
409,2016-03-30 03:14:01,"I believe this was fixed in #487.  @contra can you verify?
",rosshinkley,2016-03-31 02:52:43
409,2016-03-31 02:52:43,"Can't confirm, not using it rn - will close though and if anybody else hits this we can reopen - thanks.
",contra,2016-03-31 02:52:43
408,2015-12-24 01:52:26,"This is a regression from previous nightmares:

<S_CODE_TOKEN>

Simple Test Case:

<S_CODE_TOKEN>

Runner.js will crash because you can only split strings, not integers.

I'll be submitting a pull request in the morning when I have some time to make the quick fix.
",chrisgeo,2015-12-26 02:41:00
407,2015-12-23 20:46:10,"if you spin up 10 nightmare processes, you get nasty console messages about an event emitter leak because 10+ listeners will be attached to process. this tells node everything is okay and we meant to do this.
",contra,2015-12-23 20:55:14
407,2015-12-23 20:55:13,"awesome, thanks. we still need to cleanup after our emitters better #282, but at least we won't get that annoying warning all the time.
",matthewmueller,2015-12-23 20:55:14
407,2016-01-05 19:10:45,"Any idea when this will make it in?

nvm: I had an old version.
",jimthedev,2015-12-23 20:55:14
406,2015-12-23 15:49:43,"Hi!

I'm planning to use nightmare as the headless browser for my mockup generator: https://github.com/fabrik42/responsive_mockups/pull/6

However, I can not figure out how to use the Nightmare API without the `vo` lib with pure generator functions. I created this simplified code to show what I mean:

<S_CODE_TOKEN>

At the moment, this will spawn up three electron processes and they just seem to stay idle without ever finishing or taking the screenshot.

I'm not very familiar with generator functions in JavaScript, so I'm happy about every hint. :)
Am I missing something here?

Cheers,
Chris
",fabrik42,2015-12-26 10:41:02
406,2015-12-23 19:18:37,"generators on their own do not do control flow, you have to pair them with libraries like `vo` or `co`, so your example will never actually run the generators.

To use this library without generators though, you can do:

<S_CODE_TOKEN>

or `.run(fn)` if you don't want to stop the electron process after running
",matthewmueller,2015-12-26 10:41:02
406,2015-12-26 10:41:02,"Hi Matthew,

thanks for the heads up - I think I got it now. :)

My code didn't work because Nightmare works asynchronously so it didn't make sense to return it as an argument of a yield statement.

Closing this ticket now, happy holidays!
",fabrik42,2015-12-26 10:41:02
405,2015-12-23 10:59:03,"After opening one instance then in series loading 10,000 pages (sometimes it happens even lower, around 1000) this happens:

<S_CODE_TOKEN>

and the process crashes
",contra,2016-07-09 16:19:21
405,2015-12-23 19:42:30,"@contra can you try again, this time with `DEBUG=nightmare*`? That may help with debugging this issue. May also be a memory leak.
",matthewmueller,2016-07-09 16:19:21
405,2015-12-23 20:48:47,"Solved the problem by reusing a new nightmare instance for each request, but the overhead on this is making everything quite a bit slower. I think this demonstrates that it's a leak in the nightmare instance that was loading 10K pages and not a leak in any of the other application code.
",contra,2016-07-09 16:19:21
405,2016-01-15 16:04:23,"FWIW, I was able to recreate this behavior, but even after sifting through the `DEBUG` data and peeking through Electron output, nothing really stood out.  This does smell of a memory issue, but `htop` data seems to disagree with that hypothesis.  I'll take another swing at that as time permits.

I also noticed (mostly by accident) if there is a network interruption, Nightmare seems to fail silently and will also produce this behavior.  Did you happen to have a networking issue?
",rosshinkley,2016-07-09 16:19:21
405,2016-04-11 13:10:49,"Unfortunately, creating a new Nightmare instance for every request seems to also have issues. See #561.
",rosshinkley,2016-07-09 16:19:21
405,2016-04-13 18:36:14,"@contra Are you still experiencing this problem?
",rosshinkley,2016-07-09 16:19:21
405,2016-04-13 18:36:57,"@rosshinkley I don't think it was ever fixed, I'm not using this for anything right now though.
",contra,2016-07-09 16:19:21
405,2016-07-09 16:19:21,"Closing for lack of info/age.  If you come across this problem again, feel free to reopen/submit a new issue.
",rosshinkley,2016-07-09 16:19:21
405,2016-07-10 04:09:40,"@rosshinkley Did you push a fix for the problem? I don't think it disappeared on its own. You said earlier you were able to reproduce it, is it still happening for you?
",contra,2016-07-09 16:19:21
405,2016-07-22 21:23:17,"@contra I haven't been able to reliably reproduce without a networking issue.  I'll see if I can dig out the test script and try it again against the current version.
",rosshinkley,2016-07-09 16:19:21
405,2016-07-29 16:19:13,"Also getting this error. Don't seem to have any networking issues and I'd be surprised if it was a memory issue as I've got only a very basic script here. I can't see anything in the debug logs that's helpful, but just in case here's the end of it:

<S_CODE_TOKEN>

No idea why the logs of `into #new-todo +0ms.type()` are screwed up like that - maybe it's related?
",willclarktech,2016-07-09 16:19:21
405,2016-08-08 16:41:02,"@contra To cut out networking issues, I propped up a server locally to issue requests to (responding with plaintext), then issued 100k sequential requests to that service with a single Nightmare instance.  Nightmare did not hang.  I'm thinking about propping up a minimal HTML payload, then adding javascript and/or HTML and running requests against that to see if it's a caching issue or a memory issue or... something.  If you've got ideas, I'd love to hear them.

@LikeJasper I don't think I've ever seen `debug` behave like that... I wonder if it's interpreting a backspace or non-character escape?  If you could put together a minimum case that reproduces that behavior, I'd love to see that too.
",rosshinkley,2016-07-09 16:19:21
405,2016-08-08 17:06:18,"@rosshinkley Well, it's probably more than 100k requests total from the instance itself. I opened 10k requests, and each page probably had ~100 resources on it (CSS, JS, Images, etc.). You should try sending 100k requests to a more suitable test that doesn't load instantly to rule out race conditions (https://mail.google.com/ ?)
",contra,2016-07-09 16:19:21
405,2016-08-08 17:14:34,"@contra I'm trying to keep the tests local because I _have_ gotten some aberrant behavior with flaky networks.  (The kind of stuff that is bordering on impossible to reproduce without infrastructure that I just haven't had time to play with yet.)  That's why I was tinkering with the idea of making generated payloads that would simulate multiple assets of varying sizes.  I'd also prefer to keep whatever I'm testing against local as then I'm guaranteed to know what assets are being loaded.  Being able to make assertions about what is being loaded will help narrow what's actually wrong.

It may also be worth introducing an artificial networking bottleneck to simulate poor bandwidth.

At any rate, the biggest problem with these sorts of tests is time: it's going to take some tinkering to figure out a semi-reliable crash condition (if there is one).
",rosshinkley,2016-07-09 16:19:21
405,2016-08-08 17:31:56,"@rosshinkley Understandable, try delaying the response from your server by a couple of seconds: `setTimeout(() => res.status(200).end(), 5000)`

I was 99% sure it had something to do with a race condition while waiting for requests to finish.

If you have a repo w/ your test case I can try to modify it to reproduce.
",contra,2016-07-09 16:19:21
405,2016-08-29 14:51:48,"@contra I haven't had time to address this as yet, but I'll post here when I build a working test case. :)
",rosshinkley,2016-07-09 16:19:21
405,2016-08-29 15:09:58,"@rosshinkley Don't think I've introduced any backspaces or non-character escapes myself, but I'll see if I can put together a minimal case to reproduce the weird logging.
",willclarktech,2016-07-09 16:19:21
404,2015-12-23 09:24:56,"> # UPDATE
> 
>   I have found out that this is the same issue that #395 

Hi, I'm trying to run my code (it's very similar to the example code) and it's not working. When I launch my code with the show option to true, in the developers tools console shows up the next text:

<S_CODE_TOKEN>

Otherwise, it runs ok with the release 2.0.8. and release 2.0.9. ~~I'll check if code still working properly with the release 2.1.0~~. My code stops working with 2.1.0

You can reproduce the issue with this code:

<S_CODE_TOKEN>
",gabrielperales,2015-12-23 10:29:59
404,2015-12-23 19:14:05,"For those that are running into this, the solution is changing `web-preferences` => `webPreferences`.
",matthewmueller,2015-12-23 10:29:59
403,2015-12-22 16:13:04,,sriducati,2015-12-22 16:17:27
403,2015-12-22 21:43:55,"@sriducati you do realize how OSS works, right? People are donating thousands of their hours to provide a solution to something that they think someone might find useful and instead of you putting the same effort like others to fix an issue are instead completely demeaning the project? I get utterly disgusted when I see these reactions. 
",shri3k,2015-12-22 16:17:27
402,2015-12-22 14:00:23,"Hi All,

What would be the best way to keep looping the browsing while a ""next"" link is available and then return the result to the main process.

The below example returns the first search result for the first page. How to result all first links from each search page?

<S_CODE_TOKEN>
",SantoshSrinivas79,2015-12-23 17:34:57
402,2015-12-23 17:21:19,"A hastily thrown together sample:

<S_CODE_TOKEN>

You could, of course, remove the `MAX_PAGE` guard, but if you're searching something more popular, the script would take _much_ longer to complete.
",rosshinkley,2015-12-23 17:34:57
402,2015-12-23 17:34:57,"Thank you @rosshinkley 
",SantoshSrinivas79,2015-12-23 17:34:57
401,2015-12-22 01:30:03,,naturalethic,2015-12-22 18:24:54
401,2015-12-22 18:18:49,"I switched it to use activeElement and added a unit test.
",naturalethic,2015-12-22 18:24:54
401,2015-12-22 18:24:59,"thanks @naturalethic !
",matthewmueller,2015-12-22 18:24:54
400,2015-12-22 00:30:01,"As I have event handlers that update state when a text field is blurred, I must have a way to blur the element, and clicking on a button should do that.
",naturalethic,2015-12-22 18:24:55
399,2015-12-21 16:35:19,"Fixes #394.
",rosshinkley,2015-12-21 18:56:19
399,2015-12-21 18:56:17,"awesome, thanks @rosshinkley!
",matthewmueller,2015-12-21 18:56:19
398,2015-12-21 12:52:02,,cevek,
398,2015-12-21 16:46:15,"Two methods, depending on what you need:
1. Use [`webPrefereces.partition`](https://github.com/atom/electron/blob/master/docs/api/browser-window.md#new-browserwindowoptions).  Example:

<S_CODE_TOKEN>
1. Use [`options.paths`](https://github.com/segmentio/nightmare#paths).  Example:

<S_CODE_TOKEN>
",rosshinkley,
398,2015-12-25 03:04:19,"@rosshinkley Could the second method used to share session between different machines?
",dingziran,
398,2016-01-04 23:00:21,"@dingziran _Great_ question.  I'd suspect the answer to that is not a clear ""yes"" or ""no"" - it'd probably depend on how strict the site-in-question's security policy is and if it does any sort of request origin validation.

I'll put this one on the list, though.  It's probably worth a peek. :)
",rosshinkley,
398,2016-03-04 06:09:07,"@rosshinkley I am new to nightmare, could you please explain how to use partition to share session between multiple instance of nightmare?
",Velissel,
398,2016-03-04 13:50:28,"@Velissel I took a minute to take another look at this.  Provided your instances share partition information, session information is shared across instances.

However, if you open an instance, log in, and open a second instance with the same persistence data before closing the first, the session information doesn't appear to be shared (or the data from the first session isn't persisted or shareable yet).  I'm still digging into that.
",rosshinkley,
398,2016-03-27 03:17:28,"@rosshinkley, In my case, persist does not keep session no matter if I start second instance after or before close of first one
",Velissel,
398,2016-06-28 11:46:19,"Maybe related to https://github.com/electron/electron/issues/5673 ?
",albinekb,
397,2015-12-21 05:14:45,"I might be misunderstanding [this line](https://github.com/segmentio/nightmare/blob/master/lib/actions.js#L297), my apologies beforehand if my expectation is off:

<S_CODE_TOKEN>

This doesn't seem to throw an error/exception when using vo, example code below:

<S_CODE_TOKEN>

For some odd reason, the path to `url = yield nightmare.url()` gets called instead of an exception being thrown.
",chrisgeo,2016-05-27 19:51:02
397,2015-12-21 06:21:15,"Are you missing a `yield` in front of the `nightmare.goto` line?
",yoz,2016-05-27 19:51:02
397,2015-12-21 12:13:54,"@yoz The results are the same, a yield is only needed when you want to return the result. You could run the script in this incarnation as well and it will yield the same result:

<S_CODE_TOKEN>

Output:

<S_CODE_TOKEN>

Now, when you remove the ending `wait(100)`, it does throw the exception but the process hangs without exiting:

<S_CODE_TOKEN>
",chrisgeo,2016-05-27 19:51:02
397,2016-04-12 01:19:49,"Hi. It also occurred to me.
And this seems Electron's issue or design.

waitfn() in Nightmare will perform dom search javascript every 250ms.
But suddenly javascript stop responding.

<S_CODE_TOKEN>

This is not always happened but also specific page cause it.
when no javascript response come, i saw the logs that Electron dispatched messages

<S_CODE_TOKEN>

Electron should dispatch ""response"" or ""error"". But after these message dispatched, never happened.
I guess this is electron's bug or design.

I'm keeping research what happened in electron.

If someone want to fix instantly. Just add long wait before .wait(""#dom"") to over that event
`.wait(10000)`
Or, use setTimeout your self.
",yuki-sato,2016-05-27 19:51:02
397,2016-05-27 19:51:01,"I believe this issue was fixed in #458, so I'm closing it.  If this is still a problem, feel free to reopen/open a new issue.
",rosshinkley,2016-05-27 19:51:02
396,2015-12-20 02:17:36,"#372

<S_CODE_TOKEN>
",Alex0007,2015-12-27 20:09:13
396,2015-12-22 02:42:52,"thanks! can you provide a usage example for me? also we'll need tests and an update to the readme.
",matthewmueller,2015-12-27 20:09:13
396,2015-12-24 11:52:43,"Just bumped into this myself and thought it was better to support all Chrome command line switches rather than just `--proxy-server`. #410 
",juanpaulo,2015-12-27 20:09:13
396,2015-12-27 20:09:13,"closing since #410 landed, thanks guys!
",matthewmueller,2015-12-27 20:09:13
395,2015-12-19 04:40:03,"I updated to 2.1.0. And after inject jquery.js. The console of electron print ""Uncaught ReferenceError: __nightmare is not defined"".
",dingziran,2015-12-21 18:40:42
395,2015-12-19 05:08:42,"weirddd. can you give me the code snippet you're using?
",matthewmueller,2015-12-21 18:40:42
395,2015-12-19 05:21:45,"@matthewmueller 
maybe it is not caused by inject
The below code will stop during the second yield. 
Ans also ""Uncaught ReferenceError: __nightmare is not defined""

<S_CODE_TOKEN>
",dingziran,2015-12-21 18:40:42
395,2015-12-21 01:55:14,"I tried on an old machine which has installed nightmare 2.0.8. And it is working.
After delete nightmare folder and npm install. The same problem appear.
After npm install nightmare that will update to 2.1.0. Also show the same error.
Maybe it is because of electron-prebuilt?

I am using windows 10, node 4.2.
",dingziran,2015-12-21 18:40:42
395,2015-12-21 07:01:06,"also not work in ubuntu 14.04 desktop :''' (
",dingziran,2015-12-21 18:40:42
395,2015-12-21 08:02:54,"I find the problem. After delete web-preferences config. Everything is ok.

<S_CODE_TOKEN>

After some test, partition is not working anymore. Is that a bug?
",dingziran,2015-12-21 18:40:42
395,2015-12-21 08:13:24,"@dingziran Oh, I think it might be electron renaming it's options, try `webPreferences`.
",matthewmueller,2015-12-21 18:40:42
395,2015-12-21 17:07:34,"@dingziran @matthewmueller Matt you are right, it wasn't working for me and I renamed the web preferences and it did work. Thanks.
",felixcrive,2015-12-21 18:40:42
394,2015-12-18 20:07:12,"After updating to nightmare@2.1.0 the way the `.type()` method works seems to have changed. In 2.0.9 and before, `.type()` would clear out the element and then enter the specified text, but after updating to 2.1.0, the specified text is typed in, but the existing text is not cleared out. Is this the desired outcome or a bug? If this is the desired behavior, is there a way to delete the text inside an element? With 2.0.9 I could just do `.type(selector, '')` to clear the text from an element, but now that will just add an empty string to the beginning of the value already there.
",ns-jdripps,2015-12-21 18:56:19
394,2015-12-18 22:17:57,"ahh shoot, hadn't considered that. definitely a bug, if the value is falsey it should probably clear it out.
",matthewmueller,2015-12-21 18:56:19
393,2015-12-18 16:04:04,"Currently `nightmare` assumes that it will be running inside a normal `node.js` app so it ends using `child_process.spawn(/path/to/electron)` to do its job, what i'm proposing is support a way to execute `nightmare` inside a native electron app, without spawning anything just using it like a normal module.

this feature will let `nightmare` to be running with a workers manager module (something like [electron-workers](https://github.com/bjrmatos/electron-workers)) and do tasks in scale.

if you are ok i can implement this on my own and send a PR

what i would like is to discuss with you guys is how would you like to support this feature.

some options:
- a new option to the nigthmare constructor? (`Nightmare({ nativeElectronApp: true })`)
- detecting if `nightmare` is running inside `electron` via a run-time condition
",bjrmatos,
393,2015-12-18 18:14:24,"interesting, can you explain to me a little more about what the advantage would be? it seems like the module you linked is also a node process that manages electron processes, it can just manage more than one. 

i guess what i'm trying to understand is what the advantage of this approach is over throwing nightmare behind a node cluster (https://nodejs.org/api/cluster.html)
",matthewmueller,
393,2015-12-18 20:34:13,"the important difference is that currently if i put nigthmare behind a node cluster it will mean that 1 task = 1 electron process (created by `nigthmare`), so if my application need to do 100 tasks in parallel it will mean creating 100 electron process.. there is no electron process re-use and there is the initial overhead of creating and electron process each time per task.

the advantage of [electron-workers](https://github.com/bjrmatos/electron-workers) is **that the logic for worker assignment lives in the electron process** by itself (using node cluster or another algorithm is just an implementation detail in electron-workers, so electron-workers is just an abstraction), if `nigthmare` can support running in a normal electron app, from a node app i can invoke a module with a worker abstraction (can be electron-workers or a custom node cluster script), inside the worker module i can **spawn an electron process with a electron script just one time** and re-use it for many tasks, in the electron script i can `require('nigthmare')` and using it normally, so if my node app need to do 100 tasks in parallel it will mean 1 task spawning the electron process, 99 tasks re-using the electron process created before.. just one electron process created per worker :)
",bjrmatos,
393,2015-12-18 20:41:26,"in other words.. with my use case in mind, there is no need for `nigthmare` to spawn an electron process per instance created, it could just create a browser window each time per instance (assuming that `nigthmare` will be running inside an electron app/script).

another advantage gained with `nigthmare` supporting this feature is that the developer can have control of the electron process by itself, so anyone can implement custom funcionality (#391, #373)
",bjrmatos,
393,2015-12-22 04:53:16,"yah okay thanks, I understand what you mean. I guess the two issues in my mind that i see are:
1. major refactor of the existing codebase (not a huge deal)
2. more importantly, anytime you want to use nightmare, you'd need to run it using the electron executable. this is fine if you're running it standalone, but if you need to integrate it with a node server or something, you're basically rewriting the existing node layer yourself.

i'd be interested in figuring out the proper separation for the electron process to run and be useful standalone if you want to run it on it's own, but for the sake of ease of use, I don't see the node layer going away.
",matthewmueller,
393,2015-12-22 19:33:58,"> I don't see the node layer going away.

yes, that was not my intention :smile: just figure out how to make it run stand-alone.. let me experiment with a run-time condition (detecting if nigthmare is running inside a electron app) and see how it looks!
",bjrmatos,
393,2015-12-22 20:11:49,"okay sweet :+1: 
",matthewmueller,
393,2016-01-25 18:12:10,"+1 for this, although I'm not sure I''m totally following everything mentioned above.  It does seem like it's related to my use case which is that I'd like to build an Electron app that's a GUI for taking screenshots.  Being able to take many screenshots all at once (or in quick succession) which varying options.  
",FranciscoG,
393,2016-03-22 16:03:38,"Waiting for it!
",tomsotte,
393,2016-03-30 07:36:02,"Hello, are there any updates? I'd really like to know because my project is based on nightmare, and so, if there won't be any progress on this I may have to find an alternative
",tomsotte,
393,2016-06-21 01:06:58,"Ideally you would detect and/or have options to specify that nightmare should spawn Electron process itself or that it is already running in an Electron process and use it natively.  

I want this functionality now where I have an app that runs as a service (node) as well as a UI (electron).
When running the UI, I will now have additional ram usage due to additional electron process, though I can't avoid the doubling up of electron-prebuilt directory.
",TimNZ,
393,2016-06-22 21:03:24,"An issue with Nightmare not running inside Electron just became real.

I just realised that electron-packager builds an executor that won't accept an arbitrary script file on the command line e.g. 'electron index.js'  

This means it complicates create a package for an Electron app that utilises Nightmare.

I can work around this, but right now without custom packaging requires the packaged electron plus electron-prebuilt to be installed doubling up on disk usage.  Memory use is less of a concern.
",TimNZ,
393,2016-08-29 06:59:44,"how's it going? 
",starInEcust,
393,2017-01-22 05:18:53,"@bjrmatos hi there!
I just ran across a situation where I am required to have nightmare run inside an already executing electron application, and I noticed you said you might have experimented with this.

I was wondering if you had anything working/WIP that I could use as a base -- otherwise I am going to implement this shortly! Thanks!",Timer,
393,2017-01-22 07:29:59,Nevermind! I managed to get nightmare to use the already running electron instance. Sorry for bugging you @bjrmatos.,Timer,
393,2017-01-22 12:48:05,@Timer Could you share a link to how you managed to do that? I have an idea for a project that will need to do just that. (nightmare using electron instance),yourfavorite,
393,2017-01-22 16:10:43,@yourfavorite I need to do some tweaking and I'll push it to my fork of nightmare. I broke the existing functionality of running within node and always assumed to not launch electron. Once I have the changes working for both use cases I'll drop a line on this thread. :),Timer,
393,2017-01-22 17:24:20,@yourfavorite see https://github.com/segmentio/nightmare/pull/967 👍 ,Timer,
392,2015-12-18 01:00:00,"This PR updates `nightmare.type()` to use the native send input command and trigger the right events.
",matthewmueller,2015-12-18 01:04:18
391,2015-12-17 22:44:51,"initial thoughts:
- support adding requires that pass in the window

<S_CODE_TOKEN>

This would happen after the browser window has been initialized
",matthewmueller,2016-04-03 03:36:05
391,2015-12-22 04:38:51,"It might also make sense to pass `parent`.  That would grant implementing custom actions in Nightmare with custom downstream actions in the Electron process.  Thoughts?

---

Pondering out loud: is there a reason to prefer using `require`?  If so, why does `action` not offer a `require` option?  Would the plugin paths be passed in with options, or added later?
",rosshinkley,2016-04-03 03:36:05
391,2015-12-22 04:44:26,"It would make more sense to implement #393 and let nigthmare focus on its main job
",bjrmatos,2016-04-03 03:36:05
391,2015-12-22 04:46:58,"inevitably, people will start to ask more and more features outside nightmare's job, it will be more easy to let nigthmare run as a electron module, and let developers do what they want with the electron process
",bjrmatos,2016-04-03 03:36:05
391,2015-12-22 04:55:51,"@rosshinkley i don't see a way you'd be able to pass `parent`, it's transferring over IPC and parent isn't serializable. 

The reason for doing the require is that we could basically tell the electron process to require a file on it's own. I don't like the solution all that much, but I haven't come up with a better one.
",matthewmueller,2016-04-03 03:36:05
391,2015-12-22 05:30:52,"@matthewmueller did I misunderstand?  I thought the intent was passing paths to require over IPC (or possibly, as command-line arguments akin to `paths`) and requiring them in the electron process, not vice-versa.  No IPC serialization required.  Parent should then be passable.

I'll need to take another pass at this when I'm fresh and have coffee.  I'll try to carve out some time.
",rosshinkley,2016-04-03 03:36:05
391,2015-12-22 06:46:27,">  I thought the intent was passing paths to require over IPC (or possibly, as command-line arguments akin to paths) and requiring them in the electron process, not vice-versa. No IPC serialization required. Parent should then be passable.

Ahh, sorry I thought you meant `parent` as in the parent process instance. Yep the original intent is passing paths to files and requiring them in the electron process, though I don't necessarily like this approach, so if you think of something better, I'm all ears. Can you clarify what you mean by `parent` because I'm still not fully sure?

> I'll need to take another pass at this when I'm fresh and have coffee. I'll try to carve out some time.

Haha yah me too, answering issues at this hour is ill-advised :-P
",matthewmueller,2016-04-03 03:36:05
391,2015-12-23 15:41:55,"@matthewmueller I should have been more specific, and the naming conventions are also probably not helping: in `runner`, `parent` is defined as the IPC process.

Re ideas for implementation (I still need to carve out time to experiment): how do you want them?  Should I make a branch on my fork and link to it, set up a PR with ""proposal"" in the header, or something else?  What would you prefer?

---

@bjrmatos I'm on board for having Nightmare be supported inside of Electron (#393), but I don't think you'd want to discard Nightmare as a node module.  (I would argue it's one of the bigger problems with using Phantom/Casper et al.  Usage from node is certainly possible, but a bigger pain.)  I agree that extensibility is currently an issue, but not an insurmountable one.
",rosshinkley,2016-04-03 03:36:05
391,2015-12-23 19:31:59,"@rosshinkley yah, terrible names haha, should probably change them to `node_process`, `electron_process`, and ... `render_process` (?). yah, I'd like to see what you have in mind. PR or commenting in this issue seem reasonable. Would be nice to see some example code, like how a dev would extend it.
",matthewmueller,2016-04-03 03:36:05
391,2015-12-23 23:40:35,"@rosshinkley my intention never was to discard using `nigthmare` as a node module :smile: however for tasks in scale the current state of `nigthmare` is not very efficient, i'm just trying to support a way to run `nigthmare` that let me scale in other ways
",bjrmatos,2016-04-03 03:36:05
391,2016-04-03 03:36:05,"Implemented in #425, merged in 2.3.0.  Closing.
",rosshinkley,2016-04-03 03:36:05
390,2015-12-17 21:56:27,"Add information and a test on how to add your own custom preload script
",matthewmueller,2015-12-17 21:57:10
389,2015-12-17 21:53:00,"**BREAKING:** changed `page-error`, `page-alert`, and `page-log` to `nightmare.on(""page"", function (type, ... ))`

it allows you to hook into the following console events:
- console.log
- console.warn
- console.error

and the following window events:
- alert
- prompt
- confirm

This PR also prevents prompts, alerts, and confirms from freezing the process while emitting events for each.
",matthewmueller,2015-12-17 21:57:04
388,2015-12-17 00:15:48,"hi - I've found myself using with this pattern frequently:

<S_CODE_TOKEN>

How about we include this behavior by default in the click method? Either as is above, or if the overhead for the .wait() is too much it could only enter .wait() if it doesn't find it immediately.

As it currently stands when it doesn't find the element you get an error:

<S_CODE_TOKEN>

Perhaps it also applies equally to some of the other methods too. ie.
- select
- check
- type
- mouseover
- mousedown
",squirmy,
388,2015-12-17 00:19:36,"yah, i agree that it should wait

is that leading to another page? it should wait for the click to happen if there's a page transition: https://github.com/segmentio/nightmare/blob/master/lib/runner.js#L251-L254 before continuing.

unfortunately, i'm not exactly sure how we'd pull this off if it's just waiting for a click somewhere on the page. we could listen for clicks on the top of the window, but if there's a stopPropagation, somewhere, we won't catch it and we'll wait forever. 

open to ideas.
",matthewmueller,
388,2015-12-17 00:36:04,"The .click() above is not leading to another page in this case. Here's my scenario:
- single page application
- user clicks a button which switches the main view
- user is shown a spinner until the data is pulled down
- when we have the data the spinner is removed and the content rendered
  - it's at this point the `.page-next` button is shown

so it goes something like this in nightmare:

<S_CODE_TOKEN>

if i omit the `.wait(.page-next)` i get an error because the spinner is showing for a short duration before the button is shown.
",squirmy,
387,2015-12-15 22:05:16,"I've noticed that you're bundling `0.35.2` which includes additional options for `printToPDF`, including additional paper sizes like `letter`, `A5` etc. 

The current documentation points to an older version of Electron docs which do not show all possible settings. This PR updates the link to reference the docs specifically for `0.35.2`
",jlukic,2015-12-15 23:28:32
387,2015-12-15 23:28:30,"awesome, thanks!
",matthewmueller,2015-12-15 23:28:32
386,2015-12-14 09:04:33,"Hello people below is my code ...

<S_CODE_TOKEN>

It works fine by typing `film` inside seacrhbox. electron ui will also show `autocomplete` class ... but iam not able to fetch html contents within `autocomplete` .. is there any ways to fix this?
",sriducati,2016-04-23 22:28:16
386,2016-04-11 14:10:12,"I believe before 2.1.5, the keydown/keypress/keyup events were not getting sent through Nightmare, and I wonder if that's causing you problems.  Could you upgrade and try again?
",rosshinkley,2016-04-23 22:28:16
386,2016-04-23 22:28:16,"Due to lack of attention and issue age, I'm going to close this issue.  If you're still having this problem, feel free to reopen/open a new issue.
",rosshinkley,2016-04-23 22:28:16
385,2015-12-13 07:20:53,"Option naming of `BrowserWindow` was changed at Electron v0.35. (e.g. `max-width` -> `maxWidth`)

Documentation:
https://github.com/atom/electron/blob/master/docs/api/browser-window.md#new-browserwindowoptions
",rhysd,2015-12-17 18:24:02
385,2015-12-17 18:34:35,"thanks! will change that comment on my end :-)
",matthewmueller,2015-12-17 18:24:02
385,2015-12-18 02:01:32,"@matthewmueller Thanks!
",rhysd,2015-12-17 18:24:02
384,2015-12-13 05:27:54,"mocha-generators is now required in `test/index.js` explicitly.
",rhysd,2015-12-17 17:31:46
384,2015-12-17 17:31:48,"thanks!
",matthewmueller,2015-12-17 17:31:46
383,2015-12-13 05:11:24,"I added `electronPath` option to options of `Nightmare()`.

I added this because I want to use Nightmare for end-to-end Electron app testing (e.g. Nightmare uses Electron v0.35.2 but my app uses new API introduced on Electron v0.35.4).  Nightmare now fixes Electron version.  I agree that it's reasonable bacause Nightmare can't support all versions of Electron.  So I added notation to document.
",rhysd,2015-12-17 22:00:24
383,2015-12-17 22:00:26,"thanks!
",matthewmueller,2015-12-17 22:00:24
382,2015-12-11 20:28:48,"Allow users to automatically accept, automatically ignore, or handle downloads on a per-case basis. Fixes #332 and #371 with the addition of the `ignoreDownloads` option, should fix #151 with the `download` event and the various ways that can be used.
",rosshinkley,2015-12-22 02:00:24
382,2015-12-17 11:15:29,"I reviewed it and tested it. It works great. Thank you so much for doing this.
",wcandillon,2015-12-22 02:00:24
382,2015-12-18 01:41:07,"thanks for putting this together and i appreciate all the work that was put into this. currently this approach adds too much complexity to the API for solving this issue. 

i've thought about this a little bit and i think a better approach might be:
1. By default ignore all downloads
2. If someone wants to download something, provide `nightmare.download(selector|url)` which returns a buffer. if a buffer is not possible, support `path` in the signature to write to a file.
3. When we are downloading something, wait until that download is complete in order to resume.
4. Potentially support progress events via `nightmare.on('progress', fn)` if that's supported

This reduces the API to just:

<S_CODE_TOKEN>

One thing we should also consider is... does nightmare even need to support downloads? Or can we get away with:

<S_CODE_TOKEN>

Are there any advantages to having this in core?
",matthewmueller,2015-12-22 02:00:24
382,2015-12-18 12:38:18,"Firstly - awesome library and great pull request.
I wanted to share a scenario where I am logged in with a session and need to click on a button that runs some javascript that POSTS a form with a unique URL and data set and can only be requested once (each submission creates a new ID at the end of the URL so cannot be replayed).
The response is a download attachment (Content-Disposition: attachment).

I need to get get the response attachment somehow - an API would allow for that. Currently I haven't figured out how to do this.

Thanks
",subcontact,2015-12-22 02:00:24
382,2015-12-18 17:59:05,"@subcontact hmmm.. that's a tough one, have you tried getting it to work with the current PR?
",matthewmueller,2015-12-22 02:00:24
382,2015-12-21 15:41:45,"@matthewmueller Thank you for your reply, and I'm sorry I couldn't get back to this sooner.  Also, apologies in advance for the missive.  Responding to your feedback:

> By default ignore all downloads

Seems reasonable to me.  I can do that as time permits.

> If someone wants to download something, provide nightmare.download(selector|url) which returns a buffer. if a buffer is not possible, support path in the signature to write to a file.

I don't understand what you're asking, what should the selector provided do?  Click?  As for providing a URL, would that be a simple get?  And with the buffer, no, I don't think that is possible.  Electron supplies the filepath and a method to override the filepath.

> When we are downloading something, wait until that download is complete in order to resume.

Blocking on each download isn't how browsers work.  From a test automation standpoint, I can certainly understand the need, but from a purely automation standpoint, I'm not sure I agree.

> Potentially support progress events via nightmare.on('progress', fn) if that's supported

Yes, that's supported (and can be supported with the reduced API).

Re: getting away with a simple request: no, I don't think you want to do that.  If you're making an authenticated request for a resource (thinking of something like a request to a private link in say, Dropbox), you want to do that from within the context of Electron.  Copying the resource URI and issuing a plain GET will almost certainly result in failure.  This (I think, and I'm sorry if I'm misreading here) gets to what @subcontact's problem - authenticated downloads won't work with simple requests.

Re: keeping at least some form of downloads in core, that's a _great_ question.  My answer to that would be a qualified no.  How downloads are handled is probably going to be dependent on use case.  To that end, I think the blocking `.download()` and the non-blocking methods in this PR should be broken out into at least one (probably two?) plugins.  

The problem with that is binding to `will-download`.  A new method to hook into `will-download` with a custom handler could be exposed, or (with modification to pass a child handler) the custom event bindings in #367 could be used.  Thoughts?

I'm willing to reduce the API as requested, and if you think it's a good idea, I will close this PR and open a fresh one with those changes.
",rosshinkley,2015-12-22 02:00:24
382,2015-12-21 18:55:34,"@rosshinkley thanks for the detailed response!

> I don't understand what you're asking, what should the selector provided do? Click? As for providing a URL, would that be a simple get? And with the buffer, no, I don't think that is possible. Electron supplies the filepath and a method to override the filepath.

Yah, you're right, when I proposed that I was thinking about it in terms of what the click/mouseover/etc methods do, but that's not the same as download. 

> Blocking on each download isn't how browsers work. From a test automation standpoint, I can certainly understand the need, but from a purely automation standpoint, I'm not sure I agree.

I was proposing this to handle `wait('downloads-complete')` piece that you added in this PR. Haven't investigated how that would work internally though.

> Re: getting away with a simple request: no, I don't think you want to do that. If you're making an authenticated request for a resource (thinking of something like a request to a private link in say, Dropbox), you want to do that from within the context of Electron. Copying the resource URI and issuing a plain GET will almost certainly result in failure. This (I think, and I'm sorry if I'm misreading here) gets to what @subcontact's problem - authenticated downloads won't work with simple requests.

From my understanding, a POST request triggers the download, so whether this is a plugin or not, we'd need to at least know how to do that with core.

> Re: keeping at least some form of downloads in core, that's a great question. My answer to that would be a qualified no. How downloads are handled is probably going to be dependent on use case. To that end, I think the blocking .download() and the non-blocking methods in this PR should be broken out into at least one (probably two?) plugins.

Yah, I agree.

> The problem with that is binding to will-download. A new method to hook into will-download with a custom handler could be exposed, or (with modification to pass a child handler) the custom event bindings in #367 could be used. Thoughts?

Yah, I think we should add this regardless, we're already hooking into the other events. Seems like it would be as simple as:

`win.webContents.session.on('will-download', forward('will-download'))`

Then you can hook into it with an action:

<S_CODE_TOKEN>

Haven't thought through exactly how this would work, but that would be the approach I would investigate.
",matthewmueller,2015-12-22 02:00:24
382,2015-12-22 02:00:24,"@matthewmueller no problem. :)  Thanks for yours as well!

Tying up some loose ends:

> I was proposing this to handle `wait('downloads-complete')` piece that you added in this PR. Haven't investigated how that would work internally though.

Yeah, I understand the need, and also buy `.wait('downloads-complete')` is problematic.  Totally off the cuff: I think that enforcing one download per `.download()` call would probably work.  It would consist of (more or less) how it works now, but with an extra wait for `will-download` to be caught, and the internal method using the wait-download function.

> From my understanding, a POST request triggers the download, so whether this is a plugin or not, we'd need to at least know how to do that with core.

I was more concerned with the ""authenticated"" part, not with that it was triggered on POST.  I don't _think_ it should matter.  Electron doesn't seem to care what triggered a download, just that one happens.  That being said, it's probably worth propping up a minimal test case to be certain.

> Yah, I agree [to plugins].

The more I think about this, the more sense it makes, and maybe should redirect my attention to #391.  I was thinking about how to extend the Electron process earlier today, because, well...

> Seems like it would be as simple as: `win.webContents.session.on('will-download', forward('will-download'))`

Handling this appropriately seems to require doing some special steps in the Electron process.  In tinkering with `.on('will-download', fn)`, as soon as the `DownloadItem` fell out of the handler scope, Electron would execute whatever behavior had been defined by synchronous completion (almost like the `on` handler is more like middleware, if that makes sense).  The [Electron docs for `setSavePath`](https://github.com/atom/electron/blob/master/docs/api/download-item.md#downloaditemsetsavepathpath) seem to support what I found by experimentation:

> The API is only available in session's will-download callback function. If user doesn't set the save path via the API, Electron will use the original routine to determine the save path(Usually prompts a save dialog).

In other words, trying to do something via event communication would (almost) certainly result in a blocking download dialog.

I think I'm going to close this PR, backburner the download plugins for the moment, and direct my remaining questions to #391 as I think they're more sensible under that topic.  
",rosshinkley,2015-12-22 02:00:24
382,2015-12-23 12:10:10,"@rosshinkley since the merge of this PR seems to be on hold. would you be able to provide some example to download a file using the internals? Sorry, I am new to both electron and nightmare
",SantoshSrinivas79,2015-12-22 02:00:24
382,2015-12-23 18:29:01,"@AspireToCodeBetter TL;DR: At present, you'd have to fork Nightmare and roll your own.

There is currently work being done to add extensions to the Electron process that Nightmare wraps (#391), one of the benefits of this being the ability to attach a handler to `will-download`.  The reason this PR was ultimately closed is because there are several use-cases for `will-download`, leading me to believe they should be broken out into plugins to be used with (as of this writing, incomplete) extending Electron.

When #391 is complete, I'll see to it that the download plugins are completed and put on NPM, and  certainly post a link on this thread and possibly on a few others (#151 and #371 come to mind).
",rosshinkley,2015-12-22 02:00:24
381,2015-12-10 23:35:03,"Hi guys,

Just having an issue with `type` function.
In my code I call 
`yield night.type('div.card__body > input.field-metric', '50000')` 
which is meant to trigger a onChange callback and update some value in an object.
It works perfectly when I fill manually my input on Chrome but when I run tests with nightmarejs value is never updated.

We found a temp fix which is 

<S_CODE_TOKEN>

But we thought it might be a issue you want to have a look into on your side.

Cheers.
",vincentaudebert,2015-12-18 01:16:10
381,2015-12-17 20:39:02,"+1
",mokevnin,2015-12-18 01:16:10
381,2015-12-18 01:16:08,"okay this should be fixed now in `2.1.0`, let me know if it's still broken!
",matthewmueller,2015-12-18 01:16:10
380,2015-12-10 20:53:36,"This fixes the typo.
",libkenta,2015-12-10 21:14:54
380,2015-12-10 21:14:52,"woops, thanks!
",matthewmueller,2015-12-10 21:14:54
379,2015-12-10 13:49:23,"The new actions feature is great, but we need to be able to pass in arguments to the callback
so we can do something like this:

<S_CODE_TOKEN>
",antpaw,2016-01-06 18:43:06
379,2015-12-10 17:24:56,"hm, did you try:

<S_CODE_TOKEN>

?
",matthewmueller,2016-01-06 18:43:06
379,2015-12-10 18:05:14,"no sorry didnt tried that, though done is the first arg, this works indeed. can you help me out with this code here? thanks

<S_CODE_TOKEN>
",antpaw,2016-01-06 18:43:06
379,2015-12-18 01:12:01,"hmm, that looks okay to me. that's just not working at all? 
",matthewmueller,2016-01-06 18:43:06
379,2016-01-06 12:51:32,"this example just hangs (white screen in electron) in the air an doesn't go to the google page, the callback function of vo is never called

<S_CODE_TOKEN>

this code works as expected and writes 'Google' to the bash

<S_CODE_TOKEN>
",antpaw,2016-01-06 18:43:06
379,2016-01-06 16:41:04,"The `DEBUG` output from above yields a clue:

<S_CODE_TOKEN>

From that, it looks like the title action would happen _before_ the goto, which would certainly cause problems.  Actions that add other actions would enqueue them after the last action in the chain.  Consider the following:

<S_CODE_TOKEN>

This will (misleadingly) work: `.googleto()` is the last action in the first chain, and as a side effect, will run the internal `.goto()` enqueued by `.googleto()` before the next nightmare chain.

I don't think that `.action()` is intended to execute other internal actions, and in this case, I think `.use()` may be more appropriate.  Something like:

<S_CODE_TOKEN>

... might yield better results.
",rosshinkley,2016-01-06 18:43:06
379,2016-01-06 18:43:05,"yah, i agree with @rosshinkley. `use` let you bundle a set of actions together, while `action` defines a new method. let me know if this is unclear and maybe i can clear it up in the docs
",matthewmueller,2016-01-06 18:43:06
379,2016-09-23 06:19:51,"The documentation on this is extremely sparse. 

For anyone else who finds this, the way to pass arguments to an action is to pass additional arguments to child.call, like this:

<S_CODE_TOKEN>
",shadowmint,2016-01-06 18:43:06
379,2016-12-28 02:19:50,"I agree with @shadowmint; there definitely needs to be more documentation for passing parameters to custom actions. There's almost nothing in the documentation that I could find, and the actual way you need to do it is not super intuitive - a bad combination.

**Edit:** Also, I just found this which is helpful for passing parameters with non-electron actions: https://github.com/rosshinkley/nightmare-examples/blob/master/docs/beginner/action.md  (Thanks, Ross!) Should be a link to that from the main docs I reckon.",josephrocca,2016-01-06 18:43:06
378,2015-12-10 08:56:13,,cevek,2015-12-18 00:57:03
378,2015-12-10 17:27:16,"May add support for this, but it's really easy to support with `.evaluate`:

<S_CODE_TOKEN>
",matthewmueller,2015-12-18 00:57:03
377,2015-12-10 08:52:33,"<S_CODE_TOKEN>
",cevek,2016-01-28 05:59:55
377,2015-12-10 17:28:53,"Yah it should probably be hidden by default, right now I just want Nightmare to be more stable before hiding it, because if there's errors you can end up with a ton of open electron processes. There's logic in the code right now to hide it, but it's commented out: https://github.com/segmentio/nightmare/blob/master/lib/runner.js#L34-L38
",matthewmueller,2016-01-28 05:59:55
377,2016-01-05 13:52:25,"I've sent a PR to uncomment this out: https://github.com/segmentio/nightmare/pull/426
",jviotti,2016-01-28 05:59:55
377,2016-01-18 21:53:41,"The default is now to hide it. This issue will serve as a reminder to add an option to show it.
",matthewmueller,2016-01-28 05:59:55
377,2016-01-18 23:28:51,"@matthewmueller I just implemented a `showDock` option: https://github.com/segmentio/nightmare/pull/441
",jviotti,2016-01-28 05:59:55
377,2016-01-18 23:35:12,"@matthewmueller BTW, is there an existing issue to specifically tackle the open electron processes problem when an error occurs? I'd love to collaborate on that one.
",jviotti,2016-01-28 05:59:55
377,2016-01-19 01:09:19,"@jviotti #409 is _somewhat_ related, is that what you had in mind?
",rosshinkley,2016-01-28 05:59:55
376,2015-12-09 20:10:07,"With this change, Nightmare now supports both `nightmare.use(plugin)` and `Nightmare.action(name, action | namespace)`

Originally I thought we could combine them, but they actually do two different things. `action` extends the prototype and ensures that the action is properly queued. `use` is helpful for re-using and abstracting out tasks you want to perform on nightmare.
",matthewmueller,2015-12-10 01:43:45
375,2015-12-09 11:55:11,,cevek,2016-04-23 22:22:26
375,2015-12-09 21:22:48,":+1: I'm also seeing this.
",sporkmonger,2016-04-23 22:22:26
375,2015-12-10 01:47:29,"can you try again? i just released a new version
",matthewmueller,2016-04-23 22:22:26
375,2015-12-10 08:51:28,"Cool :+1: 
",cevek,2016-04-23 22:22:26
375,2015-12-22 21:12:21,"Also seeing this :rotating_light: When a page fails to load it just hangs forever and never calls waitTimeout
",contra,2016-04-23 22:22:26
375,2015-12-22 22:22:49,"@contra ahh, are you seeing it hang forever if the initial page load fails? right now it's only initialized when you call `.wait()` before a click or something. that should be fixed.
",matthewmueller,2016-04-23 22:22:26
375,2016-01-13 07:33:27,"Also seeing this.
",YueShuXie,2016-04-23 22:22:26
375,2016-04-14 08:40:59,"also see this hang forever for own my negative tests(On Mac OS Captian EI + 2.3.2 release), when wait a _non-exist element on page_ or wait a _function which does not return true condition_ (BTW Page load has already done), 
Please let me know if need my help on reproducing this issue.
",joychester,2016-04-23 22:22:26
375,2016-04-14 16:52:52,"@contra Depending on the kind of page load failure, #553 _might_ address your issue.

@joychester I wrote two quick test cases:

**nonexistent element**

<S_CODE_TOKEN>

**function that never returns true**

<S_CODE_TOKEN>

Both error out with the appropriate error message after 30s.  Can you provide a minimal example that causes nightmare to hang?
",rosshinkley,2016-04-23 22:22:26
375,2016-04-15 02:22:52,"Hi, @rosshinkley , your case works fine from my side too, but my test pages is not kind of different with yours :)
my page will load the page content async(like SPA application), so if i write wait method like following, it will hang forever:

<S_CODE_TOKEN>

however, if i hard-wait for the page loaded complete, then the wait() works fine until it timedout(10 seconds in my case)

<S_CODE_TOKEN>

Seems, nightmare API does not support SPA properly(wait for a element created after Dom content loaded event). Hope this case helps for your further analysis. just let me know if you need any info.

Thanks!
",joychester,2016-04-23 22:22:26
375,2016-04-15 14:47:49,"@joychester Ah!  Thank you for providing an example.  I can reproduce the behavior you're seeing.  I'll dig into it and see what is going on.
",rosshinkley,2016-04-23 22:22:26
375,2016-04-15 21:26:47,"@joychester A quick look yields that `webBrowser.evaluateJavaScript` is hanging once in a while and not calling back.  Electron doesn't have any errors when it happens.  This problem is not unique to StubHub - it happens with Yahoo and Youtube as well.  I'm not 100% sold that waiting for an element created after DOM content loaded is the cause, or that the site is an SPA.  

(As an aside, I can hack around it by forcing the `javascript` handler to poll if the callback has been called, but that is terrifyingly hacky.) 

Some tinkering shows me that it's not necessarily iframes, slow loads, load failures, or particularly large assets (or any combination).  I'm still hunting for a root cause/minimum reproduction case.
",rosshinkley,2016-04-23 22:22:26
375,2016-04-16 01:01:06,"@rosshinkley , Thanks for your info , is that possible to be an issue with Electron? hack way may not elegant, but once you have more insights, please let us know :)
",joychester,2016-04-23 22:22:26
375,2016-04-16 17:49:26,"@Mr0grog set me straight: it does have to do with iframes and timing.  Quote:

> If you call WebContents’s executeJavaScript() method after the main frame finishes loading, but while a subframe is loading, the JS will never get executed and the call will never complete (unless you navigate the main frame to some new page).

See electron/electron#5183 for details.
",rosshinkley,2016-04-23 22:22:26
375,2016-04-17 01:03:02,"Thanks @rosshinkley for all your effort and investigation! then we need to wait for Electron permanent fixes. 
",joychester,2016-04-23 22:22:26
375,2016-04-20 13:46:33,"just saw electron/electron#5183 has been closed, which is awesome, looking forward to integrate with Nightmare release and kick off a regression test!! :)
",joychester,2016-04-23 22:22:26
375,2016-04-20 13:47:40,"Well, Electron has to ship, first ;)  Hopefully soon!
",Mr0grog,2016-04-23 22:22:26
375,2016-04-20 13:52:58,"they are pretty good team to get things resolved fast, and thank you @Mr0grog and @rosshinkley for chasing them :)
",joychester,2016-04-23 22:22:26
375,2016-04-22 15:47:04,"Good news, i saw the new electron-0.37.7 has been released, with this electron/electron#5183 fix, change log: https://github.com/electron/electron/releases/tag/v0.37.7

hope we can release nightmare soon with  electron-0.37.7 build 👍 
",joychester,2016-04-23 22:22:26
375,2016-04-23 22:22:26,"Should be fixed with #588.  Closing.
",rosshinkley,2016-04-23 22:22:26
375,2016-04-24 00:52:53,"verified, 👍 
",joychester,2016-04-23 22:22:26
374,2015-12-07 18:15:12,"This takes care of @yoz's question from PR #365 regarding `confirm` and `prompt`: by default, they will both emit their respective events and throw an exception.  This prevents unwanted behavior on the page (eg, by prompt/confirm returning default values), as well as prevents Nightmare from hanging on modal dialogs.

This also is a partial answer to my question #366.  Rather than overriding the Nightmare preload, the internal preload script can now be added to with the same `options['web-preferences'].preload` option.  This allows for overriding the above exception behavior if it is not desirable, as well as opens up user-defined preload actions should they be needed.

Thoughts?
",rosshinkley,2015-12-17 21:57:25
374,2015-12-09 17:39:31,"Hey thanks for the PR! I think we should actually group these events: https://github.com/segmentio/nightmare/pull/337

I should have considered this before accepting the alert one, but I'm thinking something along the times of: 

`nightmare.on('page', function (type, message[, response])`

---

As far as the preloading stuff, I don't think it's a great idea to completely allow you to overwrite it because as we make changes to the API, those people that overwrite it will be completely out of sync. Are there specific use-cases that we should allow custom hooks into the preload script?
",matthewmueller,2015-12-17 21:57:25
374,2015-12-09 18:55:56,"@matthewmueller Ah, yeah, grouping them makes a lot of sense.  I'll pull that together as time permits.

As for overwriting the preload: the template-generated preload would be overwritten every time.  The template is internal to Nightmare.  As such, the internal changes to preload should be picked up if any are made.  Ultimately, what I am reaching for is the default exception behavior for prompt and confirm may be (probably is?) undesirable, and there should be a way to override it.  Maybe I'm not following what you're asking?

As for specific use cases: the only one I know of offhand is what @yoz ran into with `alert` - if you have a prompt or confirm an event that fires _before_ an `inject`/`evaluate` can run.  This gets back to overriding the default exception behavior - I'd imagine you'd want to overwrite it to handle dialogs with valid responses.  Does this make sense?
",rosshinkley,2015-12-17 21:57:25
374,2015-12-10 19:56:05,"@matthewmueller I may have gotten a _bit_ overzealous (and these changes almost certainly step on #337's logging changes), but I've grouped all of the page-\* events into one unified event.  I also tried to update the documentation to be clear-ish on what to expect with `on('page', type ...` using the jsdoc-like format.  (Offtopic, is there a documentation standard to follow?  Is this tangentially related to #364?)

Thoughts?
",rosshinkley,2015-12-17 21:57:25
374,2015-12-10 20:21:39,"Beautiful. I like this a lot. I like how you were able to consolidate all these into `page`. I think what you did with the custom preload script is good too. Two things I'd like to explore:
1. Is it possible to maintain the syntax highlighting on the preload script? I've noticed it's pretty error-prone working with functions as strings. Not a huge deal though since we're doing it in other places.
2. Is it possible to have the custom preload script to be a function that passes in the IPC

<S_CODE_TOKEN>

That might look be a little nicer way to extend the preload script and also authors don't need to know anything about the internal __nightmare.ipc
",matthewmueller,2015-12-17 21:57:25
374,2015-12-10 22:01:25,"@matthewmueller thank you. :)  Responding to your questions:
1. Yeah, the other reason I went the templated route was because of precedent, but regardless, this is a good question.  Spitballing an idea off the top of my head: could the internal preload script be in its own file, read off disk, have the `{{!src}}` token spliced in, and have that be used in the place of `exports.preload`?  That would let both the user-defined preload and internal preload be real first-class javascript files, complete with syntax highlighting.  (There are probably less ugly, less fragile variants of this, like having the token in a comment or something.  The chosen solution might be able to be adapted for the other templates.  Would that worth pursuing in a separate PR?)
2. Thinking about this with a little distance, I could have probably simply used `require` to pull in the user-defined preload, and pass the IPC to it that way.  Should the token then be changed to something like `require('{{!userPreloadFilepath}}')(__nightmare.ipc);`?  I'm almost positive the path would _have_ to be absolute, and the documentation should reflect that.  This also may help solve the token issues from your first question if the require had a dummy file to require by default.  Thoughts?
",rosshinkley,2015-12-17 21:57:25
374,2015-12-11 04:19:57,"@matthewmueller This was an itch I had to scratch: I went ahead and pulled together the `require` approach described above.  Is this close to what you had in mind?
",rosshinkley,2015-12-17 21:57:25
374,2015-12-11 05:14:44,"By the by, back to the earlier topic of use cases: Providing custom preload scripts should let you prevent elements from rendering on a page, and as such, I think this should provide a way to fix #373.
",rosshinkley,2015-12-17 21:57:25
374,2015-12-17 21:57:24,"Thanks for this PR! I've incorporated these changes into master!
",matthewmueller,2015-12-17 21:57:25
374,2015-12-17 21:58:13,"One thing I left out was the preload templating stuff (probably due to my suggestion :-/), but I think it's less complicated to just include a path to your own script.
",matthewmueller,2015-12-17 21:57:25
374,2015-12-17 22:49:56,"Yeah, I understand what you did in your PR.  I would have preferred skipping the user having to include the IPC themselves, but what you did works just fine too. :)  Thanks!
",rosshinkley,2015-12-17 21:57:25
374,2015-12-17 22:59:35,"yah me too :/, but the added complexity wasn't worth it imo
",matthewmueller,2015-12-17 21:57:25
373,2015-12-06 23:13:50,"How can I prevent loading the Google Analytics when I scrape page with nightmare.js?
",SerjoPepper,2015-12-18 00:51:08
373,2015-12-18 00:51:06,"if you're not able to catch the event as the window via inject, it  can be fixed with a custom preload script outlined here: https://github.com/segmentio/nightmare#custom-preload-script
",matthewmueller,2015-12-18 00:51:08
373,2015-12-18 10:42:02,"@matthewmueller I expected a more elegant solution, eg blocking scripts loading by domain or hostname, this way works in PhantomJS.
",SerjoPepper,2015-12-18 00:51:08
373,2015-12-18 17:37:02,"let's see if more people need this. there's a million things nightmare _could_ do, it's up to us to make sure the API remains simple, while not being limiting.
",matthewmueller,2015-12-18 00:51:08
373,2017-03-13 08:50:29,"Hi @matthewmueller ,

I am not really sure the issue that I create a custom preload script to capture alert message. Actually I follow the site that you provided, but no chance.

<S_CODE_TOKEN>


",nquoctuan,2015-12-18 00:51:08
373,2017-03-13 08:51:20,"source code is quite simple:
<S_CODE_TOKEN>

And alertMessage.js (follows the instructions of the site), has not done anything:
<S_CODE_TOKEN>",nquoctuan,2015-12-18 00:51:08
373,2017-03-17 03:47:18,@nquoctuan I'm _almost_ positive that the path for `preload` has to be fully qualified.  What happens if you change that to `preload: require('path').resolve('alertMessage.js')`?,rosshinkley,2015-12-18 00:51:08
372,2015-12-06 17:00:18,"Hi I was using the nightmare the one that was using phantomjs and there I can set proxy by passing proxy: 'username:password@host:port'. Question is there any available option for this now? I tried to set it in runner.js like this ""win.webContents.session.setProxy(config, callback)""  but it's throw an unexpected error. So can someone tell how I should do that?
",hovosanoyan,2015-12-27 17:50:45
372,2015-12-18 00:58:27,"There's some info in this PR: https://github.com/segmentio/nightmare/pull/241/files. Unfornately, it's really out of date at this point. Would love for you to open up a new PR :-)
",matthewmueller,2015-12-27 17:50:45
372,2015-12-27 15:34:16,"@hovosanoyan #410 will let you set proxy settings, etc. through [Chrome's command line switches](https://github.com/segmentio/nightmare#switches). Hope it helps!
",juanpaulo,2015-12-27 17:50:45
372,2015-12-27 17:50:43,"I leaved that for now but will check it later anyway thank you very much.
",hovosanoyan,2015-12-27 17:50:45
371,2015-12-05 16:26:51,"When I `goto` a web page containing `iframe` with a pdf, save file dialog pops up blocking the process. I've found out that it is possible to resolve that by adding `will-download` listener to `webContents.session` of `BrowserWindow` as described [here](https://github.com/atom/electron/issues/3142). Would it be desirable to extend Nightmare's API to support this usecase? If yes then would sth like that be fine?

<S_CODE_TOKEN>

If that's acceptable then I could submit PR
",pkawiak,2016-04-03 01:44:59
371,2015-12-05 20:16:28,"@fmaruki, @darthcloud and myself touched on this in #332.  I didn't pull together a PR because I wasn't too keen on polluting options with download rules and I was/I am _pretty_ certain my implementation and approach were not good.  Since then, I haven't set aside time to take a second (hopefully longer) look.

Adding an event handler in this way might work.  It side-steps the immediate action problem, and offloads responsibility for cleanup and multiple downloads to the user, which simplifies things.

Thoughts?
",rosshinkley,2016-04-03 01:44:59
371,2015-12-07 18:46:06,"Is there any other way we can automate pages containing iframes with pdf content? I don't even want to download it, I just don't want it to get in my way by displaying blocking system window.

Would it be acceptable to just hardcode `will-download` event prevention in Nightmare?

Is it of any use to display blocking system dialog in context of browser automation? If yes then is there any way to interact with it in automated way?
",pkawiak,2016-04-03 01:44:59
371,2015-12-07 19:27:11,"While I understand the temptation to discard/ignore downloads, I don't think that is a particularly good approach.  If Nightmare is being used for scripting, it is possible that the downloaded file will help determine what steps to take after the download (eg, with integration testing).  I suppose Nightmare could simply accept every download, but that also seems like an unpleasant option.

Answering your second question: From within browser automation, no, modal system dialogs are not useful and cause problems.  For example, `alert`, `confirm`, and `prompt` cause Nightmare to hang just like with download prompts.  (For what it's worth, some work has been done to address those three, and for more information, see #359, #365, #366 and #374.)

Answering your third question: from within Electron, you can either cancel the download or set the download path within the `will-download` handler.  This is functionally the same as interacting with the download dialog and will prevent one from showing.
",rosshinkley,2016-04-03 01:44:59
371,2015-12-07 19:50:02,"Thank you for your time @rosshinkley. Unfortunately it means that I will either have to switch to barebone Electron or deal with this issue in forked Nightmare. It would be nice to know if there is some long term plan to support those usecases or if the idea is not even considered to be included in Nightmare's source.
",pkawiak,2016-04-03 01:44:59
371,2015-12-08 04:27:58,"@pkawiak no problem.  I can't imagine this particular issue is going away as there are already a couple of other open download questions akin to this one.  Plus, willfully not supporting a common browser activity would be sort of silly.

As for inclusion, I'm sure a PR to take care of the obvious download cases would be welcome.
",rosshinkley,2016-04-03 01:44:59
371,2015-12-08 20:04:02,"OK then during weekend I'll try to put together PR with following API:

<S_CODE_TOKEN>
",pkawiak,2016-04-03 01:44:59
371,2015-12-11 20:30:26,"@pkawiak I didn't mean to step on your toes, but I've put together (a hopefully reasonable?) PR #382 to handle downloads.  I'd like to get your feedback. :)
",rosshinkley,2016-04-03 01:44:59
371,2016-04-03 01:44:59,"With the release of #425 in 2.3.0, I've gone ahead and released plugins that will take care of downloads:
- [nightmare-download-manager](https://github.com/rosshinkley/nightmare-download-manager)
- [nightmare-inline-download](https://github.com/rosshinkley/nightmare-inline-download)

I'm considering this issue resolved.  If you have further questions or problems, please open a new issue.
",rosshinkley,2016-04-03 01:44:59
370,2015-12-05 13:54:45,"It makes the TODO in the scroll test done.
",Kreozot,2015-12-05 20:01:21
370,2015-12-05 20:01:19,"thanks!
",matthewmueller,2015-12-05 20:01:21
369,2015-12-05 13:39:41,"For test passing on small screen resolution.
Because on some platforms electron can not set initial viewport size more than screen resolution.
",Kreozot,2015-12-05 20:01:59
369,2015-12-05 20:01:58,"thanks!
",matthewmueller,2015-12-05 20:01:59
368,2015-12-04 19:30:15,"Adds a headers() method to override headers for all requests from that instance of nightmare.

<S_CODE_TOKEN>

And adds an optional param to goto(), specifying headers to use for that specific request:

<S_CODE_TOKEN>

Fixes #325 
",danielstjules,2015-12-08 04:26:36
368,2015-12-05 20:03:46,"thanks @danielstjules! i think the API should be `nightmare.header()` and then support the following:

`header(header, value)`
`header(obj)`

what do you think?

the rest looks good!
",matthewmueller,2015-12-08 04:26:36
368,2015-12-05 23:33:03,"Sure, I can do that. :) Are you ok with leaving goto's optional headers param as-is?

And any reason for preferring a singular `nightmare.header` as opposed to the original `nightmare.headers` available in Nightmare 1.x? Just trying to keep it more consistent with node's https://nodejs.org/docs/v0.4.0/api/http.html#response.setHeader ?
",danielstjules,2015-12-08 04:26:36
368,2015-12-05 23:37:08,"> And any reason for preferring a singular nightmare.header as opposed to the original nightmare.headers

yep and most the APIs that I've seen that have this kind of signature are singular. ex. http://api.jquery.com/attr/
",matthewmueller,2015-12-08 04:26:36
368,2015-12-07 19:17:36,"@matthewmueller Sounds good, updated!
",danielstjules,2015-12-08 04:26:36
368,2015-12-08 04:26:41,"thanks @danielstjules !
",matthewmueller,2015-12-08 04:26:36
367,2015-12-04 17:15:39,"Adds ability to add custom events that can be emitted with `ipc.send` from `evaluate` or `inject`.  Fixes #354.
",rosshinkley,2016-01-04 22:39:53
367,2015-12-09 17:29:50,"Sweet! I think the API should be `.bind(...)` though. It's more familiar to folks: 
- http://api.jquery.com/bind/
- https://github.com/component/event
",matthewmueller,2016-01-04 22:39:53
367,2015-12-09 18:58:20,"I follow and agree.  I will make the update as time permits. :)
",rosshinkley,2016-01-04 22:39:53
367,2015-12-10 15:54:59,"@matthewmueller I have a couple of questions for you.  One, is it acceptable that `.bind()` accepts _only_ a name, and not data (like say, jQuery's bind)?  Two, `.unbind()` removes all of the named event listeners, introducing the (probably wrong) assumption that unbinding a custom event should remove all of the child process listeners for that name.

Is this closer to what you had in mind?  Thoughts?
",rosshinkley,2016-01-04 22:39:53
367,2015-12-10 17:19:27,"glad you asked, yep i don't care about the data attribute at all. hmm, what about keeping these separate from `nightmare.on(...)`, where it's like:

<S_CODE_TOKEN>

that would make unbind more clear-cut:

<S_CODE_TOKEN>

what do you think?

---

Otherwise `nightmare.bind('some-custom-event')` could work too, just not sure how to deal with the unbind case.
",matthewmueller,2016-01-04 22:39:53
367,2015-12-10 21:20:40,"@matthewmueller Sure, making the event handler an option in the function call, or having `unbind` remove the parent listener makes sense.  It's also probably worth pointing out that I don't think you can fully wall this off from `.on()` - the ad hoc events will still be listenable. In other words,

<S_CODE_TOKEN>

... should still be valid, if a bit misleading.  Alternatively, and for completeness,

<S_CODE_TOKEN>

... would also still call the handler from `.on()` when `some-custom-event` is emitted.

It's also probably worth noting that I don't think you can remove an `.on()` handler, either - is there a helper to remove a listener from `child`?

Are you suggesting making the handler function for `.bind()` mandatory?  I'm not so certain about that, but I can't think of a compelling counterargument.

---

What I was a _bit_ more concerned about - and I'm sorry I wasn't terrifically clear - was what happens when you call `.unbind()` down to the child process (in `runner.js`).  I wrote it such that the Electron `.unbind()` listener would scrub all listeners with that name from the renderer, effectively removing that event from being emittable.  This is owing to the handler in the renderer's `.on('some-custom-event', fn)` not being unique and also not being scoped outside of `bind`.

This also raises another question: can more than one event emitter per name be added and bound?  Is there a use case for having multiple custom event emitters of the same event name?  Would it be worth enforcing a rule that one and only one custom emitter could be added per name?

I'm still not sure I'm being clear.  Let me know if you have questions.
",rosshinkley,2016-01-04 22:39:53
367,2015-12-12 20:29:21,"@matthewmueller I've gone ahead and put in the optional handlers for custom events.  

I've added enforcement of only one child emitter per name.  This prevents situations where custom events can have more than one emitter.  (This also clears up my question from above.)

I've also added some extra logic around how `unbind` works: `.unbind('sample-event')` will remove the event listeners on the parent and the child emitter, where `.unbind('sample-event', handler)` will remove the handler on the parent and the emitter on the child if it is the last handler.  I'm not _real_ confident in the last parent listener removal logic also removing the child emitter.  It's nice the event cleanup is there, but I worry it might be unexpected behavior.  What do you think?
",rosshinkley,2016-01-04 22:39:53
367,2016-01-04 22:39:53,"Closing this PR.  I will break this out into a plugin pending the outcome of #425 and #391.
",rosshinkley,2016-01-04 22:39:53
366,2015-12-04 16:53:36,"@yoz asked a good question about overriding preload functionality in #359, and as an extension, I have a question of my own: Is there a use case for adding custom parts inside of Nightmare's preload?

Preload could be a template, but I think this would require writing the compiled preload script to disk (Electron expects a file path for preload, at least in my read of the documentation).  Electron exposes the default paths for user data, and changes made in #338 allows for custom paths.  Both could be used to determine a place to save the compiled preload.

Thoughts?

_Edit:_ Bah, a second look at the mentioned PR and at Electron's documentation, I saw `.getPath(name)` almost right away.  Edited commentary.
",rosshinkley,2015-12-11 20:53:04
366,2015-12-11 20:53:04,"Moved conversation to #374.  Closing.
",rosshinkley,2015-12-11 20:53:04
365,2015-12-04 02:10:19,"Sets up the `page-alert` event for alerts, preventing alerts from blocking the process.  Should fix #359.  Thoughts? /cc @yoz 
",rosshinkley,2015-12-04 06:41:26
365,2015-12-04 06:41:27,"sweet! looks great :-D
",matthewmueller,2015-12-04 06:41:26
365,2015-12-04 17:34:49,"Works great, thanks for the quick update!
",yoz,2015-12-04 06:41:26
365,2015-12-04 17:45:21,"P.S. window.confirm and window.prompt may also benefit from something like this, although those are more complex because they have to return a value. See for example
http://stackoverflow.com/questions/33520361/nightmarejs-to-click-the-window-confirms-button
",yoz,2015-12-04 06:41:26
365,2015-12-04 18:23:52,"@yoz I thought about this when I was going through this last night, and decided that I'd address your immediate problem first.  I'm planning to look at confirm and prompt as time permits.
",rosshinkley,2015-12-04 06:41:26
364,2015-12-03 16:15:31,"use husky's precommit hook + standard to help resolve formatting issues
",matthewmueller,
363,2015-12-03 12:26:51,"scrollToSelector function + test + readme
",Kreozot,2016-12-30 19:40:47
363,2015-12-03 16:07:19,"Thanks for the PR! Mentioned this in another PR, but I think the API should be:

`nightmare.scrollTo(top, left)`
`nightmare.scrollTo(selector)`

Where scrollTo supports both. What do you think?
",matthewmueller,2016-12-30 19:40:47
363,2015-12-03 16:11:03,"Good point, thank you! Maybe I also should do it in #358, how do you think?
",Kreozot,2016-12-30 19:40:47
363,2015-12-03 17:09:38,"@Kreozot haha, yah i was thinking about that... not sure how it'd look unless we break the API. I guess we could maybe do:

<S_CODE_TOKEN>

Almost wondering if it just makes more sense to just use an object, which wouldn't break the API:

<S_CODE_TOKEN>

---

Also, how does this handle multiple elements on different parts of the page by the way?
",matthewmueller,2016-12-30 19:40:47
363,2015-12-03 17:21:17,"It won't breaks the API if we will check argument type.

UPD. Ok, now it will :)
",Kreozot,2016-12-30 19:40:47
363,2015-12-05 13:21:04,"@matthewmueller Please take a look.
",Kreozot,2016-12-30 19:40:47
363,2016-09-09 20:36:34,"Dear, @rosshinkley just wondering is there any reason for this PR's to still be awaiting merge?

Thanks you! :)
",highvoltag3,2016-12-30 19:40:47
363,2016-09-18 20:01:07,"@highvoltag3  I'm still open to this PR, but the source is well out of date and would need to be updated.  Additionally, I don't think @matthewmueller's comments were ever addressed.
",rosshinkley,2016-12-30 19:40:47
362,2015-12-03 12:17:17,"scrollToSelector function + test + readme
",Kreozot,2015-12-03 12:22:59
362,2015-12-03 12:22:59,"Sorry about the mess with the commits. I'll clean this and prepare new PR.
",Kreozot,2015-12-03 12:22:59
362,2015-12-03 16:04:56,"It'd be nice to overload the `.scrollTo` method to support `.scrollTo(selector)`, rather than implement a new method.
",matthewmueller,2015-12-03 12:22:59
361,2015-12-02 16:48:46,"sendInputEvent wasn't implemented in Electron 0.33 so I bumped the dependency, tests seem ok. Happy to add a test for sendInputEvent if needed.
",inversion,2015-12-03 16:00:58
361,2015-12-03 16:00:18,"Awesome! So we're planning on making this a little more high-level, so `.click(...)`, `.rightclick(...)`, etc. will use this function internally to execute their events.

Let me know if you want to hack on this, otherwise I'm planning on working on it sometime this week or the next.

Going to close this one, but it's super helpful as a reference. Thanks!
",matthewmueller,2015-12-03 16:00:58
361,2015-12-03 16:27:49,"Hi @matthewmueller - I'm currently using it to implement drag and drop as well. (I've made an action which can drag and drop from/to page pixel positions, and you can also pass DOM selectors or functions to evaluate in the page context for it to determine those positions).

Internally it uses mouseDown/Move/Up and could also use touchStart/Move/End for mobile simulation.

I'd like to contribute that as I think it could be useful generally. Any thoughts? It would be easy to port without a public sendInputEvent action anyway.

Also just on the upgrade side you'll notice some deprecation warnings with the new Electron which I haven't looked into.

Cheers,
Andrew
",inversion,2015-12-03 16:00:58
361,2015-12-03 16:45:37,"Wow that's really cool. I'm wondering if that would make more sense as a plugin once we land actions/use.  What do you think?

Thanks for the heads up on the electron warnings!
",matthewmueller,2015-12-03 16:00:58
361,2015-12-03 17:14:04,"Agreed on the plugin, let's move discussion to #336 
",inversion,2015-12-03 16:00:58
361,2016-04-27 06:17:27,"Hi @inversion, I stumbled over this issue since I also need some drag and drop functionality. Have you released anything in that direction? Maybe a drag and drop action/plugin?
",maxfriedmann,2015-12-03 16:00:58
361,2016-04-27 08:20:57,"Hi @maxfriedmann - I haven't got anything released for it yet, but the approach I took is basically sending the input events `mouseDown mouseMove (several) mouseUp`. The issues to consider are finding the start and end co-ordinates, choosing where to pick up the element and where to drop it (e.g. if you are trying to drop something that needs to be entirely in a target area, or if there are other target areas adjacent which can be mistakenly dropped into.
",inversion,2015-12-03 16:00:58
360,2015-12-01 23:15:18,"Adds support for getting and setting cookies. Originally, I wanted to just export `.cookie(...)` (as discussed in #241), but electron has a lot of power to query all the cookies or query for certain cookies on urls. I didn't want to intentionally limit their API. 

I decided to use sub-properties because it's going to get messy if we have a ton of top-level methods, so instead of:

<S_CODE_TOKEN>

It looks like:

<S_CODE_TOKEN>

This should allow for more powerful namespacing for things like `sessions`, `cache`, `proxy`, etc.

---

Additionally, while putting this together, I improved error handling. If the main electron process encounters an uncaughtException, it will propagate to the node process instead of popping up an electron window and not cleaning up after itself. It's not full-proof (doesn't work for syntax errors), but those should only happen while hacking on nightmare.

/cc @reinpk 
",matthewmueller,2015-12-09 17:27:26
359,2015-11-30 22:42:44,"If I specify the 'preload' option in nightmare's web-preferences (that get passed through to electron), nightmare hangs. This happens even when the preload script does nothing.

Example script: https://gist.github.com/yoz/b7420bf6fa38d351b8cc
It uses this preload script: https://gist.github.com/yoz/829b05a344d37f3cff26

Expected behavior (which is what we get if the preload line is commented out):
1. open example.com
2. console.log ""Example Domain""
3. click a link to http://www.iana.org/domains/reserved
4. console.log ""IANA — IANA-managed Reserved Domains""

Actual:
1. open example.com
nothing else happens
",yoz,2015-12-04 06:41:26
359,2015-12-02 19:13:03,"You're overwriting the baked-in Nightmare [preload script](https://github.com/segmentio/nightmare/blob/master/lib/preload.js) which (I think) ultimately sets up the Electron process Nightmare needs to work properly.  This is why it appears to hang.  I don't think you can have multiple preload scripts (see [here](https://github.com/atom/electron/issues/2406)).

Do you need to have a preload step?  Could you use [`inject`](https://github.com/segmentio/nightmare#injecttype-file) or [`evaluate`](https://github.com/segmentio/nightmare#evaluatefn-arg1-arg2) instead?
",rosshinkley,2015-12-04 06:41:26
359,2015-12-03 19:41:29,"I'm trying to use preload because I'm running in a headless environment, but I have a page where the `onload` event pops up an `alert()` (which is blocking), so I'm attempting to preempt it by setting `document.alert = console.log;` or some such _before_ the `onload` event fires.

I tried to `evaluate` at `on('dom-ready')`, but it didn't seem to be early enough. But I'll see if `inject` or other events work better.
",yoz,2015-12-04 06:41:26
359,2015-12-04 01:03:54,"@yoz ah, I see.  I don't think you'll have great luck with `inject` then, either.  Both `inject` and `evaluate` are (at least in my read) the same under the covers.

Pondering out loud: since alerts are blocking, should they be caught and emitted as alert events to Nightmare, similar to how `console.log` works?
",rosshinkley,2015-12-04 06:41:26
358,2015-11-30 10:30:15,"screenshotSelector function (with test and readme)
",Kreozot,2016-12-30 19:41:58
358,2015-11-30 13:50:11,"I was working on the same feature and was about to push it when I saw your PR. This is a much needed feature, I hope it will be merged soon. Thank you @Kreozot for your work!

FYI here's my own implementation: 

<S_CODE_TOKEN>

But your solution seems at least as good
",yhuard,2016-12-30 19:41:58
358,2015-11-30 14:03:29,"Thanks. In my implementation I also used Math.round function because clip parameters must be integer but getBoundingClientRect can return decimal values.
",Kreozot,2016-12-30 19:41:58
358,2015-11-30 14:07:42,"Nice catch, I was having an issue making Electron crash and adding Math.round solved it
",yhuard,2016-12-30 19:41:58
358,2015-12-01 09:23:39,"It would be nice to add an optional parameter which would give more control to the developer on the way screenshot are taken. What I'm thinking about is:

<S_CODE_TOKEN>

If you can think of any other options, I'd be glad to talk about them with you
",yhuard,2016-12-30 19:41:58
358,2015-12-01 11:16:45,"I think this is redundant. You can not guess all use cases. I think all individual use cases must be implemented outside this function.
First time I've wanted to add scroll functionality to this function (to prevent cases when selection is outside visible area), but then I've decided to keep it clean ([YAGNI](https://en.wikipedia.org/wiki/You_aren%27t_gonna_need_it) principle)
",Kreozot,2016-12-30 19:41:58
358,2015-12-01 14:49:06,"Scroll functionality is another thing, it should be done outside of this function, I totally agree with this. In fact I had a use case for those options (taking the same screenshot at different times to catch visual regressions) but I can go without them as well, it's not a problem for me
",yhuard,2016-12-30 19:41:58
358,2015-12-02 10:56:41,"I think scroll is needed for this function. Otherwise you could call the function and get a screenshot of the wrong section of the page.

I don't think the user should have to think about manually scrolling before calling this function.

If you want to keep it clean maybe create a separate function such as scrollToElement which is called internally by captureSelection.

For extra points you could get it to scroll back to the pervious position after the screenshot was taken.

Something like this inside of eval should do it.

<S_CODE_TOKEN>

You just need to remember that scrolling is not instantaneous and you might need to wait a little bit before taking the screenshot.
",sepehrs,2016-12-30 19:41:58
358,2015-12-02 11:38:01,"I find it hard to think of a use case where it's necessary to take a snapshot of a selector without scrolling there. I think most use cases that require a snapshot of a selector is because they want an image of the content of that selector. You can't get that without scrolling first. 
What do you think guys? I think that's a more sensible use case.
",chipay,2016-12-30 19:41:58
358,2015-12-02 14:50:34,"I still think that it should be done manually before calling `screenshotSelector`. Maybe it would be interesting to implement a similar `scrollToSelector` function, because of two things:
- a function should focus on doing only one thing and doing it well ;
- what if the user doesn't want to scroll to the element before capturing the screenshot? there might be use cases for that
",yhuard,2016-12-30 19:41:58
358,2015-12-02 15:57:16,"@yhuard :+1: 
scrollToSelector PR is coming
",Kreozot,2016-12-30 19:41:58
358,2015-12-02 16:00:09,"If you call screenshotSelector('header') and you have scrolled to the bottom of the page you will get a screenshot but it will be of the wrong thing.

I can not think of a use case where you say give me a screenshot of an element but bring me back a screenshot thats the same size as that element but not really of that element.

I agree with concept of a function having to do one thing and doing it well.

I would then suggest having the following functions.
1. getSelectorRect
2. scrollTo (which already exists) / scrollToSelector
3. screenshot (with rect as a parameter which exists already)

then a wrapper for these 3 functions called screenshotSelector.

Then if you want an additional function for scrolling to a selector you can call the getSelectorRect and use it in conjunction with scrollTo.

But it still really confusing if you call screenshotElement and getting a random screenshot back.
",sepehrs,2016-12-30 19:41:58
358,2015-12-02 17:21:07,"+1 for @sepehrs' suggestion: `screenshotSelector` should not violate the principle of least surprise.  If you ask for a picture of a specific element, you should get a shot of the whole element.  I completely agree with splitting the underlying functionality into their own functions, then having `screenshotSelector` be a wrapper for those functions

That being said, there are corner cases that I have mixed feelings about.  For example, taking a complete screenshot when the body is longer or wider than the viewport rectangle (as with #328) - should `screenshotSelector` take this into account and resize the viewport automatically, putting it back upon screenshot completion?  Thoughts?
",rosshinkley,2016-12-30 19:41:58
358,2015-12-02 23:17:27,"@rosshinkley I've already thought of that and ended up thinking that resizing the viewport is dangerous: it can have side effects that the user didn't expect. For example, if an element is too big for, let's say, a medium screen but is hidden on large screen and we apply the resizing, the element may disappear. 

We define the viewport at beginning because we want to test the rendering with that viewport. If the screenshot cuts the element we capture, it's actually a good indicator that something's wrong with our style!
",yhuard,2016-12-30 19:41:58
358,2015-12-03 09:46:58,"I wasn't actually talking about reszing the viewport. In my opinion there is no need for that since you would want to see how the element would look on the device (viewport) you have selected.

I still don't see any problems with scrolling to the element.
",sepehrs,2016-12-30 19:41:58
358,2015-12-03 12:28:35,"Just created PR with scrollToSelector function: #363
",Kreozot,2016-12-30 19:41:58
358,2015-12-03 16:18:33,"@yhuard @sepehrs Like I said, I had mixed (and admittedly, mostly negative) feelings about resizing the viewport.  I agree that it's not a great idea, but mileage may vary with elements that extend beyond the viewport.
",rosshinkley,2016-12-30 19:41:58
358,2015-12-03 16:57:11,"@rosshinkley the reason i didn't mind to much about the reszing of the viewport is the point @yhuard made about css selector but also a genuine use case could be that you want to see how the element looks on a specific device. if for example you are taking a screenshot of a header on mobile. you can see exactly what the above the fold content is.
",sepehrs,2016-12-30 19:41:58
358,2015-12-05 10:14:09,"@matthewmueller, I think you can merge this now if you don't have any suggestions.
After making ""path"" parameter optional it became impossible to overload original ""screenshot"" function by checking parameter type as I mentioned in our discussion in #363. So I think this PR is ready to be merged.
",Kreozot,2016-12-30 19:41:58
358,2015-12-09 17:52:10,"the more i think about this, the more i think this makes sense as a plugin. i'll be adding plugin support via `.use(...)` today
",matthewmueller,2016-12-30 19:41:58
358,2015-12-09 17:53:25,"Oh, That's good news for me! Thanks @matthewmueller !
",felixcrive,2016-12-30 19:41:58
358,2015-12-10 04:15:12,"Okay, I've added `Nightmare.action` to support this PR. Here's how you'd do it:

<S_CODE_TOKEN>

Looking at this closer, you could probably simplify and use `nightmare.screenshot()`, once you have the clipping coords

Does this work for you?
",matthewmueller,2016-12-30 19:41:58
358,2015-12-10 14:49:39,"@matthewmueller I will give it a try this morning and I will let you know. The selector I want to capture is an external iframe. This is great. Thanks!
",felixcrive,2016-12-30 19:41:58
358,2015-12-10 16:19:47,"@matthewmueller It did work, thanks a lot!
",felixcrive,2016-12-30 19:41:58
358,2015-12-10 16:34:29,"@matthewmueller  Is there a way to capture an image if the evaluation of the page returns true?
",felixcrive,2016-12-30 19:41:58
358,2015-12-17 22:05:36,"@felixcrive, sorry i'm not sure what you mean, do you mind showing me what you mean?
",matthewmueller,2016-12-30 19:41:58
358,2016-12-30 19:41:58,best supported as a plugin,reinpk,2016-12-30 19:41:58
357,2015-11-26 00:36:27,"This fulfills #356.
",yoz,2015-12-03 18:49:14
357,2015-12-03 16:09:41,"looks good! just a minor documentation tweak and we should be good to go!
",matthewmueller,2015-12-03 18:49:14
357,2015-12-03 17:51:36,"Done - also did this for the arguments to `evaluate` in the Readme.md.
",yoz,2015-12-03 18:49:14
357,2015-12-03 18:49:12,"ah thanks good catch!
",matthewmueller,2015-12-03 18:49:14
356,2015-11-25 23:11:22,"There appears to be no way to pass parameters from node to the browser for wait() functions, though it is possible with evaluate().

For example, I expect the usage might look like:

<S_CODE_TOKEN>
",yoz,2015-12-15 19:02:28
356,2015-11-26 00:38:55,"Well, I just noticed #305 (from a month ago) also does this. =/
",yoz,2015-12-15 19:02:28
356,2015-12-01 14:24:44,"exactly!
we made it because we are using it all over the place in our tests :D 
please accept the pull request :pray: 
",a7madgamal,2015-12-15 19:02:28
355,2015-11-25 22:15:14,"This is useful for retrieving HttpOnly cookies which are not available from `document.cookie`.
",vially,2015-12-09 19:02:50
355,2015-12-09 19:02:48,"thanks! this has been added via `nightmare.cookies.get(name)` in #360 
",matthewmueller,2015-12-09 19:02:50
354,2015-11-25 21:59:31,"Hey there,
is there a way to implement a callback function callable within evaluate?
Like this

<S_CODE_TOKEN>
",fentas,2016-04-03 01:47:01
354,2015-12-02 18:46:53,"Short answer is no, I don't think so, at least not in the way you're imagining.

However, I think you could use `yield` to get your desired effect.  Something like the following:

<S_CODE_TOKEN>
",rosshinkley,2016-04-03 01:47:01
354,2015-12-02 19:02:05,"Hm. This is not really sutiable for my usecase. I want to be able to trigger a ""log time"" process giving status updates on the go. @rosshinkley Your example only (my perspective) would work (my use case) if I would trigger the process and then check in a certain interval if there is any update. - no ""live data"".

I had a quick look  through the source an found this

<S_CODE_TOKEN>

Can't I utilize somehow `__nightmare.ipc.send` ? (or I am on the wrong track..)
",fentas,2016-04-03 01:47:01
354,2015-12-02 20:42:47,"@fentas Ah, I see.  Using `yield` and `evaluate` in this manner probably wouldn't work then. :)

I also take it you're trying to go beyond using `console.log` and the `DEBUG` environment variable?

If so, I'm not sure you can set up ad hoc events with `__nightmare.ipc.send`.  My gut instinct is no, as the event from `ipc` needs to be emitted up through the Electron process to Nightmare.  I don't _think_ the plumbing for that exists.  I'll have to play with it to see.
",rosshinkley,2016-04-03 01:47:01
354,2015-12-02 21:25:39,"I think the way to this would be to use the `ipc.send('customevent', args)` functionality to send your events, which is in scope: https://github.com/segmentio/nightmare/blob/master/lib/javascript.js#L21-L24

There would need to be some addition logic on nightmare to set up the event forwarding in the electron process. Something like: `nightmare.bind('customevent', fn)` in: https://github.com/segmentio/nightmare/blob/master/lib/nightmare.js#L225-L228

Which would tell the child (runner.js) to listen for that custom event and forward onto the node process (nightmare.js): https://github.com/segmentio/nightmare/blob/master/lib/runner.js

Probably won't get around to implementing this myself, but I'd accept a PR that implements this :-)
",matthewmueller,2016-04-03 01:47:01
354,2015-12-03 16:58:04,"@matthewmueller I (embarrassingly) missed the `ipc.send`.  That's handy.

I think I'm on the same train of thought - I was tinkering with adding user-customizable events to accomplish what @fentas needed and have at least some of the basic mechanics down.  As time permits, I'll see if I can pull together the changes + documentation required. :)
",rosshinkley,2016-04-03 01:47:01
354,2016-04-03 01:47:01,"@fentas Custom eventing is now a plugin: [nightmare-custom-event](https://github.com/rosshinkley/nightmare-custom-event).  I'm going to go ahead and close this item.  If you have any more questions, feel free to reopen/open another issue.
",rosshinkley,2016-04-03 01:47:01
353,2015-11-24 20:42:21,"I've got a use case for the screenshot function that doesn't require it to be written to disk. Electron itself returns the image in memory, so I thought it'd be useful if writing it to the disk were optional. This pull request maintains backwards compatibility and adds the necessary tests. These tests actually pass (https://github.com/segmentio/nightmare/pull/290), but I didn't include the line from that PR to avoid a conflict.
",seep,2015-12-03 18:48:43
353,2015-11-25 00:13:32,"Awesome! Just want to figure out how we should document this change.
",matthewmueller,2015-12-03 18:48:43
353,2015-11-29 21:39:09,"I updated the documentation to match the official node.js docs for a function with two optional parameters. I also tried to add some clarifying language. Thoughts?
",seep,2015-12-03 18:48:43
353,2015-12-03 16:11:12,"sorry for the late response on this, looks good. just need to fix up the typo and we're good to go
",matthewmueller,2015-12-03 18:48:43
353,2015-12-03 18:42:36,"Hah yep, that's a typo. Should be good to go now.
",seep,2015-12-03 18:48:43
353,2015-12-03 18:48:41,"thanks @atonparker !
",matthewmueller,2015-12-03 18:48:43
352,2015-11-22 14:49:01,"I have a scenario to handle a pop-up window that opens up via a javascript call in the main window. If I read the documentation correct, I need to use the .on('new-window', function()) method to handle the pop-up, but not sure how the callback needs to be handled. I need to further perform some selections and clicks on the new pop-up

Can anyone point me to an example on how I can achieve this? Thanks
",kavuri,2016-05-23 16:40:55
352,2016-05-23 16:40:55,"It may be worth looking at [this comment](https://github.com/segmentio/nightmare/issues/510#issuecomment-189782115).  I wrote a plugin to at least partially handle this case.

Merging this into #593.
",rosshinkley,2016-05-23 16:40:55
351,2015-11-18 20:23:08,"The documentation in Electron's master branch differs from the documentation for the version of Electron Nightmare is on.  As such, the link in the Nightmare constructor should point to the versioned documentation.
",rosshinkley,2015-11-25 00:09:20
351,2015-11-25 00:09:17,"awesome, thanks!
",matthewmueller,2015-11-25 00:09:20
350,2015-11-18 09:04:42,"Hi Nightmare Team

The 1st test uses the evaluate function to retrieve the document.title of the pages.
However, after the 10nth iteration, there is the warning of node of a potential memory leak problem with the event emitters (see screenshot).

The 2nd test shows no such things. Evaluate was removed completly.
Is this the correct behaviour of the evaluate function or do we have a bug here?
## 1. Test

// with evaluate -> Memory Leak after the 10nth loop
function *start() {
var nightmare = new Nightmare({ show: true });
for (var i = 0; i < links.length; i++) {
var title = yield nightmare.goto(links[i]).evaluate(_extractTitle);
console.log(links[i], title);
}
yield nightmare.end();
}
## 2. Test

// no evaluate -> everything runs fine!
function *start() {
var nightmare = new Nightmare({ show: true });
for (var i = 0; i < links.length; i++) {
var title = yield nightmare.goto(links[i]);
console.log(links[i], title);
}
yield nightmare.end();
}

Node version: 4.2.2
Nightmare version: 2.14.7

![issue](https://cloud.githubusercontent.com/assets/10127605/11236542/542c03c6-8dd2-11e5-9dcd-f32802632e6a.JPG)

Cheers
R.
",bollywood-coder,2016-05-27 16:19:37
350,2015-11-19 18:13:08,"You may want to double-check the version of Nightmare you're on: `npm -v` shows the version of npm you're on and doesn't take a module name argument.  For that, you can try either `npm list nightmare` or `npm view nightmare version`.

I've tried to recreate your problem with Node v4.1.2 and Nightmare v2.0.7, and did not have the same results.

Could you run the above and report back what version of Nightmare you are on?
",rosshinkley,2016-05-27 16:19:37
350,2015-11-19 23:31:34,"I am on nightmare 2.0.7 same like yours. Any idea what could be the problem?
",bollywood-coder,2016-05-27 16:19:37
350,2015-11-20 13:50:39,"nightmare/lib/runner.js, lines 98-112

<S_CODE_TOKEN>

if response emitted => remove log and error listeners
if error emitted => remove response and log listeners

<S_CODE_TOKEN>
",s0m3on3,2016-05-27 16:19:37
350,2015-11-20 16:29:07,"could you copy here the test code which you run?
",bollywood-coder,2016-05-27 16:19:37
350,2015-11-20 16:49:43,"<S_CODE_TOKEN>
",s0m3on3,2016-05-27 16:19:37
350,2015-11-20 16:51:15,"@s0m3on3 You shouldn't have to remove the event listener, that's the purpose of using [`EventEmitter.once`](https://nodejs.org/api/events.html#events_emitter_once_event_listener).  The listener should remove itself when the event handler is called.  Were you able to recreate the original issue?

_EDIT_: I misread your suggestion.  You're suggesting removing the other event listeners when any `javascript` event is called.  I might buy that, but you'd think that problem would exist on all platforms.

@bollywood-coder It looks like you're running on Windows - I don't _think_ it would be Windows-specific, but just to rule it out, what version are you on?  I'd like to make sure this is tested on a similar environment.
",rosshinkley,2016-05-27 16:19:37
350,2015-11-20 17:07:22,"@rosshinkley yes, i recreated. ""listener should remove itself when the **event handler is called**"". if i will emit only `response` event, handlers for `error` & `log` from every `.evaluate()` will wait for `error` & `log` event
",s0m3on3,2016-05-27 16:19:37
350,2015-11-20 17:22:09,"@s0m3on3 I meant the original issue of having node complain about the EventEmitter leak.  I can't reproduce it locally, even though my event emitter listener limit is also set to 10 (which is the nodejs default).

And yes, see my edit: I misinterpreted what I read the first time.  That is my fault, and I apologize. :)  

@s0m3on3 is correct, and as a quick sanity check, I threw together an emitter watcher.  Sure enough, the counts go up but do not fall back down.  Interestingly, even after a couple dozen address changes, node does complain about extra event listeners.  (Maybe that's an issue with my environment?)

At any rate, your fix should be submitted as a PR as it should address @bollywood-coder's issues.
",rosshinkley,2016-05-27 16:19:37
350,2015-11-20 17:42:57,"may be. for example, webstorm dont show me any warnings, but console yes :)
",s0m3on3,2016-05-27 16:19:37
350,2015-11-20 18:52:35,"@s0m3on3 thanks for the fix in the code! those once emitters can be tricky if not all of them are called ;)
glad i could help you guys to find an issue.
",bollywood-coder,2016-05-27 16:19:37
350,2015-11-24 03:09:44,"Is it possible this is related to #282?
",rosshinkley,2016-05-27 16:19:37
349,2015-11-18 03:21:16,"<S_CODE_TOKEN>

and this is what I get:

<S_CODE_TOKEN>
",scarletsky,2015-11-24 02:16:05
349,2015-11-18 08:32:20,"I think you can't pass functions or objects to `evaluate` https://github.com/segmentio/nightmare/issues/89#issuecomment-102769448
",davidmatas,2015-11-24 02:16:05
349,2016-07-07 19:09:13,"Why is that? 
I really need utility functions in evaluate.

BTW - objects are passing, but without all methods. 
",yonatanmn,2015-11-24 02:16:05
349,2016-07-08 17:16:25,"@yonatanmn Everything passed from Nightmare to Electron is serialized, and functions do not serialize nicely.  If you find that you need methods in `.evaluate()` commonly, you may want to look into defining a custom preload.
",rosshinkley,2015-11-24 02:16:05
349,2016-07-09 16:08:04,"I see, I'll take a look.
thx
",yonatanmn,2015-11-24 02:16:05
348,2015-11-17 05:28:32,"This allows all of the `web-preferences` to merge deeply without overwriting the defaults for `preload` and `node-integration`.  Should fix #345.
",rosshinkley,2015-11-24 03:05:48
348,2015-11-19 18:20:44,"+1 this fixed https://github.com/segmentio/nightmare/issues/345 for me, would be awesome if this gets merged soon :smile: 
",ns-jdripps,2015-11-24 03:05:48
348,2015-11-24 03:05:48,"I think this _should_ have been fixed with #276 and I missed it in my (apparently not deep enough) research.  Closing.
",rosshinkley,2015-11-24 03:05:48
348,2015-11-24 15:51:03,"Ah ok cool. Looks like nightmare@2.0.7 doesn't include https://github.com/segmentio/nightmare/pull/276, is there an eta for the next release?
",ns-jdripps,2015-11-24 03:05:48
348,2015-12-02 17:22:49,"@drippsj For the sake of completeness, this was fixed with 2.0.8, which was released about a week ago.
",rosshinkley,2015-11-24 03:05:48
348,2015-12-02 17:24:59,"Yup, after updating everything is working. Thanks @rosshinkley!
",ns-jdripps,2015-11-24 03:05:48
347,2015-11-16 21:31:01,"I want to access a page (that requires a login) once and then create a loop get DOM elements and store their contents in a global array.

I have created a cut down demo to help illustrate what I am trying to achieve.

My [example HTML page](http://www.adrianparr.com/temp/square.html) takes a number in an input field, and clicking on the submit button displays the square of that number.

<S_CODE_TOKEN>

Why is my output array empty? I would have expected it to contain `['4', '9', '16', '25', '36', '49']` and have a length of `6`
",adrianparr,2016-03-30 03:05:44
347,2015-11-17 14:54:50,"The way you have the evaluate ""callback"" written isn't a callback (at least in the current version of Nightmare), but a parameter to the evaluate function.  A related (and relevant) discussion and explanations can be found at #333.

I did a quick edit using vo, and this should be close to what you're after:

<S_CODE_TOKEN>

Note that to use `yield` under Node 0.12.x, you will need to run with the `--harmony` flag.
",rosshinkley,2016-03-30 03:05:44
347,2015-11-17 14:57:16,"Thanks Ross. I'll give that a try.
",adrianparr,2016-03-30 03:05:44
347,2015-11-17 17:26:06,"Many thanks Ross. That worked a treat!!
",adrianparr,2016-03-30 03:05:44
347,2016-03-30 03:05:44,"Issue is resolved.  Closing.
",rosshinkley,2016-03-30 03:05:44
346,2015-11-16 00:03:58,"Hi, how execute right click on element ?
",olegatro,2016-04-11 13:47:15
346,2015-11-18 18:39:51,"At present, I don't think it is _directly_ possible, but you could potentially use `evaluate` or `file` to inject your own rightclick handler.
",rosshinkley,2016-04-11 13:47:15
346,2015-11-18 19:30:11,"For what's worth, I hastily threw together a `rightClick` action on [my fork](https://github.com/rosshinkley/nightmare/blob/rightclick/lib/actions.js#L84-L132).  It _technically_ works, at least in my local sandboxes.  I'm not super-comfortable with issuing a PR, as I'm not sure `contextmenu` is really the correct way for client-side javascript to generate/handle right-click events.

Thoughts? /cc @reinpk 
",rosshinkley,2016-04-11 13:47:15
346,2015-11-18 23:37:17,"@rosshinkley Thanks! I will try use your fork.
",olegatro,2016-04-11 13:47:15
346,2015-12-03 09:31:14,"I've submitted a PR for sendInputEvent in Electron which lets you do this (though you'd need to calculate element co-ordinates yourself right now)

https://github.com/segmentio/nightmare/pull/361
",inversion,2016-04-11 13:47:15
346,2015-12-03 16:32:29,"@inversion Far and away better than my implementation.  Thanks!
",rosshinkley,2016-04-11 13:47:15
346,2016-04-11 13:47:15,"Closed with `sendInputEvent` and `.action()` being exposed.
",rosshinkley,2016-04-11 13:47:15
346,2016-11-02 22:43:49,"Are you guys planning on shipping in a rightClick API with nightmare, or do consumers still have to roll this themselves?
",bcherny,2016-04-11 13:47:15
345,2015-11-15 19:00:57,"I'm trying to figure out how I can start a new and clean Nightmare instance (without cookies or cache from an old session).

In my below example the bot basically navigates to `m.facebook.com` types an `email`and a `password` then it clicks on the `login` button, the first time the bot did all this correctly but second time I ran this script the bot was already logged and failed, how can I avoid this?

<S_CODE_TOKEN>
",alfonsomga,2015-12-18 01:02:18
345,2015-11-16 00:06:54,"Ping top 3 contributors @reinpk @matthewmueller @johntitus
",alfonsomga,2015-12-18 01:02:18
345,2015-11-16 11:25:48,"This issue could be solved with #338 
",alfonsomga,2015-12-18 01:02:18
345,2015-11-16 15:43:10,"@alfonsomga seems like the `web-preferences.partition` [option](http://electron.atom.io/docs/v0.34.0/api/browser-window/#new-browserwindow-options) of `BrowserWindow` is what you need
",bjrmatos,2015-12-18 01:02:18
345,2015-11-16 17:32:58,"@alfonsomga I've hit this too, and as a note for others who are headscratching (and me in the future), the @bjrmatos link has the options as being dash separated instead of camel-cased.  This is because the documentation that is linked to in the Nightmare documentation is on the Electron master branch, and as such, is unreleased (see [here](https://github.com/atom/electron/issues/3431)).  The options for the version Nightmare is currently on are dash-separated.

A quickly hacked together example:

<S_CODE_TOKEN>

... doesn't do what you'd expect: this should start a new electron window with no taskbar icon and a partition called ""foo"" (which you could replace with a unique identifier to get the behavior you want, I used 'foo' for brevity).

However,  if you use the dash-separated options:

<S_CODE_TOKEN>

... will start you with a fresh session with no taskbar icon, as you'd expect.

All that being said, +1 to #338.  That would be handy to have regardless.

Maybe the Nightmare docs should link to the versioned documentation instead of the master branch.  Thoughts?
",rosshinkley,2015-12-18 01:02:18
345,2015-11-16 17:44:57,"> Nightmare docs should link to the versioned documentation

:+1: 

#338 would be handy for some use cases :) :+1: 
",bjrmatos,2015-12-18 01:02:18
345,2015-11-16 18:09:49,"Thanks! @bjrmatos @rosshinkley
",alfonsomga,2015-12-18 01:02:18
345,2015-11-16 20:46:16,"@bjrmatos @alfonsomga Have either of you tried using an in-memory or non-default partition?

I tried it on a whim just now, and it looks like as soon as I try to override `web-preferences` evaluate hangs.  The session gets created, and if you set up DEBUG, you can watch everything execute right up until evaluate, but evaluate never finishes.
",rosshinkley,2015-12-18 01:02:18
345,2015-11-16 21:11:58,"@rosshinkley +1 it isn't working at all here, when I added `'web-preferences':{partition: 'persist:foo123'}` some functions like `.type()`, `.click()`stopped working.

![dd](https://i.imgur.com/JUCt5Ij.png)

It didn't type the password & email and also didn't click on the login button...
",alfonsomga,2015-12-18 01:02:18
345,2015-11-17 05:33:16,"@alfonsomga After some tinkering, I figured out what is happening.  The `defaults` library - which is used to merge passed options with default options - does not merge deeply.  When we were passing in options to `web-preferences`, the existing options - the parts that load most of the sugar that allows Nightmare to work - were getting overwritten.

I've gone ahead and submitted a fix, pending approval (#348).
",rosshinkley,2015-12-18 01:02:18
345,2015-11-17 11:23:17,"@rosshinkley Thanks, it works now :+1: 
",alfonsomga,2015-12-18 01:02:18
344,2015-11-14 07:03:04,"I can keep cookies in a file with phantoms.

Since nightmare moved to  Electron, is there any document about how to store cookies so that I needn't to do the login trick again and again.

Thanks.
",zxdvd,2016-04-08 17:38:07
344,2015-11-17 14:35:26,"Electron maintains sessions and cookies across logins in a partition (see [here](http://electron.atom.io/docs/v0.34.0/api/browser-window/#new-browserwindow-options)).  You shouldn't have to log in every time provided you're using the same persisted session.  By default, I believe Nightmare uses the default Electron partition, which does get persisted.

As an aside, there is currently no choice _but_ to use the default partition as trying to use a [different session breaks Nightmare](https://github.com/segmentio/nightmare/issues/345).

If you are wondering how to load cookies from scratch into a new partition, that is a topic of lengthy [discussion on the Electron repo](https://github.com/atom/electron/issues/959), the TLDR is that it's not currently possible.
",rosshinkley,2016-04-08 17:38:07
344,2016-04-08 17:38:07,"#345 has been fixed, and this issue has not had activity in quite a while, so I'm going to close it.  If you have any more questions, feel free to reopen or file a new issue.
",rosshinkley,2016-04-08 17:38:07
344,2016-08-11 09:18:37,"@rosshinkley Hi for some reason the partition is not working for me
https://github.com/segmentio/nightmare/issues/754
",daniel3d,2016-04-08 17:38:07
343,2015-11-12 09:49:05,"Hello, does nightmarejs allow page access through a tor socket (https://www.torproject.org)?
Is it planned to provide this feature?

Thank you.
",ilabvb,2015-12-18 01:08:51
343,2015-12-18 01:08:28,"nothing planned, but we'd like to support proxies at some point, here's a good place to start #241. We'd gladly accept a PR :-) 

Closing since this is a dup of #372 
",matthewmueller,2015-12-18 01:08:51
342,2015-11-12 09:41:55,"I running following code:

<S_CODE_TOKEN>

The page is loaded and the screenshot, page.png, is taken correctly, but the evaluate callback never gets executed since the message ""Not in page context"" never gets printed. The jquery.js is in the same folder as the script and it gets successfuly injected, because if I remove the injectJS I get an error indicating that $ is not defined. I want to get the text content of the h1.firstHeading selector.

Why is the evaluate callback not executed.

Thank you. 
",ilabvb,2016-04-08 17:23:27
342,2015-11-16 16:31:23,"I'm having a similar problem getting an evaluate callback to log out to the console.
",adrianparr,2016-04-08 17:23:27
342,2015-11-16 17:39:28,"I found this answer on Stack Overflow which helped ...

http://stackoverflow.com/questions/33659483/nightmare-js-evaluate-page

Try this ...

<S_CODE_TOKEN>
",adrianparr,2016-04-08 17:23:27
342,2015-12-18 01:07:40,"@ilabvb did you get this resolved?
",matthewmueller,2016-04-08 17:23:27
342,2016-04-08 17:23:27,"Closing for lack of activity.  If this is still a problem, feel free to reopen or file a new issue.
",rosshinkley,2016-04-08 17:23:27
341,2015-11-10 22:25:32,"I'm new to nightmare, and thought I'd start with your mocha example to see how to use it.

I copy:

<S_CODE_TOKEN>

And the output:

<S_CODE_TOKEN>

Okay, great looks good. But just to ensure I understand how it works I changed

<S_CODE_TOKEN>

This shouldn't succeed if I've changed the string.

<S_CODE_TOKEN>

So it doesn't seem to actually run the tests as I expect them. Am I missing something?
",simonsez,2015-12-18 01:07:14
341,2015-11-11 10:37:56,"Are you using mocha-generators?
The regular mocha don't know how to call generator functions, it will just create the iterator object and never call .next() on it; ie, your test will always pass because the line with .expect() will never be executed.
",fmaruki,2015-12-18 01:07:14
341,2015-11-11 16:55:09,"@fmaruki thanks - yes, adding `require('mocha-generators').install();` resolved it.

Seems like the readme should include that line?
",simonsez,2015-12-18 01:07:14
341,2015-11-17 12:30:48,"Definitely. At least the test suite should contain a test that mocha-generators is in place and working.

The ""test always passing"" problem is present within nightmare's own test suite, too.
Running the nightmare test suite on a vanilla checkout just happily ""passes"" even though lots of tests fail for me after removing the fancy new ES6/ES7 stuff. Simple check: add `throw new Error('FAIL');` to any of the tests and run the test suite again (`make test` or `npm test`) -- it passes.

(node version 0.12.7, npm version 3.3.5 on an Ubuntu 14.04.3 LTS (trusty))
",istr,2015-12-18 01:07:14
340,2015-11-10 14:50:49,"Is there any way to have Nightmare store a csrf token?
",nathan-martinez,2016-05-27 19:48:07
340,2015-11-11 09:47:43,"Can you be more specific on what you are attempting to do?
If you access the GET page before, and do your action by clicking or submiting a form, than your POST page will receive the token just as it would in a normal navegation.
For sending the POST directly, you need to parse the page and find the CSRF, this can be done with client-side JS in .evaluate().
Just remember that a CSRF token is not valid between sessions, so you can't save and reuse it later.
",fmaruki,2016-05-27 19:48:07
340,2015-11-11 17:40:12,"I'm trying to create a scrape for a web service my company uses to process customer credit information. Nightmare works great until I navigate through the final list. That's where I'm getting a CSRF Token Error.

![eoscarlist](https://cloud.githubusercontent.com/assets/9448070/11098209/0e8acbc2-8869-11e5-9bb9-e83ee801c464.png)

![consumer-info](https://cloud.githubusercontent.com/assets/9448070/11098217/173c0ede-8869-11e5-9399-76c29bc882ab.png)
",nathan-martinez,2016-05-27 19:48:07
340,2015-11-11 20:02:41,"And this error is happening well after I login to the app, so I'm confused what I need to do differently.
",nathan-martinez,2016-05-27 19:48:07
340,2015-11-12 15:09:28,"Also, how to you access GET/POST pages within Nightmare?
",nathan-martinez,2016-05-27 19:48:07
340,2016-04-08 17:41:52,"@nathan-martinez Are you still experiencing this problem?

If so, you might want to take a look at [`.header()`](https://github.com/segmentio/nightmare/blob/master/lib/nightmare.js#L195-L200).  That allows you to set headers directly.  (There isn't documentation for it, I opened #551 for that.)
",rosshinkley,2016-05-27 19:48:07
340,2016-05-27 19:48:07,"Closing for inactivity.  If this is still a problem feel free to reopen/open a new issue.
",rosshinkley,2016-05-27 19:48:07
339,2015-11-10 12:51:01,"Add method for set position of window.
",lexifdev,2016-04-14 03:59:17
339,2015-12-03 16:12:19,"may i ask what the usecase is here? the window should be hidden in nightmare, so i'm not sure why you'd want to move it.
",matthewmueller,2016-04-14 03:59:17
339,2015-12-05 17:31:57,"recently I use nightmarejs with robotjs for complex test that needed real mouse event.
robotjs is uses absolute position for move mouse cursor, so test is need reset the window position before start.
",lexifdev,2016-04-14 03:59:17
339,2015-12-09 17:49:56,"ahh i see. this definitely seems like something that should be a plugin. let me think about how we can expose this type of functionality

we'll basically need to be able to add functionality to the electron process.
",matthewmueller,2016-04-14 03:59:17
339,2016-04-14 03:59:17,"@lexifdev With the additions to `.action()` with #425, this could be implemented as a plugin.  Feel free to open up an issue or join the gitter room if you have questions.

Closing.
",rosshinkley,2016-04-14 03:59:17
338,2015-11-09 12:08:43,"This is useful for example to change the userData directory so you don't reuse cookies and such from other instances.
",inversion,2015-12-03 16:28:07
338,2015-11-16 11:10:25,"Merge this as soon as possible please...
",alfonsomga,2015-12-03 16:28:07
338,2015-11-16 17:34:13,"+1
",rosshinkley,2015-12-03 16:28:07
338,2015-11-17 03:08:29,"This is great for testing Electron apps!
",rhysd,2015-12-03 16:28:07
338,2015-11-25 00:15:33,"please fix up the spacing and this should be good to go!
",matthewmueller,2015-12-03 16:28:07
338,2015-11-25 09:23:07,"@matthewmueller are there any autoformatter settings for the project? If we could standardise them it would help.
",inversion,2015-12-03 16:28:07
338,2015-12-02 16:57:09,"Spacing updated @matthewmueller 
",inversion,2015-12-03 16:28:07
338,2015-12-03 16:13:54,"@inversion yep, good call. planning on adding standard.
",matthewmueller,2015-12-03 16:28:07
338,2015-12-03 16:28:48,"now on master, thanks @inversion !
",matthewmueller,2015-12-03 16:28:07
337,2015-11-09 11:39:04,"I've named the events `page-console-error` and `page-console-warn` because otherwise the error event has a naming conflict with the existing event.

I've suggested deprecating page-log and making it page-console-log to bring it inline with the other new events. Any thoughts?
",inversion,2015-12-26 13:57:43
337,2015-12-03 16:33:46,"Hm, can you explain the use case a little better? I was sort of thinking about it in terms of stdout and stderr. I believe console.warn goes to stdout. 

The downside I can see with this is that you might end up missing events if you don't hook into all the correct events. Also what about for events coming from `console.info` and `console.debug`?
",matthewmueller,2015-12-26 13:57:43
337,2015-12-03 16:44:05,"Hi @matthewmueller , the use case for us is that our application logs messages to error, warn, info, log depending on severity and these are useful to capture in our tests (we're mainly using nightmare for UI testing). I think a nicer implementation would be a generic `console` event which captures all console output but also adds a `type` or similar field indicating the 'level' (dir, trace, info, error) etc.

The existing page-log event can be kept the same as it is for backwards compatibility and people who are only interested in `console.log` and want simplicity.

Happy to implement that if it sounds like something that would be merged.
",inversion,2015-12-26 13:57:43
337,2015-12-03 16:47:47,"got it. yep I love it: `nightmare.on('console', function (level, msg, ...) { ... })`

or `page-console` whatever you think makes more sense.
",matthewmueller,2015-12-26 13:57:43
337,2015-12-26 13:57:40,"Done in https://github.com/segmentio/nightmare/commit/f499ddfac65416a781d5c17c86e4fee33719bcab
",inversion,2015-12-26 13:57:43
336,2015-11-09 10:16:48,"fixes #167 
",inversion,2015-12-09 20:11:03
336,2015-11-10 13:17:31,"<3 please merge it.
",Namek,2015-12-09 20:11:03
336,2015-11-19 18:55:13,"I love the idea, but for it to be merged it probably needs a test case.
",chrisgeo,2015-12-09 20:11:03
336,2015-12-03 16:31:28,"It's conceptually and implementation-wise very simple so I'm not sure about testing being needed. One caveat that could be added to the docs is that if you have actions which themselves call other actions you'll need to resolve them, otherwise you end up just queueing an action which itself queues actions. I've generally been handling this by passing a `done` callback to my actions and calling `then` at the end of my action code.
",inversion,2015-12-09 20:11:03
336,2015-12-03 16:37:10,"Haha when I opened that issue, I forgot about `.use(...)`. What do you guys like better `Nightmare.action(action, fn)` or `Nightmare.use(fn)`? Maybe there's a reason to have both, but I can't really think of anything off the top of my head.

Going to rope in the .use people too.
",matthewmueller,2015-12-09 20:11:03
336,2015-12-03 16:47:27,"I've never 'used' `use` but I think there's a case for breaking out some actions into plugins. For example I have got a growing suite of mobile-specific actions that might end up bloating nightmare if merged here.

I also think we should handle conflicts on the prototype in either case and namespacing to plugins seems like a good way to do that.
",inversion,2015-12-09 20:11:03
336,2015-12-09 20:10:35,"Just added both `use` and `action`. Here's some more information: #376 
",matthewmueller,2015-12-09 20:11:03
336,2015-12-09 20:11:03,"Thanks for the PR @inversion ! I incorporated these changes in #376 
",matthewmueller,2015-12-09 20:11:03
335,2015-11-07 01:00:37,,dbkaplun,2015-11-07 02:35:53
335,2015-11-07 02:35:53,"you can use `1.x` but otherwise i don't believe so
",reinpk,2015-11-07 02:35:53
335,2015-11-20 19:12:55,"I started using Nightmare yesterday with node v0.10.36 (no generators) and it seems to be working fine. Am I going down a road that will lead to :broken_heart:?

<S_CODE_TOKEN>

<S_CODE_TOKEN>
",maxbeatty,2015-11-07 02:35:53
334,2015-11-05 11:35:32,"This event are mentioned in the README but don't seem to be implemented, I'm guessing it (and `page-error`) were removed when switching to Electron?

I'm currently working on capturing `console` messages using nightmare. It seems that the `BrowserWindow.webContents` does not fire any `console-message` events - only `<webview>` does (see https://github.com/atom/electron/blob/9f536f47834e920f1f5a4d2e4ace63d95a437095/atom/browser/api/atom_api_web_contents.cc#L303). 

I'm currently working around it by adding an interceptor to console on the renderer in runner.js to pass console messages back using IPC. I've also got an open question about what the reasoning is for the above code on Electron's Slack. I'd be open to making this into a pull request if it sounds like a reasonable approach.
",inversion,2015-11-09 11:31:59
334,2015-11-05 15:28:34,"Hey @inversion, I was trying to use the `page-error` event and it took me a while to realise that while documented in the README, it is not yet available in the last published release. I had to install from GitHub in order to use it: `npm install --save nightmare@segmentio/nightmare#e556285`.

Hope that helps.
",thibaudcolas,2015-11-09 11:31:59
334,2015-11-09 11:31:59,"Cheers @ThibWeb 
",inversion,2015-11-09 11:31:59
333,2015-11-04 18:51:25,"Hi, i'm trying to get the document's scrollWidth and scrollHeight with evaluate, but it do nothing. I want to pass my pageWidth and pageHeight to the screenshot method. How can i do this?

<S_CODE_TOKEN>
",DWboutin,2016-03-30 03:01:31
333,2015-11-04 19:52:24,"Variables inside the evaluate are in a different context than the functions from outside, so a variable won't be passed automatically. You need to pass variables from outside as the extra arguments of evaluate, and pass values back with return.

<S_CODE_TOKEN>
",fmaruki,2016-03-30 03:01:31
333,2015-11-04 20:06:36,"But how can i access do the document object of the page i'm currently in? I don't want to pass variables in, i want to get scrollHeight and scrollWidth of the page who are open.

I need to get `document.body.scrollWidth`, `document.body.scrollHeight` and change a variable in the `localstorage`.

Thank you for your quick response btw!
",DWboutin,2016-03-30 03:01:31
333,2015-11-04 20:36:02,"I tried to set things like you and the yield keyword. But it won't work. I have no arguments to pass to the evaluate methods.

<S_CODE_TOKEN>

The `.evaluate(function(){
      localStorage.setItem('kioskNoir', 'true');
    })` works some times, but not always.
",DWboutin,2016-03-30 03:01:31
333,2015-11-04 21:05:15,"You need to wrap the generator function in a call with the libraries/functions vo or co, and start node with the flag --harmony (don't need flags for io.js).
Sorry for using yield, maybe it is not mandatory, I just never used nightmare without it.
",fmaruki,2016-03-30 03:01:31
333,2015-11-04 21:09:42,"All is working fine! 

Why do you use vo exactly? I don't understand what it does.

Thank you for your help! Really appreciated
",DWboutin,2016-03-30 03:01:31
333,2015-11-05 00:47:44,"I'm happy that you made it work!

Yield is like a return that can continue after the asynchronous operation is done. There must be someone wrapping the function to call it again as a callback once the result is set, so it can continue execution.

I usually use Co for this job, a library that I learned while programming with Koa.js. Vo looks like an sophisticated alternative to Co, I still don't know what it can do better for me.

Asynchronous callbacks, promisses, thunks and generators are all intimately related. It is a complex and fun topic, that I am still trying to fully understand.

Interesting links, I was trying to find another one, but can remember where it is:
https://www.promisejs.org/generators/
http://colintoh.com/blog/staying-sane-with-asynchronous-programming-promises-and-generators
https://medium.com/@rdsubhas/es6-from-callbacks-to-promises-to-generators-87f1c0cd8f2e
",fmaruki,2016-03-30 03:01:31
333,2015-11-05 13:45:02,"Thank you!
",DWboutin,2016-03-30 03:01:31
333,2016-03-30 03:01:31,"It looks like this issue is resolved.  Closing.
",rosshinkley,2016-03-30 03:01:31
332,2015-11-04 11:35:31,"When visiting a page that prompts a download window after the onload, is there a way to prevent it to pop up, so that I can use nightmarejs without needing to interact and close those windows?

Something like a preventDefault on a will-download event?
",fmaruki,2016-04-03 03:26:37
332,2015-11-17 15:55:06,"The good news: you can prevent dialog popups in Electron on a `will-download` event by using [`DownloadItem.setSavePath`](https://github.com/atom/electron/blob/master/docs/api/download-item.md#downloaditemsetsavepathpath).  This was introduced with [this pull](https://github.com/atom/electron/pull/2840).  Or if you don't want to download the item, I think you can use [`DownloadItem.cancel`](https://github.com/atom/electron/blob/master/docs/api/download-item.md#downloaditemcancel).

And now, the unfortunate news: I don't think `will-download` is exposed in Nightmare, at least at present.  It looks (at least superficially) difficult - I think downloads would have to be tracked and `Nightmare.end` would have to be blocked until the downloads are all complete.

Thoughts?
",rosshinkley,2016-04-03 03:26:37
332,2015-11-20 18:25:25,"The new will-download functionality in Electron is really interesting, in Issue #151 @fritx provided some example of using it.

Adding support for download would be important in Nightmare IMHO it's something missing in most headless browser automation solution.
",darthcloud,2016-04-03 03:26:37
332,2015-11-24 00:25:23,"@darthcloud I agree that it's something that is (in general) missing from headless solutions, and that it is pretty important.

To that end, I spent some time tinkering with `will-download`, and there are a couple of things I'd love to hear your (and others') thoughts on.
1. I know I'm stating the obvious, but this would require an upgrade to `electron-prebuilt`.
2. You have to do what you're going to do with the downloading item synchronously inside of the `will-download` handler.  This means that I don't think you could use events to negotiate on a per-download basis where to put downloads or if an item should be ignored.  I haven't put in an option to globally ignore downloads yet, I wanted to get some feedback (hopefully a correction) on this first.
3. I realize that multiple downloads is a _bit_ of a corner case, but a problem nonetheless.  In my sandbox, I have the `will-download` event emitting a `download-start` event, and when the item is done, emitting a `download-done` event from the DownloadItem's `done` event up to Nightmare.  My sample application simply keeps track of the number of downloads in progress and uses (more or less) the same approach as `wait` until all of the downloads are complete.  In other words, it's hacky and works, but I'm struggling to come up with a less-hacked together approach.
4. If #338 were folded in, we could reuse the override path to dictate where downloads go.  That might make for cleaner options and easier cleanup.
5. If the server doesn't immediately respond to the action that triggers a download (your example in #151 exhibits this behavior), the `will-download` event might be triggered _after_ Nightmare has already moved on.  My current ""fix"" is to simply wait, but I don't think there's a method to expect an outcome from an action, eg clicking on a link and expecting a download to start.

I put the changes up on [a branch in my fork](https://github.com/rosshinkley/nightmare/tree/auto-download).  I put up a hastily thrown together minimal sample [as a gist](https://gist.github.com/rosshinkley/c1873d40e17dd433cc2d) for the curious.
",rosshinkley,2016-04-03 03:26:37
332,2016-01-05 08:23:43,"@rosshinkley :+1: for sharing fork and a how-to-gist and +1 for feature
",santeriv,2016-04-03 03:26:37
332,2016-01-05 17:42:35,"@santeriv This is a _bit_ out of date.  I redid the solution for `will-download` and submitted a PR (#382), but it's been closed pending adding Electron extensions (#391).  If you want to use a fork to handle `will-download`, I'd suggest using that one for the time being.  There are examples in the test suite to show how to use it. :)
",rosshinkley,2016-04-03 03:26:37
332,2016-04-03 03:26:37,"With the release of #425 in 2.3.0, I've gone ahead and released plugins that will take care of downloads:
- [nightmare-download-manager](https://github.com/rosshinkley/nightmare-download-manager)
- [nightmare-inline-download](https://github.com/rosshinkley/nightmare-inline-download)

I'm considering this issue resolved.  If you have further questions or problems, please open a new issue.
",rosshinkley,2016-04-03 03:26:37
331,2015-11-04 05:43:32,"I use nightmare like there
vo(function\* () {
    var nightmare = Nightmare({timeout: 6000, show: true,""web-preferences"":{""web-security"":false}});
    var link = yield nightmare
        .goto('https://www.marriott.com.cn/Channels/rewards/signIn-cn.mi')
        .type(#'field-user-id', ""user"")
        .evaluate(function () {
            return alert('ok');
        });
    yield nightmare.end();
    return link;
})(function (err, result) {
    if (err) return console.log(err);
    console.log(result);
});

It has no type in the user to the input and has no alert the msg,I see the log is loading the resource,but I can see the window is loaded,is it there any way to set the css,js and the other request is timeout in a few time or can ignore the other request to execute the type function ?
",jtunggit,2015-12-18 01:02:38
331,2015-11-17 14:22:52,"I think you hit the same issue as #345.  When you set `web-preferences`, the sugar that allows Nightmare to work is overwritten.  This is fixed with #348, pending approval.
",rosshinkley,2015-12-18 01:02:38
330,2015-11-04 05:13:21,"According to [the docs](https://github.com/segmentio/nightmare#pdfpath-options) (which refer to [these docs](http://electron.atom.io/docs/v0.30.0/api/browser-window/#webcontents-printtopdf-options-callback)), doesn't look like there's a way to select what pages to export to PDF. Would be great if there was!
",dbkaplun,2015-12-18 01:01:22
330,2015-11-19 05:14:57,"Could you print to PDF and then use GhostScript to trim off the pages you don't want (see tip [here](http://www.linuxjournal.com/content/tech-tip-extract-pages-pdf))?  That would allow you trim pages from the document.

Not that introducing another dependency would be ideal, but it is an option.

It _looks_ like Electron supports partial selections to print to PDF, but the documentation is lean on how such selections are made.  (It looks like you can select all, and unselect, but it isn't clear how to do partial selections).
",rosshinkley,2015-12-18 01:01:22
330,2015-12-18 01:01:22,"yah, i think you'd want to do this outside of nightmare, unless electron provides support for it as an option, i don't think we'll support this in core.
",matthewmueller,2015-12-18 01:01:22
329,2015-11-03 14:54:22,"Ok, my problem was that I was using Node-webkit, and this package, so my final program's weight was 200+mb. Can I somehow use Electron instead of Node-webkit using Electron from Nightmarejs?

Meaning that I don't want to download electron package since I have it in nightmarejs node_modules.
",yeralin,2015-11-06 20:06:27
329,2015-11-06 20:06:27,"In matter of fact, we can do that. We need to reinstall electron inside nightmarejs to create executable of electron to use
",yeralin,2015-11-06 20:06:27
328,2015-11-02 16:42:30,"I've been playing around with the screenshot functionality but I couldn't make it print the whole content.
My use case is to compare the whole site snapshot for differences (similar to the phantomcss library). Casperjs allows to capture the whole scrollable screen in a png. Is there a way of doing the same with nightmare? If not, I'll see if it can be added easily but it may take some time as I just started getting into nightmare.
",chipay,2015-12-18 01:04:00
328,2015-11-04 19:05:51,"^ +1
",DWboutin,2015-12-18 01:04:00
328,2015-11-04 21:44:21,"+1
",audable,2015-12-18 01:04:00
328,2015-11-24 15:55:51,"You can ask Nightmare to get the dimensions of the body element (using `scrollHeight`/`scrollWidth`), and then use `Nightmare.viewport` to set the viewport dimensions.  After that, you should be able to take a screenshot of the entire page.  I'm not sure this will work 100% of the time, but it's what I've got working for me and I thought I'd share.

An example might be useful:

<S_CODE_TOKEN>

A couple of notes and questions:
1. The width (and to a lesser extent, height) of the original Nightmare instance should be reasonably big, especially if your site is responsive.  Make sure the width is near the threshold you're targeting your screenshot for.
2. `show` has to be false.  If Electron actually renders to a real screen and the page scrolls off the bottom, the viewport will render with the scrollbar as it appears on screen.  I _think_ this is because `show:false` renders in the framebuffer which has no screen dimensions to honor, but I'm not sure.  Anyone know for certain?
3. The `wait` call after setting `Nightmare.viewport` seems to be mandatory.  (Not waiting stretches the original viewport to the body dimensions obtained in `evaluate`.)  I am not clear on why this is, but I once again think it has to do with rendering time in the framebuffer.  (Aside: I think 1s is probably far too long, but I'm guessing a mininum time would be machine-dependent.)  A cursory look through the Electron project didn't yield anything, but admittedly, I didn't spend a whole lot of time on it.  Again, anyone know for sure?
",rosshinkley,2015-12-18 01:04:00
328,2015-12-18 01:04:00,"thanks @rosshinkley for the example :-)
",matthewmueller,2015-12-18 01:04:00
327,2015-11-02 10:04:18,"Can I pass message from main process to render process like ipc module in electron?
",plrthink,2016-04-08 17:36:13
327,2015-11-19 05:35:52,"You could use [`Nightmare.evaluate`](https://github.com/segmentio/nightmare#evaluatefn-arg1-arg2), or possibly [`Nightmare.inject`](https://github.com/segmentio/nightmare#injecttype-file).

What are you trying to do?
",rosshinkley,2016-04-08 17:36:13
327,2015-12-18 01:06:52,"yep, that's what we're using internally to communicate. do you mind explaining your use case a little better?
",matthewmueller,2016-04-08 17:36:13
327,2016-04-08 17:36:13,"Closing for lack of activity.  If this is still an issue, please feel free to reopen or file a new issue.
",rosshinkley,2016-04-08 17:36:13
326,2015-10-31 16:31:04,"There are minor rendering differences for Nightmare on OSX and Linux that are causing [tests](https://travis-ci.org/dbkaplun/domscii/jobs/88532553) to fail. Certain pixel values are off by one.
",dbkaplun,2015-12-18 01:05:38
326,2015-11-02 06:46:01,"i think this might be an underlying electron issue?
",reinpk,2015-12-18 01:05:38
326,2015-12-18 01:05:36,"yah, you should open this up with electron
",matthewmueller,2015-12-18 01:05:38
325,2015-10-30 20:21:37,"As of electron 0.34, you can override headers as part of loadUrl: https://github.com/atom/electron/pull/3227

<S_CODE_TOKEN>

It'd be great if goto could accept a second argument that included these headers. Happy to submit a PR if interested. :)
",danielstjules,2015-12-08 04:26:36
325,2015-11-02 06:45:36,"definitely interested... language settings and basic auth could maybe be supported now too?
",reinpk,2015-12-08 04:26:36
325,2015-11-02 06:47:55,"Yup! Would you want to expose the extraHeaders argument as a string like in electron, or improve on the API a bit and allow passing a headers object instead?
",danielstjules,2015-12-08 04:26:36
325,2015-11-02 06:56:20,"seems like allowing a sticky `.header()` and then the additional parameter for loading a single url?
",reinpk,2015-12-08 04:26:36
325,2015-11-02 07:25:01,"Since I may have misunderstood, do you mean adding two things?
- `.headers(object)`
- optional goto param, `.goto(url, headers)`

I'd assume you prefer a headers object to the headers string electron uses?
",danielstjules,2015-12-08 04:26:36
324,2015-10-30 18:24:21,"If we take a look at nightmarejs package size, you are gonna be surprised (maybe). It is ~100mb. It is all because electron package.

My question is the following, is it possible to change it to phantom headless browser?
",yeralin,2015-11-02 06:42:00
324,2015-10-31 11:14:17,"NightmareJS was based on PhantomJS before. But they've sinced then switched to Electron.

Electron makes it possible to utilize any node package you'd like. For PhantomJS to communicate with Node you'll have to open a really ugly socket and transfer the data that way. To understand this better, take a look at some other [phantomjs-node](https://github.com/sgentle/phantomjs-node#no-really-how-does-it-work) packages:  

The binaries in phantomjs may be smaller, but it uses a very old version of QtWebKit (And as of QT 5.4 it is what the Qt team says ""done"").

I'm interested in this package mainly _because_ it's using Electron (which in turn uses Chromium). Disk space is essentially free these days, and the overhead you're creating by using PhantomJS (memory leaks, processing power, etc) is not worth it to switch back.

There are a few other options out there for you, and the closest you'll get is probably [CaseperJS](http://casperjs.org/). 

Also, if you install the Electron-binary beforehand and globally, npm will verify it's existance and not pull it in again (if the versions match), `npm install -g electron-prebuilt`. 
",Zn4rK,2015-11-02 06:42:00
324,2015-11-02 06:42:00,"thanks @Zn4rK, that's 100% correct!
",reinpk,2015-11-02 06:42:00
323,2015-10-29 03:26:51,"This works great:

<S_CODE_TOKEN>

but minified file not:

<S_CODE_TOKEN>

Any ideas?
",chentsulin,2016-04-03 03:32:09
323,2015-11-11 04:01:04,"Got the same issue too.
",TonyWang031,2016-04-03 03:32:09
323,2015-12-18 01:05:14,"can you narrow down where the error might be occurring?
",matthewmueller,2016-04-03 03:32:09
323,2016-04-03 03:32:09,"@chentsulin @TonyWang031 Depending on the version of jQuery being injected, they could end with sourcemap comments, which would cause the end of the calling function that encapsulates the injected script to be commented out, causing a runtime error.  I would be willing to bet this is what you were hitting, given the unminified version worked but the minified version wouldn't.

The template was fixed in #524, so I am going to go ahead and close this issue.  If you still have problems, feel free to reopen/submit a new one.
",rosshinkley,2016-04-03 03:32:09
322,2015-10-29 00:21:02,"running with babel-node for es6 stuff

<S_CODE_TOKEN>

it always gets stuck at

<S_CODE_TOKEN>
",davis,2016-04-13 01:53:58
322,2015-10-29 00:25:13,"it runs fine if i remove all `.evaluate` blocks,
",davis,2016-04-13 01:53:58
322,2015-10-29 00:38:33,"even replacing the `evaluate(() => document.title);` to  `evaluate(() => 'hello');` causes it to hang
",davis,2016-04-13 01:53:58
322,2015-10-30 14:54:48,"+1 for the issue.
I have this issue occasionally. Like a random event
I don't know where to get the chromium debeg info.
",smallcar88,2016-04-13 01:53:58
322,2015-11-02 06:44:42,"could this be related to #320?
",reinpk,2016-04-13 01:53:58
322,2015-11-16 20:46:40,"_Somewhat_ offtopic, could this (and #320) also be related to #345?
",rosshinkley,2016-04-13 01:53:58
322,2016-01-06 17:01:53,"I think this might be an ES6 issue. I have the same problem with running nightmare on ES6 with node v4.2.3
",edasque,2016-04-13 01:53:58
322,2016-04-08 17:34:05,"Upon further investigation, I can't recreate this behavior.  Doing something like:

<S_CODE_TOKEN>

@edasque @smallcar88 @davis Are you still experiencing problems with `.evaluate()` and fat-arrow functions?
",rosshinkley,2016-04-13 01:53:58
322,2016-04-08 18:34:48,"@rosshinkley i haven't used nightmare in a long time, but yes it was with fat arrow functions, thought it shouldn't have mattered either way because I was transpiling down to es5 before running...
",davis,2016-04-13 01:53:58
322,2016-04-13 01:53:58,"@davis Hm, I'd be curious what transpiler you were using - it _should_ have worked.  At any rate, the ES6 features you needed are now supported out of the box with Node 4+, so I'm going to consider this issue closed.  If you continue to have this problem, feel free to reopen/open a new issue.
",rosshinkley,2016-04-13 01:53:58
321,2015-10-28 14:23:42,"While trying to use the `page-error` and `page-load` events inside one of my scripts, I discovered that all of the project's tests are passing no matter what is being tested. This seems to be the case since 08bd260 (PR #281, switching from co-mocha to mocha-generators).

To reproduce, in `test/index.js`:

<S_CODE_TOKEN>

switch the test to `nightmare.should.equal('test');`.

I tried this on 2d6ddc8, and it does report the error.

As a result, I'm not sure if `page-error` and `page-log` are properly implemented, as the test passed no matter what. My test implementation doesn't work either.
",thibaudcolas,2015-10-30 14:14:07
321,2015-10-30 12:44:32,"Take a look at #290 
",chrisgeo,2015-10-30 14:14:07
321,2015-10-30 14:14:07,"That's it! Thanks @chrisgeo.
",thibaudcolas,2015-10-30 14:14:07
320,2015-10-27 11:36:52,"The formerly used ""did-finish-load"" is not always emitted after an action
in case webContents.isLoading() is true. Thus the ""continue"" event is never
emitted. The probability of this behavior rises with rising frequency
of actions, resulting in flaky behavior and hangs depending on the
target site.

The electron documentation states that ""did-finish-load"" is only
dispatched when the ""onload"" event is dispatched and the spinner of the
tab has stopped spinning. Yet the ""onload"" event is not always dispatched
when webContents.isLoading() is true. Therfore the correct event is
""did-stop-loading"" which is always dispatched after isLoading()
transitions to false.
",fr-,2015-11-25 00:17:02
320,2015-10-27 11:39:57,"As far as I can see this will fix a few open issues for example: #278 #238 #251 
",fr-,2015-11-25 00:17:02
320,2015-10-27 19:11:10,"Wow. This would explain a lot of the inconsistencies.

I _think_ we should be good on the onload stuff since we're injecting JS at the bottom of the page, but can you think of any case where not waiting for the `onload` event could break things?

/cc @reinpk 
",matthewmueller,2015-11-25 00:17:02
320,2015-10-27 22:56:41,"There might be timing issues that could break _some_ existing code that relies on the current behavior of `continue` only emitting on `did-finish-load` and never earlier, but you could probably formulate that code differently using direct event listeners on `did-finish-load`. Furthermore such code does seem to be incorrect to rely on that logic in the first place, so it should probably be changed in any case (or the interface should expose the intent directly).

Apart from that I am pretty sure that even though the `did-finish-load` event always precedes `did-stop-loading` it also _always_ coincides with the latter, which in turn gives us compatibility with the original (intended?) case.

Of course, there could be edge cases that I am not aware of right now. If I find the time I can look into the electron code to graph out all event sequences possible, but if anyone knows right off the bat, that would be awesome.
",fr-,2015-11-25 00:17:02
320,2015-11-02 06:44:27,"i'm good with this!
",reinpk,2015-11-25 00:17:02
320,2015-11-09 11:13:48,"Hi. This solves my issues with wait functions. Are you going to merge it?
",kazinov,2015-11-25 00:17:02
320,2015-11-10 12:54:54,"Seems to work well, would be nice to see it merged.
",inversion,2015-11-25 00:17:02
320,2015-11-10 15:48:46,"yeah sorry haven't had time to read over the code yet, soon sorry!
",reinpk,2015-11-25 00:17:02
320,2015-11-11 00:45:29,"@reinpk it's just one line!
",Namek,2015-11-25 00:17:02
320,2015-11-21 20:33:58,"Applying this change manually fixed #322 for me
",jperl,2015-11-25 00:17:02
320,2015-11-23 23:25:24,"+1.  Wait is much more reliable with this patch.
",rosshinkley,2015-11-25 00:17:02
320,2015-11-25 00:16:59,"Okay going to merge this as it seems like it's helping out a lot of folks. Haven't dug into the internals yet, but I'm sure we can make changes if issues crop up.

Great work @fr- !
",matthewmueller,2015-11-25 00:17:02
319,2015-10-26 13:15:58,"I'm trying out nightmare, and so far it looks like it can be a good replacement for CasperJS.

CasperJS had a pretty nifty function named ""waitForUrl"". It just waited until the browser was pointed at the expected url (or regex), and then it continued to the next step. 

I did some experimentation and it looks like a combination of Electron event's ""will-navigate"" and ""did-get-response-details"" could make this happen.

I'm confused about the docs [here](https://github.com/segmentio/nightmare#onevent-callback) though. 
Is it possible for me to use the events after goto() in this case?

The case I'm trying out is a login form where they (the site) do some ""ajax magic"" to authenticate the user, and if the response is ok, they do a window.location.href-redirection. 
",Zn4rK,2016-04-11 09:11:56
319,2015-10-28 10:21:36,"i think you dont need any events for this because the code isn't runed async, its a generator function with yield, it will wait until .goto() finished just like in this examples  https://github.com/segmentio/nightmare/blob/master/test/index.js#L48 Just remember that you have no callbacks, unless you want to inject some js into the site with evaluate, then you need to pass in that js as a callback
",antpaw,2016-04-11 09:11:56
319,2015-10-28 10:28:22,"In this case the yield will finish after it's clicked on the login button. I can of course wait for an element on the site I get redirected to, but in this instance, the only unique thing that can help my verify I was successfully logged in is the new url.

When I know I'm inside, I yield another step that fetches the data for me, but if the first yield doesn't take me to the new url, the data fetching will fail.

The only reason I would like to utilize the events is because they are in place, and that would eliminate any need for pulling the url and check if we're at the expected url.
",Zn4rK,2016-04-11 09:11:56
319,2015-10-28 10:30:08,"sorry i don't understand, can you paste the code?
",antpaw,2016-04-11 09:11:56
319,2015-10-28 10:50:59,"It's very simple, really, hopefully my example here will clear some things up.

<S_CODE_TOKEN>

Here's a quick and dirty implementation of what I really mean which I just now placed in
`nightmare/lib/actions.js` for the sake of argument.

<S_CODE_TOKEN>

This whole issue is a suggestion of enhancement by adding the functionality to wait for a certain url. The above code is obviously just a proof of concept, but by listening to some of the other events, a better implementation could be made. 
",Zn4rK,2016-04-11 09:11:56
319,2015-10-28 11:07:35,"try something like this

<S_CODE_TOKEN>
",antpaw,2016-04-11 09:11:56
319,2015-10-28 11:11:48,"Thank you, but then we're back at pulling [(setTimeout)](https://github.com/segmentio/nightmare/blob/master/lib/actions.js#L270), and that was the whole idea to avoid by utilising the events Electron sends.

I know of a few different ways I can make this particular case work, but I was just suggesting the implementation of a feature that I think could be good to have in the core of Nightmare.

Reading this whole thread back again, I might have been a bit unclear about the purpose of the issue.
",Zn4rK,2016-04-11 09:11:56
319,2016-02-08 19:53:19,"I was looking through the PR's and saw https://github.com/segmentio/nightmare/pull/425, and decided to do a quick experiment. This could easily be implemented like a plugin once #425 is decided on, by doing something like;

<S_CODE_TOKEN>

Which would allow for usage like this;

<S_CODE_TOKEN>
",Zn4rK,2016-04-11 09:11:56
319,2016-02-09 08:49:47,"hm, i thought we already did this:
- https://github.com/segmentio/nightmare/blob/master/lib/nightmare.js#L210-L215
- https://github.com/segmentio/nightmare/blob/master/lib/runner.js#L333-L347

basically after every action we check to see if the page is navigating, then wait until it stops loading.
",matthewmueller,2016-04-11 09:11:56
319,2016-02-09 09:06:14,"Yeah, we're not doing the next action until we're ready, and that's good!

This is an older issue, and back in october I couldn't get the example I've provided here to work. Nightmare has changed since then, but my take on this was that the particular site did not have any other ""success-verification"" other than the url, and navigation there was done with a async `window.location.href`.

Which meant that nightmare just continued with the other yield's.

The site in question has since then changed, so I solved it in a different way. 

However, with history.pushState we never get the ""did-stop-loading"" event, and that's where waitForUrl would be nice - otherwise one would run into timing issues.

This plugin would allow for usage such as this;

<S_CODE_TOKEN>
",Zn4rK,2016-04-11 09:11:56
319,2016-04-03 01:43:51,"@Zn4rK #425 is in as of 2.3.0.  Are you planning on publishing a `.waitForUrl()` plugin?
",rosshinkley,2016-04-11 09:11:56
319,2016-04-03 01:47:23,"@rosshinkley Yes! I'll get on it tomorrow or monday - and closing this with a link when I'm done.
",Zn4rK,2016-04-11 09:11:56
319,2016-04-08 17:42:18,"@Zn4rK Awesome!! Thanks!
",rosshinkley,2016-04-11 09:11:56
319,2016-04-11 09:11:56,"The plugin can be found here https://github.com/Zn4rK/nightmare-wait-for-url
",Zn4rK,2016-04-11 09:11:56
318,2015-10-26 13:10:27,"In the README documentation menu, the URL for **Set up a new instance** was [wrong](https://github.com/segmentio/nightmare#new-nightmareoptions).
This pull request changes it to a [correct](https://github.com/segmentio/nightmare#nightmareoptions) one.

It started from the commit https://github.com/segmentio/nightmare/commit/562e7e42d98d8e844883ae7f7c79e8722ca287e6,  when it removed the **new** keyword but missed the respective URL hash.

I hope I didn't mess anything.
",pravj,2015-10-26 20:40:37
318,2015-10-26 20:40:43,"good catch!
",matthewmueller,2015-10-26 20:40:37
317,2015-10-26 09:49:36,"Hello! <br>
I have a script using nightmare and which works on my pc ,and couldnt get it working on another pc.
This is the error im getting :  

<S_CODE_TOKEN>

It seems like its searching for the electron on my pc's path , how could i change it? I have the electron exec , in the node moudle , but the path is diffrent (F:\Lounge\Lounge\node_modules\electron-prebuilt\dist\electron.exe)
",DavidBarishev,2015-11-02 06:43:42
317,2015-11-02 06:43:42,"sorry i'm not sure, been a long time since i had a pc around :/ stackoverflow is the better source for these path questions!
",reinpk,2015-11-02 06:43:42
317,2015-12-06 22:58:47,"Hello. Maybe it's late but anyway. I had the same trouble and searched more and found solution for me. The path.txt file which is located in ""nightmare\node_modules\electron-prebuilt"" containe path where it is installed so you have to change it for current module location.
",hovosanoyan,2015-11-02 06:43:42
316,2015-10-24 07:23:10,"Can I create app on my device
",rjgross82,2015-10-25 18:24:46
316,2015-10-25 18:24:46,"the question doesn't make much sense for a web-driver automation library :) closing
",reinpk,2015-10-25 18:24:46
315,2015-10-24 07:21:38,,rjgross82,2015-10-25 18:25:08
315,2015-10-25 18:25:08,"the question doesn't make much sense for a web-driver automation library
",reinpk,2015-10-25 18:25:08
314,2015-10-23 20:50:11,"Node version 4.2.1
Mac Os 10.10.5

Running: node --harmony test.js

Test script is the cnn test but with { show: true } passed to the constructor.    A window pops up titled Electron but is hung.  Have to kill the process and kill the script.  Any thoughts on what I am doing wrong?
",emgould,2016-04-23 22:27:01
314,2016-04-11 13:37:32,"@emgould Everything there looks fine to me.  Are you still having this problem with later versions of Nightmare?
",rosshinkley,2016-04-23 22:27:01
314,2016-04-23 22:27:01,"Due to lack of attention and issue age, I'm going to close this issue.  If you're still having this problem, feel free to reopen/ file a new issue.
",rosshinkley,2016-04-23 22:27:01
313,2015-10-23 16:07:03,"See [Build #1](https://travis-ci.org/dbkaplun/domscii/builds/87059257) for [dbkaplun/domscii](https://github.com/dbkaplun/domscii). Runs great locally but fails on TravisCI due to timeouts.

See also travis-ci/travis-ci#5002
",dbkaplun,2015-10-29 18:48:49
313,2015-10-29 18:22:47,"https://github.com/juliangruber/electron-stream#travis
",juliangruber,2015-10-29 18:48:49
313,2015-10-29 18:48:49,"Aha, thanks @juliangruber!
",dbkaplun,2015-10-29 18:48:49
313,2015-10-29 23:11:49,"@juliangruber nice!
",matthewmueller,2015-10-29 18:48:49
313,2016-03-17 15:25:50,":+1: 
",justinmchase,2015-10-29 18:48:49
312,2015-10-23 11:29:22,"Hi,

I am currently looking for alternatives to PhantomJS for a project of mine and Nightmare looks very promising!

However, I need to be able to retrieve response details such as response code and response headers. Is it possible to get this information with Nightmare somehow?
",michenriksen,2015-10-25 19:05:04
312,2015-10-25 19:05:45,"check out `did-get-response-details`:
https://github.com/segmentio/nightmare#onevent-callback
",reinpk,2015-10-25 19:05:04
312,2015-12-05 16:09:56,"@reinpk I've try to capture `did-get-response-details` event, but I got EVERY response of the resources(js, css, images...) in the page. I only want the main page's response info.

Is there any way to do this?
",scarletsky,2015-10-25 19:05:04
312,2015-12-05 19:47:27,"@scarletsky as far as i know you'd need to filter for the resource you are looking for yourself
",matthewmueller,2015-10-25 19:05:04
311,2015-10-22 19:34:46,"Is it possible to export a page to pdf that forces a specific aspect ratio / resolution?
",dolphub,2015-10-25 19:06:55
311,2015-10-25 19:06:55,"not sure tbh, that would depend on the underlying electron implementation, which nightmare just passes through to:
- https://github.com/segmentio/nightmare#pdfpath-options
- http://electron.atom.io/docs/v0.30.0/api/browser-window/#webcontents-printtopdf-options-callback
",reinpk,2015-10-25 19:06:55
310,2015-10-22 18:35:04,"Yeah i am archaic, can you guys provide es5 examples aswell?
",PombaM,2015-10-25 19:12:12
310,2015-10-23 14:53:42,"+1 :+1: 
",FdezRomero,2015-10-25 19:12:12
310,2015-10-25 19:12:12,"nightmare is specifically designed to be used with generators in es6+, so i think that'd kinda defeat the purpose. you can use nightmare `1.x` if you want to avoid generators/es6 though
",reinpk,2015-10-25 19:12:12
309,2015-10-22 15:44:54,"Hi, 

Great work, at first.
I use this module to replace phantom for web page automation. However, I need to set custom header or `accept-language` header of the requests.

How can I achieve that?

Best regards,
Kevin
",kevinprotoss,2016-04-08 17:17:37
309,2015-11-03 13:30:11,"I've got a feature branch that implements passing options to goto. With this you can add headers to your request. @reinpk if you think this is an appropriate pull request, let me know. Here's the branch: https://github.com/fr-/nightmare/commit/21fb1eb597ad85981333583ec7dc33098ea309e2  
",fr-,2016-04-08 17:17:37
309,2016-04-03 01:36:00,"@kevinprotoss @fr- Could you use `.header()` to accomplish this?
",rosshinkley,2016-04-08 17:17:37
309,2016-04-08 17:17:37,"Closing as I think this is solvable with the existing implementation.  If this is still an issue, feel free to reopen or open a new issue.
",rosshinkley,2016-04-08 17:17:37
308,2015-10-21 21:40:10,"Added a `mousedown` event to fulfill enhancement #201.
",nicholasblexrud,2015-12-03 16:51:17
308,2015-12-03 16:51:32,"sorry for the late response. this is on master now. thanks!
",matthewmueller,2015-12-03 16:51:17
307,2015-10-21 20:32:52,"Since ""...page-error ... event is not triggered if the injected javascript code (e.g. via .evaluate()) is throwing an exception...."", what's the best way to do so?
",edasque,2015-10-25 19:34:41
307,2015-10-25 19:34:41,"errors bubble up from `.evaluate()` in my testing... try running this modified example from the top of the readme:

<S_CODE_TOKEN>

The output I get is `Cannot read property 'href' of undefined`.
",reinpk,2015-10-25 19:34:41
306,2015-10-21 12:08:22,"In Nightmare v1 there was an option to timeout .wait(), i added this back in to v2

please don't merge both of this pull requests https://github.com/segmentio/nightmare/pull/305  at the same time, they will have conflicts.
I can merge the other with upstream/origin and update the other after you have merged one of this.
",antpaw,2015-12-03 22:34:08
306,2015-12-03 16:52:59,"ah sorry, I just saw this one. the other one has been merged. this looks good too. thanks!

mind resolving the conflicts? then i'll merge this one
",matthewmueller,2015-12-03 22:34:08
306,2015-12-03 22:28:14,"Thanks! Resolved!
",antpaw,2015-12-03 22:34:08
306,2015-12-03 22:34:06,"thanks @antpaw !
",matthewmueller,2015-12-03 22:34:08
305,2015-10-21 10:00:19,"... just like .evaluate()
",antpaw,2015-12-03 22:02:53
305,2015-11-03 18:53:42,":+1: I was going to carve out time to write this as well.
",chrisgeo,2015-12-03 22:02:53
305,2015-12-01 14:26:09,"we need that :pray: 
",a7madgamal,2015-12-03 22:02:53
304,2015-10-21 00:15:35,"I'm running the example from the Readme:

<S_CODE_TOKEN>

and when I switch out the URL in the expect statement (to something that should definitely fail, like 'asdf'), the test is still showing as passing. I have mocha, chai, and mocha-generators installed, and I'm using `mocha --harmony` to run the files in my test directory. 

After reading issue #295, I tried installing vo and adding in that wrapping syntax, but it doesn't seem to make any difference. 
",nkanderson,2016-04-13 04:54:12
304,2015-10-21 03:14:35,"I added your test to `test/index.js` then ran it and got this error.

<S_CODE_TOKEN>

The problem seems to be that the search result page on [yahoo.com](https://search.yahoo.com/search?p=github+nightmare) doesn't have any elements that have a class of `url` and `breadcrumb`. Thus the test should timeout if ran properly.

Maybe the reason why your test are passing is because you installed but didn't initialize the `mocha-generator` module. See this on how. https://github.com/segmentio/nightmare/pull/290
",LarryBattle,2016-04-13 04:54:12
304,2015-10-21 16:57:34,"Oh jeez, of course, thanks @LarryBattle. 

I added the `require('mocha-generators').install();` line and the tests are now failing. I've tried to get an example that passes, pulling in updated selectors from the yahoo search, but I'm not able to get anything to work. Are there updated examples using Mocha that pass?
",nkanderson,2016-04-13 04:54:12
304,2015-11-03 11:11:20,"I have the same problem here with OS X 10.11.1 node v4.2.1 mocha 2.3.3. I'm new to node.

<S_CODE_TOKEN>

the result is:

<S_CODE_TOKEN>

With `require('mocha-generators').install();` added to top

<S_CODE_TOKEN>

the result is:

<S_CODE_TOKEN>

is this right?
",miaomi,2016-04-13 04:54:12
304,2015-11-09 19:55:36,"I was getting a mocha timeout error but this seems to work fine:

<S_CODE_TOKEN>

If you change the assertion, you end up with a failing test.  I also added `nightmare.end()` to close the window when the tests are finished.  
",WMeldon,2016-04-13 04:54:12
304,2016-04-08 17:16:09,"@nicolekanderson Did you get this sorted out?  If not, have a look at [Nightmare's test suite](https://github.com/segmentio/nightmare/blob/master/test/index.js).

@miaomi Hm, the errors look like `electron-prebuilt` is either not installed or didn't install properly.  Try wiping `node_modules` and running `npm install` again.

@WMeldon It's best practice to end the Nightmare instance when you're done.  Otherwise, the child process will remain running forever and you will (rightfully) get Mocha timeouts.
",rosshinkley,2016-04-13 04:54:12
304,2016-04-13 04:54:12,"I'm going to go ahead and close this issue due to age, lack of activity, and that I _think_ it's resolved.  If this is still an issue, feel free to reopen/open a new issue.
",rosshinkley,2016-04-13 04:54:12
303,2015-10-20 22:29:43,"add `npm test` command since that's really common when people clone a project :)

koa and metalsmith do same thing
",tejasmanohar,2015-10-20 23:07:01
302,2015-10-20 22:25:39,,tejasmanohar,2015-12-03 17:14:19
302,2015-10-21 02:11:50,"`exports` and `module.exports` point to the same object unless changed. 
- https://nodejs.org/docs/latest/api/modules.html#modules_the_module_object

It would be better to change the 2 references to `module.exports` to point to `exports`. 
",LarryBattle,2015-12-03 17:14:19
302,2015-10-21 02:17:03,"It would be better to stick to `module.exports` because that's the convention. `exports` is merely a shorthand that can sometimes cause confusion.

For example, if you use `module.exports` and `exports`, what's exported? And when you do, `module.exports = exports = x`, that's just additional meaningless clutter to your codebase especially when `module.exports` _always_ works in Node.js :wink: 

Read here- http://www.hacksparrow.com/node-js-exports-vs-module-exports.html
",tejasmanohar,2015-12-03 17:14:19
302,2015-10-21 04:56:57,"leaning -1 on this change, though fairly indifferent. the reason for this is because it's added syntax and i think most people in the node community (also webpack and browserify world) understand commonjs at this point. 

i do agree that `exports` shouldn't have made it into the spec though.
",matthewmueller,2015-12-03 17:14:19
302,2015-10-21 05:10:22,"alright. regardless of convention, i'd still recommend against `exports`... but i understand commonjs so whatever. i myself am +- 0
",tejasmanohar,2015-12-03 17:14:19
302,2015-12-03 17:14:18,"closing this. i think we're going to stick with `exports` for the time being. thanks!
",matthewmueller,2015-12-03 17:14:19
302,2015-12-03 17:16:41,"fair
",tejasmanohar,2015-12-03 17:14:19
301,2015-10-20 22:20:06,"i'd say that since everyone using nightmare is es5+, Function#bind should be preferred to the `var self = this` strategy since rebinding `this` is the end goal and we don't have to declare another variable.

thoughts?
",tejasmanohar,2015-12-04 06:39:47
301,2015-12-03 17:16:21,"whenever i see this change, i always wonder about the benchmarks, since we're wrapping every function in another function, as opposed to just pointing to `this` ref. do you have any benchmarks of this being a negligible perf change? doesn't have to be nightmare specific but just in general?
",matthewmueller,2015-12-04 06:39:47
301,2015-12-04 02:21:21,"@matthewmueller FWIW, there's a decent looking [jsperf](https://jsperf.com/bind-vs-closure-setup/49).  According to that, it looks like the `bind` method is significantly slower.  Is that close to what you had in mind?
",rosshinkley,2015-12-04 06:39:47
301,2015-12-04 06:39:32,"@rosshinkley yep this is exactly what i was looking for:

![img](https://cldup.com/LwkeRajv9Q.png)

even though it's a micro optimization, i don't think using `self` is much worse syntactically. 

closing for now, thanks guys!
",matthewmueller,2015-12-04 06:39:47
301,2015-12-04 14:19:31,"aha, nope- i did not have a stat for this but am glad to see this one- didn't know...
",tejasmanohar,2015-12-04 06:39:47
300,2015-10-20 14:23:48,"There are two ways of getting an exception in Nightmare, one is to inject some ""bad"" code via .evaluate(), this will stop nightmare and even call done() in mocha. But there is also the issue with already existing code, that has errors, now there is an option to listen for this.
Same with console log, before only console logs from evaluate() where shown.
",antpaw,2015-10-20 21:33:02
300,2015-10-20 20:03:45,"Sweet! So I thought about this a bit more. One issue I have with the event name:

1) it's inconsistent with the existing event names: https://github.com/atom/electron/blob/master/docs/api/browser-window.md#events

I think for this reason, it should be something like: `page-error` and `page-log`.

The only other thing that would be good is squashing the commit, so it's more concise in the commit log. 

Otherwise looks good, thanks!
",matthewmueller,2015-10-20 21:33:02
300,2015-10-20 21:19:18,"ok, done
",antpaw,2015-10-20 21:33:02
300,2015-10-20 21:33:00,"Thanks @antpaw !
",matthewmueller,2015-10-20 21:33:02
299,2015-10-20 09:07:58,"This was a horrible bug. Happening on my node v4.2.1 and on the circleci build system
",antpaw,2015-12-09 17:45:26
299,2015-11-03 18:54:32,"Look at #290 
",chrisgeo,2015-12-09 17:45:26
299,2015-11-25 10:04:27,"I've added more npm updates to it. Please please do merge this or #290 it's reckless to move on with this project without tests.
",antpaw,2015-12-09 17:45:26
299,2015-12-03 17:18:48,"sorry, what does this do? we've ended up fixing the test bug, so i'm trying to understand what these updates do
",matthewmueller,2015-12-09 17:45:26
299,2015-12-03 22:26:45,"I've update to the current master. Basically this brach is a npm-update-branch now. Especially important is the electron update.
",antpaw,2015-12-09 17:45:26
299,2015-12-03 22:31:41,"Oh i just noticed, this pr also solves the issue with two ""scripts"" keys in package.json 

https://github.com/segmentio/nightmare/blob/e908b5c960c9034b8e9024bdcaf4ac5988a7e5c8/package.json#L7
https://github.com/segmentio/nightmare/blob/e908b5c960c9034b8e9024bdcaf4ac5988a7e5c8/package.json#L43
",antpaw,2015-12-09 17:45:26
299,2015-12-03 22:35:16,"what's the electron bump fix?
",matthewmueller,2015-12-09 17:45:26
299,2015-12-03 22:42:55,"https://github.com/mafintosh/electron-prebuilt/commits/master

i don't know exactly, most of the commits are just version bumps for now obvious reason, but there are also some merges of prs with some fixes. i think it's go to stay to date with this npm.
",antpaw,2015-12-09 17:45:26
299,2015-12-09 17:45:26,"awesome, thanks! i went ahead and bumped these deps
",matthewmueller,2015-12-09 17:45:26
298,2015-10-20 08:18:28,"- Removed `Makefile`
- `npm test` can now be used to run tests
- Updated Readme.md to mention how to run tests
- tmp folders are now created inside `test` instead of `/tmp/nightmare`
- Includes https://github.com/segmentio/nightmare/pull/290
",LarryBattle,2015-12-03 17:04:44
298,2015-10-20 20:05:53,"personally like having the makefile for `make test`, but it's kind of frivolous for this case anyway. thoughts @reinpk ?
",matthewmueller,2015-12-03 17:04:44
298,2015-10-20 22:33:14,"@matthewmueller i'd recommend #303 instead. you may have more make tasks later but `npm test` is very common (as the shortcut is even there from `npm run-script` / `npm run` test)... so best to support that. i think many CI systems default to this, too.
",tejasmanohar,2015-12-03 17:04:44
298,2015-10-20 23:07:26,"@tejasmanohar yep, i like that more. I think we should keep the makefile, but the other stuff looks good!
",matthewmueller,2015-12-03 17:04:44
298,2015-10-20 23:09:02,"yep! makefile is good, we can do much more there. `npm test` is just a helper :)

:-1: on this change
",tejasmanohar,2015-12-03 17:04:44
298,2015-12-03 17:04:28,"thanks @LarryBattle this is on master now!
",matthewmueller,2015-12-03 17:04:44
297,2015-10-20 05:52:54,"I wan't to wait for 'did-finish-load' event fired and take a screenshot, is there a nicer way of doing this?

<S_CODE_TOKEN>

And because of the #251 , even the example above can't work!
",CatTail,2015-10-24 00:38:53
297,2015-10-23 15:04:55,"@CatTail `.evaluate()` internally waits for the `did-finish-load` event before running. So you can replace the `.wait()` with `.evaluate()`, like this:

<S_CODE_TOKEN>

It's a little bit hacky because the internal implementation can change, but it should work.
",FdezRomero,2015-10-24 00:38:53
297,2016-02-16 14:49:09,"@CatTail if still relevant, i solved this issue in this ticket https://github.com/segmentio/nightmare/issues/481
",sintanial,2015-10-24 00:38:53
296,2015-10-19 19:48:04,"This introduces a new `browser-configure` event that happens before `browser-initialize`, which allows the user to configure the Chromium instance itself. Might be useful to provide other flags, but I only needed `disable-http-cache`. (Apologies for the lack of tests.)
",peterjanes,2016-01-31 06:52:51
296,2015-10-22 14:54:53,"+1
",kevinprotoss,2016-01-31 06:52:51
296,2015-11-05 13:51:54,"+1
",inversion,2016-01-31 06:52:51
296,2015-12-03 16:55:18,"sweet, we should probably namespace this like we did with `options.paths`. `{ chromium: { http-cache: false } }` maybe? 

anyone have any other ideas?
",matthewmueller,2016-01-31 06:52:51
296,2016-01-28 09:55:42,"Close to reduce entropy? You can now pass switches to the runner.
",inversion,2016-01-31 06:52:51
296,2016-01-31 06:53:06,"yep, this can be solved using switches. thanks for the PR!
",matthewmueller,2016-01-31 06:52:51
295,2015-10-19 18:57:56,"Hi. I want to give it a try but the basic examples don't work for me. I read everything and searched the web for my errors but can't get nightmare do do anything. I can't even run the tests. The docs don't say how and going into the nightmare dir, running npm install and node tests/index.js dosn't do it either. I paste the example scripts and try to run them and i get this:

> /nodeapps/nightmare_app/index.js:2
> yield Nightmare()
>           ^^^^^^^^^
> SyntaxError: Unexpected identifier
>    at exports.runInThisContext (vm.js:73:16)
>    at Module._compile (module.js:443:25)
>    at Object.Module._extensions..js (module.js:478:10)
>    at Module.load (module.js:355:32)
>    at Function.Module._load (module.js:310:12)
>    at Function.Module.runMain (module.js:501:10)
>    at startup (node.js:129:16)
>    at node.js:814:3

i am running it like so:  

<S_CODE_TOKEN>

. no luck at all. is that what it's supposed to do ? give me nightmares ?

P.S. this is the code ( running on CentOS 7 ):

<S_CODE_TOKEN>

Does anyone know how to get it working ?
",mlmarius,2015-10-25 19:24:54
295,2015-10-19 21:02:26,"You have to wrap it in `co` or `vo`

<S_CODE_TOKEN>

@reinpk maybe we should change this to avoid confusion
",matthewmueller,2015-10-25 19:24:54
295,2015-10-21 23:52:03,"@matthewmueller Yes, you should change the example, because you want start try it out and you got this error it's frustrating at the beginning.
",laychopy,2015-10-25 19:24:54
295,2015-10-25 19:25:04,"thanks! updated here: https://github.com/segmentio/nightmare/blob/master/Readme.md#examples
",reinpk,2015-10-25 19:24:54
294,2015-10-18 22:36:02,"When using `nightmare.mouseover` the :hover pseudo class isn't triggered in the browser. Looking into it a bit has largely convinced me to not hover events for anything other than cosmetic changes. But to allow screenshots to show effect of mouse hover it could be pretty useful.

Workaround I have is to alias all :hover styles with a `--hover` class, then add the class to `element` inside `nightmare.mouseover`.

As I understand it, this is caused by Chromium not triggering the :hover pseudo class on mouseenter. Issue is possibly covered by [this chromium issue](https://code.google.com/p/chromium/issues/detail?id=486176)).

Curious if you have any thoughts, or I'm missing something more obvious. Thanks!
",psimyn,2015-10-25 19:31:27
294,2015-10-25 19:31:27,"yeah, it appears to be an underlying bug in chromium: https://github.com/atom/electron/issues/2797

unfortunately going to close here since it's several layers down :/
",reinpk,2015-10-25 19:31:27
293,2015-10-18 20:57:24,"Now it's possible to trace js exceptions. It solves this https://github.com/segmentio/nightmare/issues/248 issue and makes Nightmare viable for TTD again.
",antpaw,2015-10-20 14:24:18
293,2015-10-18 22:41:37,"So this would be for page errors, right? Because we already have: https://github.com/segmentio/nightmare/blob/master/lib/javascript.js#L25

Also, I'm not a huge fan of abbreviations and would prefer `javascript error` or `page error` to avoid confusion with your own code causing errors, but if there's previous precedent for this, then we can keep it.
",matthewmueller,2015-10-20 14:24:18
293,2015-10-19 19:28:56,"I've changed to addEventListener. i think the keyword 'js' is fine since its used here too `.inject('js', file)` 
",antpaw,2015-10-20 14:24:18
293,2015-10-19 19:39:22,"I saw the callbacks for runtime errors https://github.com/segmentio/nightmare/blob/master/lib/runner.js#L106 but it's only used for `_inject` as far as i understand.
Right now i'm having a very strange issue and can not check if this two callbacks can be used as one.
The problem is, all the tests are passing within 400ms even if i have something like this `title.should.equal('NOPE')` and i have 30 instances of Electron open in my doc. Even if i freshly checkout master form your remote, mocha tests are just behaving crazy. Do you have any idea why this could happen?
",antpaw,2015-10-20 14:24:18
293,2015-10-19 19:50:23,"Oh it looks like this issue is happing everywhere 
`$ make test` in this old build took 29s https://circleci.com/gh/segmentio/nightmare/364
`$ make test` in this build took 1s https://circleci.com/gh/segmentio/nightmare/373
since build 365 tests don't really run
what could have caused this? the commit for build 365 https://github.com/segmentio/nightmare/commit/58ff6acd00838576c50f953473101ec9241cb60f has nothing at all
",antpaw,2015-10-20 14:24:18
293,2015-10-20 09:09:58,"ok i've fixed this problem here https://github.com/segmentio/nightmare/pull/299
",antpaw,2015-10-20 14:24:18
293,2015-10-20 14:24:18,"Sorry i need to move this pr to a new branch https://github.com/segmentio/nightmare/pull/300
",antpaw,2015-10-20 14:24:18
292,2015-10-18 01:33:35,"At the beginning looks ok but around the 15th attempt it just refuses to work, loading about 20 instances of Electron and dying on me. 

for each call I use:

var result = yield nightmare
      .useragent('....')
      .viewport(1000, 1000)
      .goto(uri)
      .wait(2000)
      .evaluate(function () {
        return document.querySelector('.blabla').innerHTML;
      });
    yield nightmare.end();
",souly1,2015-10-19 09:13:07
292,2015-10-19 07:46:48,"Not sure about Nightmare loading multiple instances of Electron, but to start narrowing it down, how about `wait()`ing on the HTML element rather than setting a timeout? That would at least show you whether the expected element is showing up (eventually) on the failed run.

<S_CODE_TOKEN>
",danhalliday,2015-10-19 09:13:07
292,2015-10-19 09:13:07,"Thanks @danhalliday for the reply, the issue was something completely different in the code with illegal values, sorry I forgot to remove this issue.
",souly1,2015-10-19 09:13:07
291,2015-10-17 01:44:10,"I've been trying to parse with nightmare in-side-intranet-corpo site which is secured with DH-768. As we know it's unsecured thus, chrome, chromium & firefox returns SSL_ERROR_WEAK_SERVER_EPHEMERAL_DH_KEY when trying to load the page. You can easily manage to bypass this in Firefox by setting security.ssl3.dhe_rsa_aes (both 128b and 256b) to false and in Chromium by passing argument --ignore-certificate-errors=true, --cipher-suite-blacklist=0x0001,0x0002,0x0004,0x0005,0x0017,0x0018,0xc002,0xc007,0xc00c,0xc011,0xc016,0xff80,0xff81,0xff82,0xff83,0x0033,0x0039,0x0067,0x006b,0x009es

Unfortunately when I try to load this page by nightmare/electron I get blank page. Any ideas what to do?? I've tried to pass above arguments to chromium engine in runner.js by app.commandLine.appendSwitch, as suggested in #219 but with no result. It did though helped in client-certificate errors but not with above problem.

Asking IT to upgrade security is out of scope. I'm using:
- npm 2.14.7
- node 4.2.1
- electron-prebuilt 0.33.8
- nightmare 2.0.7
- 3.13.0-24-generic #47-Ubuntu SMP  x86_64

Unfortunalety I can't find any wide accessible page which returns this error to provide an example.
",paranoiq1,2015-10-20 10:39:20
291,2015-10-17 01:49:43,"Example site: https://portal.opns.be/
",paranoiq1,2015-10-20 10:39:20
291,2015-10-20 10:39:20,"Problem was, that cipher-suite-blacklist was not supported by electron therefore there was no way passing throughmentioned flag. This seems to be resolved by atom/electron#3147 and should be present in electron-0.34.0
",paranoiq1,2015-10-20 10:39:20
290,2015-10-16 15:23:59,"Hey Nightmare Team - it looks like mocha test suite isn't automatically initializing `mocha-generators` so the tests only appear to run and succeed, instead of running.

**Branch**: Master
**Commit**: 748a2b2b14163d34e89108250e34553d991e7913
### Use-Case

Modify any test to have a `console.log` - never logs to console.
### Solution

Setup needs `require('mocha-generators').install()`
",chrisgeo,2015-12-01 19:14:04
290,2015-10-21 02:36:48,":+1: It says it right there in the readme. https://github.com/vdemedes/mocha-generators
",LarryBattle,2015-12-01 19:14:04
290,2015-11-06 05:28:43,":+1:  need to recover test
",tgohn,2015-12-01 19:14:04
290,2015-11-12 10:35:38,"This should be merged ASAP because I think currently all tests are passed wrongly.
In my environment, below tests failed after adding `require('mocha-generators').install()`.

<S_CODE_TOKEN>
",rhysd,2015-12-01 19:14:04
290,2015-12-01 19:14:02,"yikes, just noticed this. thanks!
",matthewmueller,2015-12-01 19:14:04
290,2015-12-02 01:41:37,":+1:
",rhysd,2015-12-01 19:14:04
289,2015-10-15 21:57:22,"I am trying to crawl a domain completely and ignoring the external domain links. I have written a `while` loop for that, but it ran into an exception.

Here is my code so far:

<S_CODE_TOKEN>

Here is how I ran it:

<S_CODE_TOKEN>

Here is what I got as soon as I ran it:

![screen shot 2015-10-15 at 5 49 18 pm](https://cloud.githubusercontent.com/assets/2539881/10528690/b86b0436-7365-11e5-9fe5-9485374c74e8.png)

How do I fix this?
",rahul-desai3,2015-10-25 19:44:34
289,2015-10-18 23:01:02,"This is your problem.

<S_CODE_TOKEN>

You're passing in a undefined link because the global `link` is overwritten in the context of `run()`.
There are two ways you can fix this.
1. Rename the global `link` variable to something else, like `bacon`
2. Change `var link = linksQueue.pop();` to `link = linksQueue.pop();`
",LarryBattle,2015-10-25 19:44:34
289,2015-10-18 23:16:33,"@LarryBattle That was my bad. I tried both of your solutions, but it gives me `undefined`.

<S_CODE_TOKEN>

I am not sure why exactly it is breaking.
",rahul-desai3,2015-10-25 19:44:34
289,2015-10-18 23:58:47,"Oh. It's because `.evaluate()` executes the function you passed in the context on the browser, which doesn't have access to your link variables unless you pass them directly to `.evalulate()` as additional arguments. 
I hope this example makes this.

<S_CODE_TOKEN>

Here's the source: https://github.com/segmentio/nightmare/blob/master/lib/nightmare.js#L183
",LarryBattle,2015-10-25 19:44:34
289,2015-10-19 00:11:31,"@LarryBattle I tried your example but it gave me `undefined` in the console, just like before. Here is my code: https://gist.github.com/rahul-desai3/8ee6f5322e17a34116ba
",rahul-desai3,2015-10-25 19:44:34
289,2015-10-19 07:29:46,"You're getting `undefined` because `* run()` is called by `vo()` before the other global variables are initialized. This causes `* run()` to stores references to `undefined` values. Place the `vo()` part at the end of the script and run it again.

Here's a simple and short working example of extracting the links on a page.

<S_CODE_TOKEN>
",LarryBattle,2015-10-25 19:44:34
289,2015-10-19 18:06:56,"@LarryBattle That works very well on my local. However, when I put this on Heroku, it doesnt. Here is what I get:

<S_CODE_TOKEN>
",rahul-desai3,2015-10-25 19:44:34
289,2015-10-20 06:17:20,"Related issue: https://github.com/segmentio/nightmare/issues/224
",LarryBattle,2015-10-25 19:44:34
289,2015-10-25 19:44:34,"thanks! gonna close as a duplicate of #224 as @LarryBattle mentioned
",reinpk,2015-10-25 19:44:34
288,2015-10-15 18:00:33,"Added a license field to package.json to get rid of this error.

<S_CODE_TOKEN>
",LarryBattle,2015-10-15 19:01:27
288,2015-10-15 19:01:25,"thanks!
",reinpk,2015-10-15 19:01:27
287,2015-10-14 21:08:03,"I try to use nightmare inside an express app. something like this:

<S_CODE_TOKEN>

I am new to generators and all my attempts with `evaluate` where not successful. I just wish I could use the old `.evaluate(fn, callback)` way. 

Any help greatly appreciated.
",tmaximini,2015-10-25 19:29:01
287,2015-10-15 19:25:19,"The problem is that Express 4 `res.json(obj)` / `JSON.stringify()` only accepts objects and primitives and not generators.
If you look at the source code for `res.json(obj)` you can see that all they do is pass the object to `JSON.stringify()`.
Source code: https://github.com/strongloop/express/blob/2f8ac6726fa20ab5b4a05c112c886752868ac8ce/lib/response.js#L242

A generators is an iternator factory. Broadly speaking, to execute a generator you need to initialize it then call `next()` and check for the value property on the returned object.

Simple example:

<S_CODE_TOKEN>

Output:

<S_CODE_TOKEN>

Tutorial over generators:
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators

So if you update your code you should get something like this.

<S_CODE_TOKEN>

Lastly, I think you might want to use [cheerio](https://github.com/cheeriojs/cheerio) instead Nightmare for scraping webpages.
Tutorial:
https://scotch.io/tutorials/scraping-the-web-with-node-js
",LarryBattle,2015-10-25 19:29:01
287,2015-10-16 09:29:55,"thanks @LarryBattle - I definitely do not want to use cheerio as I need to fill in forms, click buttons etc. on the remote page before parsing it. I am looking into [SpookyJS](https://github.com/SpookyJS/SpookyJS) as well as into nightmare, but with nightmare I am not able to evaluate s simple value and extract it back into express at this time.
I do understand the purpose of generating values, it just doesn't click with me how to use them for scraping, especially if I have a series of remote tasks with multiple `.evaluate` blocks.
",tmaximini,2015-10-25 19:29:01
287,2015-10-16 09:40:07,"Seconding this. In my case, I think the best bet is to switch back to a version older than 2.x.x for the moment.
",jim-thisplace,2015-10-25 19:29:01
287,2015-10-25 19:29:01,"you're mixing generators in incorrectly... if express supports generators instead of functions with callbacks it'd be something like this:
- function passed to `router.get` is now a generator
- `yield` the `getPrice` function to get the result before sending it along
- no need for `.run()`

<S_CODE_TOKEN>
",reinpk,2015-10-25 19:29:01
286,2015-10-14 16:38:56,"Hi, I don't know why this happens, But i was able to find that with breakpoints in the method itself it worked ok, and in adding timeouts it's ok as well, any idea what i might be? maybe i need to update node ro a different library?
Thanks.

The method workaround:

Nightmare.prototype._evaluate = function(js_fn, done) {
  var child = this.child;

  child.once('javascript', function(err, result) {
    if (err) {
      return done(err);
    }
    setTimeout(function(){
      done(null, result);
    }, 1000);
  });

  var args = Array.prototype.slice.call(arguments).slice(2);
  var argsList = JSON.stringify(args).slice(1,-1);

  setTimeout(function() {
    child.emit('javascript', template.execute({src: String(js_fn), args: argsList}));
  }, 1000);
  return this;
};
",souly1,2015-10-17 23:12:56
286,2015-10-14 17:06:07,"This is also still not consistent behaviour
",souly1,2015-10-17 23:12:56
286,2015-10-16 09:37:06,"Anyone experiencing/experienced the same issue?
",souly1,2015-10-17 23:12:56
286,2015-10-17 23:12:56,"Turns out being an issue of the wait that was waiting on a DOM element to be created, perhaps timing to test if created already problematic? Closing issue
",souly1,2015-10-17 23:12:56
285,2015-10-14 06:33:13,"Here is my test script:

<S_CODE_TOKEN>

""anotherjs.js"" file just contains a function called ev() which  is invoked in the .evalute() action.
              function ev(tp,page_tag){
                    var loadtiming =  new Date().getTime()-window.performance.timing.navigationStart;
                        var xhr = new XMLHttpRequest();
                   xhr.open( ""post"", ""http://localhost:8887/postkf"", false);
               xhr.setRequestHeader(""Content-Type"",""application/x-www-form-urlencoded"");
                       xhr.send('client_id='+page_tag+'&topic='+tp+'&msg='+loadtiming);
             };

I send a message to a server machine in function ev().  But, in this way, the server cannot receive the request.  I cannot figure out where goes wrong. 
",FredXue,2015-10-21 02:45:39
285,2015-10-18 23:51:00,"It seems that `ev()` is receiving undefined values.
Pass in `tp` and `page_tag` as additional arguments to `.evaluate()`
Example:

<S_CODE_TOKEN>
",LarryBattle,2015-10-21 02:45:39
285,2015-10-19 05:34:43,"@LarryBattle  Ah, sorry for missing the arguments in evaluate(). However, it still doesn't work.
",FredXue,2015-10-21 02:45:39
285,2015-10-19 08:25:39,"Make `ev()` global in `anotherjs.js` by adding `this.ev = ev` at the end of the file.
Example:

<S_CODE_TOKEN>

`undefined` is returned when there's a problem with your script. So for testing have `.evalulate()` 
return the source of `ev()` to see if it exist or not.

Example:

<S_CODE_TOKEN>
",LarryBattle,2015-10-21 02:45:39
285,2015-10-21 02:42:46,"Great!  it works.  I really need to practice JS coding more.  LOL.        Really appreciate your help!  @LarryBattle 
",FredXue,2015-10-21 02:45:39
284,2015-10-13 20:07:17,"I just copied the `cnn.js` example from the docs here and started it with `node --harmony cnn.js`.
When it start, it _does not_ show any error or anything. It just stop when calling `Nightmare()` and do not go on nor terminate the application.
Everytime I try to call `Nightmare()` (in any code) it just stop on the function.

Further information:

<S_CODE_TOKEN>

**Question 1:** Does Nightmare require some other package or applciation?
**Question 2:** Any idea why the function is locking the node application? It's just me?
",ezaca,2015-10-25 19:26:38
284,2015-10-15 18:50:39,"I tested `cnn.js` using node v0.12.2 and worked. 
The problem might be that you have a slow connection to cnn.com.
For simplicity, change the url to `example.com` and see if the `cnn.js` script works.

Or add this file to root of the nightmare directory and run this.
**nightmare_example_com_test.js**

<S_CODE_TOKEN>

Expected output:

<S_CODE_TOKEN>
",LarryBattle,2015-10-25 19:26:38
284,2015-10-25 19:26:38,"no additional requirements, but added another complete example here: https://github.com/segmentio/nightmare#examples

you can also try the `DEBUG=*` flag to see what's happening:
https://github.com/segmentio/nightmare/blob/master/Readme.md#debugging
",reinpk,2015-10-25 19:26:38
284,2015-11-03 10:43:41,"Hi. Can you help me?

this is my test code:

<S_CODE_TOKEN>

It's works fine on windows. but the same problem that application stoped immediately on linux(centos)

This is my debug information`DEBUG=* node --harmony test.js`

<S_CODE_TOKEN>

That's all the log...
",lichunqiang,2015-10-25 19:26:38
283,2015-10-13 09:43:32,"Hi,

It's possible to use each function ?
I would like to crawl comments and click on the paginate (javascript paginate) when there aren't comments.

Thanks,
",timothylhuillier,2015-10-25 19:44:53
283,2015-10-13 10:08:48,"The nice thing about generators is that you can use them inside control flow loops, so you could  do something like:

<S_CODE_TOKEN>
",matthewmueller,2015-10-25 19:44:53
282,2015-10-12 23:48:59,"if you're running these things concurrency, it's pretty easy to run into:

<S_CODE_TOKEN>
",matthewmueller,
282,2015-10-17 23:30:33,"+1 for the issue
",souly1,
282,2015-10-19 00:03:12,"@matthewmueller Could you provide a test example?
",LarryBattle,
282,2015-10-20 08:38:38,"in my case, after adding a .wait(selector) action into the test, it runs into this situation. Any idea? or solution?   
",FredXue,
282,2015-10-21 02:53:02,"The fix/hack is to add `process.setMaxListeners(0);` at the top of your script.
Source: http://stackoverflow.com/questions/9768444/possible-eventemitter-memory-leak-detected

To reproduce the warning message, remove `process.setMaxListeners(0);` from `test/index.js` then run the tests.

I wonder if there is actually a memory leak going on :question: 
",LarryBattle,
282,2015-10-23 09:29:58,"process.setMaxListeners(0); is making no difference here - definitely seems related to the use of wait().

mocha 2.3.3, node 4.1.2, nightmare 2.0.7
",philhaz,
282,2015-10-27 05:12:02,"Same problem here. process.setMaxListeners(0) did not make a difference.
",pcalin,
282,2015-10-29 09:07:54,"+1 for the issue
",nightink,
282,2015-10-30 19:09:19,"+1 for the issue
",victorwpbastos,
282,2015-11-03 11:18:56,"It seems to me that using nightmare in a long running/concurrent setup is prone to many errors and can cause all kinds of hiccups.

Firstly, there are _some_ things to consider when registering a global (process) event handler in the ctor of any class, but in this specific case it's pretty important to clean them up in _all_ cases that can be considered a shutdown/dtor scenario for nightmare: 
1. Shutdown via end()
2. Exit of child process
3. Inability to start child process
4. Exceptional exit

This also applies for some of the control flow, which can cause nightmare to hang if the electron process abnormally quits, as it does not reject in those cases (mainly never returning from `continue`).

I have created a preliminary feature branch on my fork of nightmare that tries to tackle these, but it's not cleaned up. Basically it tries to achieve multiple things:
1. Clean up after event listeners
2. Dynamically increase the maximum event listeners when more instances of nightmare are created on a single process
3. Handle abnormal exists (such as electron SIGSEGV/SIGBUS, exit code != 0, exceptions)
4. Set a `failed` state on the nightmare instance along the lines of `initial` and `ready` in case electron crashes/exits abnormally

I am not yet convinced this is the best solution, so I am not yet issuing a pull request, but you can take a look here: https://github.com/fr-/nightmare/commit/c22b45c8a9d4e6712ba236e4c16761a44198ab59

It does seem to work for largely concurrent runs in my test cases, though. Any input appreciated!
",fr-,
282,2015-11-10 17:16:13,"My research: as @fr stated it's about a long test run but I believe it's related to number of tests rather than physical time (to be specific). In my case commenting one `.click(..., ...)` or `.type()` made it work without warning, but uncommenting any one of these made the warning occur again - tested many times. Adding `.wait(100)` doesn't bring the warning. What's more interesting (another bug probably), doing `.wait(100).wait(100)` hangs up.

By looking into https://github.com/segmentio/nightmare/blob/master/lib/actions.js I can see there's one common thing between `click()` and `type()` and not for `wait()` - it's a call to `this._evaluate` which can be found here: https://github.com/segmentio/nightmare/blob/master/lib/nightmare.js I can see only a call to `once` in there. Not sure what's to be cleaned here, do you have some ideas about it, @fr?
",Namek,
282,2015-11-11 00:09:22,"@Namek from what I can see there are multiple issues at the same time that also but not _exclusively_ manifest themselves in warnings about  about too many registered `uncaughtException` event listeners:
1. The most obvious one is of course, that the event listeners are registered on `process` (which is _global_) whenever a new Nigthmare instance is created and them not being removed after an instance is shut down.
2. Additionally there is a default maximum for listeners on any `EventEmitter` (10 is the default, as per: https://nodejs.org/api/events.html#events_emitter_setmaxlisteners_n) which can be increased (and depending on the node version queried) as need be. So in the legitimate case where more than 10 instances of Nightmare are created _concurrently_ this number has to be increased with the number of instances. _(as a side note: as there could be more code apart from nightmare that registers handlers on `process` one should also track the globally registered event listeners not created by nightmare)_.

The above points are being handled by the feature branch I posted, with the slight caveat that the meaning of _shutdown_ is a matter of definition, but can be classified as in my previous comment.

The second part of the issue is handling abnormal exits and failure to start the underlying electron process. In these cases one also needs to ensure that none of the actions that are waiting on `continue` will hang forever when the underlying electron and therefore the IPC has shut down and will never emit said event. My proposed solution is to:
1. Return from continue immediately after an abnormal shutdown of electron
2. Set a `failed` state on the instance of nightmare such that failure can be detected
3. Clean up global resources (aka global event listeners in this case)

So coming back to `_evaluate` @Namek: one thing that just occurred to me is that the `_evaluate` function you point to could possibly wait for `javascript` indefinitely if the electron process crashes while handling the inbound `javascript` event. I'd have to review the code again to be sure, though.

In any case, as far as I can see there seem to be no more implications other than the aforementioned leading to the behavior described; but I haven't really had the time to dig any further, which is why I was looking for more input on the branch.

Btw: The `wait(100).wait(100)` problem might very well be another issue that possibly can be fixed with #320 

As a general note: It does seem a bit unsafe to use `once` on the IPC as a control flow structure without handling exceptional cases...
",fr-,
282,2015-12-07 22:01:58,"I'm also running into this, when using `.wait(fn)`.
",seep,
282,2015-12-08 07:07:29,"I have a pretty long running nightmare process that runs into this issue. it seemed fine until I got to the last method which involved setting and clicking a lot of form fields. I tried to move the code into just a couple of evaluate blocks to possibly keep the number of events down but that didn't seem to work.
https://gist.github.com/billpull/c8278fdf367455f4eb91

has anyone made any progress on this issue?
",billpull,
282,2015-12-14 20:09:24,"One hack to get around the issue is to add

<S_CODE_TOKEN>

to the ipc.js file in nightmare > lib.

Note that this is dangerous and could easily lead to memory leaks.
",EmiPhil,
282,2015-12-14 21:27:09,"+1 for the issue
",mexius,
282,2016-02-06 15:32:50,"Still getting this using the latest version. `Emitter.defaultMaxListeners = 0;` in the ipc.js as recommended by @EmiPhil is the only way I could get these errors to stop, even using the latest version. `process.setMaxListeners(0);` did not work. I'm on win 10, node v5.5
",Crazometer,
282,2016-02-22 00:15:27,"+1
",apimapper,
282,2016-02-26 21:31:02,"+1
",Oceanswave,
282,2016-05-04 10:41:51,"+1 
",faylai,
282,2016-05-04 18:59:44,"+1
",glenchao,
282,2016-05-12 09:10:28,"+1
",rickmed,
282,2016-05-22 23:28:17,"+1
",atwellpub,
281,2015-10-12 06:55:00,"Seems to be more performant, leaner, and has better error handling. Solves #279 
",tejasmanohar,2015-10-12 22:52:32
281,2015-10-12 22:52:49,"looks good, hopefully this will solve some errors. thanks!
",matthewmueller,2015-10-12 22:52:32
281,2015-10-12 23:18:18,"no probs!
",tejasmanohar,2015-10-12 22:52:32
280,2015-10-11 17:42:54,"Electron processes don't exit after tests finish.
Is it expected behavior?

If no, is it Nightmare issue?

Thanks!
",kuraga,2015-10-25 18:30:02
280,2015-10-11 17:44:15,"I found this too — I realised you need to call `end()` when you're done:

<S_CODE_TOKEN>

Hope that helps!
",danhalliday,2015-10-25 18:30:02
280,2015-10-11 17:50:21,"@danhalliday , thanks!

Let's mention in docs?
",kuraga,2015-10-25 18:30:02
280,2015-10-25 18:30:01,"https://github.com/segmentio/nightmare#end
",reinpk,2015-10-25 18:30:02
279,2015-10-11 17:41:15,"Let's use [mocha-generators](https://github.com/vdemedes/mocha-generators) instead of [co-mocha](https://github.com/blakeembrey/co-mocha) in tests?
It's more lightweight and predictable.
See also #275 .
",kuraga,2015-10-21 06:31:25
279,2015-10-11 18:38:59,"sure, if it'll fix some issues, it doesn't really matter to me
",matthewmueller,2015-10-21 06:31:25
279,2015-10-21 03:08:33,"This issue should be closed.
",LarryBattle,2015-10-21 06:31:25
278,2015-10-11 13:40:00,"doing the following code, `console.log('after')` is called 1/10 times. most of the time it stays blocked

<S_CODE_TOKEN>
",jney,2016-04-03 12:17:00
278,2015-10-11 18:38:14,"what's the url? 
",matthewmueller,2016-04-03 12:17:00
278,2015-10-11 20:05:00,"`http://fd5-courses.leclercdrive.fr/magasin-069401-Vitry-sur-Seine.aspx`
",jney,2016-04-03 12:17:00
278,2016-04-03 01:23:28,"@jney Is this still an issue?
",rosshinkley,2016-04-03 12:17:00
278,2016-04-03 12:17:00,"i just tried it now (i don't use nightmare for now) and it works !
thank you
",jney,2016-04-03 12:17:00
277,2015-10-11 13:11:16,"is it possible to block specific ressources ? (ie : images, css, or facebook scripts) as i only want to acceed to generated dom tree very quicly ?
",jney,2015-10-25 19:37:05
277,2015-10-13 14:12:58,"on `phantomjs-node`, we can do : 

<S_CODE_TOKEN>
",jney,2015-10-25 19:37:05
277,2015-10-14 15:33:50,"related to #258 maybe it should be considered as a duplicate
",jney,2015-10-25 19:37:05
277,2015-10-25 19:37:05,"based on my searching, i don't believe this is possible with electron, but happy to reopen if someone finds otherwise! sorry :/ definitely see the utility there...
",reinpk,2015-10-25 19:37:05
277,2016-05-30 19:51:14,"Untested, but I'm wondering if perhaps https://github.com/kyungw00k/nightmare-webrequest-addon might be of some help. Might be a way in there to listen for certain types of resources and block their loading
",aggied,2015-10-25 19:37:05
276,2015-10-10 19:04:55,"In trying to turn off cross origin policy using  `web-preferences: {web-security: false}` as specified in [Electrons options](https://github.com/atom/electron/blob/master/docs/api/browser-window.md#new-browserwindowoptions), I realized it hoses nightmare's use of the `web-preferences` setting. 

This PR fixes it.   Tests included.   It also provides a v2-compatible solution for https://github.com/segmentio/nightmare/issues/203. 
",zeevl,2015-10-10 20:09:51
276,2015-10-10 20:09:49,"awesome, looks good. thanks!
",matthewmueller,2015-10-10 20:09:51
276,2015-11-03 16:37:09,":+1: Can you publish a release with this?
",nfriedly,2015-10-10 20:09:51
275,2015-10-08 14:22:36,"I have problems with running the mocha test example, seems like some module version issue. I am running Arch Linux, tried both node v0.12 and v4.1.2 both have same problem.

The file is in directory `test/main-test.js`.

<S_CODE_TOKEN>

Installed following modules `package.json`

<S_CODE_TOKEN>

Added `mocha.opts`

<S_CODE_TOKEN>

Used following command line to trigger mocha runner which ends error, seems like some generators handling is broken `node_modules/.bin/mocha --harmony`. I also tried to run the nightmare package tests which works well.

The mocha result:

<S_CODE_TOKEN>
",riston,2015-10-25 20:04:45
275,2015-10-10 15:53:00,"+1
@riston , any news?
@segmentio , can you help us, please?
",kuraga,2015-10-25 20:04:45
275,2015-10-10 16:23:13,"See https://github.com/vdemedes/mocha-generators instead of `co-mocha`
",kuraga,2015-10-25 20:04:45
275,2015-10-11 18:49:22,"@kuraga did you get the example working, I switched to your suggested `mocha-generators` library which seems to at least output errors. I am not sure why spawning an electron process fails ?

<S_CODE_TOKEN>
",riston,2015-10-25 20:04:45
275,2015-10-11 18:54:30,"That's something else. Reinstall Electron and Nightmare?
",kuraga,2015-10-25 20:04:45
275,2015-10-11 19:07:11,"True that's something else, made clean install and now it's working. Actually it seems the original test case should ""work"" from the test execution part. The only problem is that some of the test steps seems to fail which does not throw errors but instead timeout. This is really annoying problem when you have no clue where the test just broke.

<S_CODE_TOKEN>
",riston,2015-10-25 20:04:45
275,2015-10-25 20:05:14,"https://github.com/segmentio/nightmare/blob/master/Readme.md#examples

sorry fellas, just updated the examples to fit with yahoo.com's classname changes
",reinpk,2015-10-25 20:04:45
275,2016-07-05 08:06:42,"I got this issue too when I run mocha example, then I found that I should increase the timeout of mocha test suit by adding this line:

<S_CODE_TOKEN>

Should I create a pull request to add this fix?

<S_CODE_TOKEN>
",nhducit,2015-10-25 20:04:45
275,2016-07-08 17:19:42,"@nhducit Memory serving, the default Mocha timeout is something like 2s.  The test suite sets this to [10s](https://github.com/segmentio/nightmare/blob/master/test/mocha.opts#L2).

It might be more helpful to put an example mocha command to run with the test options.  Thoughts?
",rosshinkley,2015-10-25 20:04:45
274,2015-10-06 16:02:00,"In my project I implement a paste with some specified drop-in data but the code becomes a little ugly:
https://github.com/fritx/wxbot/blob/dev/preload.js#L249-L270
I wonder if there is any way better for a paste action, so we can do that in nightmare.

In addition, in some cases paste could be a better replacement of type, tricking around the input stuffs.
We could just do a brute paste instead of triggering some keydown/keyup event.
",fritx,2016-07-08 22:19:24
274,2016-03-30 02:54:22,"@fritx Could you use [`.insert()`](https://github.com/segmentio/nightmare#insertselector-text) instead?  That sends text directly to the specified selector.
",rosshinkley,2016-07-08 22:19:24
274,2016-03-30 03:39:28,"Hey, @rosshinkley, i'm afraid not.
I need to somehow trigger the inputbox to react the action.
""Insert"" does not trigger any event, but ""Paste"" does.
Paste can also bring images too (if copied).

<S_CODE_TOKEN>
",fritx,2016-07-08 22:19:24
274,2016-04-08 17:09:45,"@fritx Are you thinking of something like [`webContents.paste()`](https://github.com/electron/electron/blob/master/docs/api/web-contents.md#webcontentspaste)?
",rosshinkley,2016-07-08 22:19:24
274,2016-07-08 22:19:24,"Adding edit actions could be accomplished with `.action()`.  

With the ability to do so, I'm considering this issue resolved.  Closing.
",rosshinkley,2016-07-08 22:19:24
273,2015-10-06 12:41:08,"The test case of 'type and click' doesn't ensure 'type' works
'type and click' passes even when 'type' types nothing
",fritx,2015-10-12 06:23:04
273,2015-10-12 03:45:15,"Is there any problem still on this PR?
",fritx,2015-10-12 06:23:04
273,2015-10-12 06:22:54,"nope! sorry about that
",matthewmueller,2015-10-12 06:23:04
273,2015-10-12 07:42:28,"Thanks ;)
",fritx,2015-10-12 06:23:04
272,2015-10-06 10:27:14,"Is there any chatroom like in https://gitter.im where we can talk about this project, other than the github issues?
",fritx,2016-04-14 03:36:07
272,2015-11-19 18:19:21,"I know I'm late to the party: +1 :)
",rosshinkley,2016-04-14 03:36:07
272,2015-11-25 15:27:25,"+1 xP
",fritx,2016-04-14 03:36:07
272,2016-02-26 07:29:31,"gitter/slack/whatever, i would love a forum to be able to discuss between users and ask questions

+1
",mousemke,2016-04-14 03:36:07
272,2016-02-26 09:55:43,"since nightmare currently has no chatroom.
guys can join here: https://gitter.im/fritx/nixe
[nixe](https://github.com/fritx/nixe) is a fork of nightmare, highly inspired
",fritx,2016-04-14 03:36:07
271,2015-10-06 09:14:54,"Add a comment about the `co-mocha` package, fixes #261
",paazmaya,2015-10-06 09:29:05
271,2015-10-06 09:29:08,"cool, thanks!
",matthewmueller,2015-10-06 09:29:05
270,2015-10-06 02:56:17,,pastawoua,2015-10-06 02:56:28
269,2015-10-05 13:41:16,"I'm running some basic NightmareJS code on my Macbook and it works perfectly. But when I do the same on my CentOS cloud server on debug mode, I see all actions being queued and then the script terminates without any results. It's like the actual actions are never run.

Node, Electron and Python are all present. PhantomJS and CasperJS too. Any ideas?

Thanks.
",afuggini,2015-10-05 23:27:22
269,2015-10-05 23:27:22,"duplicate of: #224 
",matthewmueller,2015-10-05 23:27:22
268,2015-10-05 11:57:25,"#257
",38elements,2015-10-12 19:08:51
268,2015-10-12 19:08:54,"good catch!
",matthewmueller,2015-10-12 19:08:51
267,2015-10-04 22:38:51,"I don't know exactly whats going on, still pretty new doing development, but nightmare isn't working, and I'm getting this error below: 

`Uncaught Exception:
TypeError: Error processing argument -1.
    at TypeError (native)
    at NavigationController.loadUrl (/Users/myusername/Desktop/nightmare/node_modules/nightmare/node_modules/electron-prebuilt/dist/Electron.app/Contents/Resources/atom.asar/browser/api/lib/navigation-controller.js:59:24)
    at EventEmitter.webContents.(anonymous function) [as loadUrl] (/Users/myusername/Desktop/nightmare/node_modules/nightmare/node_modules/electron-prebuilt/dist/Electron.app/Contents/Resources/atom.asar/browser/api/lib/web-contents.js:79:27)
    at EventEmitter.<anonymous> (/Users/myusername/Desktop/nightmare/node_modules/nightmare/lib/runner.js:87:23)
    at emitOne (events.js:77:13)
    at EventEmitter.emit (events.js:169:7)
    at process.<anonymous> (/Users/myusername/Desktop/nightmare/node_modules/nightmare/lib/ipc.js:28:10)
    at emitTwo (events.js:87:13)
    at process.emit (events.js:172:7)
    at handleMessage (internal/child_process.js:685:10)`

Everything was fine before I updated... but I can't get the older version back
",jppope,2015-10-25 19:50:33
267,2015-10-05 16:44:34,"@jppope To get an older version back you can do `npm remove nightmare` and then `npm install nightmare@2.0.5 --save`. Replace `2.0.5` with your desired version.

I also had an error like this when using the old syntax with v2, maybe that's the problem.
",FdezRomero,2015-10-25 19:50:33
267,2015-10-05 18:09:46,"I'm having a similar issue. I have a working installation with nightmare 2.0.5. I started a new project and installed the same version, but nightmare doesn't want to initialize. So maybe it's a dependency that is no longer compatible? I only have the one working installation now, and I would just copy it over, but I get the file names too long errors on copy.
",kanethal,2015-10-25 19:50:33
267,2015-10-13 03:04:18,"I can verify this issue as well on both OS X and Window 7. It worked fine with the old version, but I decided I wanted to upgrade and go back to do some refactoring and just can't get it to work at all. Could a dependency somehow be interfering as kanethal said? I will keep investigating. 

Here is an error log: 

<S_CODE_TOKEN>
",tscanlin,2015-10-25 19:50:33
267,2015-10-13 03:12:54,"Also, for reference, here's the test script I was running:

<S_CODE_TOKEN>

I'll post back if I learn anything new.
",tscanlin,2015-10-25 19:50:33
267,2015-10-13 03:51:10,"I think I figured it out. Looking at this line:
https://github.com/segmentio/nightmare/blob/master/lib/nightmare.js#L162

It looks like the `run` method is expecting a callback, and if you don't pass one in it seems to be causing the error above.

Changing to this fixed it for me, alternatively you should probably pass in a done function from a testing framework for instance, I bet thats the intention with this.

<S_CODE_TOKEN>

Should I open a pull request to at least throw a more helpful error here? Other people might get tripped up by copying/pasting examples online like I did.. :P (Example: http://weblogs.asp.net/mikaelsoderstrom/writing-end-to-end-tests-with-nightmare-js, a top result for using nightmare for testing)

Hope that fixes it for you @jppope!
",tscanlin,2015-10-25 19:50:33
267,2015-10-13 03:53:20,"Actually the error that you have looks different.. sorry folks!
",tscanlin,2015-10-25 19:50:33
267,2015-10-25 19:50:33,"hey all, i'm not able to reproduce this or really understand exactly what the issue is — if this is still an issue can you summarize the current state/knowledge of the issue?

from my reading of this, you can get rid of `.run()` as that's a `1.x` syntax that isn't needed in `2.x`... see the readme: https://github.com/segmentio/nightmare/blob/master/Readme.md
",reinpk,2015-10-25 19:50:33
267,2016-03-03 15:39:12,"Try this... passing the reference of done to the run() method should let the test run properly. 
var chai = require('chai');
var Nightmare = require('nightmare');
var expect = chai.expect;

module.exports = function() {
  'use strict';

  describe('anonymous users', function() {
    this.timeout(20000);
    var nightmare;

<S_CODE_TOKEN>

  });
});
",matt-newell,2015-10-25 19:50:33
266,2015-10-04 03:32:18,"`self` is not used in `waitms`
",38elements,2015-10-04 03:48:01
266,2015-10-04 03:48:00,"cool thanks!
",matthewmueller,2015-10-04 03:48:01
265,2015-10-01 15:53:02,"The pdf method should accept options (based on the documentation). I fixed the method to really accept them.
Fixes #264 
",ocombe,2015-10-01 23:21:09
265,2015-10-01 23:21:08,"looks good, thanks!
",matthewmueller,2015-10-01 23:21:09
264,2015-10-01 15:25:40,"Hello !
The documentation states the following:

> .pdf(path, options)
> 
> Saves a PDF with A4 size pages of the current page to the specified path. Options are here.

I tried this `.pdf('test.pdf', {printBackground: true})` and got the following error:

<S_CODE_TOKEN>

If I just render to pdf without options it works fine. I checked the tests but you never use any option with the pdf method... :(

So, how can I provide options to `pdf` ?
",ocombe,2015-10-01 23:21:09
264,2015-10-01 15:53:36,"Just did a PR to fix this :)
",ocombe,2015-10-01 23:21:09
263,2015-10-01 13:31:13,"node v.0.12.7 with --harmony flag

This examples:
https://github.com/segmentio/nightmare#execution

<S_CODE_TOKEN>

Blows up with:

<S_CODE_TOKEN>

What am I doing wrong?
",unlight,2015-10-01 13:51:49
263,2015-10-01 13:51:49,"Sorry, my mistake. It was 1.X
",unlight,2015-10-01 13:51:49
263,2016-05-25 05:19:19,"I am in about the same place with using generators, any word on how you got it working?
",Koleok,2015-10-01 13:51:49
263,2016-05-25 07:26:47,"If you have same error 
`TypeError: You may only yield a function, promise, generator`
Make sure that you using nightmare v2.
",unlight,2015-10-01 13:51:49
262,2015-10-01 07:38:43,"Hi!

Sorry if im doing this wrong but I cant get this to work.

Im trying to extract the following number from a page.
![image](https://cloud.githubusercontent.com/assets/420754/10215197/a4993186-681f-11e5-9514-86a45bafafab.png)
![image](https://cloud.githubusercontent.com/assets/420754/10215222/eeca3dcc-681f-11e5-9f38-2e29852c2977.png)

im using the following code:

<S_CODE_TOKEN>

count is always undefined. Anyone know if this is possible?
",toppetoppe,2015-10-25 19:54:54
262,2015-10-01 16:52:12,"Hi @toppetoppe, I was having some issues with the loading of XHR/AJAX calls and using the option `show: true` when creating the Nightmare instance helped me debug, as you can see the window and how the page is loading with the console on the side.

<S_CODE_TOKEN>

Hope it helps, maybe you just need to wait longer.
",FdezRomero,2015-10-25 19:54:54
262,2015-10-01 20:55:04,"I see that the text node I want is visible when I set `show = true`but count is still undefined
",toppetoppe,2015-10-25 19:54:54
262,2015-10-08 15:12:39,"anyone got any clue as to why this is not working?
",toppetoppe,2015-10-25 19:54:54
262,2015-10-13 14:44:24,"@toppetoppe This has nothing to do with Nightmare, but have you tried running the code directly in the Dev Tools console? Maybe there is another element matching your selector and `querySelector()` is returning only the first one in the DOM.
",FdezRomero,2015-10-25 19:54:54
262,2015-10-13 14:55:36,"Yeah, I have retrieved the selector using X-ray and that works just fine, but i would prefer to use nightmare.

DevTools console says the following:
![image](https://cloud.githubusercontent.com/assets/420754/10458427/06a92ad4-71cb-11e5-8b83-478d77d7db42.png)
",toppetoppe,2015-10-25 19:54:54
262,2015-10-13 15:07:16,"Then my only theory is that `selector` might not being correctly passed to the function to evaluate. I wonder if you'd be able to double check this by running Nightmare with with `show: true` and then:

<S_CODE_TOKEN>
",FdezRomero,2015-10-25 19:54:54
262,2015-10-13 15:13:52,"yeah, looks like that is the problem.
the following does nothing:

<S_CODE_TOKEN>

this works.

<S_CODE_TOKEN>

so to get the value i do the following now:

<S_CODE_TOKEN>

how should i pass selector to evaluate?
",toppetoppe,2015-10-25 19:54:54
262,2015-10-13 15:36:07,"According to the docs you're doing it right:

<S_CODE_TOKEN>

Probably you should close this issue and open a new one saying that the example in the docs is not working for you, now that you know the cause.
",FdezRomero,2015-10-25 19:54:54
262,2015-10-25 19:54:54,"@toppetoppe i modified your example slightly and ran it locally:

<S_CODE_TOKEN>

with the following output:

<S_CODE_TOKEN>
",reinpk,2015-10-25 19:54:54
261,2015-10-01 07:04:58,"Perhaps the need for https://www.npmjs.com/package/co-mocha could be mentioned in the [`README.md`](https://github.com/segmentio/nightmare#tests), so that without looking at the `mocha.opts` file and dependencies, it would be clearer to start trying out the examples based on mocha.
",paazmaya,2015-10-06 09:29:05
260,2015-10-01 05:08:39,"Update description in package.json since you guys aren't using Phantom.js anymore.

Electron ftw!
",tscanlin,2015-10-01 06:25:03
260,2015-10-01 06:25:06,"thanks!
",reinpk,2015-10-01 06:25:03
259,2015-09-30 18:00:36,"This doesn't work:

<S_CODE_TOKEN>

But this does:

<S_CODE_TOKEN>
",nichoth,2015-10-25 19:55:34
259,2015-09-30 18:10:34,"I think you'd have to yield on it:

<S_CODE_TOKEN>
",matthewmueller,2015-10-25 19:55:34
259,2015-10-02 13:26:30,"Can we use this outside of a generator? Using a function is the only way to kill the process in this script file.

<S_CODE_TOKEN>
",cuth,2015-10-25 19:55:34
258,2015-09-30 15:02:46,"Is there any approach to network monitoring? Like in phantomJS
page.onResourceRequested = function(request) {
  console.log('Request ' + JSON.stringify(request, undefined, 4));
};

http://phantomjs.org/network-monitoring.html
",AlexanderKozhevin,2015-10-25 19:05:36
258,2015-10-13 08:21:31,"Not that I can see — depending on what you're doing I've managed to structure all my tests so that I `wait()` for new DOM elements (all my requests are XHRs to my backend API). YMMV
",danhalliday,2015-10-25 19:05:36
258,2015-10-25 19:05:36,"check out `did-get-response-details`:
https://github.com/segmentio/nightmare#onevent-callback
",reinpk,2015-10-25 19:05:36
258,2015-11-09 05:12:07,"Awesome!
",AlexanderKozhevin,2015-10-25 19:05:36
257,2015-09-30 06:18:07,"There are two `exports.evaluate` implementations [#L28](https://github.com/segmentio/nightmare/blob/master/lib/actions.js#L28) and [#L312](https://github.com/segmentio/nightmare/blob/master/lib/actions.js#L312)
",ugin,2015-10-12 19:08:52
256,2015-09-29 20:27:26,"Are people opposed to using a real promise in `.then` method? I think it's confusing to name the method that when it's really a callback.
",nichoth,2015-10-25 19:38:35
256,2015-09-29 20:50:48,"Agreed. I'm currently wrapping the Nightmare chain in a promise and calling `resolve()` inside the fulfilled callback of the `.then()` method.

Besides, some methods such as `.screenshot()` are not even then-able (or I just can't make it work).
",FdezRomero,2015-10-25 19:38:35
256,2015-09-30 00:09:58,"FWIW `.then()` is undocumented and part of the private API. May change this going forward, but right now the only reason we have it in there is so we can yield on any piece of the chain:

<S_CODE_TOKEN>

`.screenshot()` should definitely be yieldable, that's a bug. can you provide a failing case?
",matthewmueller,2015-10-25 19:38:35
256,2015-09-30 15:43:51,"I don't fully understand generators, so this may not make sense, but my understanding is that `yield nightmare.someAction()` sends a promise or async function to whoever is iterating over the generator, so `.then` is exposed to the control flow logic. For example in `vo(function* () {})`, `vo` would depend on the `.then` method.
",nichoth,2015-10-25 19:38:35
256,2015-09-30 17:59:01,"yep it can, among other things. vo is using co internally, and co has: https://github.com/tj/co/blob/master/index.js#L100

I'm down to explore integrating actual promises, I just don't want it to complicate the implementation or add a big dependency for something that could probably be implemented cleaner with generators.
",matthewmueller,2015-10-25 19:38:35
256,2015-10-01 15:37:49,"@matthewmueller Sure thing. In the following example, the `debug` message is never shown (using thenables instead of generators):

<S_CODE_TOKEN>

In this other snippet, both `getTitle` and `.screenshot()` are never executed:

<S_CODE_TOKEN>

Hope it helps. I'm currently using version 2.0.5 because with 2.0.6 it doesn't even get passed the first `.evaluate()`.

I know you're all putting time and effort into this and I'm thankful, but the lack of documentation and consistency is making the experience to really be a nightmare...
",FdezRomero,2015-10-25 19:38:35
256,2015-10-01 18:26:07,"@FdezRomero – haha isn't nightmare a great name for a software library?

It would be helpful to specify and document the async interface for nightmare. Whether it is consumed by a generator function or some other pattern is outside the scope of nightmare.

Using a `.run` method seems like the simplest solution. You would end up with an API that looks like:

<S_CODE_TOKEN>

Which could then be consumed in a number of ways:

<S_CODE_TOKEN>

This would change the examples b/c you would need to end every method chain block with `.run`. Another option is to have every chainable method return a promise. This is how [petecoop/phantasma](https://github.com/petecoop/phantasma) works. The API is maybe prettier, but I think this adds unnecessary complexity. 
",nichoth,2015-10-25 19:38:35
256,2015-10-01 23:29:07,"Guys, I can see why this is confusing but you are thinking about it in terms of how it should work with promises, which is part of the private API and undocumented.

<S_CODE_TOKEN>

This looks like it should work but you're not handling the error case so it's tough to say whether it's a bug in nightmare or a bug in your code. The following adjustment will determine this:

<S_CODE_TOKEN>

Please open up a new issue if you still can't get to the debug statement.

---

Like I mentioned, I'm open to accepting a PR to implement promises, but it should be small and concise.
",matthewmueller,2015-10-25 19:38:35
256,2015-10-02 12:18:58,"Hi @matthewmueller,

I think I found the issue I was having with the undocumented use of `.then()`. I was chaining several actions like this (omitting the parameters for clarity):

<S_CODE_TOKEN>

And saw that the next action didn't hook up with the previous part of the chain. I think this is why the `.then()` after the `.screenshot()` didn't run. Please correct me if I'm wrong as I'm still trying to get the inner workings of Nightmare.
",FdezRomero,2015-10-25 19:38:35
256,2015-10-21 07:16:55,"+1, Promises are getting ubiquituous in the Node landscape since 4.0. It's very surprising that you push a custom way of handling async calls. I love co and koa and generators, but Promises are yieldable by co, too. So offering a Promise-based API would let existing developers use generators if they want to, and be more open to newcomers.
",fzaninotto,2015-10-25 19:38:35
256,2015-10-21 07:18:38,"Guys, this is where we left off:

> Like I mentioned, I'm open to accepting a PR to implement promises, but it should be small and concise.

No more comments please, just open a PR.
",matthewmueller,2015-10-25 19:38:35
255,2015-09-28 07:26:21,"I am trying to click all the buttons with the same class. But its only clicking one button with the class name.

Is there any way, i can retrieve the collection of the button with the class name and loop over each item and click it? 
",Nisthar,2015-10-25 19:56:53
255,2015-10-25 19:56:53,"yeah, you can do that in javascript with the `.evaluate()` method, check out the implementation of `.click()`:
https://github.com/segmentio/nightmare/blob/master/lib/actions.js#L77
",reinpk,2015-10-25 19:56:53
254,2015-09-26 20:54:32,,nichoth,2015-09-27 19:23:39
254,2015-09-26 21:45:48,"No longer used in 2.x, as your pipeline will return a generator you can `yield` instead. For `.end` documentation see the [readme @1.x](https://github.com/segmentio/nightmare/blob/1.8.2/Readme.md)
",sperand-io,2015-09-27 19:23:39
254,2015-09-26 21:47:22,"whoa i totally jumped to an early conclusion on this one, confusing `run` with `end` — my apologies!
",sperand-io,2015-09-27 19:23:39
254,2015-09-27 19:23:39,"added brief docs: https://github.com/segmentio/nightmare#end

is there a specific behavior you're looking to see documented? thanks for the find!
",reinpk,2015-09-27 19:23:39
254,2015-09-28 22:46:28,"Are there any arguments or return value? It might be good to use .end() consistently in the readme examples. It is only in the example at the end. Or maybe it's just confusing because no one knows how to use generators? I'm not sure what is going on in the chainable nightmare methods. In version one it used callbacks, so you had `nightmare.something().something().run(function onEnd() {})`. But how does v2 work?

<S_CODE_TOKEN>
",nichoth,2015-09-27 19:23:39
254,2015-09-28 23:32:09,"Same API as run, only difference is that it'll shut processes down.

<S_CODE_TOKEN>

Or

<S_CODE_TOKEN>

or 

<S_CODE_TOKEN>

you get the point
",matthewmueller,2015-09-27 19:23:39
253,2015-09-26 15:45:30,"How do I use this without a wrapper like `vo`?

This example works:

<S_CODE_TOKEN>

But this does not:

<S_CODE_TOKEN>
",nichoth,2015-09-27 19:09:53
253,2015-09-27 00:23:18,"generators on their own don't do the control flow, something like `co` or `vo` do this. you can use traditional callbacks for thennables if generators aren't your thing.

created a gist a while back to help me understand raw generators: https://gist.github.com/matthewmueller/9b8b59d552f90425ee41. not sure if this is helpful to anyone
",matthewmueller,2015-09-27 19:09:53
252,2015-09-26 05:14:44,"fix #249
related #250
",fritx,2015-09-26 05:24:07
252,2015-09-26 05:24:09,"thanks!
",matthewmueller,2015-09-26 05:24:07
252,2015-09-26 05:26:54,"it's my pleasure, thanks!
",fritx,2015-09-26 05:24:07
251,2015-09-25 17:00:36,"Hello there,

I have been trying to use `.wait(fn)` and my script always got stuck at this point, so I started debugging the `waitfn()` function in `lib/actions.js`, adding some `debug()` like this:

<S_CODE_TOKEN>

And noticed that `waitfn()` stops iterating after a few cycles. This is the output:

<S_CODE_TOKEN>

Any idea why this is happening? `_evaluate` only gets called 2 or 3 times and I really don't know why...

Thanks,
Rodrigo
",FdezRomero,2016-04-14 04:02:29
251,2015-10-15 16:08:48,"I'm also facing the exact same problem. `waitfn` stops after 1-3 iterations. If I increase the timeout from `250` to `2500` or more the script executes successfully.
",tjokimie,2016-04-14 04:02:29
251,2015-10-20 03:11:57,"Any progress on this issues?

`wait` family including `wait(selector)` and `wait(fn)` have the same problem
",CatTail,2016-04-14 04:02:29
251,2015-11-09 10:41:07,"+1
",kazinov,2016-04-14 04:02:29
251,2016-04-08 17:08:18,"@FdezRomero @CatTail @kazinov @tjokimie I cannot reproduce this problem.  Has this issue been resolved?
",rosshinkley,2016-04-14 04:02:29
251,2016-04-14 04:02:29,"I'm going to consider this issue resolved.  If this is still a problem, feel free to reopen/submit a new issue.
",rosshinkley,2016-04-14 04:02:29
251,2017-03-09 13:32:16,"seems that the bug isn't resolved yet, i'm on version 2.10. anybody has solution? thx",deffwe,2016-04-14 04:02:29
251,2017-03-10 20:19:02,"@deffwe If you have a minimum repro, post it and I'll reopen this issue to take a look.",rosshinkley,2016-04-14 04:02:29
250,2015-09-25 16:18:33,"~~Sorry for the extra field in package.json & a missing semicolon, but I think they could be fixed with the next bump clean~~ (cleaned) ;) fix #247 #242 
",fritx,2015-09-26 04:54:58
250,2015-09-25 18:09:26,"Thanks for the PR! Can you explain in a little more detail what this does to fix the problem? Some questions I have:
- Was the missing semicolon causing us to not get the errors?
- What's the purpose of preloading and disabling node-integration?
",matthewmueller,2015-09-26 04:54:58
250,2015-09-26 02:41:50,"@matthewmueller ok.
- No, forget the missing semicolon. ~~I meant it was I that had [missed a semicolon](https://github.com/segmentio/nightmare/pull/250/files#diff-9dcc65cc4a6c14eb4f81fbe4005301d0R41) in my PR commit, but just leave it ;)~~ (cleaned)
- Yes, with `node-integration` turned off:
  - Electron won't expose node stuff like `module/exports` to the web.
  - So we could correctly load any webpage with many scripts like jquery that depends on a `module/exports` detection.
  - Still, with a `preload` script we can inject anything with node access just like what we do, but only at the very beginning.
  - We have to do so. It's the only way to load normal webpages in electron correctly.
  - And this should get it loads even faster than before, without node integration which is unnecessary around the user webpage itself.
  - As a change, the `preload` script should be the only way that we write things in node to get nightmare page ready.
  - Most importantly, it fixes a **security** bug, as in `node-integration` a webpage can hack into the user system in javascript. eg `require('fs')`.
",fritx,2015-09-26 04:54:58
250,2015-09-26 02:48:29,"See also: https://github.com/sindresorhus/caprine/blob/master/index.js#L39
It's a hot electron app that loads facebook messenger, and it sets like this.
",fritx,2015-09-26 04:54:58
250,2015-09-26 02:54:24,"Let me clean my commit to become better.
Done. Also, the `jquery` test slice placed before `font`.
",fritx,2015-09-26 04:54:58
250,2015-09-26 03:11:42,"@matthewmueller once this problem solved, in #249 i'd suggest we replace `google.com` with `github.com`, and it'd get to work. ;) and my [project](https://github.com/fritx/wxbot) is gonna switch back to nightmare.
",fritx,2015-09-26 04:54:58
250,2015-09-26 04:54:57,"thanks buddy, appreciate the research!

i'm fine with changing the tests to point to github to avoid the great firewall. open a pr and i'll accept :+1: 
",matthewmueller,2015-09-26 04:54:58
250,2015-09-26 05:08:55,"cool, thanks much! @matthewmueller 
",fritx,2015-09-26 04:54:58
249,2015-09-25 15:43:59,"Could I replace it just with ~~`yahoo.com`~~`github.com`? I can use a VPN though, but not all the time..
",fritx,2015-09-26 05:24:07
249,2015-09-25 15:47:46,"Oops, because of #247, yahoo.com won't work either now, looking for another popular site that works in China.
",fritx,2015-09-26 05:24:07
249,2015-09-25 15:59:02,"@FredXue 嗨，我哭了
",fritx,2015-09-26 05:24:07
249,2015-09-25 16:00:49,"终于看到同胞在鼓捣nightmare O(∩_∩)O （这个issue跟nightmare没关系啊）
",FredXue,2015-09-26 05:24:07
249,2015-09-25 16:02:04,"@fritx  以后遇到问题可以交流交流！
",FredXue,2015-09-26 05:24:07
249,2015-09-25 16:23:05,"nice  XD 毛问题 已follow
",fritx,2015-09-26 05:24:07
249,2015-10-06 10:54:55,"sometimes even `<link href='http://fonts.googleapis.com/css?family=Oswald' rel='stylesheet'>` is blocked too.. it's really disappointing.. but let's just leave it for now..
",fritx,2015-09-26 05:24:07
248,2015-09-25 14:26:11,"I've added this testcase and I'm not able to pass it
https://github.com/antpaw/nightmare/commit/5e3f6617a3838eebca411db4644d04a536a5573f
",antpaw,2015-10-21 20:42:41
248,2015-10-08 09:57:33,"Can you maybe give a little feedback why this is a bug and how I could fix it, or a hint where to start looking for a fix?
",antpaw,2015-10-21 20:42:41
248,2015-10-08 10:11:18,"~~https://github.com/segmentio/nightmare/blob/master/lib%2Frunner.js#L103-L105~~
~~seems it would emit `javascript` instead of `error`~~
oops. seems `nightmare` doesn't listen on `renderer`'s `error` globally, right?
",fritx,2015-10-21 20:42:41
248,2015-10-08 13:23:34,"yes, the first suggestion didn't work
",antpaw,2015-10-21 20:42:41
248,2015-10-21 20:13:13,"Would you use this to capture JS console errors from Electron so as to output them in node.js? How would you capture output from console.\* ?
",edasque,2015-10-21 20:42:41
248,2015-10-21 20:42:41,"@edasque you mean if something is happning inside .evaluate() ? there is a `.on('javascript')` callback for js-erros and you can start your script with `DEBUG=nightmare:log` to see the logs.

btw my pr was merged, so this can be closed https://github.com/segmentio/nightmare/pull/300
",antpaw,2015-10-21 20:42:41
248,2015-10-21 21:55:11,"@antpaw are you sure it's DEBUG=nightmare:log ? This does nothing here. Is it just the normal DEBUG=nightmare ?
",edasque,2015-10-21 20:42:41
248,2015-10-22 09:41:53,"yes https://github.com/segmentio/nightmare/blob/master/lib/nightmare.js#L5, but there is also a `.on('log', func)` event
",antpaw,2015-10-21 20:42:41
247,2015-09-25 12:48:22,"I am getting a lot of errors like $ is not defined, module ipc is not availiable, could not load jquery when i tried to login to linkedin using nightmare. Can you please tell how i can resolve this?
",Nisthar,2015-09-26 04:54:58
247,2015-09-25 15:16:20,"I think this is related to another issue of mine https://github.com/atom/electron/issues/2659
And nightmare should pass `node-integration: false` and a `preload` script to the `BrowserWindow` so it could work as normal browser loading, it would also cause a slight refactor of `lib/javascript.js`.

Btw, my little project [wxbot](https://github.com/fritx/wxbot) which needs to do something like nightmare does, was with use of nightmare, however, just because of the same problem, I implemented it by myself instead. Once nightmare is done, I'd like to switch back.
",fritx,2015-09-26 04:54:58
247,2015-09-25 15:30:52,"Sorry i am new to nightmare. Can you tell me how can i do it?
",Nisthar,2015-09-26 04:54:58
247,2015-09-25 15:41:47,"No, maybe you need to wait nightmare to fix such problem.. unless you want to implement something the nightmare does like what I does in my [wxbot](https://github.com/fritx/wxbot).
",fritx,2015-09-26 04:54:58
247,2015-09-25 15:47:44,"Thanks. I thought its a error in my system or code.

On Fri, Sep 25, 2015 at 9:11 PM, Fritz Lin notifications@github.com wrote:

> No, maybe you need to wait nightmare to fix such problem.. unless you want
> to implement something the nightmare does like what I does in my wxbot
> https://github.com/fritx/wxbot.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/segmentio/nightmare/issues/247#issuecomment-143255859
> .
",Nisthar,2015-09-26 04:54:58
247,2015-09-25 16:16:37,"Just provided a PR for this bug, test passed
",fritx,2015-09-26 04:54:58
247,2015-09-25 16:49:39,"related #242
@Nisthar now you can try with the new version just released
",fritx,2015-09-26 04:54:58
246,2015-09-25 10:40:12,"OK, so I may have gone too far down the rabbit hole:
I have a script that is working nicely. Now I want to wrap some of this up into methods on my own objects and stay DRY. When I execute this function:

<S_CODE_TOKEN>

Everything runs fine; but if I try to pass the nightmare instance to a method within my function WITHIN the generator, things fall apart, namely everything goes back to async mode and self destructs. How do I keep things running synchronously with vo.js when I want to pass a nightmare instance to a method within a function within a generator? I tried initially to call `yield` on the nightmare phrases in the methods like I did in the snippit above, but my console got mad at me and started saying very rude things about the method being an unexpected identifier when preceded by `yield`. This is what I am working with. I removed the offending yields already:

<S_CODE_TOKEN>

I've been looking over the vo.js documentation and I'm starting to glean some knowledge, but I'm not smart enough to extend the examples to what I'm doing. Can I get a booster shot of smarts please!? 

Thanks, Dan.

PS, I'm wondering if I'm violating the purpose of this forum, and if I should post these kinds of help requests elsewhere. I'm really very new to this whole scene, and figured this is probably where people who are familiar with nightmare will be lurking. If I should put this kind of content up on stackOF instead, just let me know :) Thanks for all your awesomeness!
",kanethal,2015-09-25 18:23:15
246,2015-09-25 18:23:28,"3am jibber jabber, sorry.
",kanethal,2015-09-25 18:23:15
246,2015-09-25 20:14:14,"hahaha, we've all been there ;-)
",matthewmueller,2015-09-25 18:23:15
245,2015-09-24 13:24:17,"`source` and `enqueue` and `noop` are not used in lib/nightmare.js.
`once` is not used in lib/actions.js.
",38elements,2015-09-26 01:00:33
244,2015-09-23 18:47:13,"Looks like Electron added support for `sendEvent`. We should replace probably replace our synthetic events with the real ones: https://github.com/atom/electron/issues/2269#issuecomment-142504305
",matthewmueller,2016-04-08 04:19:04
244,2015-09-24 03:11:44,"+1 for this, hope it works as well as the real user keyboard typing
",fritx,2016-04-08 04:19:04
244,2015-10-05 22:04:21,"yes please!
",factologist,2016-04-08 04:19:04
244,2015-11-23 21:04:06,"+1 If an `<input>` has a javascript powered input mask on it, `.type()` doesn't let you type into it. I think this is what's necessary to remedy that, because it works fine in CasperJS
",timwis,2016-04-08 04:19:04
244,2016-04-08 04:19:03,"`.type()` uses `sendInputEvent`.  I believe this can be closed.
",rosshinkley,2016-04-08 04:19:04
243,2015-09-23 15:18:55,"I haven't used Nightmare in about a month; I came back this morning, and it seems that a lot has changed, including removing any mention of plugins and .use(). Are they still available to use?
",nathan-martinez,2016-03-30 02:51:44
243,2015-09-23 15:53:44,"i removed plugins and `.use()` from the initial release of `2.x` but totally open to bringing them back
",reinpk,2016-03-30 02:51:44
243,2015-09-23 16:36:04,"This is because we can now do `yield`s right?
",rclai,2016-03-30 02:51:44
243,2015-09-24 19:37:44,"+1. `.use(fn)` is still useful in the context of `yields`. generators just allow you to use regular programming control flow (if, for, while) in addition to chaining.
",matthewmueller,2016-03-30 02:51:44
243,2015-11-27 17:18:26,"+1, i rely heavily on plugins
",trip41,2016-03-30 02:51:44
243,2015-12-02 08:43:10,"+1, please bring it back
",adrian-ludwig,2016-03-30 02:51:44
243,2015-12-03 16:38:36,"hey guys, please weigh in here: https://github.com/segmentio/nightmare/pull/336#issuecomment-161708889
",matthewmueller,2016-03-30 02:51:44
243,2016-03-30 02:51:44,"I believe this was fixed in #376.  Feel free to reopen/file a new issue if this is still a problem.
",rosshinkley,2016-03-30 02:51:44
242,2015-09-22 21:46:03,"I've cloned this repo and tried `make test`, it succeeded. Then I went ahead and modified the 'navigation' fixture, (html is appended in this message), to checkout Electron's JS abilities. Looks like absolutely no JS is running, I tried to do `.click('.a')` and instead of creating a `<div>` it took me to a.html (`.title()` was no longer 'Navigation' but 'A') I tried to take a screenshot right after `goto and wait(1000)` the `div#foo` was not rendered. So I'm quite sure JS doesn't run at all, that makes v2 inferior to v1? Am I missing something?

<S_CODE_TOKEN>
",antpaw,2015-09-24 16:50:55
242,2015-09-24 08:57:21,"Looks like Electron doesn't like JS loaded from an external website. To fix your problem, simply load jQuery in this way:

 `<script src=""http://code.jquery.com/jquery-2.1.4.min.js"" onload=""window.$ = window.jQuery = module.exports;""></script>`

Then your jQuery snippet below will be executed. You can find more details [here](https://github.com/atom/electron/issues/345).
",mpangrazzi,2015-09-24 16:50:55
242,2015-09-24 09:38:48,"Okay I will try this, the other question is: why is nightmare not giving me any errors on this one. Like `$ ""undefined is not a function""`. This would make it much simpler to debug.
",antpaw,2015-09-24 16:50:55
242,2015-09-24 15:50:49,"Agreed. 
This weird Nightmare ""behaviour"" took me some time to figure how to fix it. Nightmare should have an option for reporting all Electron error or debug messages.
",mpangrazzi,2015-09-24 16:50:55
242,2015-09-24 16:50:55,"Okay i've just tried it and it looks like Electron gives the browser a package management system just like in node. So the browser has no longer to deal with global var. Instead of doing this onload hack, we can simply

<S_CODE_TOKEN>

but we really need a way to access JS errors
",antpaw,2015-09-24 16:50:55
242,2015-09-24 19:35:47,"It really should propagate through. Are listening to the `nightmare.on('error')` event?

Here's the client-side implementation: https://github.com/segmentio/nightmare/blob/master/lib/javascript.js#L21-L26
",matthewmueller,2015-09-24 16:50:55
242,2015-09-24 21:24:26,"@matthewmueller Thanks for the hint. I've tried to listen to `error` event on `nightmare` on an example very similar to @antpaw's one, but with no luck (didn't see any errors). I was expecting something like `$ is not defined`.
",mpangrazzi,2015-09-24 16:50:55
242,2015-09-25 11:36:24,"I am getting a lot of errors like $ is not defined, module ipc is not availiable, could not load jquery when i tried to login to linkedin using nightmare. Can you please tell how i can resolve this?
",Nisthar,2015-09-24 16:50:55
242,2015-09-25 14:27:28,"@matthewmueller I've created this issue with a testcase #248 please help me :)
",antpaw,2015-09-24 16:50:55
241,2015-09-22 20:54:45,,yura415,2015-12-17 17:33:56
241,2015-09-22 23:16:36,"Wow awesome! Definitely think both of these features should be in Nightmare.

Two things:
- Would be good if you could open 2 separate PRs since these features are unrelated and it allows us to discuss each feature separately
-  Not too keen on the API for cookies. I think it should look more like the express/koa cookie getters and setters: https://github.com/pillarjs/cookies

The `tl;dr`:

<S_CODE_TOKEN>

Looking forward to seeing these features in nightmare!
",matthewmueller,2015-12-17 17:33:56
241,2015-09-23 09:12:44,"Ok, definitely should rework this since node is already supporting yields and promises.
Should i remove this PR and start two separate forks?
",yura415,2015-12-17 17:33:56
241,2015-09-23 09:18:44,"Also i thought that you should set proxy as
`.proxy(host, port, protocol)`
",yura415,2015-12-17 17:33:56
241,2015-09-23 18:05:13,"Yah if its not too much work, I'd branch off master and cherry pick from
this branch then push new PRs.

I really like this PR except for the API. Not sure that you need to do
anything more (promises/yields) than just do some argument checking with
.cookie(...)

Re: proxy Api. I think you should support whatever mongodb
client/socketio/redis client support. I believe thats a string you parse or
multiple arguments, but it'd be good to have a consistent signature

Thanks again for the hard work!
On Wed, Sep 23, 2015 at 02:18 Georgy Chirkov notifications@github.com
wrote:

> Also i thought that you should set proxy as
> .proxy(host, port, protocol)
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/segmentio/nightmare/pull/241#issuecomment-142538877.
",matthewmueller,2015-12-17 17:33:56
241,2015-09-28 23:50:13,"Hey guys,

Any luck we'll see this PR merged anytime soon? Playing with cookies exactly what I am after for my tests :)

Cheers
",QuentinDejean,2015-12-17 17:33:56
241,2015-10-21 05:50:48,"Would love to see this fixed up and merged!
",matthewmueller,2015-12-17 17:33:56
241,2015-10-22 19:06:01,":+1: me too :)
",joernroeder,2015-12-17 17:33:56
241,2015-10-23 08:02:03,"And me! :)
",kirillrogovoy,2015-12-17 17:33:56
241,2015-11-20 03:02:35,"Hey guys,
This PR has been going for some time now.. Is there anything we can do to help? Looks like there is only one test not passing against the build
",QuentinDejean,2015-12-17 17:33:56
241,2015-12-09 17:35:40,"I've added cookie support to master. I'd love to see a new PR for just the proxy support :+1: 
",matthewmueller,2015-12-17 17:33:56
241,2015-12-17 17:33:56,"Closing for now, since this is woefully out of date. Would love to see someone open up a new PR with proxy support though!
",matthewmueller,2015-12-17 17:33:56
240,2015-09-21 20:43:45,"You guys have been so great getting to my questions. I'm still struggling up the learning curve with nightmarejs and vo.js and am hoping to get some help on syntax here. 

I read the responses for using V2 properly, and the response for URL() returning null was also very helpful. I've been working through the examples and the documentation for vo.js, but I admit I'm still confused on a couple things, any help would be great!

1) the example for console logging the URL includes console.log in parenthesis at the end of the line.

`javascript vo(function(){...})` 

This syntax was also given by Matt in response to the how to use V2 properly issue as a template for using a generator: 

`javascript vo(function (){yield...}(fn)` 

What is role of the final parenthesis set? Sorry, I'm sure it's an elementary question.

2) am I correct to assume that the instance if the browser within the generator is persistent? What would be the correct format to use nightmare to navigate to a sight, login, go to another page and grab data and put it into an array, then paginate and continue scraping values for the array, all while maintaining the authentication?

I'm so sorry if this is all very newbish, I'm so excited to be learning your module though and hope the questions are constructive at least :)
",kanethal,2015-09-22 17:06:49
240,2015-09-22 17:05:58,"no worries man, we were all new to this stuff at one time

1) vo uses a technique called [currying](https://medium.com/@kbrainwave/currying-in-javascript-ce6da2d324fe). Comes from functional programming, and allows you to progressively build up functions before executing. The reason this is useful is that it allows for you to easily compose pipelines together: `vo(vo(...), [vo(...), vo(...)])(done)` for example.

Truth be told, I wasn't planning on keeping `vo(...)` in here, it's just a library that I like. You can easily use nightmare in other ways, using `co`, `promises` or callback functions. What I'd like to avoid is like what's going on in the react community, where it's just expected you know ES6, JSX, React and Flux to get started on just about any documentation, so let me know if this is preventing you from understanding nightmare better.

2) Nightmare stores cookies across requests, but not across processes. This means that when your node program ends, the cookies are gone. We may add a way to load cookies, but I think it's actually more resilient to go though the login logic each time as opposed to loading temporary cookies each time. Downside of course is that it's slower and might be suspicious that you're logging into the same account many times.
",matthewmueller,2015-09-22 17:06:49
240,2015-09-22 17:20:22,"Thanks so much Matt. I'm happy to say that after digging way down into the
previous issues you guys have already responded to and reading over the
test material I have a working version of my script!! I'm so excited :) I'd
be happy to submit some of the learning process I went through to get up
and running if you think it would help your other novice users! Thanks
again. Dan.
On Sep 22, 2015 10:06 AM, ""Matthew Mueller"" notifications@github.com
wrote:

> no worries man, we were all new to this stuff at one time
> 
> 1) vo uses a technique called currying
> https://medium.com/@kbrainwave/currying-in-javascript-ce6da2d324fe.
> Comes from a functional programming, and allows you to progressively build
> up functions before executing. The reason this is useful is that it allows
> for you to easily compose pipelines together: vo(vo(...), [vo(...),
> vo(...)]) for example.
> 
> Truth be told, I wasn't planning on keeping vo(...) in here, it's just a
> library that I like. You can easily use nightmare in other ways, using co,
> promises or callback functions. What I'd like to avoid is like what's
> going on in the react community, where it's just expected you know ES6,
> JSX, React and Flux to get started on just about any documentation, so let
> me know if this is preventing you from understanding nightmare better.
> 
> 2) Nightmare stores cookies across requests, but not across processes.
> This means that when your node program ends, the cookies are gone. We may
> add a way to load cookies, but I think it's actually more resilient to
> build in the login logic each time as opposed to loading temporary cookie
> files every time. Downside of course is that it's slower and might be
> suspicious that you're logging into the same account many times.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/segmentio/nightmare/issues/240#issuecomment-142350807
> .
",kanethal,2015-09-22 17:06:49
239,2015-09-21 16:01:21,"I am attempting to use NightmareJS to test a Polymer v1.0 application. So far I have been unsuccessful. I assume electron is the problem, but can't access any electron debugging information to verify this. Is there any way to get some feedback from electron while running NightmareJS?
",quicksilver7,2015-09-27 19:12:02
239,2015-09-27 19:12:02,"yep three ways:
1. the debug flag: https://github.com/segmentio/nightmare#debug
2. listen for specific events https://github.com/segmentio/nightmare#onevent-callback
3. pass `{ show: true }` to the nightmare constructor to have it actually create a visible, rendered window that you can watch what's happening: https://github.com/segmentio/nightmare#nightmareoptions
",reinpk,2015-09-27 19:12:02
239,2015-09-27 19:17:20,"added docs here: https://github.com/segmentio/nightmare#debugging
",reinpk,2015-09-27 19:12:02
238,2015-09-21 14:00:18,"Hello, I am trying to use nightmare to perform load and stress testing of a web application where e.g. 20 concurrent users are expected. However, it appears that only 1 session is active and others are simply waiting, although I can see 20 phantomjs processes in task manager (using Windows 7).
Did anyone else also try this, does nightmare support such use case at all? Thanks for feedback!

Here is my script:

<S_CODE_TOKEN>
",ndamjan,
238,2015-09-29 09:05:54,"Tried the script using the latest version of NightmareJS in an Ubuntu 14.04 virtual machine. I removed the timeout and set show to true. Although I can see things happening now in parallel, not all instances finish and hang at waiting for a selector (removing the long timeout didn't raise any error). Tried it also with only 5 instances, and only 3 finished. 
Could it be related to https://github.com/segmentio/nightmare/issues/251 or https://github.com/segmentio/nightmare/issues/171?

Are there any known issues with Electron instances running in parallel from the same process?
",ndamjan,
238,2015-09-29 09:11:27,"yeah i also had problems running parallel instances of nightmare `2.x` on the same machine (macbook)
",reinpk,
238,2015-09-29 11:57:06,"Do you have an idea if the problem is somewhere in nightmarejs or in electron? Would be very interested in helping to fix it.
",ndamjan,
238,2015-09-29 15:45:35,"my suspicion is that it's somewhere in the ipc mechanism, but i'm not sure exactly how to pinpoint it off the top of my head. would be surprising if the electron processes/windows had any shared state like that.
",reinpk,
238,2015-11-09 10:39:07,"If the electron processes are all using the same temporary directory (because the app name is the same) could this cause issues? See https://github.com/atom/electron/blob/master/docs/api/app.md#appgetpathname
",inversion,
238,2016-04-11 13:06:38,"Possibly related to #493?
",rosshinkley,
238,2016-04-14 04:01:21,"@ndamjan Are you still experiencing this problem with more recent versions of Nightmare?
",rosshinkley,
238,2016-07-12 20:51:34,"@rosshinkley I have this problem with the latest version installed today. Interestingly enough, this happens on an Ubuntu box and a Mac, but on Windows, it's fine. I've come to expect the opposite usually.
",catdad,
238,2016-08-13 10:07:41,"+1. 
I have a similar case: a lot of links (>15k), processed by bunch (10-50) in a loop, for each of it I run async function where new Nightmare instance is created. I also use Promise.all(arrayOfFunctions). 
As the result after some time (depends on the number of links you have in a bunch) 1 of electron processes hangs, sometimes - even before DOM is ready, but sometimes - between evaluate() and end() invocations.
When I dumped Nightmare instance of hung process I saw that the proc.status code is SIGSEGV.
",pkantsedalov,
238,2016-12-07 14:57:37,Hi! Did someone find a solution to run multiple nightmare instance on the same machine at the same time ? Once i launch 4-5 times the same script some of them hang and finally timeout on a .wait() or a .goto(),GautierT,
237,2015-09-21 00:41:22,"`after` and `util` are not used in test/index.js.
",38elements,2015-09-21 03:44:42
237,2015-09-21 03:44:36,":dancer: code deletion i love it
",reinpk,2015-09-21 03:44:42
236,2015-09-21 00:29:07,"Hello! I noticed that installing nightmare also brought in x-ray-phantom. Is there support for using x-ray with nightmare?
",kanethal,2015-09-21 06:39:53
236,2015-09-21 03:59:22,"yikes, it shouldn't have. x-ray will be a user of new nightmare very soon though ;-) just trying to work out the details
",matthewmueller,2015-09-21 06:39:53
236,2015-09-21 04:18:34,"Looking forward to it :)
On Sep 20, 2015 8:59 PM, ""Matthew Mueller"" notifications@github.com wrote:

> yikes, it shouldn't have. x-ray will be a user of new nightmare very soon
> though ;-) just trying to work out the details
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/segmentio/nightmare/issues/236#issuecomment-141871251
> .
",kanethal,2015-09-21 06:39:53
236,2015-09-21 06:39:45,"So I'm a big fat liar, no x-ray-phantom module in nightmare. I don't know what I was thinking. Many apologies :)
",kanethal,2015-09-21 06:39:53
235,2015-09-21 00:03:27,"In a previous version there was an `upload` function in `lib/actions.js`, as far as I understand after switching to Electron the functionality was removed, its because is not supported by Electron or was not implemented yet?

Is there an obvious way on how to upload files and I missed it?
",ugin,2016-05-22 21:13:53
235,2015-09-21 00:17:32,"+1
",vidakovic,2016-05-22 21:13:53
235,2015-09-21 04:04:07,"not sure off the top of my head. two things to check:
- https://github.com/atom/electron/blob/master/docs/api/browser-window.md
- browser events we can trigger programmatically. i would start here: https://github.com/component/file-picker
",matthewmueller,2016-05-22 21:13:53
235,2016-01-26 14:48:23,"Any news on this issue?
",IonicaBizau,2016-05-22 21:13:53
235,2016-01-26 15:44:15,"I don't think so.  Electron does not directly allow a way to intercept requests for uploads [like it does for downloads](https://github.com/atom/electron/blob/master/docs/api/session.md#event-will-download).  I've seen it discussed in the Electron issues, most notably [#749](https://github.com/atom/electron/issues/749) and [#3999](https://github.com/atom/electron/issues/3999), but as far as I know, it's still an open problem.
",rosshinkley,2016-05-22 21:13:53
235,2016-01-26 15:48:25,"@rosshinkley True... Saw these issues too. :+1: 
",IonicaBizau,2016-05-22 21:13:53
235,2016-02-03 13:44:13,"+1
",DavidePastore,2016-05-22 21:13:53
235,2016-04-25 09:21:31,"I just tested [this](https://github.com/electron/electron/issues/749#issuecomment-213822739), and it actually works really well. I'll see if I can find the time and make a PR to add this.

If someone else beats me to it, I'm totally fine with that :)
",Zn4rK,2016-05-22 21:13:53
235,2016-05-22 21:13:34,"Added as a [plugin](https://www.npmjs.com/package/nightmare-upload).
",rosshinkley,2016-05-22 21:13:53
235,2016-05-22 21:17:13,"As the plugin should solve this issue, I'm closing it.  If you have questions/problems, feel free to reopen/open a new issue.
",rosshinkley,2016-05-22 21:13:53
235,2016-12-22 09:32:57,its work: https://github.com/rosshinkley/nightmare-upload,vshvydky,2016-05-22 21:13:53
234,2015-09-19 21:19:11,"Great work guys.  I switched over to the atom editor in May and have been impressed with the stability of atom-shell (now electron).  Nice choice of dependencies for browser automation!

Cheers!
",jefeweisen,2015-09-20 21:08:23
234,2015-09-19 22:03:46,"<3
",matthewmueller,2015-09-20 21:08:23
234,2015-09-20 21:08:29,"i'll fix this up on master
",reinpk,2015-09-20 21:08:23
234,2015-09-20 21:17:03,"released as `2.0.5`, thanks!
",reinpk,2015-09-20 21:08:23
233,2015-09-19 09:00:24,"#232
",fritx,2015-09-19 15:24:13
233,2015-09-19 15:24:11,"had just noticed this myself haha, awesome thanks! 
",reinpk,2015-09-19 15:24:13
233,2015-09-19 17:03:57,"Thanks! Im a contributor now!
",fritx,2015-09-19 15:24:13
232,2015-09-19 08:50:14,"![image](https://cloud.githubusercontent.com/assets/6647633/9975419/75161b98-5eee-11e5-83c0-1cf03154f3c5.png)
",fritx,2015-09-19 15:24:14
231,2015-09-18 18:04:46,"I've tried running your yahoo search example in mocha. Initially it passes, but I realized that the test was never actually run. When I modify the test to fail it still passes and a break point in the test callback is never hit.

I realized mocha was never executing the test because it was a generator. Using a library like co-mocha allowed me to hit the break point, but the test exploded with some funny errors.

How are you running your tests with generators? Can you verify the test is actually working?
",quicksilver7,2015-09-27 19:12:33
231,2015-09-18 20:52:53,"I have further experimented and discovered a few solutions. Make sure to set the slow, timeout, and require options as shown in the test/mocha.opts file. Additionally, I think the yahoo pages changed some things that the test does not reflect. I was able to get things working without the errors after applying these changes and adjusting the selectors.
",quicksilver7,2015-09-27 19:12:33
231,2015-09-19 05:18:59,"@quicksilver7 we're seeing the same things, as in, mocha never run the tests. Could you please post the solutions you've found (a jsbin or similar would go a long way)
thank you
",TheSoftwareFarm,2015-09-27 19:12:33
231,2015-09-21 15:51:32,"@TheSoftwareFarm I created [a repository](https://github.com/quicksilver7/nightmarejs-examples). You can clone it an it should work fine. I tried explaining what I had to do to get it working there.
",quicksilver7,2015-09-27 19:12:33
231,2015-09-22 10:04:39,"thank you @quicksilver7 
",TheSoftwareFarm,2015-09-27 19:12:33
230,2015-09-18 14:41:37,"A non connected node process in the IPC emitter would cause electron to
break.
",davidnaas,2015-09-27 19:07:45
230,2015-09-18 20:32:04,"cool, so what would cause this situation to come up?
",matthewmueller,2015-09-27 19:07:45
230,2015-09-22 09:42:24,"Got this problem as soon as I started with v2.0. trying to run mocha tests locally with a react app. 
",davidnaas,2015-09-27 19:07:45
229,2015-09-17 20:21:07,"Help, I broke nightmare :(

I did this:

<S_CODE_TOKEN>

And got back a screen shot of google.com and null for the URL.
If I `.url()` before `.screenshot()` then it hangs the process before generating a screenshot, so I'm guessing I'm just using this wrong. Any sagely words of wisdom?

I noticed that all the documented examples here are using `yield`. Is it necessary to use generators to execute nightmare properly? 

I'm following usage examples from [http://www.devsbytes.com/browser-automation-with-nightmarejs.html](http://www.devsbytes.com/browser-automation-with-nightmarejs.html) and [https://azurelogic.com/posts/web-scraping-with-nightmare-js/](https://azurelogic.com/posts/web-scraping-with-nightmare-js/)

Has the proper usage changed from these examples (I understand you released a new version)

Thanks in advance! Dan
",kanethal,2015-09-20 21:29:37
229,2015-09-20 21:29:37,"hey dan, yep the new usage would look something like this:

<S_CODE_TOKEN>
",reinpk,2015-09-20 21:29:37
228,2015-09-17 08:07:46,"See stack post http://stackoverflow.com/questions/32612868/running-electron-atom-shell-headlessly-on-linux-server-through-nightmare-js
",Rayjax,2015-09-27 19:18:19
228,2015-09-19 00:13:51,"Looks like a dup of: https://github.com/segmentio/nightmare/issues/224
",matthewmueller,2015-09-27 19:18:19
228,2015-09-27 19:18:19,"closing as dupe of #224
",reinpk,2015-09-27 19:18:19
227,2015-09-17 07:36:26,"I was trying to setup e2e test environment with nightmare and mocha. I get stucked with example from readme. Then I tried to run nightmare standard test against my application and got this stack trace.

OS: Ubuntu 14.04
Node: 4.0.0

<S_CODE_TOKEN>
",yoihito,2015-09-27 19:17:45
227,2015-09-17 08:16:03,"Hm... that error is usually the result of another error crashing the process. Was there any more errors associated with it? We could use some more error output to diagnose
",matthewmueller,2015-09-27 19:17:45
227,2015-09-17 08:19:46,"How can I get electron's error log?
",yoihito,2015-09-27 19:17:45
227,2015-09-27 19:17:45,"added docs here: https://github.com/segmentio/nightmare#debugging
",reinpk,2015-09-27 19:17:45
226,2015-09-16 23:18:28,"Hello, so far I'm loving nightmare as a much more semantic use for phantomjs. I've been able to login to the site I'm gathering data from, and got screenshots confirming I am working on the correct page. But I am having trouble working the evaluate feature. I followed the tutorial here: https://azurelogic.com/posts/web-scraping-with-nightmare-js/  and then adapted it to my use case. I have now found this tutorial to maybe be out of date because I get errors when I execute it verbatim. 

I'm confident I am simply using this wrong, so any correction will be very welcome. I am not getting any console output for except for 'I suck', which I do :(

<S_CODE_TOKEN>

Again, I'm sure I am just using this wrong. I've followed the examples as closely as possible but I must be missing something.
",kanethal,2015-09-21 21:47:43
226,2015-09-17 00:01:44,"Hey there! I'm not sure exactly what's going on here just yet — what version of nightmare do you have installed? (looks like 1.x, have you checked out 2.x?)

One thing that jumps out at me is I'm not sure if node will be able to interpret the element object passed to the second function in evaluate. Could you try this instead?

<S_CODE_TOKEN>
",sperand-io,2015-09-21 21:47:43
226,2015-09-17 02:56:13,"Thanks for the response! I have copied in your lines in place of my .evaluate. I don't see a change in the console output as seen here:

<S_CODE_TOKEN>

I also put in some more console.logs to see if I can get static feedback, but there was no change in the console output.

<S_CODE_TOKEN>

I checked on the version and I pulled v2.02. Are there some other dependencies I need to include? Right now I have python 2.7, node, phantomjs available to PATH, and nightmare and that's everything. Thanks again for getting back, I appreciate your interest!
",kanethal,2015-09-21 21:47:43
226,2015-09-21 21:43:52,"gotcha, makes sense then! the method signature for evaluate changed in `2.0.0`, it only takes a single callback function now that the IPC works a bit differently: https://github.com/segmentio/nightmare/#evaluatefn-arg1-arg2

looks like you're after something along the lines of:

<S_CODE_TOKEN>
",sperand-io,2015-09-21 21:47:43
226,2015-09-21 21:47:28,"Thanks Chris, I really appreciate your help here. I was able to get an
evaluation to work successfully!
On Sep 21, 2015 2:44 PM, ""Chris Sperandio"" notifications@github.com wrote:

> gotcha, makes sense then! the method signature for evaluate changed in
> 2.0.0, it only takes a single callback function now that the IPC works a
> bit differently:
> https://github.com/segmentio/nightmare/#evaluatefn-arg1-arg2
> 
> looks like you're after something along the lines of:
> 
> var body = yield nightmare()
>   .viewport(1000,1000)
>   .type(login.idfield , login.id)
>   .type(login.pwfield , login.pw)
>   .click(""input.cartaccountlogin"")
>   .wait()
>   .goto('ANOTHER URL')
>   .wait()
>   .evaluate(function (){
>     return document.querySelector('body').innerHTML;
>   })
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/segmentio/nightmare/issues/226#issuecomment-142118129
> .
",kanethal,2015-09-21 21:47:43
226,2015-09-21 21:47:42,"boom! psyched to hear it. 
",sperand-io,2015-09-21 21:47:43
225,2015-09-16 17:38:27,"Hello, I'm a newbie of nightmare, got this error: ""Syntax error: unexpected identifier"" for the below code
var nightmare = Nightmare();
function login () {
       var a = yield nightmare
    .goto('http://somewebpage.com')
}
Anyone can help.
",thucnc,2015-09-27 19:18:02
225,2015-09-16 20:54:37,"Probably need `node --harmony index.js`
",matthewmueller,2015-09-27 19:18:02
225,2015-09-17 09:12:43,"Thanks Matt, now I have a problem running nightmarejs on linux server (it does not do anything even throw exception/error). I guess I have the same problem as issue #228 . Please help
",thucnc,2015-09-27 19:18:02
225,2015-09-27 19:18:02,"closing as a dupe of #228 
",reinpk,2015-09-27 19:18:02
224,2015-09-16 12:26:01,"I've taken the cnn.js example, and my only change is changing the require line from ../nightmare to nightmare, but when I run it I only get...

> DEBUG=nightmare node --harmony cnn.js

<S_CODE_TOKEN>

I don't ever seem to get the title of the page.

I've tried various other examples from Nightmare < 2 from around the web, and I can't get any of them to work either. Nothing ever errors, I just never seem to get any screenshot, pdf or elements pulled off the page in the output.

After 4 hours of bashing my head, I'm not sure what else to try.
",richard5mith,
224,2015-09-17 06:49:10,"I tried this and got it returned properly.

<S_CODE_TOKEN>

But if I tried with a website that have a SLL problem, like below, it hang there for, forever. 

<S_CODE_TOKEN>

It just hang here. No error, and electron no exited.

<S_CODE_TOKEN>
",idrakimuhamad,
224,2015-09-17 12:59:37,"What's your environment for running the cnn.js script?

Entirely headless server, or in a terminal in an existing X session, or OS X etc?
",richard5mith,
224,2015-09-17 23:03:02,"I do have the same issue on a headless server. Everything runs correctly on OSX but not on my build server.
",pastawoua,
224,2015-09-18 02:47:16,"Yikes, major issue. 

![img](https://cldup.com/dAy_dE48-X.png)

Seems like the electron linux binding is broken or something. Anyone have any ideas?
",matthewmueller,
224,2015-09-18 21:02:18,"Odd that at least you get an error message when I don't. Mine just fails silently.

My guess is that it can't get the framebuffer, which is where xvfb would normally come in. But I've tried running electron with that too and just get gtk errors.
",richard5mith,
224,2015-09-18 21:39:37,"Okay. I'm not exactly sure how to codify this right now (or what layer to support this in), but to get it working on the official node (docker) image, you need to do the following:

<S_CODE_TOKEN>

More info: https://github.com/atom/electron/issues/228
Dockerfile: https://github.com/aheuermann/docker-electron

---

Could use some help on getting this bug resolved.
",matthewmueller,
224,2015-09-18 22:11:07,"That doesn't solve it for me on my environment. Still no errors, but still no title from the CNN example either.

I had previously got Gtk3::Webkit Perl module running, which also uses xvfb, and had everything installed except libxss1 already. So I know my xvfb works.

Going round in circles trying to find suggestions. I see the same as this person when running electron through xvfb-run, https://gist.github.com/AspireToCodeBetter/130877925f52c8fb2557. 

And the Stack Overflow question points people here, http://stackoverflow.com/questions/32612868/running-electron-atom-shell-headlessly-on-linux-server-through-nightmare-js. 
",richard5mith,
224,2015-09-18 22:23:53,"Oh I don't think this is it, but can you try running master? `npm install segmentio/nightmare` ?

I upgraded it to fix: https://github.com/mafintosh/electron-prebuilt/issues/54#issuecomment-140625958
",matthewmueller,
224,2015-09-18 22:34:11,"Hey! That did it. I can now start Xvfb on display 9 as you posted before, then I can now run the cnn example.

Looks like it was an incomplete Electron install before.

So can you modify your launch of electron process to use xvfb-run?
",richard5mith,
224,2015-09-19 00:15:35,"@richard5mith i'm not very familiar with `xvfb`, by `xvfb-run` do you mean the instructions i provided? or is there a simpler way?

I think it's starting a server (`Xvfb -ac -screen scrn 1280x2000x24 :9.0 &`), which is something I'd like to avoid. or at least have a good way to clean up after we quit.
",matthewmueller,
224,2015-09-19 07:59:21,"I was thinking something like this as a variation on your steps, which is how I had run Gtk Webkit .

<S_CODE_TOKEN>

That does seem to launch correctly and the renderer process starts. So I'm not sure if you can do something similar from your JS and then do the IPC with that process.
",richard5mith,
224,2015-09-19 08:16:04,"Actually, this works, without having Xvfb running in the background first as per your previous steps...

<S_CODE_TOKEN>
",richard5mith,
224,2015-09-19 23:30:37,"@richard5mith thanks for that, runs for me now on my build server!
",pastawoua,
224,2015-09-20 01:11:35,"Nice! Now just need to figure out the best way to get these dependencies on linux boxes (without using custom buildpacks or anything)
",matthewmueller,
224,2015-09-20 12:55:51,"@matthewmueller that might help:
https://github.com/shippableImages/minBase/blob/master/ubu1204/01base/containerSetup.sh
https://github.com/shippableImages/minBase/blob/master/ubu1204/01base/xvfb.sh

Using the shippable container to run nightmare and mocha.
",pastawoua,
224,2015-09-21 05:56:47,"@matthewmueller I've narrowed it down to `apt-get update && apt-get install -y xvfb x11-xkb-utils xfonts-100dpi xfonts-75dpi xfonts-scalable xfonts-cyrillic x11-apps clang libdbus-1-dev libgtk2.0-dev libnotify-dev libgnome-keyring-dev libgconf2-dev libasound2-dev libcap-dev libcups2-dev libxtst-dev libxss1 libnss3-dev gcc-multilib g++-multilib`

Hope that helps!
",pastawoua,
224,2015-09-21 06:01:22,"Thanks man, unless I'm missing something I think this should do it though: https://github.com/segmentio/nightmare/issues/224#issuecomment-141575361. Or are you talking about without node dependencies? 

I think the remaining items to sort out are:
- [ ] When do these installation procedures happen? Is this a `postinstall` script, a node-gyp thing, or is it something that shouldn't even be handled in this library?
- [ ] Verify that we can run `xvfb-run --server-args=""-screen 0 1024x768x24""` across multiple processes (in other words, running two of these spawn commands at once on the same machine)
- [ ] Ensure that we're cleaning up the xvfb server after we execute (when the node process exits)

I plan on looking at this sometime this week or weekend, but any time offered sorting this stuff out would help accelerate this fix.
",matthewmueller,
224,2015-09-29 15:57:25,"I'm unable to fix [my #223 Heroku deploy](https://github.com/segmentio/nightmare/issues/223). Updated to Nightmare v2.0.6 and tried custom buildpacks but couldn't sort it out.  Has anyone used xvfb on Heroku?
",dylanvalade,
224,2015-09-29 19:30:08,"Would be good if we could get some sort of post install script going so it just worked on heroku. Sorry guys, I haven't had much time to look into this lately, but hopefully we can get this sorted out soon
",matthewmueller,
224,2015-09-30 05:34:11,"@matthewmueller https://github.com/Rob--W/node-xvfb might be of use for controlling the xvfb server.
",notsentient,
224,2015-09-30 11:53:14,"@notsentient Jabin, Simply Wall St looks outstanding.  Good find on the xvfb module.
",dylanvalade,
224,2015-10-14 10:39:40,"same issue there.
@dylanvalade did you find out how to make it work ?
",jney,
224,2015-10-14 13:22:50,"@jney Unfortunately, I had to change my plan. Using Phantom now and this explains the setup.
http://stackoverflow.com/questions/22116673/cannot-find-module-phantomjs-in-heroku/32853675#32853675

After this Linux issue gets sorted out I would much rather use Nightmare.
",dylanvalade,
224,2015-10-20 20:47:26,"One thing I just realized is that nightmare is running fine on Circle CI. Probably missing something, but anyone know how that's working? I doubt they have all this additional setup, but maybe...
",matthewmueller,
224,2015-10-25 22:00:55,"This

<S_CODE_TOKEN>

and 

<S_CODE_TOKEN>

worked for me, might be worth updating the doc for since this is going to be mostly used on headless servers.
",edasque,
224,2015-10-25 22:05:12,"+1 I also have it running relatively painlessly using 'xvfb-run', after trying and failing to get it connected to a separate 'xvfb' process.
",danhalliday,
224,2015-11-20 10:48:14,"Did not work for me :(
Have all packages installed, using master from nightmare, headless Ubuntu 14.04.3.
No error messages, just hangs. Works fine on Mac

EDIT: works with sudo, not perfect but it's something
",kuba-gaj,
224,2015-11-25 05:04:25,"Not work for me either after tried install `xvfb-run`

<S_CODE_TOKEN>
",dickeylth,
224,2015-11-26 01:14:22,"sudo yum install xorg-x11-server-Xvfb
xvfb-run --server-args=""-screen 0 1024x768x24"" node --harmony cnn.js

worked for me on CentOS.
",deinwort,
224,2015-12-04 18:47:01,"@deinwort which version of CentOS and NodeJS are you using ?
",younes200,
224,2015-12-04 18:52:24,"On CentOS 7, with xvfb-run is not working :

<S_CODE_TOKEN>

<S_CODE_TOKEN>

<S_CODE_TOKEN>
",younes200,
224,2015-12-04 19:29:49,"Xvfb need more packages under Centos otherwise it will crash 

<S_CODE_TOKEN>

The best way to debug this, is by running electron directly:

<S_CODE_TOKEN>
",younes200,
224,2015-12-10 02:55:03,"Anyone get this working in a Dockerfile? Build the image just fine and seems to be working inside the container (`docker run -it nightmare /bin/bash`) but once I try passing in the command or entrypoint it just hangs (not at `nightmare queueing action ""evaluate"" +2ms`, but like it's starting the xvfb server without running the script)

Here's the `Dockerfile`:

<S_CODE_TOKEN>

Trying to legitimize this a bit for us all, but major strugglez :-P
",matthewmueller,
224,2015-12-10 15:13:56,"For those not familiar with Docker, here is the step by step once you've installed it (it needs a 64 bit modern distro & kernel).

In the nightmare source directory (from this repo), create a file named Dockerfile which has the content at the bottom of this post (@matthewmueller I had to make some edits, including  replacing `FROM node:5` with `FROM node:4.2` for version pinning since 5.x is not LTS) then run:

`docker build -t nightmare-test .`

This takes a little while. Then:

`docker run nightmare-test`

expected result is:

<S_CODE_TOKEN>

My Dockerfile is:

<S_CODE_TOKEN>

My index.js for the CNN example (in the root project folder is:

<S_CODE_TOKEN>

@matthewmueller, if you want me to do a PR with the docker file, an example directory and documentation, let me know.
",edasque,
224,2015-12-10 16:06:41,"@edasque thanks for the detailed instructions! the command i'm just trying to get working is this:

<S_CODE_TOKEN>

or 

<S_CODE_TOKEN>

with `xvfb-run --server-args=""-screen 0 1024x768x24""` being an `ENTRYPOINT`

---

_edit:_ though come to think of it, the dockerfile you provided is deployable to heroku/dokku on it's own. just looking for a couple ways to make this as easy to use as possible.
",matthewmueller,
224,2015-12-10 16:39:24,"index.js being the CNN example, right?

Yes, it's a good idea to use an ENTRYPOINT for that. Let me know what I can help with.

Note however that the ENTRYPOINT will require you to install the application dependencies through nightmare's package.json in this case. Use the exec form of ENTRYPOINT so it could be overriden, maybe?

You could also look at a node-onbuild (such as https://github.com/nodejs/docker-node/blob/master/4.2/onbuild/Dockerfile) for your base image.
",edasque,
224,2015-12-10 17:08:57,"> index.js being the CNN example, right?

Yep!

> Let me know what I can help with.

If you have a chance, do you mind testing this command? `docker run nightmare xvfb-run --server-args=""-screen 0 1024x768x24"" node cnn.js`

I was able to get it working by keeping everything in the Dockerfile, but it'd be nice to have flexibility in what script you run. For me when I run that command, it doesn't even run the node script, it just hangs, like it started the xvfb server but didn't do anything after. Tested a ton of iterations, but haven't been able to get a version working where you can pass the file in.

> Note however that the ENTRYPOINT will require you to install the application dependencies through nightmare's package.json in this case. Use the exec form of ENTRYPOINT so it could be overriden, maybe?

Yah maybe best to stick with `CMD`, though you can overwrite `ENTRYPOINT` via `docker run --entrypoint`, though i'm not sure that's a great idea. I guess it depends how often you need to change the `--server-args`
",matthewmueller,
224,2015-12-10 19:09:41,"I have the same problem, I don't know what the cause is yet. I thought it might be in the encoding of the quotes & such but I don't think so anymore. Might be helpful to tail the logs if you know where the xvfb stuff goes (`docker exec nightmare tail -f /var/log/whatever_it_is.log`)
",edasque,
224,2015-12-22 16:10:31,"After creating an app in in windows(Worked awesome) .. now its not running in fedora 64-bit.. I seriously think this is waste of time for everyone.. why dont you guyzz shut down nightmare, Its really nightmare for developers... All my time wasted, tried to fix for 2 days.... Unftunately its not giving any error messages... tried every steps....Its totally waste
",sriducati,
224,2015-12-22 16:12:51,"I have had no problem here. Have you tried the Docker approach @sriducati?
",edasque,
224,2015-12-22 16:15:17,"@edasque thats the only step left bcos iam new to docker...  I tried almost all steps.. trust me,each and every dependencies i fixed for electron,scanned whole internet to fix this issue... spent 2-3 days.. but still not working...
",sriducati,
224,2015-12-22 16:22:08,"it works using docker. we're working on a better solution for linux. keep in mind this is free software, so please be civil. if you're unhappy with nightmare, you're free to try something else.
",matthewmueller,
224,2015-12-22 16:26:21,"@matthewmueller I am sorry if my comment was offencive .I was very happy with nightmare when working on windows but suddenly all my app stopped working without any error messages... its really very hard...just don't know what to do now...
",sriducati,
224,2015-12-22 16:28:26,"@sriducati did you try using DEBUG=nightmare ? I think there might be a way to alter the verbosity but I can't recall.
",edasque,
224,2015-12-22 16:31:02,"@edasque  ya i tried debug mode below is the result...

  [root@server ~]# DEBUG=nightmare node --harmony cnn.js
  nightmare queueing action ""goto"" for http://cnn.com +0ms
  nightmare queueing action ""evaluate"" +21ms
  nightmare running +3ms
",sriducati,
224,2015-12-22 16:31:47,"@sriducati  `nightmare` is base on [electron](http://electron.atom.io/) which doesn't have a good support on linux speciality with headlessly window. Best way to debug this on linux is to run first electron :
`./node_modules/nightmare/node_modules/electron-prebuilt/dist/electron` In most case, it's a dep/library missing. 
Docker solution may be a the best way for now.
",younes200,
224,2015-12-22 16:33:37,"@younes200 thank you, tried your method as well...result is empty ... again the same prob when we try to run nightmare.. no errors.. no output  :(
",sriducati,
224,2015-12-24 10:58:13,"Good new everyone.. nightmare worked well with ubuntu 12.04 64-bit
",sriducati,
224,2015-12-24 11:11:38,"@sriducati could you please post your results here to help others too ;)
",younes200,
224,2015-12-24 12:49:23,"@matthewmueller , @edasque , @younes200  Thank you all...After changing many operating sys versions... found simple fix Ubuntu 12.04 64-bit ;) 

<S_CODE_TOKEN>

Its running on OpenVz VPS , No docker used... It would be great if anyone could replay to  https://github.com/segmentio/nightmare/issues/411 ,  I can write a complete help guide to install in VPS ... 
",sriducati,
224,2016-01-06 04:57:02,"@matthewmueller 
Why not put the solution/workaround in README ?
",scarletsky,
224,2016-01-30 18:27:26,"I'm also having this issue. CentOS workaround didn't work for me.

Mine doesn't hang tho, it just quits.

<S_CODE_TOKEN>

I tried with `xvfb` but still the same issue

<S_CODE_TOKEN>
",naomik,
224,2016-02-05 17:16:54,"It would be good to get a solution to this.
I need to get Nightmare.js running on a remote headless server.

I have a Digital Ocean virtual server running Ubuntu 14.04.3 x64
I have installed Node v5.4.1

Running my app ...
`$ sudo DEBUG=nightmare xvfb-run --server-args=""-screen 0 1024x768x24"" node app.js`

Gives the following output in Terminal ...

<S_CODE_TOKEN>

No screenshot is created, and the final success message (that I get when testing on localhost) is never shown.
",adrianparr,
224,2016-02-06 16:08:25,"Here, the same with a centOS docker image and node 5.5. :-/
",wascou,
224,2016-02-10 16:41:01,"I worked latest nightmare on headless machine(docker node:4.2, docker-machine with virtualbox driver as host machine).
my dockerfile is

<S_CODE_TOKEN>

and execute

<S_CODE_TOKEN>

and index.js content is following.

<S_CODE_TOKEN>

but I don't want to write `""nightmare"": ""segmentio/nightmare""` to package.json. and my circle-ci test is failed.
",JumpeiArashi,
224,2016-03-03 06:50:16,"Guys, I couldn't run headless nightmare based on advices from this discussion. 
So, any news? 
I tryed few docker's, and it always stuck at `nightmare running +1ms` step..
",Deliaz,
224,2016-03-03 08:53:28,"Just a note when trying to debug - set environment variables `ELECTRON_ENABLE_LOGGING` and `ELECTRON_ENABLE_STACK_DUMPING` true.
https://github.com/atom/electron/blob/master/docs/api/environment-variables.md

Then there should be more output.
",msokk,
224,2016-03-03 09:05:22,"**msokk** thanks, 
but there is no new here: 

<S_CODE_TOKEN>

But it works good with the electrone: `xvfb-run electron test/electron.js`. And I get a data, that I'm waiting for. And also see tons of logs
",Deliaz,
224,2016-03-06 20:34:52," edasque's solution worked for me on Ubuntu 14.04 however my build server uses pm2 to run node. I can't get it to work with pm2. Any suggestions? I would hate to have to switch back to phantom. I've tried below:

pm2 start app.js --node-args=""--expose-gc"" -- DEBUG=nightmare xvfb-run --server-args=""-screen 0 1024x768x24"" 

DEBUG=nightmare xvfb-run --server-args=""-screen 0 1024x768x24"" pm2 start app.js  

DEBUG=nightmare xvfb-run --server-args=""-screen 0 1024x768x24"" && pm2 start app.js 

pm2 start app.js --execute-command DEBUG=nightmare xvfb-run --server-args=""-screen 0 1024x768x24"" 

pm2 start DEBUG=nightmare xvfb-run --server-args=""-screen 0 1024x768x24” app.js  

pm2 start DEBUG=nightmare xvfb-run --server-args=""-screen 0 1024x768x24” app.js  
",huemans,
224,2016-03-07 10:17:51,"I have the same problem as @huemans, I couldn't make PM2, xvfb and Nightmare play well together.

Any ideas?
",FdezRomero,
224,2016-03-08 15:29:06,"Still having issues with the same issue, I tried all of your solutions, everything works perfectly on OSX but when moved to the Linux server it doesn't provide any response. It's the same environment, same versions of node and nightmare etc. On linux it will just not show any output. Any ideas?

npm@3.6.0 /usr/local/lib/node_modules/npm
Air:nm sagi$ npm -l version
{ npm: '3.6.0',
  ares: '1.10.1-DEV',
  http_parser: '2.6.2',
  icu: '56.1',
  modules: '47',
  node: '5.7.1',
  openssl: '1.0.2g',
  uv: '1.8.0',
  v8: '4.6.85.31',
  zlib: '1.2.8' }

## 

# DEBUG=nightmare\* xvfb-run node cnn.js

  nightmare queueing action ""goto"" for http://cnn.com +0ms
  nightmare queueing action ""evaluate"" +9ms
  nightmare running +11ms
",sagistrauss,
224,2016-03-08 19:53:54,"Might be a problem with electron running headless in Linux.

root@Ubuntu-1510-wily-64-minimal /tmp/electron-quick-start # xvfb-run /var/www/growthy/nm/node_modules/electron-prebuilt/dist/electron --type=gpu-process --channel=25956.0.799365973 --no-sandbox --supports-dual-gpus=false --gpu-driver-bug-workarounds=2,51,63 --disable-accelerated-video-decode --gpu-vendor-id=0x1234 --gpu-device-id=0x1111 --gpu-driver-vendor --gpu-driver-version --v8-natives-passed-by-fd --v8-snapshot-passed-by-fd
[27268:0308/205209:FATAL:scoped_file.cc(29)] Check failed: 0 == IGNORE_EINTR(close(fd)). : Bad file descriptor
#0 0x000001ae0a1e <unknown>
#1 0x000001af6bab <unknown>
#2 0x000001af716d <unknown>
#3 0x000001af08c4 <unknown>
#4 0x000001aea530 <unknown>
#5 0x000001af083e <unknown>
#6 0x000001af06a8 <unknown>
#7 0x000002b6e10d <unknown>
#8 0x000002b6e015 <unknown>
#9 0x0000010a9fa1 <unknown>
#10 0x0000010a911a <unknown>
#11 0x000002ea776c main
#12 0x7f93b3386a40 __libc_start_main
#13 0x000000539f09 <unknown>

(That's the command that node is trying to execute)
",sagistrauss,
224,2016-03-18 11:45:40,"@huemans @FdezRomero did you solve that problem? I'm trying to run my nightmare app with PM2 but I can't make it work.
",gabrielperales,
224,2016-03-18 12:00:18,"@gabrielperales No, I haven't found a solution yet. The next thing I was planning to try is the [Headless](https://www.npmjs.com/package/headless) module, a wrapper for Xvfb directly from Node. But I don't know if it will play well with Nightmare. Let me know if you try it! 
",FdezRomero,
224,2016-03-18 12:33:55,"@FdezRomero Thank you for your answer. I have tried headless module... but it doesn't seems to work. I'll keep trying
",gabrielperales,
224,2016-03-18 14:46:14,"@FdezRomero @huemans I could do it with this module [node-xvfb](https://github.com/Rob--W/node-xvfb). I have done a test example [here](https://github.com/gabrielperales/nightmareHeadlessTest/blob/master/index.js) .
",gabrielperales,
224,2016-03-18 14:55:25,"I've got nightmare working in headless mode with code similar to the example from @gabrielperales. However, I do not think the code will work with pm2 (atleast I wasn't able to
",SantoshSrinivas79,
224,2016-03-18 17:08:34,"@SantoshSrinivas79 I have tried my code once... and I think it worked, I'll try it again later to be sure
",gabrielperales,
224,2016-03-23 10:15:15,"@gabrielperales - works perfectly, thank you!
",sagistrauss,
224,2016-03-26 02:09:28,"Anyone else running this on heroku and have it working? I'm getting crashing. Everything works fine locally. It works fine for websites on the smaller side, and using larger dynos occasionally lets it finish when it otherwise wouldnt indicating maybe some kind of memory thing?

<S_CODE_TOKEN>

I'm using all the deps outlined above. The last 3 lines of the log for running cnn.js.

<S_CODE_TOKEN>

Looks like it's crashing in the renderer process. Planning on trying to upgrade electron to 0.37 and see what happens. Ideally i'd like to keep this on heroku, but maybe not in the cards. I can make a new issue if more useful.
",benogle,
224,2016-03-28 07:25:39,"@benogle Unfortunately I don't think anyone have made it work on heroku. I tried a lot, but never did make it work. Now I follow this issue to see if anyone does i the future. Maybe when Chromium gets better at running headless.
",freeall,
224,2016-04-15 23:56:34,"[I made a buildpack](https://github.com/benschwarz/heroku-electron-buildpack) for running Electron on Heroku. 

:cake: Works for me. YMMV. :tada: 
",benschwarz,
224,2016-04-19 20:51:51,"Hi, I have updated [my example](https://github.com/gabrielperales/nightmareHeadlessTest) with a Dockerfile. That is all you will need to run your nightmarejs code in headless mode. I hope you can enjoy it.
",gabrielperales,
224,2016-05-16 17:34:34,"hey @benschwarz , how did you make it work with heroku? which dyno size were you using? mine is crashing after a certain (very small) amount of actions queued? I think I'm running into the whole heroku /dev/shm being too small (5 mb in heroku I believe, which is useless).
Also, I'm getting  electron:stderr Xlib:  extension ""RANDR"" missing on display "":99""., not sure if relevant...
",rickmed,
224,2016-05-16 18:27:45,"@rickmed I found it to be pretty unstable too (admittedly, on the 512m dyno), I decided to use phantomjs instead. I'd love to have used electron and nightmare, but instead I shipped phantomjs and had no issues since. I'm sure there is a simple reason that this is happening on heroku environments, but I just didn't have the time to spend on it. 
",benschwarz,
224,2016-05-18 03:09:26,"Think I found the ""best"" answer:
- [Official Electron documentation on testing headlessly](https://github.com/electron/electron/blob/master/docs/tutorial/testing-on-headless-ci.md)

It shows what to put in `.travis.yml` and recommends the super-handy [xvfb-maybe](https://github.com/paulcbetts/xvfb-maybe) utility.
",taoeffect,
224,2016-06-06 01:29:39,"Simple [gist](https://gist.github.com/lucasbrigida/f9d606a6888cbd1c7874a84607486c3e) with commands for run nightmare headless.
",lucasbrigida,
224,2016-06-06 12:45:08,"Is this issue still a bug in nightmare, or it was fixed in any new version..?? I am not able to run nightmare on google appengine for node.js using any of provided solution. Asked regarding [this on stackoverflow](http://stackoverflow.com/questions/37625327/how-to-run-nightmare-js-on-google-appengine-for-node-js). Can someone answer my question over there.
",hhsadiq,
224,2016-06-06 17:00:44,"This is not a nightmare issue but an electron (chromium really) issue. @rosshinkley maybe this should be closed? 

@hhsadiq I'll try to help you via stackoverflow.

EDITED: for anyone interested in the answer: http://stackoverflow.com/questions/37625327/how-to-run-nightmare-js-on-google-appengine-for-node-js/37663861#37663861
",rickmed,
224,2016-06-06 20:23:44,"FYI:
- https://chromium.googlesource.com/chromium/src/+/master/headless/README.md
- https://bugs.chromium.org/p/chromium/issues/detail?id=546953
",jokeyrhyme,
224,2016-06-07 23:57:54,"@rickmed I was planning on closing it with the resolution of #502 (where Nightmare would take care of the framebuffer for you, at least until Chromium's headless features trickle into Electron), but the details of that have proven much more difficult than I had anticipated.  It's not even as simple as ""just use Xvfb"" as [_sometimes_ this causes Chromium to hang](https://github.com/segmentio/nightmare/issues/561).
",rosshinkley,
224,2016-06-14 13:52:19,"# Solution with Docker

The simplest way i found to get it working with docker...

Dockerfile

<S_CODE_TOKEN>

entrypoint

<S_CODE_TOKEN>

cnn.js

<S_CODE_TOKEN>

Build image

<S_CODE_TOKEN>

Then run and see the results

<S_CODE_TOKEN>

I'm using docker-machine with virtualbox driver
",otaviomedeiros,
224,2016-07-19 00:02:58,"I got GAE deploys working in a simpler fashion described here: http://stackoverflow.com/a/38447642/562915
",jakeorr,
224,2016-07-26 06:29:08,"I got it working on Gitlab-Ci

<S_CODE_TOKEN>
",feedm3,
224,2016-08-12 00:49:57,"@huemans, @FdezRomero, @gabrielperales, @SantoshSrinivas79 . To get nightmare working headlessly with pm2, you just need to wrap your mind around what Xvfb does, what xvfb-run does, how they interact with your node process, and how this interaction is facilitated.

Going to give you an idea of the basics and then tell you how to get this all going in pm2. Forgive me if I am oversimplifying things:
- Xvfb is a frame buffer which allows us to mock a desktop interface where, in this case, the electron browser can run.
- Xvfb sets a display number (the initial default is ""99""). The application using the desktop must have an idea of this display number to use the frame buffer.
- xvfb-run (which is a shell script) is perfect for single process node applications as what it actually does (as far as I understand) is setup the Xvfb process, set the ""DISPLAY"" environment variable to "":99"", and then spawn the process you specify with access to the environment variable so it can access the display.
- For PM2 to manage processes happily it must spawn all the processes that it controls. I think this is where xvfb-run falls apart with pm2. It creates processes that need to be controlled and then exits and pm2 doesn't like this.
- Instead what we can do is spawn two processes simultaneously (do what xvfb-run does essentially): one being Xvfb and the other being a process for your application, setting the display number and ""DISPLAY"" environment variable explicitly.
- The best way to spawn the two processes is to create a PM2 Process file json as explained [here](http://pm2.keymetrics.io/docs/usage/application-declaration/) in pm2 docs, and then use the pm2 start command.

This is what your process file would look like, substituting for your specific case:

<S_CODE_TOKEN>

If you place this process file in the same directory as `<your_main.js>`, and feed the process file to  pm2, you're all set. Assuming we call the file `process.json` then you would execute this pm2 command to get the two processes started:

<S_CODE_TOKEN>

Tested and working on Debian 8.
",mashaalmemon,
224,2016-09-01 14:40:11,"Everybody is going astray. the bug is simple, **just get my F\* bot  to work**... and yet everybody is failing to give a simple answer.This is the oneliner that will save your day ( obviously if you have xfvb installed... modify to your needs.. this one is for slackware 14.1). 

*Note, on some systems ""xvfb"" is called ""Xvfb"" (capital X)  and in other ""xvfb-run""

**DEBUG=nightmare\*  Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 & node --harmony app.js**

![p](https://cloud.githubusercontent.com/assets/5326525/18171925/2d70ec10-7053-11e6-86f6-dc38eddb2160.png)
",atorralb,
224,2016-09-06 19:57:53,"~~I'm not much of a terminal user, and while I tried [Electron's travis-ci recommendations](https://github.com/electron/electron/blob/master/docs/tutorial/testing-on-headless-ci.md), my tests are still timing out; even with 10+ second limits.~~

The only thing that worked for me was to use [xvfb-maybe](https://github.com/paulcbetts/xvfb-maybe) and to use a forced viewport size (via `browser.viewport()`).
",stevenvachon,
224,2016-09-18 14:50:34,"I got an image working based on this discussion, but when I create a screenshot, I don't see any text. Selecting any text via nightmare works though. Anyone ever seen that issue?

**SOLUTION** : I based my docker image on 'node:slim', after changing to 'node:6.6.0-wheezy' it works!
",maxfriedmann,
224,2016-10-14 09:55:29,"I tried to install 
`this yum install xorg-x11-server-Xvfb  gtk2 libXtst GConf2 alsa-lib xorg-x11-fonts*`
but it doesn't work

Node version
- v6.4.0

Centos Version
- v7.2

Do centos work nightmarejs?
",ghost,
224,2016-10-18 14:19:31,"From a performance POV, does anyone know how Nightmare running with Xvfb compares to PhantomJS as headless?
",pelhage,
224,2016-10-18 17:49:11,"@pelhage well, Electron sure doesn't take _a few seconds_ to open like PhantomJS does.
",stevenvachon,
224,2016-10-18 18:16:42,"@pelhage I haven't used phantomJS since Nightmare decided to bundle electron instead of webkit.  I think there are many reason you should choose Electron instead of phantom's webkit such as but not limited to : 
-Browser technology up to date with standards (unlike phantomJS webkit)
-Electron is becoming a defacto standard for automation testing and it will probably take over Selenium
",atorralb,
224,2016-10-21 19:53:33,"I used @mashaalmemon 's solution for my Scraper cron job, and it worked for the first day, but ever since I've been getting error messages in my log and my scraper won't run. Not sure how to decipher them, can someone maybe point me in the right direction or tell me what typically causes these errors?

Gist of logs https://gist.github.com/pelhage/3f43240a3bd36a7ec06cb09d06c3be92

EDIT: I fixed this by creating a new instance of Nightmare upon each cron job. My error was related to an instance of my scraper being run multiple times, as opposed to creating a new scraper each time.
",pelhage,
224,2016-11-17 18:08:55,"The ultimate solution.
`pm2 start --interpreter xvfb-run npm -- start`
",entrptaher,
224,2016-11-23 23:10:32,"Has anyone successfully gotten Nightmare to work on Heroku? If so, can you share your Dockerfile?

Works locally. Seeing this when running on Heroku:

![image](https://cloud.githubusercontent.com/assets/7015626/20581656/3fdf4d24-b18f-11e6-93f7-2f3e39f94d09.png)



cc @rosshinkley ",stevenmiller888,
224,2016-11-24 02:31:30,"@stevenmiller888 Take a look at https://github.com/captain401/heroku-buildpack-xvfb. You'll also want heroku-buildpack-apt as in the instructions.

(You might also need to include libnotify4 and libxss1 in your Aptfile - let me know if I need to update the instructions.)",yoz,
224,2016-12-07 02:52:46,"My website was deployed on EC2, and I tried `sudo DEBUG=nightmare xvfb-run --server-args ""-screen 0 1024x768x24"" node app.js`, but it processes the request only once
![image](https://cloud.githubusercontent.com/assets/11835233/20952971/36eee936-bc6b-11e6-8cd0-7c59196ec66b.png)
",Dachow,
224,2016-12-07 14:22:46,"@otaviomedeiros : Hi ! Did u manage to launch multiple long script at the same time with this config ?
I tried and when i launch 4-5 times the same script on the same xvfb display it's hang and i got some nightmare .wait() timeout. 
Same if i launch multiple xvfb display and attach one script to one display. 
Seems that a docker instance can't handle many xvfb display... 
No error output from nightmare. Just a `Error: .wait() timed out after 180000msec` at last",GautierT,
224,2016-12-07 15:51:03,@Dachow : it's seems that you killed the electron child process before the other request had time to finish. show us your code !,GautierT,
224,2016-12-08 01:39:03,"@GautierT  Hi! I have ran it with express. The basic structure of code like this:
<S_CODE_TOKEN>
It processes the request only once",Dachow,
224,2016-12-08 05:11:45,"@Dachow, that's because you are ending the instance on first run.",entrptaher,
224,2016-12-08 08:43:35,"@Dachow I think you can make a new instance everytime the route is called, if your resources can handle it so",jekku,
224,2016-12-15 00:03:25,"Folks following my original post on August 11, 2016 I have some more information to share. I noticed some others had similar problem that I just identified. 

Going back to my post you'll see I mentioned how to get nightmare.js working on linux via the use of pm2 and Xvfb. This still applies to a linux bare metal of vm installation.

However to run nightmare in a docker a few things to keep in mind:
-  You'll need to run your node.js script and Xvfb in the docker simultaneously. [pm2-docker](http://pm2.keymetrics.io/docs/usage/docker-pm2-nodejs/) is a good option for running multiple processes in a docker.
- I noticed that some folks had this all working in a docker except screenshots. Or they had situations where things were working in some cases but were not. Dockers have by default 64MB shared memory (/dev/shm). Electron (chromium) needs more shared memory so you'll need to increase this. Look into docker documentation to find out more but it can be done either as part of your ""docker run"" command or in your .yml files. See issue #587 .
- Lastly electron processes that are complete stick around as [Zombie processes](https://www.google.ca/amp/s/blog.phusion.nl/2015/01/20/docker-and-the-pid-1-zombie-reaping-problem/amp/?client=safari). There are a few solutions out there. [dumb-init](https://github.com/Yelp/dumb-init) by the folks at Yelp took me about 5 minutes to setup. On my first run the many many defunct electron processes that used to be left behind are no more. 

Hopefully one or more of these points helps you folks.",mashaalmemon,
224,2016-12-15 01:04:59,"@GautierT, no need to have multiple Xvfb displays in my experience. One Xvfb display and as many simultaneous nightmare processes as your system can handle reasonably.",mashaalmemon,
224,2017-01-01 18:14:11,"One more thing that I encountered when trying to run using xvfb-run. Apparently, if a process executing Xvfb has pid 1, then Xvfb does not send SIGUSR1 which is what xvfb-run relies on.
More info here: https://codereview.chromium.org/1398053003/
Workaround could be as simple as running `/bin/bash -c ""xvfb-run <command>""`",adek05,
224,2017-01-08 20:28:00,"Since the ~2 weeks ago Chromium support headless mode.

> With the latest Chrome Canary on Linux you can enable headless mode with the --headless command line flag. (https://bugs.chromium.org/p/chromium/issues/detail?id=546953#c148)

@matthewmueller @rosshinkley  Will this change in Chromium make any difference here?

Nightmare is awesome, and a headless mode (without xvfb) would be very useful! 🥇 

*(here is a related issue in Electron https://github.com/electron/electron/issues/228)*",sandstrom,
224,2017-01-09 07:21:35,@sandstrom That's really cool! Looking forward to see it working in nightmare!,dickeylth,
224,2017-01-31 22:49:34,"Heroku just bumped the size of `/dev/shm/` on their dyno to allow headless browser test 🎉.

https://devcenter.heroku.com/changelog-items/1085",Chris911,
224,2017-03-03 07:36:59,"I used `xvfb-run`, but got these error:

<S_CODE_TOKEN>",abcfy2,
224,2017-03-03 08:55:14,"@abcfy2 Man read the log there is a clue. I'll give you a hint `FATAL:platform_font_linux.cc(63)] Check failed: typeface. Could not find any font: Nimbus Sans L, sans`. Peace ;)",plesiecki,
224,2017-03-03 09:10:34,"It's a little strange. I find the `Nimbus Sans L` font exists. But after install some other fonts(I don't remember which font solved my issue, maybe `apt install -y fonts-noto`?), it works.",abcfy2,
224,2017-03-03 09:13:28,"Hey folks, I'm going to lock this conversation since there's a ton of good information available and each comment emails approximately 300 people.

If you have an issue with getting Nightmare working on Electron please first read through the comments here. If you cannot find an answer, open a new issue. Thanks!",matthewmueller,
223,2015-09-15 20:34:37,"My app works locally using the CNN example.  However, after a Heroku build and deploy this error is logged when Nightmare is called.

<S_CODE_TOKEN>

package.json includes

<S_CODE_TOKEN>
",dylanvalade,2017-01-02 21:05:42
223,2015-09-27 19:19:24,"looks like the same issue as #224
",reinpk,2017-01-02 21:05:42
223,2015-12-10 22:11:47,"This is very different from #224 - this fails trying to start `electron-prebuilt`.

It looks like the `/tmp/build...` path comes from `electron-prebuilt` using `__dirname` in its install script, which has unexpected behavior on Heroku. This gets written into `path.txt` in `electron-prebuilt`. So I'm fairly sure it's a bug in `electron-prebuilt`.
",yoz,2017-01-02 21:05:42
223,2015-12-11 00:43:11,"(Regretfully, after fixing this it does run into the same issue as #224 .)
",yoz,2017-01-02 21:05:42
223,2016-01-04 20:02:24,"Hi, I am having the same issue on OS X (10.10.5) any ideas? Thanks.
",felixcrive,2017-01-02 21:05:42
223,2016-01-04 20:33:52,"@felixcrive the fix I referenced above should be fixed in electron 0.36.0 - does it work if you use the `electronPath` option with that newer electron?
",yoz,2017-01-02 21:05:42
223,2016-01-05 14:34:09,"@yoz I doesn't work I have electron-prebuilt@0.36.2 and Nightmare@2.1.2 pointing to electronPath.
",felixcrive,2017-01-02 21:05:42
223,2017-01-02 21:05:42,"Given the age of this issue, I'm going to close it.  If you're still experiencing this issue, feel free to open a new issue.",rosshinkley,2017-01-02 21:05:42
222,2015-09-15 07:06:20,"Changing the value of a field doesn't trigger the change and input event by default.
",pastawoua,2016-05-27 20:13:42
222,2015-09-15 08:18:23,"yah, i was worried about this, it's a much more complicated prospect to get the events working.

I think we'd want to use something like this: https://github.com/DamonOehlman/simkey if we decide to support this.
",matthewmueller,2016-05-27 20:13:42
222,2015-09-15 08:26:11,"Doesn't have to be very complicated, interested by the change event more than anything really.

It was on the other methods but not the type one. Do you think this can be merged in?
",pastawoua,2016-05-27 20:13:42
222,2015-09-19 00:20:10,"@matthewmueller can this be merged in please?
",pastawoua,2016-05-27 20:13:42
222,2015-10-02 12:37:44,"I need to test some simple things written in Angular, and $digest doesn't see the changes. Please, merge.
",rianby64,2016-05-27 20:13:42
222,2015-10-06 03:07:45,"@matthewmueller @reinpk is there an issue with the code, anything you want me to change, would be helpful to merge so I don't use my forked version in production.
",pastawoua,2016-05-27 20:13:42
222,2015-10-06 10:57:29,"@pastawoua at least the `input` or `change` event you dispatch is missing some properties like `keyCode`, etc? it's not certain, and it might probably make something broken
",fritx,2016-05-27 20:13:42
222,2015-10-06 11:50:16,"@fritx keyCode is not fired on `input` or on `change` events.

fyi, casperjs implementation: https://github.com/n1k0/casperjs/blob/master/modules/clientutils.js#L899

similar code than on the `check` method, not as robust as #244 but an easy fix for now.
",pastawoua,2016-05-27 20:13:42
222,2015-10-06 15:00:56,"@pastawoua wrote a nice solution that works for me. But if you want to follow the code style, then check this:  

<S_CODE_TOKEN>

So, focus() and blur() are unnecessary. At least while you're implementing the real cool things (sendKeys or simkey and a lot of more) please accept the pull request so we can use nightmare for testing. Thanks
",rianby64,2016-05-27 20:13:42
222,2015-10-09 15:45:56,"Not working for react apps. Really helps this:

<S_CODE_TOKEN>
",zerkalica,2016-05-27 20:13:42
222,2015-10-13 08:19:35,"@zerkalica I can confirm that `evaluate()` function works for Angular 2 forms as well.
",danhalliday,2016-05-27 20:13:42
222,2015-10-13 08:42:18,"@zerkalica nice that info! Have you tried to type some text in a field? I know that $digest in Angular 1.4\* listens only events. So, the current version indeed types something but this is not enough. A change event should be fired. The solution given by @pastawoua is enough for me.
",rianby64,2016-05-27 20:13:42
222,2015-10-13 08:49:21,"@zerkalica Yes, I have a full end-to-end test for my Angular 2 app working using Nightmare. I work around the digest/diffing by `wait()`ing for DOM elements. It works surprisingly well (much easier than setting up Protractor, and less tightly coupled to Angular, too). Eg:

<S_CODE_TOKEN>
",danhalliday,2016-05-27 20:13:42
222,2015-10-13 09:00:17,"@danhalliday Thanks a lot! I hope this kind of workarounds will be temporary. Soon we'll be able to call type(...) and go ahead with the next step.
",rianby64,2016-05-27 20:13:42
222,2015-10-13 09:03:34,"Some patch:

<S_CODE_TOKEN>
",zerkalica,2016-05-27 20:13:42
222,2015-10-13 09:07:08,"@zerkalica Cool!
",rianby64,2016-05-27 20:13:42
222,2015-10-20 07:56:14,"Any progress on this?
",danhalliday,2016-05-27 20:13:42
222,2015-11-16 09:11:50,"Would love to see this merged. Having to manually apply the patch at the moment.
",bausmeier,2016-05-27 20:13:42
222,2016-03-31 00:22:56,"fyi, I gave up on having this merged and maintaining my forked version so we moved to http://nightwatchjs.org
",pastawoua,2016-05-27 20:13:42
222,2016-05-27 20:13:42,"I believe this was (eventually) fixed in #548.
",rosshinkley,2016-05-27 20:13:42
221,2015-09-15 03:36:48,"Based on the example give,

<S_CODE_TOKEN>

jshint telling me `A yield statement shall be within a generator function (with syntax: function*)`. Am I missing something to make this work?
",idrakimuhamad,2015-09-15 05:06:47
221,2015-09-15 05:06:47,"You'll need to wrap it in a generator function using a library like [co](http://github.com/tj/co) or [vo](http://github.com/lapwinglabs/vo):

<S_CODE_TOKEN>

This is the recommended approach because it's extremely easy to follow. Alternatively you can use callbacks:

<S_CODE_TOKEN>

Or even promises (well, thenables):

<S_CODE_TOKEN>

Hope this helps!
",matthewmueller,2015-09-15 05:06:47
220,2015-09-14 22:04:39,"![img](https://cldup.com/tabP9ckSa6.png)

^ Update description @reinpk when you have a chance :-D
",matthewmueller,2015-09-14 22:05:59
220,2015-09-14 22:05:59,"![](https://cloudup.com/ciR3atmYpAp+)

:dancer: 

Amazing work on V2 @matthewmueller!
",sperand-io,2015-09-14 22:05:59
220,2015-09-14 22:06:32,"awesome, thanks!
",matthewmueller,2015-09-14 22:05:59
219,2015-09-14 08:29:05,"In previous version, there is this option `ignoreSslErrors` that can overcome the SSL error on the targeted page. How can I do this in V2? The instances options only resolve around the browser window of electron. The only thing related to HTTPs are the `allow-displaying-insecure-content` and `allow-running-insecure-content` but that can't overcome the SSL error.
",idrakimuhamad,2015-10-25 20:06:17
219,2015-09-14 22:01:27,"Can you provide a failing example please?
",matthewmueller,2015-10-25 20:06:17
219,2015-09-15 00:29:45,"Well, you can try with this site: https://cas2.northport.com.my/myapp/wa/r/nmbctr

I just try to load it up, and take screenshot -- it never did. But if it was replaced with CNN site for example, it worked well.

It is not really failing, cause it didn't return any error, but it didn't do anything, so I'm suspecting this as one of the reason since the site do have SSL errors.

Is this option available in V2 or is it automatically set?
",idrakimuhamad,2015-10-25 20:06:17
219,2015-09-17 06:36:58,"This is the exact thing I do.

<S_CODE_TOKEN>

And nothing happened, which I suspect related to the SSL error, because it work with `1.8.2`. The electron pop and never quit.
",idrakimuhamad,2015-10-25 20:06:17
219,2015-09-26 22:45:12,"Hi, @idrakimuhamad.

It seems that we could achieve this using ""--ignore-certificate-errors"" switch, passing it through app.commandLine.appendSwitch in runner.js. I suggest new feature request in nightmare to provide such api for setting more advance options for electron. Associated electron issue: https://github.com/atom/electron/issues/1221

Also your example is a bit unclear – for me it looks like it wont compile.

Here is mine:

<S_CODE_TOKEN>

this is what i do

<S_CODE_TOKEN>

and this is the output (then it just got stuck).
OSX 10.10 / iojs v3.2.0 / nightmare v2.0.6.

---

Yup, just tried it. I've added the line `app.commandLine.appendSwitch('ignore-certificate-errors', 'true');` just right after imports in `runner.js` module. New output: 

<S_CODE_TOKEN>
",yura415,2015-10-25 20:06:17
219,2015-09-29 02:18:27,"Hey thanks @yura415 I'll try that out. My example of course, aren't complete. I've only showing the important part of the code, excluding the `module.exports` etc
",idrakimuhamad,2015-10-25 20:06:17
219,2015-10-25 20:06:17,"potentially open to a simple pull request, but closing for now as it looks like your immediate question is resolved! thanks!
",reinpk,2015-10-25 20:06:17
219,2016-02-18 17:56:00,"I'm not sure I follow this issue, but I was running into the same problem, essentially a blank white page with nothing loading, until I added `app.commandLine.appendSwitch('ignore-certificate-errors', 'true');` in `runner.js` after the imports. It seems like `ignoreSslErrors` doesn't cover all ssl errors? Monkeypatching nightmare doesn't seem like an awesome solution to the problem though.
",chrisvariety,2015-10-25 20:06:17
218,2015-09-14 00:30:32,"@reinpk While trying to find a way to accomplish https://github.com/segmentio/nightmare/issues/148 even though you closed it here: https://github.com/segmentio/nightmare/issues/148#issuecomment-139900939 I was reading the electron [window-open.md api documentation](https://github.com/atom/electron/blob/master/docs/api/window-open.md) and noticed that it said:

> When window.open is called to create a new window in a web page, **a new instance of BrowserWindow will be created** for the url and a proxy will be returned to window.open to let the page have limited control over it.

and thought this might cause the windows to be shown because I remember reading in [runner.js](https://github.com/segmentio/nightmare/blob/master/lib/runner.js#L33) that you hard code the options.show to false for the main instance of BrowserWindow.

Running the following code causes the spawned window to be shown for the duration of script. I left `nightmare.end();` out to exaggerate the issue.

<S_CODE_TOKEN>

We should probably hard code the show option within the browser-window function to false so that this doesn't happen.
",bchr02,2015-09-14 01:47:56
218,2015-09-14 00:49:05,"Hm, if I'm understanding this issue correctly, you'd like to be able to programmatically handle open windows, without actually opening the window. Is that correct? If so:
- programmatically manipulate open windows

We probably won't add support for this case directly, but keep in mind most the library just builds on that `.evaluate(...)` function. Taking a look at how the actions are implemented is a good place to start.

There are definitely ways to access popup windows on the page from the host. Here's one way if you have control over the popup: https://github.com/lapwinglabs/oauth-open/blob/master/index.js#L28-L29
- don't actually opening the window when `{ show: false }`

I'm not sure electron is respecting this default for newly spawned windows, we may need to investigate this more or open up an issue on electron to fix. I don't think there's a way for us to intercept that command, but who knows. 

**Edit** I guess we could monkey patch `window.open`, but i'm not sure what that would solve.
",matthewmueller,2015-09-14 01:47:56
218,2015-09-14 01:31:18,"Hi @matthewmueller thanks for the reply and for the example.  Ultimately, I would like to use the nightmare api to interface with new windows.

Regardless of whether this repo decides to support this, the fact is some websites may spawn new windows on their own. When this happens, the windows are shown (instead of running headless) which is not the desired effect...

Like you said, we may need to open an issue on the electron repo. Instead of monkey patching window.open we may need to monkey patch browser-window function so it defaults to `{show: false}`.
",bchr02,2015-09-14 01:47:56
218,2015-09-14 01:47:56,"I can confirm the bug and I've opened the issue on electron's side: https://github.com/atom/electron/issues/2771

I don't really see a good way of handling this on our side, so let's track that issue instead.
",matthewmueller,2015-09-14 01:47:56
218,2015-09-14 01:53:07,"Okay, sounds good. Thank you.
",bchr02,2015-09-14 01:47:56
217,2015-09-13 03:28:11,"fixed up the `nightmare.screenshot(path)` implementation. Basically passes the image buffer back from the electron process to the node process to write the file.

Here's an example:

<S_CODE_TOKEN>
",matthewmueller,2015-09-13 03:32:15
217,2015-09-13 03:32:13,"bloody beautiful :)
",reinpk,2015-09-13 03:32:15
216,2015-09-12 22:02:56,"> myrubapa@myrubapa:~/httpdocs/phantomjs/tests$ npm install nightmare
> npm WARN package.json tests@1.0.0 No description
> npm WARN package.json tests@1.0.0 No repository field.
> npm WARN package.json tests@1.0.0 No README data
> 
> > weak@0.4.1 install /home/myrubapa/httpdocs/phantomjs/tests/node_modules/nightmare/node_modules/phantom/node_modules/dnode/node_modules/weak
> > node-gyp rebuild
> 
> make: Entering directory '/home/myrubapa/httpdocs/phantomjs/tests/node_modules/nightmare/node_modules/phantom/node_modules/dnode/node_modules/weak/build'
>   CXX(target) Release/obj.target/weakref/src/weakref.o
> In file included from ../src/weakref.cc:19:0:
> ../node_modules/nan/nan.h:261:25: error: redefinition of ‘template<class T\> v8::Local<T\> _NanEnsureLocal(v8::Local<T\>)’
>  NAN_INLINE v8::Local<T\> _NanEnsureLocal(v8::Local<T\> val) {
>                          ^
> ../node_modules/nan/nan.h:256:25: note: ‘template<class T\> v8::Local<T\> _NanEnsureLocal(v8::Handle<T\>)’ previously declared here
>  NAN_INLINE v8::Local<T\> _NanEnsureLocal(v8::Handle<T\> val) {
>                          ^
> ../node_modules/nan/nan.h:661:13: error: ‘node::smalloc’ has not been declared
>      , node::smalloc::FreeCallback callback
>              ^
> ../node_modules/nan/nan.h:661:35: error: expected ‘,’ or ‘...’ before ‘callback’
>      , node::smalloc::FreeCallback callback
>                                    ^
> ../node_modules/nan/nan.h: In function ‘v8::Local<v8::Object\> NanNewBufferHandle(char*, size_t, int)’:
> ../node_modules/nan/nan.h:665:50: error: ‘callback’ was not declared in this scope
>          v8::Isolate::GetCurrent(), data, length, callback, hint);
>                                                   ^
> ../node_modules/nan/nan.h:665:60: error: ‘hint’ was not declared in this scope
>          v8::Isolate::GetCurrent(), data, length, callback, hint);
>                                                             ^
> ../node_modules/nan/nan.h: In function ‘v8::Local<v8::Object\> NanNewBufferHandle(const char_, uint32_t)’:
> ../node_modules/nan/nan.h:672:67: error: call of overloaded ‘New(v8::Isolate_, const char_&, uint32_t&)’ is ambiguous
>      return node::Buffer::New(v8::Isolate::GetCurrent(), data, size);
>                                                                    ^
> ../node_modules/nan/nan.h:672:67: note: candidates are:
> In file included from ../node_modules/nan/nan.h:25:0,
>                  from ../src/weakref.cc:19:
> /home/myrubapa/.node-gyp/4.0.0/include/node/node_buffer.h:31:40: note: v8::MaybeLocal<v8::Object> node::Buffer::New(v8::Isolate_, v8::Local<v8::String\>, node::encoding) <near match\>
>  NODE_EXTERN v8::MaybeLocal<v8::Object\> New(v8::Isolate* isolate,
>                                         ^
> /home/myrubapa/.node-gyp/4.0.0/include/node/node_buffer.h:31:40: note:   no known conversion for argument 3 from ‘uint32_t {aka unsigned int}’ to ‘node::encoding’
> /home/myrubapa/.node-gyp/4.0.0/include/node/node_buffer.h:43:40: note: v8::MaybeLocal<v8::Object\> node::Buffer::New(v8::Isolate_, char_, size_t) <near match\>
>  NODE_EXTERN v8::MaybeLocal<v8::Object\> New(v8::Isolate* isolate,
>                                         ^
> /home/myrubapa/.node-gyp/4.0.0/include/node/node_buffer.h:43:40: note:   no known conversion for argument 2 from ‘const char*’ to ‘char*’
> In file included from ../src/weakref.cc:19:0:
> ../node_modules/nan/nan.h: In function ‘v8::Local<v8::Object\> NanNewBufferHandle(uint32_t)’:
> ../node_modules/nan/nan.h:676:61: error: could not convert ‘node::Buffer::New(v8::Isolate::GetCurrent(), ((size_t)size))’ from ‘v8::MaybeLocal<v8::Object\>’ to ‘v8::Local<v8::Object\>’
>      return node::Buffer::New(v8::Isolate::GetCurrent(), size);
>                                                              ^
> ../node_modules/nan/nan.h: In function ‘v8::Local<v8::Object> NanBufferUse(char_, uint32_t)’:
> ../node_modules/nan/nan.h:683:12: error: ‘Use’ is not a member of ‘node::Buffer’
>      return node::Buffer::Use(v8::Isolate::GetCurrent(), data, size);
>             ^
> weakref.target.mk:90: recipe for target 'Release/obj.target/weakref/src/weakref.o' failed
> make: *_\* [Release/obj.target/weakref/src/weakref.o] Error 1
> make: Leaving directory '/home/myrubapa/httpdocs/phantomjs/tests/node_modules/nightmare/node_modules/phantom/node_modules/dnode/node_modules/weak/build'
> gyp ERR! build error 
> gyp ERR! stack Error: `make` failed with exit code: 2
> gyp ERR! stack     at ChildProcess.onExit (/opt/node-v4.0.0-linux-x64/lib/node_modules/npm/node_modules/node-gyp/lib/build.js:270:23)
> gyp ERR! stack     at emitTwo (events.js:87:13)
> gyp ERR! stack     at ChildProcess.emit (events.js:172:7)
> gyp ERR! stack     at Process.ChildProcess._handle.onexit (internal/child_process.js:200:12)
> gyp ERR! System Linux 3.16.0-4-amd64
> gyp ERR! command ""/usr/bin/node"" ""/opt/node-v4.0.0-linux-x64/lib/node_modules/npm/node_modules/node-gyp/bin/node-gyp.js"" ""rebuild""
> gyp ERR! cwd /home/myrubapa/httpdocs/phantomjs/tests/node_modules/nightmare/node_modules/phantom/node_modules/dnode/node_modules/weak
> gyp ERR! node -v v4.0.0
> gyp ERR! node-gyp -v v3.0.1
> gyp ERR! not ok 
> npm WARN optional dep failed, continuing weak@0.4.1

Node v0.10.29 work fine
",myrubapa,2015-09-13 04:03:09
216,2015-09-13 04:03:09,"got it, yeah that's a dependency of nightmare unfortunately. in v2 (see #200) we've moved away from phantom and i've just verified that the latest build of v2 runs fine on v4:

<img width=""661"" alt=""screen shot 2015-09-12 at 9 01 39 pm"" src=""https://cloud.githubusercontent.com/assets/658545/9835171/9cf74a5e-5991-11e5-86c0-4f5a1f816db2.png"">

looking to release v2 tomorrow, so closing this
",reinpk,2015-09-13 04:03:09
215,2015-09-10 18:54:51,,corysimmons,2015-09-13 18:22:33
215,2015-09-10 18:59:31,"hmmm, no idea! hopefully someone in the community knows gulp :)
",reinpk,2015-09-13 18:22:33
215,2015-09-13 18:22:33,"don't think there's any need for a gulp package based on offline chats
",reinpk,2015-09-13 18:22:33
214,2015-09-07 22:17:01,"![capture d ecran 2015-09-08 a 00 11 21](https://cloud.githubusercontent.com/assets/1368129/9723274/2f321e58-55be-11e5-9789-3b66693e8323.png)

When I run `make test`, it threw `Cannot read property 'apply' of undefined`.
Now it checks if done is passed as an argument.

Another fix for the if could be:

<S_CODE_TOKEN>

Because as I understand, `done` is only passed if nightmare is not running ?
",xouabita,2015-09-09 22:34:19
214,2015-09-07 22:29:55,"Ahh my bad. Basically I think the two ways you should be able to close the connection are:

Run nightmare one time

<S_CODE_TOKEN>

 Run it a bunch of times and eventually end:

<S_CODE_TOKEN>

I think maybe it should be a no-op in run instead of conditionally running `this.run()` based on the callback.
",matthewmueller,2015-09-09 22:34:19
214,2015-09-09 22:34:15,"Just tested this out, good call. This is the right solution. Thanks!
",matthewmueller,2015-09-09 22:34:19
213,2015-09-07 12:12:22,"I am getting started on javascript.     When I run the v2 demo, I encounter a error message:

<S_CODE_TOKEN>

Is there any idea? It may help me.
",FredXue,2015-09-09 22:36:37
213,2015-09-07 13:28:15,"can you share your script? or are you running the tests? the error itself is pretty generic.
",reinpk,2015-09-09 22:36:37
213,2015-09-08 01:52:48,"A demo provided by the Readme: 

<S_CODE_TOKEN>
",FredXue,2015-09-09 22:36:37
213,2015-09-09 09:18:29,"It seems that the return object was represented by a text value when transferred to the vo and it invokes the toString() method which return ""[object, Object]"".  How to fix it? Still working on this. 
",FredXue,2015-09-09 22:36:37
213,2015-09-09 22:36:37,"Should be fixed now in latest `v2` sorry for the confusion!
",matthewmueller,2015-09-09 22:36:37
212,2015-09-03 14:24:49,"Everytime my mocha test doesn't succeed, I'm left with an open phantomjs instance `killall -9 phantomjs` works but I would rather have something like `nightmareInstance.close()`
Can you add something like this?
",antpaw,2015-09-03 14:45:27
212,2015-09-03 14:45:27,"yes, totally annoying. this is coming in v2 :) see #200 
",reinpk,2015-09-03 14:45:27
211,2015-09-01 06:55:15,"RT, in PhantomJS there is [navigationLocked](http://phantomjs.org/api/webpage/property/navigation-locked.html) property, how should I set this property in nightmare? Thank you!
",dickeylth,2016-04-08 16:56:34
211,2016-04-08 16:56:34,"With the inclusion of `.action()` being able to patch Electron, I've gone ahead and published a [navigation lock plugin](https://www.npmjs.com/package/nightmare-navigation-lock).  If you have questions, feel free to open an issue in that project's repository or reopen this issue.
",rosshinkley,2016-04-08 16:56:34
210,2015-08-31 21:59:49,"Is there any way to use extracted data in selector. 
I extract some data from webpage using evaluate() method, and would like
to use that to perform next actions (click).

Only way I can think of atm, is to run nightmare two times. First time to 
extract data and second time to use that data...
",jurepolutnik,2015-09-13 04:05:07
210,2015-09-01 07:17:25,"I hace a similar problem, tris problem should be perforemos using yield on
v2

El lunes, 31 de agosto de 2015, Jure Polutnik notifications@github.com
escribió:

> Is there any way to use extracted data in selector.
> I extract some data from webpage using evaluate() method, and would like
> to use that to perform next actions (click).
> 
> Only way I can think of atm, is to run nightmare two times. First time to
> extract data and second time to use that data...
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/segmentio/nightmare/issues/210.
",angelgarrido,2015-09-13 04:05:07
210,2015-09-01 09:39:36,"Yes in v2 this is solved. 
For v1 I did following workaround... It enables to use nightmare ref. 
further in run callback.

<S_CODE_TOKEN>
",jurepolutnik,2015-09-13 04:05:07
210,2015-09-13 04:05:07,"cool, v2 is coming tomorrow hopefully :)
",reinpk,2015-09-13 04:05:07
209,2015-08-31 02:17:58,"Cuts the test suite's running time from 2m to 1m on my machine. I've been using it with nightmare-driven test suites, as well as a module that subclasses it. Figured it might be helpful. :)
",danielstjules,2015-08-31 03:25:37
209,2015-08-31 03:25:35,"awesome thanks @danielstjules! we're working on v2 #200 and will try to pull this in there as well to accelerate tests :)
",reinpk,2015-08-31 03:25:37
209,2015-09-01 09:40:56,"Thanks to this commit I also improved test speed for our project
Awesome tool :+1: 
",a7madgamal,2015-08-31 03:25:37
208,2015-08-24 08:47:53,,Kreozot,2015-09-20 21:22:24
208,2015-09-20 21:22:24,"thanks! sorry i couldn't merge this with all the changes, but i've merged it in manually: https://github.com/segmentio/nightmare#debug
",reinpk,2015-09-20 21:22:24
208,2015-09-21 11:11:17,":thumbsup:
",Kreozot,2015-09-20 21:22:24
207,2015-08-19 01:50:50,"Is anyone getting this to work?  If so, can you point out the version of phantomJs you have?

I'm never seeing .select('#selectelement', value) work.  Period.  I get predictably inaccurate results on .type() on a select element, but it matches what you'd see in chrome in a select with option texts of 01 - 99, typing 55 will get you 51 and 66 will get you 61, etc -- but it literally is a 'type' method.  .select() just does _nothing_ with phantomjs 1.9.8.
",mattyhead,2015-08-31 03:26:44
207,2015-08-19 01:55:46,"Hmm, when I perform the same operations as .select does in chrome console, nothing is selected either. (well not quite the same.  I'm not wrapping in page.evaluate())
",mattyhead,2015-08-31 03:26:44
207,2015-08-19 02:15:03,"Here's a quick demo on how to use [select](https://jsbin.com/becowa/edit?html,js,output) within DOM. However, in `nightmare` you have this:-
[`.select(selector, option)`](https://github.com/segmentio/nightmare#selectselector-option), 
where `option` is the value of `option value` and `selector` is the DOM object.
",shri3k,2015-08-31 03:26:44
207,2015-08-19 08:29:28,"...which is how i'm using it.  Thanks for the demo of javascript working on the DOM in the desired context.  I get that .select() and .type() don't operate on the same second parameter, if that's what you're getting at, overall.  So, the demo is not quite what nightmare does...  Have you gotten .select working in nightmare?  If so, could so you say what version of phantomjs you're using?
",mattyhead,2015-08-31 03:26:44
207,2015-08-19 14:34:13,"does this test pass for you? https://github.com/segmentio/nightmare/blob/master/test/index.js#L251 ...trying to isolate the issue
",reinpk,2015-08-31 03:26:44
207,2015-08-19 18:06:41,"Thanks for asking.  Can't run any of the tests.  Getting:
`/usr/lib/node_modules/express/lib/application.js:209`
`throw new TypeError('app.use() requires middleware functions');`
Having trouble figuring out what is needed, to be frank.
",mattyhead,2015-08-31 03:26:44
207,2015-08-19 23:15:36,"@mattyhead I'm currently in PhantomJS 1.9.0. I've wanted to upgrade to 2.0 but haven't yet. 
And yes, I have been able to make selection with `.select`. You can play with it [here](https://ide.c9.io/shriek/nightmare).(had to scour the Internet to find classic dropdown) (just let me know your username and I'll give you access to write as well). Anyway, often times your selector might return an array of DOM objects when nightmare only expects one. I easily forget that part many times. Not sure if it's the same with you but just a note.
",shri3k,2015-08-31 03:26:44
207,2015-08-24 20:28:49,"@sinkingshriek Thanks!  I'll downgrade a bit and see what I get.
",mattyhead,2015-08-31 03:26:44
206,2015-08-18 02:38:34,"If inject a js file before the screenshot action, the output file would be a empty png file.

Here is my code:

<S_CODE_TOKEN>

Any idea about this? Thanks!
",FredXue,2015-09-13 16:01:11
206,2015-09-13 16:01:11,"hey i'm not sure for v1, but this is now fixed in `2.0.0` (just tested it there)
",reinpk,2015-09-13 16:01:11
205,2015-08-12 05:41:20,"I wanna send some test data to KAFKA when using nightmare.
",FredXue,2015-08-17 06:29:26
205,2015-08-17 06:29:26,"why would you want to do this from nightmare itself? you'd probably use [superagent]()https://github.com/visionmedia/superagent) outside of nightmare
",reinpk,2015-08-17 06:29:26
204,2015-08-08 13:41:19,"I get this error every time:

<S_CODE_TOKEN>
",MakoMakox,2015-08-17 06:13:53
204,2015-08-08 14:56:02,"Can you tell me what version of node you're using? In Linux, this error usually happens when you don't have `build-essential` (I don't know specific to which compiler but I'm guessing C++ compiler) installed that causes this. If you're running the latest node/npm then you might want to download the latest VS available on your Windows machine and remove `node_modules` package and try re-installing again. 
",shri3k,2015-08-17 06:13:53
204,2015-08-08 17:53:00,"I get 

<S_CODE_TOKEN>

I use jxcore instead of nodejs.
",MakoMakox,2015-08-17 06:13:53
204,2015-08-17 06:13:53,"in v2 we're moving to electron rather than phantomjs, which should hopefully be more stable and less of these kinds of difficult build errors :/
",reinpk,2015-08-17 06:13:53
203,2015-08-04 18:09:39,"Is this possible?
",rclai,
203,2015-08-05 02:34:09,"**EDIT**: This doesn't work anymore on 2.0 and above, scroll all the way down for the new solutions.

I had to create a `withFrame` action function that goes inside the iframe context and a `backToParentFrame` function to go back to the parent frame:

<S_CODE_TOKEN>

I originally tried to make it so that once the actions inside `withFrame` are done, it would automatically go `backtoParentFrame` but I couldn't figure out how to do that, so I made it separate. So essentially you would do:

<S_CODE_TOKEN>

<S_CODE_TOKEN>

Don't know if you guys want to include this functionality or not. I've taken the concept from CasperJS [here](https://github.com/n1k0/casperjs/blob/376d85fceb5eca63596e12e2ef6072a72422ed9b/modules/casper.js#L2356-L2381). If you guys like it, I would suggest figuring out how we can automatically go back to the parent frame without explicitly having to do so.
",rclai,
203,2015-08-11 16:46:46,"Nice feature +1
",molinto,
203,2015-08-11 16:48:41,"Where would this be added @rclai please?
",molinto,
203,2015-08-11 17:04:54,"You should be able to copy and paste the code I typed above and put it into `nightmare/lib/actions.js` before the actions are attached to the Nightmare prototype.
",rclai,
203,2015-08-12 07:18:27,"Sweet, thanks!
",molinto,
203,2015-09-08 00:15:44,"+1
",avioli,
203,2015-09-08 01:16:19,"Thanks @rclai I've created a plugin from your code: https://www.npmjs.com/package/nightmare-iframe
",avioli,
203,2015-09-09 11:44:14,"Cool.
",rclai,
203,2015-10-10 19:09:44,"The above PR allows you to do `new Nightmare({'web-preferences': {'web-security': false}});`, which turns off same-origin policy in electron.    You can then do things like, 

<S_CODE_TOKEN>
",zeevl,
203,2015-11-12 06:47:24,"Thank you for the feature!
Why do I get an exception?

<S_CODE_TOKEN>

I tried to install the plugin

<S_CODE_TOKEN>

<S_CODE_TOKEN>
",Skit,
203,2015-12-02 05:16:20,"I tried the change preferences solution but could not change elements (type, etc) inside the iframe, just extract info. And the first solution does not work for me as the iframes in my problem only have ids. Any ideas?
",rickmed,
203,2015-12-22 20:59:12,"So, how can we navigate through iframes with the new Nightmare built on Electron? It seems Electron has no support for iframes.
",nathan-martinez,
203,2016-02-22 17:38:02,"I just submitted a PR (#496) that should solve this issue. If you have the time you may check it to see if it works.

An example of the usage would be:

<S_CODE_TOKEN>

It would print to the console:

<S_CODE_TOKEN>

Also, it should work with general selectors, not just with iframe names or numbers.
",tiangolo,
203,2016-08-04 13:23:29,"Hello. I'm trying to enter a credit card number in an iframe and I'm not sure which of the methods to use:
- using plain nightmare (doesn't work): `.wait('[name=card.number]')`
- using `nightmare-iframe`
- using tiangolo's patch
- using `{'web-security': false}` (and then what?)

Please can someone tell me which is best?  This issue has too many options.

PS. I'm using Electron, I see references above to phantom.js which confuse me even more, because I thought that was for Nightwatch, not Nightmare.
",RichardJECooke,
203,2016-08-04 13:47:38,"[More Googling](http://stackoverflow.com/questions/38294743/nightmare-iframe-dynamic-iframe-name) shows me there isn't a solution to this problem. Please will whoever runs this project add a sentence to the main readme.md stating that nightmare doesn't support iframes.

We wouldn't have tried to learnt this framework if we knew it couldn't handle iframes. Their supoprt is absolutely essential to test any website that does ecommerce.
",RichardJECooke,
203,2016-08-04 14:18:25,"@RichardJECooke here's the summary.
- The first approach commented here doesn't work anymore with the latest versions. 
- I wrote the PR, it got rejected. 
- @rosshinkley used parts of that PR to create an improved version of the functionality as an external plug-in.

Right now, the best you can do is use @rosshinkley's https://github.com/rosshinkley/nightmare-iframe-manager. Go there and check his documentation. That's what I'm doing.

The Nightmare team (Segmentio) don't like the approach taken in the PR and the plug-in (not even Ross, the plug-in's writer). They dislike it so much that didn't wan to publish it to NPM, you have to install it from GitHub. Feel yourself hyper-warned. No warranties anywhere, use at your own risk, etc.

Given that, for non-mission critical problems (to emphasize the warnings) the plug-in works pretty good.

I use it to extract my credit card transactions in my bank's website.

---

Here's what you would do (excessively detailed):
- Create a directory for your project and enter it:

<S_CODE_TOKEN>
- Initiate your Node / Nightmare project with npm filling the package data:

<S_CODE_TOKEN>
- Install Ross's plug-in from the GitHub repo (`npm` does it automatically for you, but you probably need to have `git` installed):

<S_CODE_TOKEN>
- In your main project file, `require` Nightmare and the plug-in and pass the `Nightmare` object to the plug-in:

<S_CODE_TOKEN>
- And then you can use it. The plug-in extends Nightmare itself. So you have additional methods in your Nightmare instance. Follow the documentation:
  https://github.com/rosshinkley/nightmare-iframe-manager
",tiangolo,
203,2016-08-04 14:46:12,"Sadly this doesn't work for me, I get: 

<S_CODE_TOKEN>

when calling

<S_CODE_TOKEN>
",RichardJECooke,
203,2016-08-04 14:50:45,"You are modifying the `nightmare` instance after creating it. You have to modify the `Nightmare` ""class"" and then create the instance.

I bet it would be something like:

<S_CODE_TOKEN>
",tiangolo,
203,2016-09-26 20:16:11,"Thank you for summary ! This could work for me.

For different domain iframe,

<S_CODE_TOKEN>

is needed, seems. (`web-preferences`and  `web-security` are renamed since Electron 1.0)

Otherwise, an error

> Failed to read the 'contentDocument' property from 'HTMLIFrameElement': Blocked a frame with origin ""*****"" from accessing a cross-origin frame.

will occur.

I hope this can help someone.
",yokomotod,
202,2015-08-03 23:05:25,"Hello there! It seems as if there's no function for removing cookie(s) stored? By any chance could someone add this? I think it would be super useful
",ghost,2016-05-27 19:47:15
202,2015-11-15 18:33:46,"We need this, PhantomJS has it...
",alfonsomga,2016-05-27 19:47:15
202,2015-11-15 19:13:54,"That's the one thing I hate @alfonsomga , I love NightmareJS, but there's no functions built-in for manipulating cookies. I'm going to start looking at the NightmareJS code soon, and perhaps I can figure out a way to do such. 
",ghost,2016-05-27 19:47:15
202,2016-02-16 20:36:59,":+1: for this. would a PR be welcome?
",mathisonian,2016-05-27 19:47:15
202,2016-02-16 20:44:03,"Sorry to poke a head in: wouldn't [setting a cookie](https://github.com/segmentio/nightmare#cookiessetname-value) and [clearing a cookie by name for the current domain](https://github.com/segmentio/nightmare#cookiesclearname) work?  Is there something i'm missing?
",rosshinkley,2016-05-27 19:47:15
202,2016-02-16 20:51:03,"@rosshinkley - that works well generally.

For this specific use case I am trying to start the nightmare / electron process clear of cookies. As far as I can tell there's not an easy way to do that with the current api.
",mathisonian,2016-05-27 19:47:15
202,2016-02-16 20:55:34,"@mathisonian True, clearing all cookies is not currently supported, at least directly.  I say go for a PR, then.
",rosshinkley,2016-05-27 19:47:15
202,2016-02-18 11:11:22,"@mathisonian to build upon @rosshinkley's response: you could issue a single request to the domain and clear all the cookies before you do your actual requests. That way the second request will be free of cookies.
",johanneslumpe,2016-05-27 19:47:15
202,2016-02-18 14:13:29,"@johanneslumpe Unless I'm missing something (a very real, very big possibility), you'd have to use `.evaluate()` to retrieve and parse the cookie names yourself.  Then you could iterate over them and use `.cookies.clear()`.

It's certainly doable out of the box, but it would be nice to have something a little more convenient.
",rosshinkley,2016-05-27 19:47:15
202,2016-02-18 14:34:26,"@rosshinkley Oh yeah, if you do not know the cookie names beforehand, then probably yes. For my case I know which cookies I need to delete, so just doing a request and clearing those cookies seems to work fine. The original request will still be sent with the cookies, but the 2nd one will be fine.
",johanneslumpe,2016-05-27 19:47:15
202,2016-04-16 05:49:31,"I know this thread’s been sitting a while, but hopefully this note helps someone. For the use case of “trying to start the nightmare / electron process clear of cookies,” you can actually do that and it’s pretty easy! It’s entirely undocumented, though, so it’s not surprising if you don’t know about it.

When you create an Nightmare instance, it uses what’s called a “partition” to store data—cookies, cache, history, localStorage, etc. Normally, every instance shares the same default partition, which gets stored to disk. However, you can tell it to use a different partition. Just set the `webPreferences.partition` property in the options object when creating a new Nightmare instance:

<S_CODE_TOKEN>

The value for `webPreferences.partition` is just a string identifying the partition you want to use. The string can be anything you want; if there’s no existing partition with that name, a new one will be created. If the name of the partition starts with `persist:`, the data it stores will be saved to disk. Otherwise, it will be an in-memory partition, which means the data is thrown out when no more Nightmare instances are using it. You can actually see an example of this in action in the cookie tests: https://github.com/segmentio/nightmare/blob/master/test/index.js#L531 (because we want the tests to start fresh every time ;)
",Mr0grog,2016-05-27 19:47:15
202,2016-05-20 12:55:13,"@Mr0grog I don't understand how handle `.cookies.get()`

<S_CODE_TOKEN>
",lgg,2016-05-27 19:47:15
202,2016-05-20 15:15:19,"@littleguga You can do it the same way you work with any nightmare actions that return values:

<S_CODE_TOKEN>

This is the same way [the first example in the readme](https://github.com/segmentio/nightmare#examples) gets the top search result’s URL. Because everything in Nightmare is asynchronous, you use the `then()` promise method to wait for the actual result.
",Mr0grog,2016-05-27 19:47:15
202,2016-05-20 15:17:40,"For what it's worth, here's a sample of clearing the cookies manually:

<S_CODE_TOKEN>
",rosshinkley,2016-05-27 19:47:15
202,2016-05-27 19:47:15,"Fixed with #652.  Closing.
",rosshinkley,2016-05-27 19:47:15
201,2015-07-31 19:32:25,"I'm working with a page that needs `'mousedown'`, not `'click'`events. Any interest in adding an `eventType` param to Nightmare.click? (would default to eventType='click').

Change would be [here](https://github.com/segmentio/nightmare/blob/073fa6dc02b84ab6762805d4b40239aa9fa7d57b/lib/actions.js#L193)

Not sure how this overlaps with the new `mouseover` action.
",abe-winter,2016-03-30 02:45:46
201,2016-03-30 02:45:46,"Fixed in #308.  Closing.
",rosshinkley,2016-03-30 02:45:46
200,2015-07-26 18:32:12,"we're starting to consider major improvements that could be made in v2 of nightmare. the proposal is to move from phantomjs to electron, and move the api to use generators.
## speed

some of the most vexing issues with nightmare (e.g. #199 and #192) _seem_ to boil down to underlying issues in phantomjs. @matthewmueller has done some experimentation with [atom/electron](https://github.com/atom/electron) and sees 2-3x speed improvements loading and getting the title of the page:

| Site | Phantom | Electron | Speedup |
| --- | --- | --- | --- |
| Google | 2064ms | 866ms | 2.4x |
| Yahoo | 4059ms | 1862ms | 2.2x |
| CNN | 8658ms | 2729ms | 3.2x |
## generators

one of nightmare's original goals was to eliminate the callback hell of raw phantomjs. with [generators](https://strongloop.com/strongblog/how-to-generators-node-js-yield-use-cases/) now on node stable, it makes sense to take the api one step closer to eliminating callbacks using generators. this should also make the execution more linear, understandable and controllable. ideally this is a solution to requests like #177, #176, #160 and #59.

<S_CODE_TOKEN>

---

if you have other feedback or frustrations at this deeper level, please let us know!
",reinpk,2015-09-13 08:18:05
200,2015-07-27 12:29:22,"Awesome stuff! I wonder how soon will that be :)
",a7madgamal,2015-09-13 08:18:05
200,2015-07-28 23:57:17,"I'm glad that this is getting some `generator` love too. :+1: 
",shri3k,2015-09-13 08:18:05
200,2015-08-15 05:33:27,"Just pushed up a branch for `v2`. I could use some help finishing up some of the remaining tasks:
- [x] port over the remaining actions
- [ ] add some examples
- [x] write some tests

Unfortunately, I cannot create a PR because the commit history is completely different. I could just write on top of all the old files though.

cc/ @reinpk @amillet89 
",matthewmueller,2015-09-13 08:18:05
200,2015-08-15 19:27:59,"awesome @matthewmueller just pushed some updates with a structure for testing based on the old tests, as well as circleci setup, and adding the `.back()` action... will push it a bit further this afternoon
",reinpk,2015-09-13 08:18:05
200,2015-08-16 05:13:07,"ported over a bunch more actions (with tests)... remaining ones are things like `pdf`, `screenshot`, some variants of `wait`, the event handlers, and initial options. the readme is mostly updated as well.
",reinpk,2015-09-13 08:18:05
200,2015-08-17 01:20:03,"Nice work @reinpk! Can't wait to see this release in the wild.
",matthewmueller,2015-09-13 08:18:05
200,2015-08-17 05:58:42,"todos:
- [x] add support for `.wait(selector)`
- [x] add support for `.wait(fn, val, [delay])`
- [x] add support for `.screenshot(path)`
- [x] add support for `.pdf(path)`
- [x] add support for page events
- [x] add support for initial browser window options
- [x] update readme for page events and initial options
- [x] update landing page description and example at https://nightmarejs.org
- [ ] read through open issues, create test cases and see what we can fix now
",reinpk,2015-09-13 08:18:05
200,2015-08-20 03:04:20,"Getting close... will pick this up next week when I'm back from vacation.
",reinpk,2015-09-13 08:18:05
200,2015-08-20 06:22:12,"Nice!  can't wait for v2
",FredXue,2015-09-13 08:18:05
200,2015-08-23 10:37:45,"Excited for this! Thank you :D
",ghost,2015-09-13 08:18:05
200,2015-09-02 05:58:43,"@reinpk Interested to hear your thoughts on this. One thing I'd like to change is the ability to wait for click events to be fulfilled. Unless I'm missing something, right now you need to basically know what's coming (on the next page) and wait for it.

<S_CODE_TOKEN>

It'd be nice to be able to say something like:

<S_CODE_TOKEN>

And detect that the page is transitioning (maybe using `window.beforeunload`) and wait.
",matthewmueller,2015-09-13 08:18:05
200,2015-09-02 06:23:45,"ah, that's a very interesting idea yeah. in v1 you could just call `.wait()` without any arguments... do you think omitting the `.wait()` altogether is the right solution, or just making it so that the complexity of finding a relevant selector is unnecessary?
",reinpk,2015-09-13 08:18:05
200,2015-09-02 07:07:33,"I think when you are on html pages with wait method is enough but on
angular or pages that inject and load content on some elements on page you
need to point exactly the selector you want to wait for

El miércoles, 2 de septiembre de 2015, Peter Reinhardt <
notifications@github.com> escribió:

> ah, that's a very interesting idea yeah. in v1 you could just call .wait()
> without any arguments... do you think omitting the .wait() altogether is
> the right solution, or just making it so that the complexity of finding a
> relevant selector is unnecessary?
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/segmentio/nightmare/issues/200#issuecomment-136948793
> .
",angelgarrido,2015-09-13 08:18:05
200,2015-09-02 07:59:27,"Yah, I think it's definitely dependent on the use case. Personally, I think `click()` should handle it because for the case when you actually navigate to another page, it's sort of like the action is ""half-complete"" (page still in transition) before the next action is triggered. 

Plus the next action is almost never going to be what you expect (unless it's a `wait()`).

We could probably tap into this event: http://electron.atom.io/docs/v0.31.0/api/browser-window/#event-39-will-navigate-39 if we go this route.

**Update:**

Ended up pushing something up for this: https://github.com/segmentio/nightmare/commit/06eb6633478cb1d5e3878401c351fe1db10011a2

Came up with a solution that I think is pretty solid without using timeouts or anything. Personally, I think this makes a lot more sense:

<S_CODE_TOKEN>

Than:

<S_CODE_TOKEN>

The nice thing is that it won't wait if the click doesn't actually cause navigation.
",matthewmueller,2015-09-13 08:18:05
200,2015-09-02 15:51:55,":+1: i'm cool with that, thanks @matthewmueller!
",reinpk,2015-09-13 08:18:05
200,2015-09-13 03:09:36,"a bit stuck on getting `screenshot` to work, but `pdf` is working and the landing page is ready to go segmentio/nightmarejs.org#1
",reinpk,2015-09-13 08:18:05
200,2015-09-13 03:49:10,"alrighty.... this is pretty much ready to go! thanks @matthewmueller!

will take another look in the morning, review issues, fix the commit history and release v2.0.0
",reinpk,2015-09-13 08:18:05
200,2015-09-13 08:18:05,"released :)
",reinpk,2015-09-13 08:18:05
200,2015-09-16 19:25:31,"I use nightmare for electron and my opinion nightmare for phantomjs was better.
",myrubapa,2015-09-13 08:18:05
200,2015-09-16 19:49:20,"Would it make sense to have 2 projects?  nightmare/phantom and `proton`/electron, with the same api? (note, I'm not part of the dev team, I'm only a user.)
",gavinengel,2015-09-13 08:18:05
200,2015-09-16 19:59:06,"Why not?
",myrubapa,2015-09-13 08:18:05
200,2015-09-16 20:50:31,"@myrubapa gotcha, you can always continue pulling `1.x` or fork from that commit. phantomjs had SO many weird issues upstream that we had constant reliability problems with it. we opted for a smaller feature set that worked reliably in our testing.
",reinpk,2015-09-13 08:18:05
200,2015-09-16 20:51:57,"@myrubapa can you give an example of how phantom was better for you?
",matthewmueller,2015-09-13 08:18:05
200,2015-09-16 20:57:03,"In my opinion, electron works much better. I use to get all sorts of node-gyp errors, but I don't get them anymore with the electron release.
",ghost,2015-09-13 08:18:05
199,2015-07-25 08:26:40,"I am currently learning how to use _NightmareJS_. I found the performace is so slow while I was running the code below. It took up to 30 seconds to get the output. Did I do anything wrong?

Moreover, I have tried to use `wait()` with a selector but that does not help so much. :cry:

I am not sure whether this is related to my Internet connection, however, open the same site using Google Chrome and perform the same task is faster than using _Nightmare_.

**Soruce Code**

<S_CODE_TOKEN>

**Output**

<S_CODE_TOKEN>

My current environment is listed below.

<S_CODE_TOKEN>

**Update: 1507271521**

Use the code below to complete the same task in native PhantomJS environment. It took about 17s.

<S_CODE_TOKEN>

Source Code

<S_CODE_TOKEN>
",li-xinyang,2015-08-17 06:14:26
199,2015-08-17 06:14:26,"thanks @li-xinyang in v2 we're moving to electron and testing so far shows that it's significantly faster, see #200.
",reinpk,2015-08-17 06:14:26
198,2015-07-21 00:50:37,"I'm trying to scrap a page with dynamic pagination. I want to be able to scrap the first page (using evaluate), send the info to the node process, scrap the second page if there's one, and repeat the process.

I'm trying to do it using the run callback recursively, but it seems the state is lost after calling the run method.
",fpinzn,2015-08-17 06:15:27
198,2015-07-21 01:26:09,"Look into using the .use() function. That will allow you to do what you're doing. 
",rclai,2015-08-17 06:15:27
198,2015-07-31 19:24:52,"@rclai are you sure? I don't think `use()` gets a chance to modify the nightmare task queue after `run()` has started.
@fpinzn I had the same issue. I monkey-patched [`Nightmare.prototype.run`](https://github.com/segmentio/nightmare/blob/master/lib/index.js#L59-L76) to take an additional suppressTeardown param and additionally to not call this.setup if this.page was defined.
",abe-winter,2015-08-17 06:15:27
198,2015-07-31 20:16:27,"@rclai It doesn't
@abe-winter I think that's pretty useful if you check there's an open pull request for exactly that https://github.com/segmentio/nightmare/pull/59 

The same guy that did the pull request created this https://github.com/johntitus/node-horseman which seems like a substantial improvement over nightmare.

At the end I just went the trivial way: no flow control login inside the nightmare instance.
",fpinzn,2015-08-17 06:15:27
198,2015-08-17 06:15:27,"@abe-winter @fpinzn in v2 we're moving to using generators and an explicit `.end()` method, which should bring the benefit of stronger flow control.
",reinpk,2015-08-17 06:15:27
197,2015-07-13 02:05:06,"I'm getting en error:

<S_CODE_TOKEN>

I have pin pointed it down to this script(Nothing wrong with my express server). It seems like an async error is being thrown and I'm not being able to catch it, because it is async. Are you listening to all error events and passing it up?

<S_CODE_TOKEN>
",tinganho,2015-10-25 19:57:39
197,2015-10-25 19:57:39,"errors should now be bubbled up in the new `2.x` implementation with generators
",reinpk,2015-10-25 19:57:39
196,2015-07-08 11:17:57,"In PhantomJs we can get the content of page like this:

<S_CODE_TOKEN>

What is the best way to get the content is nightmarejs?(I can see evaluate can help but I think it is not very good solution)
",aliminnet,2015-07-09 08:27:47
196,2015-07-08 17:28:53,"x2
",hugoeanogueira,2015-07-09 08:27:47
196,2015-07-08 17:42:15,"Can't you just evaluate and return the HTML from it?
",rclai,2015-07-09 08:27:47
196,2015-07-09 08:27:47,"I figured out like this:

<S_CODE_TOKEN>
",aliminnet,2015-07-09 08:27:47
195,2015-06-26 17:58:59,"This PR addresses https://github.com/segmentio/nightmare/issues/120 when the `keypress` event was added it broke functionality for certain forms. 

I ran tests locally and the following tests are not passing:

<S_CODE_TOKEN>

<S_CODE_TOKEN>

but this seems unrelated to the PR and I'm wondering if these tests are somehow ""flaky""?. 
",dtothefp,2015-08-17 06:52:50
195,2015-08-17 06:52:50,"cool, moving to electron in v2 which should fix this keypress issue _and_ the flaky test issue ;)
",reinpk,2015-08-17 06:52:50
194,2015-06-26 17:19:33,"This PR addresses https://github.com/segmentio/nightmare/issues/120 when the `keypress` event was added it broke functionality for certain forms. 

I ran tests locally and the following tests are not passing:

<S_CODE_TOKEN>

<S_CODE_TOKEN>

but this seems unrelated to the PR and I'm wondering if these tests are somehow ""flaky""?. 
",dtothefp,2015-06-26 17:59:25
193,2015-06-25 21:31:10,"This PR addresses https://github.com/segmentio/nightmare/issues/120 when the `keypress` event was added it broke functionality for certain forms. 

I ran tests locally and the following tests are not passing:

<S_CODE_TOKEN>

but this seems unrelated to the PR. 
",dtothefp,2015-06-25 21:39:48
192,2015-06-19 17:44:57,"Using the exact mocha example given in the readme.md, times out at 30000

<S_CODE_TOKEN>

Output:

<S_CODE_TOKEN>
",hhsnopek,2015-08-17 06:45:23
192,2015-06-19 22:25:50,"Seems to be working okay for me, can you try upping the timeout?
",matthewmueller,2015-08-17 06:45:23
192,2015-06-19 22:30:32,"I upped the timeout to be `60000`, new error. This is something I ran into previously as well, `document` seems to be undefined within `evaluate()`

<S_CODE_TOKEN>
",hhsnopek,2015-08-17 06:45:23
192,2015-08-17 06:45:23,"ack sorry for the trouble here... this kind of unreliable stuff seems to plague phantom and in v2 we're moving to electron which (so far) feels much more stable and speedy.
",reinpk,2015-08-17 06:45:23
191,2015-06-19 10:07:35,"How is it possible to use phantomjs through nightmarejs with external scripts. I mean something like this:

<S_CODE_TOKEN>
",teawithfruit,2015-08-17 06:31:35
191,2015-08-17 06:31:35,"sorry can you explain the use case a bit more? what does `yslow.js` do? can reopen if you provide a bit more detail :)
",reinpk,2015-08-17 06:31:35
190,2015-06-19 00:23:06,"Is it possible to check the new window (tab) that is opened via clicking a link? Or is there a solution to open multiple pages sequentially? Thank you!
",twistedlogicusc,2015-06-19 01:43:12
190,2015-06-19 00:53:42,"I found that setting <a> attribute ""target"" to ""_self"" and then click on it would be a simple solution.
",twistedlogicusc,2015-06-19 01:43:12
189,2015-06-17 13:46:27,"Is it possible to execute actions based on the result of an `evaluate()`?

For example, I login, then I evaluate to check that I logged in, if I logged in, do this, if it did not log in, do something else.
",rclai,2015-06-17 16:09:23
189,2015-06-17 16:09:23,"I figured it out:

<S_CODE_TOKEN>
",rclai,2015-06-17 16:09:23
189,2015-06-17 19:03:37,"Also finding this to be kind of a pain for more complicated sites. Do you have any suggestions for improvement of this use case?
",matthewmueller,2015-06-17 16:09:23
189,2015-06-17 20:58:54,"I don't know how else you could improve this, I think the `.use()` function is pretty good. The code might get pretty insane, but at least I can do all sorts of things.
",rclai,2015-06-17 16:09:23
189,2015-06-17 21:16:50,"it seems like the next major version of nightmare could be build with generators, then `yield` would make it a lot easier to reason about these kinds of flows?
",reinpk,2015-06-17 16:09:23
189,2015-06-17 22:40:52,"I haven't used yields before so that should be interesting. 
",rclai,2015-06-17 16:09:23
189,2015-06-18 13:45:08,"Crap, it seems like `evaluate`'s callback is asynchronous? This causes the queue to start shifting before the callback has even finished and therefore my `nightmare` instance finishes prematurely.
",rclai,2015-06-17 16:09:23
189,2015-06-18 14:10:23,"My workaround currently is to `wait()` and arbitrary amount of time before I do the next thing.
",rclai,2015-06-17 16:09:23
189,2015-06-18 17:20:25,"Okay, since I've been using this in a Meteor app, I forked Nightmare to create a Fiber-wrapped version, which has fixed my problem.
",rclai,2015-06-17 16:09:23
188,2015-06-11 16:40:28,"Like CDNs.
",rclai,2015-06-19 18:58:54
188,2015-06-11 17:02:30,"Technically, you can use `npm` as your CDN and do the injection. Either that or you can inject any one of script loaders into the page to load the external URLs for you. 
",shri3k,2015-06-19 18:58:54
188,2015-06-11 18:18:21,"Huh? Can you elaborate on that?
",rclai,2015-06-19 18:58:54
188,2015-06-11 20:26:30,"Okay, let me give this a shot.
**From npm:-**
Let's say you want to inject `jquery` or `angular`. There are npm packages for them so you can just do 

<S_CODE_TOKEN>

and with nightmare you can just inject them in your browser scope (I'm guessing this is what you're looking for?) as this:-

<S_CODE_TOKEN>

It's described more [here](https://github.com/segmentio/nightmare#evaluatefn-cb-arg1-arg2).

**From script loaders:-**

<S_CODE_TOKEN>

There are other non AMD script loaders as well but this was just one example. I hope this somewhat clarifies what you're trying to do. 
",shri3k,2015-06-19 18:58:54
188,2015-06-11 20:31:56,"Oh! I get it now, I didn't think of that. Thanks!
",rclai,2015-06-19 18:58:54
188,2015-06-19 18:41:28,"Looks like you can't pass complex objects into the browser scope.
",rclai,2015-06-19 18:58:54
188,2015-06-19 18:58:54,"I figured it out by doing this:

<S_CODE_TOKEN>
",rclai,2015-06-19 18:58:54
187,2015-06-10 20:02:37,"added 'mouseover'
",renruyi,2015-06-11 19:45:32
187,2015-06-10 21:55:53,"Sweet! Would you mind adding a test or two?
",matthewmueller,2015-06-11 19:45:32
187,2015-06-11 00:26:42,"will do
",renruyi,2015-06-11 19:45:32
187,2015-06-11 19:39:57,"test added
",renruyi,2015-06-11 19:45:32
187,2015-06-11 19:45:31,"awesome, thanks!
",matthewmueller,2015-06-11 19:45:32
186,2015-06-05 00:20:44,"I noticed that on Jenkins, some nightmare tests are failing due to the fact that nightmare tests are running on old view files. I think these are phantomjs cached pages.
There should be an option to delete phantomjs cached pages before you run the tests. Maybe using something like `new Nightmare().clearMemoryCache()`
",serv,2015-08-17 06:16:01
186,2015-08-17 06:16:01,"in v2 #200 we're moving to electron, hopefully this resolves some of this complexity!
",reinpk,2015-08-17 06:16:01
185,2015-05-29 04:14:19,"Hey,

So like the title says, I have some small scripts that use nightmare that i'd love to use with AWS lambda.

I've been trying with no luck.

Since phantomjs is not installed on the lambda machines, I have to package it with my app.  (I've just been placing it at the root of the app named `phantomjs`).  

Can someone give me so pointers of if this is possible, and where I need to change or update nightmare to look at this location rather than wherever it's looking.  

Or am I going about this the wrong way?
",KyleGobel,2015-08-17 06:16:25
185,2015-05-29 14:48:42,"you can explicitly specify a path to phantomjs in the options you use to create your Nightmare instance:

e.g.
`var nightmare = new Nightmare( { phantomPath: envvar.string('PHANTOM_PATH') } )`
",bdentino,2015-08-17 06:16:25
185,2015-05-30 01:55:43,"Thanks, I see that's right in the docs in the options section :blush:
",KyleGobel,2015-08-17 06:16:25
184,2015-05-28 15:50:04,"Hi, I'm new to nightmare and phantomjs.

Each time I `open` a new url all the requests got a status of `200`,
using the same `nightmare` instance,
while the e-tag was enabled and
the browsers would get from cache or at least a `304` always.

How could I turn on the cache option somewhere, or something else? Thanks.

<S_CODE_TOKEN>
",fritx,2016-04-08 14:09:46
184,2015-07-08 10:37:15,"1 up vote! I need the cache too, anyone can help ?
",luatnd,2016-04-08 14:09:46
184,2015-07-24 13:51:24,"yeah!
I really like how nightmare magically connects to PhantomJS on node but at this point I really need to know how to control this connection for setting cache and other settings too
",a7madgamal,2016-04-08 14:09:46
184,2015-09-28 14:47:09,"hi guys, as metioned in https://github.com/atom/electron/issues/1360
seems nightmare (in electron) now always supports cache. is it right?
",fritx,2016-04-08 14:09:46
184,2016-03-30 02:47:01,"@fritx @a7madgamal @luatnd Is this still an issue since the move to Electron?
",rosshinkley,2016-04-08 14:09:46
184,2016-04-08 14:09:46,"Following up on this, electron/electron#1360 links to to electron/electron#3432, which adds the part to use the pragma directive when using [`webContents.loadURL()`](https://github.com/electron/electron/blob/master/docs/api/web-contents.md#webcontentsloadurlurl-options).

I think this issue is resolved.  If you have any more questions, feel free to reopen or open another issue.
",rosshinkley,2016-04-08 14:09:46
183,2015-05-27 18:23:20,"@t-suwa proposed this fix in #179, just creating a PR for easy merging.

I'm running into this problem on CircleCI. Their artifacts directories have extra periods in them, and this currently breaks any use of `screenshot()` when trying to save to them.
",af,2015-06-01 04:50:30
183,2015-06-01 04:50:28,"good call thanks guys!
",reinpk,2015-06-01 04:50:30
183,2015-06-01 04:52:23,"released with 1.8.2
",reinpk,2015-06-01 04:50:30
183,2015-06-01 05:02:17,"Thanks!
",af,2015-06-01 04:50:30
182,2015-05-15 15:37:40,"Is there a callback handler for when the selector is not found after the timeout is up?
",rclai,2015-06-11 18:18:58
182,2015-06-11 16:55:49,"@rclai Definitely! When the `wait` function times out, it emits a `timeout` event that can be handled using the [`Nightmare.on` method](https://github.com/segmentio/nightmare#onevent-callback).  All `.on()` calls must happen before the first `.goto()` so consider it more of a configuration step.

Here's a brief example using `on` to handle a `wait(selector)` timeout. Note the default timeout for `wait(selector)` can be configured in the [Nightmare options](https://github.com/segmentio/nightmare#new-nightmareoptions).

<S_CODE_TOKEN>
",maxshenfield,2015-06-11 18:18:58
182,2015-06-11 18:18:58,"Ah there it is. Thanks.
",rclai,2015-06-11 18:18:58
181,2015-05-13 04:03:24,"I'm using Nightmare to make a screenshot service for a social media site I'm building. I've got the page loading down, and the screenshots look as expected, but now I need to upload them to S3.

I have an express app that sends some route params in to .evaluate callbacks in Nightmare to find the thing that needs screenshotting. What I'm trying to do is resolve a separate promise in the .run callback to tell my app that everything is done, so you can upload the screenshot to S3 now.

<S_CODE_TOKEN>

It seems like the promise resolves immediately, before the page even starts loading. Is .run the wrong place for it, or what am I missing?
",Xlator,2015-08-17 06:17:51
181,2015-08-17 06:17:51,"hmmmm... not sure based on the sample but it shouldn't be called immediately. in v2 we're moving to use generators and this should be substantially easier...

<S_CODE_TOKEN>
",reinpk,2015-08-17 06:17:51
180,2015-05-10 23:33:57,"Before this change resourceRequestStarted would clobber any listeners set for resourceRequested. This change allows two callbacks to be passed to resourceRequestStarted. The first callback runs in the scope of phantom and the second runs in the scope of node. Wraps [onResourceRequested of the underlying phantom library](https://github.com/sgentle/phantomjs-node#functionality-details).
",rawberg,2015-09-20 21:23:18
180,2015-07-11 17:56:30,"This PR is pretty important. The current functionality seems to be faulty and I think this PR should be merged to fix that.
",joostverdoorn,2015-09-20 21:23:18
180,2015-09-20 21:23:18,"in `2.x` you should be good to go! https://github.com/segmentio/nightmare#onevent-callback
",reinpk,2015-09-20 21:23:18
179,2015-05-07 05:40:27,"screenshot() fails when the image file path includes plural dots like this:

<S_CODE_TOKEN>

Instead of using combination of `substring` and `indexOf`, we can extract the extension by regexp.

<S_CODE_TOKEN>
",t-suwa,2015-06-01 04:52:16
179,2015-06-01 04:52:15,"released with 1.8.2
",reinpk,2015-06-01 04:52:16
178,2015-05-03 21:58:21,"I know nightmare using standard css selector. So here, when I want to using css path like this:

<S_CODE_TOKEN>

This is worked.
But when I want to try 

<S_CODE_TOKEN>

Which is worked in JQuery environment, but not work in Nightmare
",lvyachao,2016-04-08 14:05:21
178,2015-05-05 08:10:28,"That's primarily because `:eq` is `jQuery` only feature. I believe you can still use `nth-child` selector from `CSS` which does something similar except that it starts with 1 index than 0 index that `:eq` starts with.
",shri3k,2016-04-08 14:05:21
178,2015-05-06 03:21:04,"No, they are not exactly same, I just thinking jQuery support is very necessary for DOM operation
",lvyachao,2016-04-08 14:05:21
178,2016-04-08 14:05:21,"@lvyachao You could use [`.inject()`](https://github.com/segmentio/nightmare#injecttype-file) to add jQuery to a page and then use `.evaluate()` to execute DOM actions.  There's a [unit test](https://github.com/segmentio/nightmare/blob/master/test/index.js#L231-L247) that injects jQuery to get specific tags, as a reference.

You could even go a step further and use [`.action()`](https://github.com/segmentio/nightmare#extending-nightmare) to add custom commands to wrap the jQuery functionality you want.

I don't think including jQuery out of the box is in scope for Nightmare.  If you have any more questions, feel free to reopen or file a new issue.
",rosshinkley,2016-04-08 14:05:21
177,2015-05-01 11:16:55,"It can be used when one doesn't want to kill the page once all queued actions are done.

I've already used it a few times like so:

<S_CODE_TOKEN>

It also allows queueing up more actions after the run loop, for instance from user input.

Useful enough to merge into main?
",Zirak,2015-08-17 06:12:42
177,2015-05-15 07:25:23,"Seems like a dup of #176. Yes, this feature is highly anticipated; however, they don't merge these PRs for some obscure reason. I doubt this repo is maintained at all :confused: 
",inca,2015-08-17 06:12:42
177,2015-08-17 06:12:42,"thanks @Zirak! sorry for the delay... this pull request and others like it were influential in the work that @matthewmueller put into v2... which uses generators and an explicit `.end()` method. should solve the same problem in a slightly different way. thanks!
",reinpk,2015-08-17 06:12:42
176,2015-04-29 21:05:29,"As explained in #175, I extracted the `exec` method which runs the queue on already initialized Nightmare instance. I also took the liberty of removing `@api private` from `setup` and `teardownInstance`, since these methods should now be exposed for this style of working with Nightmare.

I'd also rename `teardownInstance` into `teardown`, but I decided to leave this one up to the core team.

I'd also be happy if someone could reflect this in docs (I'm not so confident about my English).

Thanks again for an awesome tool!
",inca,2015-08-17 06:52:03
176,2015-04-30 13:22:43,"Could some of the collaborators please comment this one? Do you plan to accept this (with modifications maybe) or instance reuse is not something you plan to ever support for Nightmare?

TIA
",inca,2015-08-17 06:52:03
176,2015-04-30 19:29:37,"A big :+1: to this!  Here's what I'm currently doing instead, it's really ugly:

<S_CODE_TOKEN>
",nylen,2015-08-17 06:52:03
176,2015-05-05 11:17:49,"@nylen Thanks for your feedback. After a couple of days I came up with a conclusion that this project is not actively maintained. FWIW we decided to switch to [navit](https://github.com/nodeca/navit) which is designed for testing right from the start.
",inca,2015-08-17 06:52:03
176,2015-08-17 06:52:03,"we decided in v2 #200 to solve this with generators and explicit `.end()` method
",reinpk,2015-08-17 06:52:03
175,2015-04-29 20:58:50,"Opening an issue to explain upcoming PR.

It would be handy to be able to work with a single PhantomJS instance multiple times (queue some things, run them, do some stuff, queue some more things, run again, etc.). For example in a typical BDD-style spec someone would want to do this:

<S_CODE_TOKEN>

The funny thing is that it's super-easy to support this flow, all we have to do is:
- extract a method which actually runs a queue from `run` (I called it `exec`)
- make `setup` and `teardownInstance` methods public (document them, remove `@api private`)
- (optionally) rename `teardownInstance` into `teardown`

Implementing this would also solve #36 and other similar issues. Although it does not introduce control explicit flow helpers, it becomes kinda doable with explicit `exec` calls (callback pyramid can be optimized/eliminated in numerous ways).

As for automated tests (with Mocha), this solution fits the bill ideally: async tests work like a charm and you also gain a significant performance boost by instantiating PhantomJS only once per `describe` or even per entire spec.
",inca,2015-08-17 06:19:17
175,2015-04-29 21:18:46,"A big :+1: to this!  I'm currently hacking together something similar by disabling `teardownInstance` and manually calling it when I'm ready.
",nylen,2015-08-17 06:19:17
175,2015-04-29 21:24:57,"@nylen Thanks! I've also included a [small test in PR](https://github.com/inca/nightmare/blob/56d3bb262d0a887f232c297ac587741c065a0c8a/test/index.js#L743) to illustrate a potential use case with `localStorage`, but it could really be anything.
",inca,2015-08-17 06:19:17
175,2015-08-17 06:19:16,"the extra flow control here is a great idea, though we wanted to hold off and implement it using generators. v2 (#200) should get us there with the explicit `.end()` as well
",reinpk,2015-08-17 06:19:17
174,2015-04-27 15:05:18,"Fixes this error: 

<S_CODE_TOKEN>

when trying to use escaped selectors (e.g. `.wait(""#escaping\\:test"")`)
",thotypous,2015-04-27 15:09:58
174,2015-04-27 15:09:55,"lgtm thanks!
",reinpk,2015-04-27 15:09:58
174,2015-04-27 15:14:06,"released with 1.8.1
",reinpk,2015-04-27 15:09:58
173,2015-04-24 01:01:22,"When pages fail to load, it looks like `nightmare` will just continue along the queue of operations anyway.  Instead, it should fail and stop trying to do any other queued actions, or at least provide a way to catch the error and decide what to do.

Example log output:

<S_CODE_TOKEN>

The page load doesn't always fail after only 3ms, but why would that happen?  Is there a way to see why page loads are failing?  I've added `resourceError` callbacks, but I just get a bunch of these with ""Operation canceled"" as the error message.

Right now I'm doing something like this, which does detect the failure but is not ideal:
- It's not the simple API that I really like about Nightmare.
- It doesn't provide a way for me to see why the page load failed.
- I'd have to write the same logic for functions other than `goto` like clicking a button etc.

<S_CODE_TOKEN>
",nylen,2015-09-13 16:04:53
173,2015-04-29 18:34:17,"@reinpk thoughts?  Error handling seems like an important feature that nightmare lacks.
",nylen,2015-09-13 16:04:53
173,2015-09-13 16:04:53,"indeed, sorry for the radio silence. this has been fixed in `2.x` as part of the move to electron. here's the test case illustrating how to listen for page load fails:
https://github.com/segmentio/nightmare/commit/2241314e7f5aead3aa03699a314e9427e3245388
",reinpk,2015-09-13 16:04:53
172,2015-04-02 20:34:47,"Hey is there a way I could do something like

<S_CODE_TOKEN>

So quit the process and stop the chain. Thanks!
",sean-hill,2015-08-17 06:20:11
172,2015-08-17 06:20:11,"not easily in the current nightmare v1.x, but in v2  see #200 you'll be able to have proper flow control using generators and an explicit `.end()`
",reinpk,2015-08-17 06:20:11
171,2015-03-29 17:10:38,"I had a situation like:

<S_CODE_TOKEN>

`input` would never match, but then `type` would eventually be attempted.
Made debugging really hard.
",rauchg,2016-04-08 13:57:23
171,2015-03-29 17:14:26,"Also, while `wait` should surface an error, so should `type`. Instead, `type` targetting an unknown selector results in:

<S_CODE_TOKEN>

and the test passing with no `err` after calling `run`
",rauchg,2016-04-08 13:57:23
171,2015-03-29 22:20:44,"I've had similar errors too (the one you mentioned in the 2nd comment). From my understanding so far, this happens when you have two `phantomjs` instances running at the same time. so if I do :-

<S_CODE_TOKEN>

then I get the `document.querySelector(selector).focus')` error. I've been thinking of mitigating this problem by running the second instance only when the first one completes but I haven't really tested that yet.
",shri3k,2016-04-08 13:57:23
171,2016-03-30 02:43:53,"@shri3k @rauchg Is this still an issue?
",rosshinkley,2016-04-08 13:57:23
171,2016-04-08 13:57:23,"Taking a closer look at this: `.wait(selector)` now will time out after some period of time.

@shri3k's example is problematic, at least with the Electron implementation: a single Nightmare instance wraps one Electron instance, meaning in general you should not try to do parallel operations on the same instance.  Those actions will enter into a race condition and (probably) behave poorly.

Due to the age of this issue and lack of response, and that there is a viable solution baked in, I'm going to close this issue.  If you have any more problems, feel free to reopen or file a new issue.
",rosshinkley,2016-04-08 13:57:23
170,2015-03-26 16:06:09,,mortonfox,2015-03-30 14:58:00
170,2015-03-30 14:58:04,"thanks!
",reinpk,2015-03-30 14:58:00
169,2015-03-23 22:47:45,"Huge internal change for the tests. Rather than relying on production sites like google/yahoo/wikipedia/etc, this replaces those tests with a local server. (using some static fixtures)

Tests should run a lot faster, and won't break when live sites change. (while still testing the exact same functionality)
",dominicbarnes,2015-03-23 23:08:19
168,2015-03-21 23:37:46,"Seems like cookies don't persist if you have multiple `goto(...)`, even if it's the same domain.

Anyone have a solution for this?
",matthewmueller,2015-09-13 18:13:31
168,2015-03-22 02:14:11,"You would have to pass the name of the file that you want the cookie to persist in an option while you're creating an instance of `nightmare`.

Something like:-

<S_CODE_TOKEN>

Seems to work for me. 
",shri3k,2015-09-13 18:13:31
168,2015-03-22 02:15:08,"Can you provide an example? I've tried this and no luck :-/
",matthewmueller,2015-09-13 18:13:31
168,2015-03-22 02:40:08,"Okay, let's take an example of [onedrive.com](http://onedrive.com). Since they both use the same login and they share the same cookie, below is an example of how that would work.

<S_CODE_TOKEN>
",shri3k,2015-09-13 18:13:31
168,2015-07-20 17:31:33,"<S_CODE_TOKEN>

does the job. ;)
",lucassus,2015-09-13 18:13:31
168,2015-09-13 18:13:31,"just retested this in `2.x` and cookies are saved across `.goto()` calls now

<S_CODE_TOKEN>
",reinpk,2015-09-13 18:13:31
167,2015-03-21 00:30:17,"Might be good for extensibility. So things like:

<S_CODE_TOKEN>

Could be done without necessarily adding it to core. Basically just the inners of this:

<S_CODE_TOKEN>
",matthewmueller,2016-03-30 02:43:19
167,2016-03-30 02:43:19,"Fixed in #376.  Closing.
",rosshinkley,2016-03-30 02:43:19
166,2015-03-19 09:57:45,"This might be a bit out of scope for github issues, since it's not directly code related -

But how would you go in teaching somebody about nightmare and how to use it? I'm asking because every business owner loves to have automated testing, but training people to do it is a bit of a challenge, unless they are already devs. But especially with helpers like 

Maybe you guys know of suggested or complementary courses that can bring you from learning about...

a) html/css selectors
to ...
e) phantomjs
f) nightmare?
g) daydream

For beginners? Any ideas? Especially with extensions like Daydream I think the barriers to get non-devs involved into testing and automation are getting easier with each day; but there's still basics that have to be covered
",mastef,2015-09-13 04:08:22
166,2015-09-13 04:08:22,"i think daydream is probably where i'd start... becomes pretty obvious what the code is doing :)

i'd probably do:
1. daydream
2. html/css selectors
3. nightmare
4. dive deeper into how javascript is working
",reinpk,2015-09-13 04:08:22
165,2015-03-18 17:21:31,"Very strange that wait(2000) is executing in 500ms. I see this affecting timing in a lot of places.

<S_CODE_TOKEN>
",snellingio,2015-08-17 06:47:09
165,2015-03-18 17:25:14,"that is very strange, when you debug do you see it hitting this line at all?

https://github.com/segmentio/nightmare/blob/master/lib/actions.js#L313

`setTimeout` would be a bit out of our control haha, but maybe it's missing that clause.
",reinpk,2015-08-17 06:47:09
165,2015-08-17 06:47:09,"closing since not enough information to dig into this :/ happy to reopen with more info thanks!
",reinpk,2015-08-17 06:47:09
164,2015-03-12 23:17:43,"We have a service that is running nightmare as part of it's API. If the PhantomJS process dies unexpectedly, the `phantom` lib will throw an **[uncaught exception](https://github.com/sgentle/phantomjs-node/blob/2645246eb987b163b233cc042715bd0a6a4d181f/phantom.coffee#L91-L92)**. As is the case with uncaught exceptions, this crashes the entire server. Thankfully, `phantom` does expose an [`onExit` option/hook](https://github.com/sgentle/phantomjs-node/blob/2645246eb987b163b233cc042715bd0a6a4d181f/phantom.coffee#L88-L89) that allows you to handle such cases.

As far as nightmare is concerned, this adds a new custom event. (ie: `Nightmare#on('exit', ...);`) When this handler is attached, it will be called upon with the given exit `code` and `signal`. (the signal is not always present, but in our case we saw a lot of `SIGSEGV`) If the handler is _not_ bound, then we are still forced to `throw` (so the failure isn't just lost in the abyss) but we format a pretty clear error message. (and provide the `code` and `signal` as properties on the `Error` object for later inspection.

In short, this makes no API changes, only the custom event is added. (since ""exit"" is not a phantom event, I have adopted it for this purpose)
",dominicbarnes,2015-03-23 23:30:58
164,2015-03-13 00:01:32,"Looks like the tests that are failing here are also failing on `master`, my tests are fine though.
",dominicbarnes,2015-03-23 23:30:58
163,2015-03-11 21:05:56,"On integrating Nightmare to our test suite, we had to rewrite/extend too much of basic methods. IMHO some thing could be usefult for all:
- goto - accept function instead of URL string.
- wait - option to throw on timeout
- evaluateAsync
- inherit from something like EventEmitter, to simplify action extention. For example, to inject chai, helpers & set viewport after each goto/refresh.
- (?) use `async` in core instead of manual magic & abort on errors immediately.
- (?) rethrow assertions from client to server.

Our current implementation is here: https://github.com/nodeca/nodeca.core/blob/master/lib/test/browser.js.

Here is [test example](https://github.com/nodeca/nodeca.users/blob/master/test/client/users/album/create.js). Note, that asserts on the client make tests for complex cases more easy to write/understand.

Will you accept PR into mainstream? If some of suggestions are not ok - let me know.
",puzrin,2015-04-19 05:18:55
163,2015-03-12 03:54:22,"> - goto - accept function instead of URL string.

This seems a little too much diversion even from the `phantomjs` API itself. Any particular reason why you would want this when you can already pass a function on the second parameter?

> - wait - option to throw on timeout

Correct me if I'm wrong, but I believe `wait` already [takes in few arguments](https://github.com/segmentio/nightmare/blob/master/lib/actions.js#L297-L350) on which you can just pass in a function for your throw logic after certain `ms`. _tbh, I haven't tried this yet so I could be totally off_  
Unfortunately, I can't speak for other requests but I'm curious to see your use cases. 
",shri3k,2015-04-19 05:18:55
163,2015-03-12 04:13:39,"**goto**

See https://github.com/nodeca/nodeca.users/blob/master/test/client/users/album/create.js#L19 . I need to open profile url to dynamically created users. Since function are stacked in advance, i can't use constant. Alternative solution will require much more code.

**wait**

Alternative solution, without throw on timeout will require more code.

Most suggestion from the first post significantly simplify tests writing, compared to existing methods. I provided links to implementation and example. Try to do the same with current API and you will see the difference.
",puzrin,2015-04-19 05:18:55
163,2015-03-13 03:48:06,"@puzrin hey, I'll try out your suggestions this weekend. Thanks. 
",shri3k,2015-04-19 05:18:55
163,2015-04-19 05:18:55,"Closing. No longer actual. Since we need suite mostly for testing, it was more simple design api from scratch to make it more effective for our needs https://github.com/nodeca/navit
",puzrin,2015-04-19 05:18:55
163,2015-04-20 03:43:55,"Oh wow. I completely forgot about this. And :+1: for `navit`. It looks clean.
",shri3k,2015-04-19 05:18:55
162,2015-03-08 00:24:37,"How can I make the phantom instance to load the website without loading their js files just like NoScript? Thanks for the help :)
",MakoMakox,2015-07-26 18:21:54
162,2015-03-09 00:42:51,"I don't think you can just turn javascript off that easily, I think the way to do this is to list to `resourceRequestStarted` and abort it's network request e.g.

<S_CODE_TOKEN>
",petecoop,2015-07-26 18:21:54
162,2015-03-12 04:02:06,"@petecoop, I'm not sure if there's a plugin for `NoScript` like `YSlow` for `phantomjs` but if OP can find that plugin then s/he should be able to load it just like [`YSlow`](http://yslow.org/phantomjs/)
",shri3k,2015-07-26 18:21:54
162,2015-03-12 12:14:48,"There is actually a `javascriptEnabled` setting in phantomjs itself: http://phantomjs.org/api/webpage/property/settings.html

However not sure if that would break the connection between phantomjs and nightmare/phantomjs-node
",petecoop,2015-07-26 18:21:54
162,2015-03-14 06:10:12,"@petecoop, That's in fact quite possible in `nightmare`. Just did a quick test and seems to me that it's working. 

@MakoMakox, plug the following lines in `/lib/actions.js` and see if that helps. This is just a quick test to see if it's working and if everyone agrees with this, I or anyone can send a PR.

<S_CODE_TOKEN>

The usage of this would be:-

<S_CODE_TOKEN>
",shri3k,2015-07-26 18:21:54
162,2015-03-14 11:38:36,"Nice, think I'll look at putting this into [Phantasma](https://github.com/petecoop/phantasma)
",petecoop,2015-07-26 18:21:54
162,2015-03-15 20:42:29,"Awesome!! In the meantime I'll go ahead and send a PR on this one.
",shri3k,2015-07-26 18:21:54
162,2015-04-30 13:07:23,"I don't think you'd be able to `evaluate` anything after that :smirk:
",inca,2015-07-26 18:21:54
161,2015-03-03 00:44:22,"Here it is: https://github.com/h2non/nightmare-google-oauth2

That's all
",h2non,2015-03-23 23:28:02
160,2015-03-01 17:39:47,,samuelmeireles,2015-08-17 06:11:45
160,2015-08-17 06:11:45,"we're addressing these ideas in v2 with generators and an explicit `.end()` method, thanks!
",reinpk,2015-08-17 06:11:45
159,2015-02-28 00:28:57,"For ""Walmart.com"", Here I just use .wait(5000) after .goto() 
Then I use the screenshot, check the page. Its text form and submit button is odd. (Show strange pictures and different position)

Further actions like .type is not work.

![sth2](https://cloud.githubusercontent.com/assets/3384807/6423588/658bf95a-beb6-11e4-822f-c340449745b7.png)
",lvyachao,2015-09-13 04:18:34
159,2015-09-13 04:18:34,"good news, just tested this on v2 and the rendering looks fixed :) v2 will be out tomorrow see #200
![test](https://cloud.githubusercontent.com/assets/658545/9835218/c529f326-5993-11e5-9123-f4012ba04be4.png)
",reinpk,2015-09-13 04:18:34
158,2015-02-24 14:03:51,"Addresses #157 
",rfink,2015-09-20 21:19:31
158,2015-03-03 14:41:33,"I like the idea, but this implementation is setting the status whenever the `onResourceReceived` callback fires.  That callback is ""[invoked when a resource requested by the page is received](http://phantomjs.org/api/webpage/handler/on-resource-received.html)"".  Every external javascript, stylesheet, etc causes this to fire.  So the status code you receive may be for something other than the URL itself.
",johntitus,2015-09-20 21:19:31
158,2015-03-03 14:53:10,"Right, that makes sense.  I included a check in there to make sure that the url of the response matched the url of the page requested by 'goto'
",rfink,2015-09-20 21:19:31
158,2015-03-03 15:04:35,"I see, sorry I missed that. Next question - what happens if the user sets a `resourceReceived` callback? May need to catch that an wrap it in the `exports.on` method.
",johntitus,2015-09-20 21:19:31
158,2015-03-03 15:07:41,"No worries, I'm happy you are keeping a close eye on it.  As far as the next issue, I'll take a look and see if I can make a recommendation.  Great point.
",rfink,2015-09-20 21:19:31
158,2015-03-03 15:12:43,"One more potential issue - If you `.goto('http://www.reddit.com')`, it gets translated into `http://www.reddit.com/` with the trailing slash. I think this would cause this method to 'miss' the response.
",johntitus,2015-09-20 21:19:31
158,2015-03-03 15:16:09,"Possible way to do it, at the end of this conversation:

https://github.com/ariya/phantomjs/issues/10185
",johntitus,2015-09-20 21:19:31
158,2015-09-20 21:19:31,"in `nightmare@2.x` you can listen for the `did-get-response-details` event, and inspect the arguments for the status code — there's enough information in there to pinpoint the html/url requested
",reinpk,2015-09-20 21:19:31
157,2015-02-24 14:03:37,"Would be nice to have a shortcut to get the http status code of the current page.  Pull request coming shortly (test included).
",rfink,2015-10-25 20:17:32
157,2015-10-25 20:17:32,"you can now get the http status code with `.on('did-get-response-details`, ...)`...

https://github.com/segmentio/nightmare#onevent-callback

here's an example from loading `yahoo.com`:

<S_CODE_TOKEN>
",reinpk,2015-10-25 20:17:32
156,2015-02-23 21:33:22,"Getting the following errors running document.querySelector in Nightmare 1.7.0 on version 0.12.0 of node.

dyld: lazy symbol binding failed: Symbol not found: __ZN2v86Object3SetENS_6HandleINS_5ValueEEES3_NS_17PropertyAttributeE
  Referenced from: /Users/rfink/watchtower/default-tests/node_modules/nightmare/node_modules/phantom/node_modules/dnode/node_modules/weak/build/Release/weakref.node
  Expected in: dynamic lookup

dyld: Symbol not found: __ZN2v86Object3SetENS_6HandleINS_5ValueEEES3_NS_17PropertyAttributeE
  Referenced from: /Users/rfink/watchtower/default-tests/node_modules/nightmare/node_modules/phantom/node_modules/dnode/node_modules/weak/build/Release/weakref.node
  Expected in: dynamic lookup
",rfink,2015-08-17 06:20:58
156,2015-08-17 06:20:58,"yuck, sorry! on v2 we're running all the tests and development on 0.12, and ditching phantomjs for electron, so this should be resolved shortly, see #200
",reinpk,2015-08-17 06:20:58
155,2015-02-18 00:17:52,"How can I run evaluates in a waterfall? i.e. I only want the second evaluate() to run if the result isnt sent back in the first evaluate(). Probably more of an express issue, but thought I would ask. Pardon my coffeescript...

<S_CODE_TOKEN>
",timmyg,2015-02-18 02:07:14
155,2015-02-18 02:07:13,"ended up just sending a single send result in the .run()
",timmyg,2015-02-18 02:07:14
154,2015-02-14 16:22:23,"Passing papersize option for PDF rendering
",ravisuhag,2015-09-20 21:17:49
154,2015-02-15 05:55:38,"great idea, can we make the parameter optional with a good default though?
",reinpk,2015-09-20 21:17:49
154,2015-03-23 11:54:09,"@reinpk  Thanks, i have setup default to what it is in production now.
",ravisuhag,2015-09-20 21:17:49
154,2015-09-20 21:17:49,"should be possible now in `2.x`: https://github.com/segmentio/nightmare#pdfpath-options
",reinpk,2015-09-20 21:17:49
153,2015-02-12 11:49:09,"Hi there,

I want to propose to add this badge to the README to show off inline-documentation: [![Inline docs](http://inch-ci.org/github/segmentio/nightmare.svg)](http://inch-ci.org/github/segmentio/nightmare)

The badge links to [Inch CI](http://inch-ci.org) and shows an evaluation by [InchJS](http://trivelop.de/inchjs), a project that tries to raise the visibility of inline-docs (early adopters include [forever](https://github.com/foreverjs/forever), [node-sass](https://github.com/sass/node-sass) and [when](https://github.com/cujojs/when)).

The idea is to motivate aspiring Node developers to dive into Open Source projects and read the code.
It's about _engagement_, because, while testing and code coverage are important, inline-docs are the humanly engaging factor in Open Source. This project is about making people less adverse to jumping into the code and see whats happening, because they are not left alone while doing so. I know that, because I put off reading other people's code way too long in my life.

Although this is ""only"" a passion project, I really would like to hear your thoughts, critique and suggestions. Your status page is http://inch-ci.org/github/segmentio/nightmare

What do you think?
",rrrene,2015-08-17 06:07:18
153,2015-08-17 06:07:18,"thanks @rrrene but the page seems a bit simplistic without restructuring our inline docs to match the way it picks up headers as methods. happy to reconsider down the road, but not a priority right now, sorry!
",reinpk,2015-08-17 06:07:18
152,2015-02-11 18:58:14,"control-c the node process doesn't kill the phantomjs process and sometimes randomly but frequently I get this error:

phantom stderr: PhantomJS has crashed. Please read the crash reporting guide at https://github.com/ariya/phantomjs/wiki/Crash-Reporting and file a bug report at https://github.com/ariya/phantomjs/issues/new with the crash dump file attached: /tmp/D3087DE3-8A3E-43B8-88FE-64E7809F4C2B.dmp

assert.js:100
  throw new assert.AssertionError({
        ^
AssertionError: abnormal phantomjs exit code: 1
  at Console.assert (console.js:87:23)
  at ChildProcess.<anonymous> (/Users/izelnakri/newkamernet/node_modules/nightmare/node_modules/phantom/phantom.js:153:28)
  at ChildProcess.emit (events.js:101:17)
  at Process.ChildProcess._handle.onexit (child_process.js:1038:12)
",izelnakri,2015-08-17 06:21:47
152,2015-08-17 06:21:47,"yeah, definitely yucky — in v2 #200 we're moving to electron replacing phantomjs which should help
",reinpk,2015-08-17 06:21:47
151,2015-02-10 22:10:01,"Has anyone been able to download a file?

I have tried a few approaches. The first was:

<S_CODE_TOKEN>

That code was never triggered.

Then [someone mentioned](https://groups.google.com/forum/#!topic/phantomjs/JChUakj--24) onFileDownload, but that also didn't work.

I have a listener to output resource requests (and it is correctly logging the attempt to retrieve the file):

<S_CODE_TOKEN>

I can't just stream the file to disk because it's behind an authenticated session, hence the need for PhantomJS.

Anyone able to get file downloading to work? I think [Casper](http://docs.casperjs.org/en/latest/modules/casper.html#casper-download) has it going, so I will try that next.
",jfrumar,2016-04-02 23:21:54
151,2015-02-18 00:42:10,"If you can get a hyperlink to the file, then it's not too hard. I used something like this:

<S_CODE_TOKEN>

It's not very async, but you get the idea.
",azurelogic,2016-04-02 23:21:54
151,2015-02-19 20:34:41,"That's an interesting approach. I might try it next time, but wouldn't be optimal for large files as the whole file needs to be loaded into memory.

I ended up just extracting the session cookie headers, and then running wget on the command line, setting the necessary headers to pull down the file.
",jfrumar,2016-04-02 23:21:54
151,2015-06-11 16:23:27,"@jfrumar How did you extract the cookie header information?
",rclai,2016-04-02 23:21:54
151,2015-06-11 16:26:27,"@azurelogic how would you do the same thing you did but on a asp.net web form page where there are different submit buttons (and the entire page is a form, that's how asp.net pages are)? One of those submit buttons submits the form and serves you the file. What I'm trying to figure out is how to do the `XMLHttpRequest` but when that specific submit button was clicked.

**Edit**: Figured it out, when you click on a specific submit button, the `POST` body will have that button's `name`s in this format:

<S_CODE_TOKEN>

And the other buttons' names will be excluded from the `POST` body
",rclai,2016-04-02 23:21:54
151,2015-09-28 14:49:33,"docs of electron download api: https://github.com/atom/electron/blob/master/docs/api/download-item.md
related PR: https://github.com/atom/electron/pull/2840
just an example to trigger download and save files in electron:
- triggers: https://github.com/fritx/wxbot/blob/dev/preload.js#L113-L116
- saves: https://github.com/fritx/wxbot/blob/dev/index.js#L41-L59

hope that helps
expecting a high-level api in nightmare
",fritx,2016-04-02 23:21:54
151,2015-10-06 14:27:35,":+1:

Downloads can be triggered in a number of tricky ways (javascript redirect, iframe, etc).  Being able to plug into the `will-download` event would be huge.
",alexose,2016-04-02 23:21:54
151,2015-11-04 23:43:35,"This page is a good test for that eventual feature:
http://www.fangraphs.com/projections.aspx?pos=all&stats=bat&type=steameru

Export Data link at the bottom right export a csv file.

Proper download support is something that always lacked in the various headless browser, nice to see Electron support, hopefully Nightmare will make use of it :)
",darthcloud,2016-04-02 23:21:54
151,2015-12-23 10:45:23,"Hello All, I am having the same issue. Anyone who has a solution to this?
",SantoshSrinivas79,2016-04-02 23:21:54
151,2016-04-02 23:21:54,"With the release of #425 in 2.3.0, I've gone ahead and released plugins that will take care of downloads:
- [nightmare-download-manager](https://github.com/rosshinkley/nightmare-download-manager)
- [nightmare-inline-download](https://github.com/rosshinkley/nightmare-inline-download)

I'm considering this issue resolved.  If you have further questions or problems, please open a new issue.
",rosshinkley,2016-04-02 23:21:54
151,2016-04-03 15:14:54,"This is amazing!  Thank you.
",alexose,2016-04-02 23:21:54
150,2015-02-08 13:30:29,"Once I updated to Phanthomjs 2.0.0 my application using nightmare stopped working, probably related:

<S_CODE_TOKEN>
",edasque,2015-02-13 02:09:36
150,2015-02-13 02:10:12,"Was linked an OS update, I think
",edasque,2015-02-13 02:09:36
149,2015-02-06 06:11:16,"Hi,

I am trying to use nightmare.js to simulate signing out and doing some functional tests after that.
![](http://i.imgur.com/NFFMwrf.png)

As the alert says, I went through the sign out process. But the session seems like it's not destroyed yet.
The top nav bar isn't showing sign in and sign up links.

Any idea what might be going on?
Wondering if this is a similar situation as this.
https://github.com/detro/ghostdriver/issues/170
",serv,2015-08-17 06:36:31
149,2015-08-17 06:36:31,"hey @serv unfortunately no idea here :/ if you have an example where we could repro that would be awesome though... ideally we can verify that the switch to electron in v2 eliminates the problem.
",reinpk,2015-08-17 06:36:31
148,2015-02-03 12:03:49,"Hi,

i have a Nightmare instance in which i click a button that opens a new window.

Is there a way to handle the DOM of the new window? (for example typing the inputs, clicking buttons...)

Thanks.
",giggioz,2015-09-13 18:17:19
148,2015-02-23 16:42:37,"I have the same requirement.

I'd need to be able to click on a link that calls a JavaScript function; amongst other things this function generates a URL and pops it up in a new window.

I see PhantomJS has the ability to do this, added in [this PR](https://github.com/ariya/phantomjs/pull/293)
",simonholmes,2015-09-13 18:17:19
148,2015-02-23 16:58:08,"Due to the lack of answers i moved to casperjs, it solved all the problems i had and it works nicely.
You can write clean code avoiding callback hell.

Concerning this single issue in casperjs you can interact with a pop up window with e specific method, look here http://docs.casperjs.org/en/latest/modules/casper.html#waitforpopup

Hope this helps.
",giggioz,2015-09-13 18:17:19
148,2015-02-23 20:28:21,"Thank you! I'll try Casper out too :)
",simonholmes,2015-09-13 18:17:19
148,2015-02-26 16:41:48,"Still no answer. I guess I'll have to try Casper too.
",bchr02,2015-09-13 18:17:19
148,2015-02-26 16:44:49,"sorry fellas, been slammed but will get to this on the coming weekend i hope
",reinpk,2015-09-13 18:17:19
148,2015-02-26 16:51:16,"okay, thank you.

Based on your response I can only assume that it's currently not a feature of the api?
",bchr02,2015-09-13 18:17:19
148,2015-04-09 18:27:50,"Any word on this feature? Due to the pages I have to scrape, it's a make-or-break for me.
",spencerwi,2015-09-13 18:17:19
148,2015-08-25 18:51:24,"@reinpk Can the feature to interact with new window be added to v2?
",bchr02,2015-09-13 18:17:19
148,2015-08-31 03:26:27,"not sure yet, great question though. we'll need to dig into the electron documentation to figure it out
",reinpk,2015-09-13 18:17:19
148,2015-09-13 18:17:19,"i don't believe this is possible in electron, so i'm going to close this as not possible unfortunately. if you have an example of a popup script would be great to test it out though
",reinpk,2015-09-13 18:17:19
148,2015-09-13 19:02:40,"@reinpk that's too bad. I was hoping for this feature to come now with v2 out. 

I wish I understood more on how you are using electron in place of phantomjs. Maybe then I would understand why you say that you don't think it's possible. 

Any chance you can explain at a high level how you are using electron? It's my understanding that electron is used to package applications... 
",bchr02,2015-09-13 18:17:19
148,2015-09-13 19:07:33,"Nevermind I think I found the answer in your readme. It appears you are using electron to create a new browser window and subsequently navigate the web. Very cool. 

Maybe there is a way to force input buttons that a given website tries to open a new window so that they open in the current page. Anybody have any ideas?
",bchr02,2015-09-13 18:17:19
148,2015-09-14 04:12:17,"@reinpk BrowserWindow.getAllWindows() returns an array of all the BrowserWindow object references. Surely this could be used to incorporate some sort of interaction with newly generated windows.

cc @matthewmueller
",bchr02,2015-09-13 18:17:19
147,2015-02-01 14:09:52,"Hi,

I have a form with no button. It is submitted when the enter key is pressed.
Does nightmare support keyboard events?

I have tried something like this

<S_CODE_TOKEN>

within evaluation() but no luck.
",funkyboy,2015-10-25 20:08:02
147,2015-06-01 06:36:45,"I've got the same issue.
But you can write `.type(""\n"");` to simulate enter keypress. at least it's looks like works for me here.
",dexcell,2015-10-25 20:08:02
147,2015-10-25 20:08:02,"looks like electron supports something like this now, closing in favor of #244 where we can track progress
",reinpk,2015-10-25 20:08:02
146,2015-01-29 01:21:12,"[ phantomjs -v 1.9.7 ]

Having set the options as best as I can see via that one sample that uses the timeout option:

new Nightmare({ignoreSslErrors : 'true', sslProtocol : 'tlsv1'})
  also tried
new Nightmare({ignoreSslErrors : true, sslProtocol : 'tlsv1'})

It won't open the the https  page.  However if I use phantomjs directly to hit the same page it works fine:

> phantomjs --ignore-ssl-errors=true --ssl-protocol=tlsv1 testBot.js 
> Page title is Login

Could you please provide an example :

new Nightmare({ignoreSslErrors : 'true', sslProtocol : 'tlsv1'})
        .useragent('chrome')
        .use(openpage())
        .evaluate(function() {
            return document.title;
        },
",interwebcoding,2015-08-17 06:32:52
146,2015-01-30 08:34:24,"Ok, so my host had provisioned me on Ubuntu 12.04, just as a general upgrade I asked them to reprovision Ubuntu 14.04. I ran my install/deploy scripts. So the exact same codebase. It is WORKING now!

My scripts installed the exact same version of PhantomJS and NightmareJS in the exact same way. So I really do not now what the issue was. But the code I have above is correct and its working, incase anybody else is trying something similar and have doubts.
",interwebcoding,2015-08-17 06:32:52
145,2015-01-25 23:52:02,"fixes #127 
",reinpk,2015-01-26 00:25:27
144,2015-01-25 15:58:39,"Hey guys,

Either i'm doing something wrong or this isn't working.  I'm trying to set the viewport before taking a screenshot, and no matter what order or whatever i place these calls in, the screenshot is always the full page (very long images).

<S_CODE_TOKEN>
",KyleGobel,2015-01-25 22:55:04
144,2015-01-25 22:55:04,"interesting, from my experiments it seems to respect the width parameter https://cloudup.com/cZTInhjYPB0 but not the height. presumably it also needs a scroll offset for the height... using cliprect: https://github.com/ariya/phantomjs/issues/10619

it looks like this can be solved alongside #107 so i'm going to merge this into that issue, thanks kyle!
",reinpk,2015-01-25 22:55:04
143,2015-01-14 10:33:06,"Hi,

Can I use xpath in selector ?

If yes, how can I do that ?

Thanks.
",kamsoonz,2015-01-25 22:58:56
143,2015-01-25 22:58:56,"i believe xpath is for xml node selection, but the selector here is designed for html pages and gets passed through to `document.querySelector()`, which i don't believe supports xpath, no.
",reinpk,2015-01-25 22:58:56
142,2015-01-09 10:32:35,"I tried to reduce the issue I'm having to this minimal example with a public site:

<S_CODE_TOKEN>

I'm drawing a blank as to why this doesn't work, I even tried to trigger the click with `jQuery('...').trigger('click')`, which works in Chrome, but not in nightmare. Triggering with jQuery inside of a nightmare `.evaluate(...)` does not work either. Here is the debug output from running the above example:

<S_CODE_TOKEN>

The screenshots are just a help figuring out that the list does not expand, when checking the DOM in `.evaluate()`-calls directly, I see that no additional nodes in the list become visible.
",apfelfabrik,2015-01-14 11:31:03
142,2015-01-14 11:30:57,"Ok, this has nothing to do with nightmare but is an incarnation of this phantomjs phenomenon:

[https://github.com/ariya/phantomjs/issues/10375], previously [https://code.google.com/p/phantomjs/issues/detail?id=375], most recently [https://github.com/Modernizr/Modernizr/issues/1344].
",apfelfabrik,2015-01-14 11:31:03
142,2015-03-06 13:16:46,"Hit by the same issue. Have you found a fix for that?
",RainerAtSpirit,2015-01-14 11:31:03
142,2015-03-06 13:50:16,"Have you tried using PhantomJS 2.0? The list expands ok for me.
",johntitus,2015-01-14 11:31:03
142,2015-03-06 22:16:42,"Stuck on 1.9.x for the time being. Found  a workaround by using `.evaluate`, window.setTimeout and calling an available `onclick` method directly. Feels hacky :(. 
",RainerAtSpirit,2015-01-14 11:31:03
142,2015-03-09 09:14:37,"For me, it was an app that would not register for the click events after registering for touch.  @RainerAtSpirit: If it really is the same issue, you could do one of the following:
1. Register for click events instead of touch on the application side or
2. Actually create touch events via nightmares JS injection into the browser or
3. Trigger the click hanlders programatically w/o true browser events

It appears you resorted to (3). The other approaches might feel less hacky for you, especially (1).

@johntitus Haven't tried 2.0 yet, I'll give it a shot. The above example was fixed in the original app for me though and now also works w/ 1.9.
",apfelfabrik,2015-01-14 11:31:03
141,2014-12-27 12:11:51,"Nightmare is currently missing a rather helpful and important feature: Taking a screenshot of a specific DOM element, instead of the entire page.

MakoMakox, already created such an action [here](https://github.com/MakoMakox/nightmare/blob/master/lib/actions.js#L352) and [here](https://github.com/MakoMakox/nightmare/blob/master/lib/actions.js#L370). Unfortunately s/he closed the relevant ticket https://github.com/segmentio/nightmare/issues/107, even though the feature was not merged into the Nightmare codebase yet.
",gottlike,2015-01-25 22:59:27
141,2015-01-06 08:47:19,"I reopened the issue until it will get merged into  the Nightmare codebase . I didn't expect that someone else will need it :+1: .
",MakoMakox,2015-01-25 22:59:27
141,2015-01-25 22:59:27,"cool, going to merge this with #107 as i agree it seems helpful!
",reinpk,2015-01-25 22:59:27
140,2014-12-27 07:27:49,"- Sometimes a website with a hashtag in the URL doesn't load
- How can I monitor for ajaxComplete events? Injecting code constantly gives me a 
  `phantom stdout: TypeError: 'null' is not an object (evaluating 'a.parentNode')`
",zachfeldman,2015-01-26 00:37:08
140,2015-01-26 00:37:08,"thanks for the reports! can you include an example script that's occasionally failing for the hashtag?

for monitoring the ajax events, i'd give `.on('resourceRequested', ...)` or `.on('resourceReceived', ...)` a try: https://github.com/segmentio/nightmare#onevent-callback

i'll close for now, but can reopen with a test case, thanks!
",reinpk,2015-01-26 00:37:08
140,2015-01-26 00:39:46,"@reinpk it seems a little preemptive to not respond to a ticket for almost a month and then close it without giving the opener any chance to post sample code, just putting it out there. This is an old issue and I've since found an alternate solution so I don't have any sample code for you anymore, but I would have about a month ago =). Thanks for your work!
",zachfeldman,2015-01-26 00:37:08
140,2015-01-26 00:43:36,"ah bummer, yeah my workflow is to close and then reopen quite often. it's not a finality :)
",reinpk,2015-01-26 00:37:08
139,2014-12-22 03:44:38,"Add scrollTo feature. Always relative to top left corner. Resolves #130.
",azurelogic,2014-12-23 22:28:07
139,2014-12-23 22:28:09,"lgtm
",lambtron,2014-12-23 22:28:07
138,2014-12-22 03:10:39,"Adds zoom feature. Resolves #136.

This sort of ""High DPI"" screenshot can be achieved by increasing the zoom level and viewport size proportionally (sample of this code is included in Readme.md). I decided to implement it this way to allow maximum flexibility.
",azurelogic,2014-12-25 04:05:52
138,2014-12-23 23:52:27,"Not sure why this is failing. It doesn't appear to be related to my changes.
",azurelogic,2014-12-25 04:05:52
138,2014-12-25 03:58:36,"Same kind of error here, just one though:

<S_CODE_TOKEN>
",lambtron,2014-12-25 04:05:52
138,2014-12-25 04:05:44,"Right, the reason why this test is failing since we are currently relying on real-world sites for testing, which can be inconsistent with timing out as a common error. we're planning to move to local testing with https://github.com/segmentio/nightmare/issues/118.

Other than that, this looks good to me
",lambtron,2014-12-25 04:05:52
137,2014-12-22 03:04:10,"I forgot to ignore test PDFs in my .pdf PR. Also, adds in some semicolons to be more consistent.
",azurelogic,2015-01-26 00:27:36
137,2014-12-23 23:52:49,"Really odd that this is failing. These aren't even functional changes.
",azurelogic,2015-01-26 00:27:36
137,2014-12-25 03:57:45,"This is the error that we're seeing in the build:

<S_CODE_TOKEN>
",lambtron,2015-01-26 00:27:36
137,2014-12-25 04:06:43,"Yes, again, the first error above is attributed to testing with real world sites. Not quite sure what the second one is from, will look into it.
",lambtron,2015-01-26 00:27:36
137,2015-01-26 00:27:36,"ah good call, thanks! made the changes in parallel on master
",reinpk,2015-01-26 00:27:36
136,2014-12-18 23:06:35,"Can the screenshot function be overloaded ex. screenshot(path, dpi) so that one can choose a higher resolution for the screenshot?
",schrepfler,2014-12-25 04:05:52
136,2014-12-22 03:35:04,"I chose to implement a zoom function. By increasing zoom and viewport size proportionally, you get the equivalent to increasing the DPI of the screenshot. This does not increase the resolution of images, of course.

<S_CODE_TOKEN>
",azurelogic,2014-12-25 04:05:52
136,2014-12-22 10:13:00,"I would like this patch if this was facebook.
",schrepfler,2014-12-25 04:05:52
135,2014-12-12 01:50:32,"- add documentation stating that file extension is required in `path`
- add error handling for supported file types:
  http://phantomjs.org/api/webpage/method/render.html

/cc @sperand-io @stevenmiller888 
",lambtron,2014-12-25 04:01:56
135,2014-12-12 03:15:40,"@lambtron LGTM! Why is it failing though?
",stevenmiller888,2014-12-25 04:01:56
135,2014-12-12 03:56:20,"Hmmm.. this is the error:

<S_CODE_TOKEN>

which references this test
https://github.com/segmentio/nightmare/blob/master/test/index.js#L254-L260

Any ideas?
",lambtron,2014-12-25 04:01:56
135,2014-12-13 21:26:59,"since the tests rely on real-world sites they can be a bit finicky with timing out (good reason for us to move to a locally hosted test suite #118). you can kick the test suite in circleci in the mean time, passing now ;)
",reinpk,2014-12-25 04:01:56
134,2014-12-11 09:35:28,"If you call `nightmare.screenshot()` with a `path` which lacks an extension, the function seems to silently fail and not create any file at all.

From looking at the [Nightmare code](https://github.com/segmentio/nightmare/blob/master/lib/actions.js#L305) and the [PhantomJS documentation](http://phantomjs.org/api/webpage/method/render.html), I suspect this may be an upstream issue with PhantomJS itself. However, I haven't tested with PhantomJS directly - I have little experience of using PhantomJS directly (thus my use of this library).

Even if this is an upstream issue, it'd be great for user-friendliness if the `screenshot()` function checked for one of the supported extensions, or even just if the [documentation of the function](https://github.com/segmentio/nightmare#screenshotpath) mentioned that an extension is required.
",ncraike,2015-01-26 00:35:05
134,2014-12-12 01:49:14,"Hey, thanks for using Nightmare and surfacing this issue! Seems reasonable, I'll add it now.
",lambtron,2015-01-26 00:35:05
134,2014-12-12 01:50:42,"https://github.com/segmentio/nightmare/pull/135
",lambtron,2015-01-26 00:35:05
134,2015-01-26 00:35:05,"was fixed by #135, thanks to you both!
",reinpk,2015-01-26 00:35:05
133,2014-12-07 23:05:26,"This adds `.headers()`, which sets the headers on a request.
",imsky,2014-12-08 05:16:32
133,2014-12-07 23:14:02,"lgtm! @reinpk @lambtron @stevenmiller888 
",sperand-io,2014-12-08 05:16:32
132,2014-12-07 18:26:09,"example  < a href=""/test""  target=""_blank"" >test< /a >
",and07,2015-01-26 00:28:39
132,2015-01-26 00:28:39,"not sure what you mean... can you send over an example?
",reinpk,2015-01-26 00:28:39
131,2014-12-06 11:40:50,"I'm looking to make multiple instances of nightmare and running some tests on different websites in same time. I tried using jxcore for multithreading and nightmarejs but i was unsuccessful. Then I tried using synchronize.js (http://alexeypetrushin.github.io/synchronize/docs/index.html) and I was successful but it used the same instance of nightmarejs, I don't know why. Does someone know a good approach on this ? Thank you for your time guys :)
",MakoMakox,2015-08-17 06:22:58
131,2015-01-21 19:59:50,"Did you found a solution?
",samuelmeireles,2015-08-17 06:22:58
131,2015-02-13 16:27:40,"I managed to make it run In a multithread, I'm working on it really. I will post as soon as I have a ncie written slution. If anynone has progress on this I'm only ears.
",MakoMakox,2015-08-17 06:22:58
131,2015-02-13 17:10:34,"Look at this https://github.com/Buzzvil/ghost-town
",samuelmeireles,2015-08-17 06:22:58
130,2014-12-05 18:09:15,"I need a way to scroll the page or update its scrollPosition. As specified [here](http://phantomjs.org/api/webpage/property/scroll-position.html). That'd be great because then I could access content if the website is using an infinite scroll.

Something like 

<S_CODE_TOKEN>

Would be fantastic.
",sean-hill,2014-12-23 22:28:07
130,2014-12-08 02:49:10,":+1: 
",GalCohen,2014-12-23 22:28:07
130,2014-12-17 05:10:06,"So, I have attempted to implement this, but it's not as trivial as this:

<S_CODE_TOKEN>

Additionally, my other efforts with evaluate and scrollTop/scrollLeft have failed. In testing, nightmare just hangs when you try to use either method. Am I missing something?
",azurelogic,2014-12-23 22:28:07
130,2014-12-22 03:46:44,"I finally realized that I was trying to do it the way phantom actually does it. I totally forgot about the rules for working with the phantom-nodejs bridge. Hope it helps!
",azurelogic,2014-12-23 22:28:07
129,2014-12-03 14:29:04,"Hello @reinpk,

I'm trying a very simple test but the result is not what I've expected.

var Nightmare = require('nightmare');
new Nightmare()
.goto('http://www.mypage.com/login')
.type('input[name=username]', 'myusername')
.type('input[name=password]', 'mypassword')
.click('input.button')
.wait()
.screenshot('test.jpg') 
.run(function(err, Nightmare){
    console.log('Done.');
});

I suppose that the generated screenshot should be of the page after login. Instead I only get the Done message and a screenshot of the login page.
I've tried using wait with selector (div from the landing page after login process) but the result is the same.
Any advice?

Thank you!
",paulsez,2015-01-26 00:33:55
129,2014-12-05 01:32:18,"In the screenshot of the login page, are the un/pw fields filled out? Is the selector in the `click()` method valid? 

Can you run the program with `DEBUG=*` and paste in the output so we can see what's going on under the hood? 

Thanks!
",sperand-io,2015-01-26 00:33:55
129,2014-12-08 12:12:00,"Hello again!
The generated screenshot contains the filled u/p fields. I've changed the click() selector to be sure that the button is found.

DEBUG=\* node logintest2.js
  nightmare queueing action ""goto"" +0ms
  nightmare queueing action ""type"" +5ms
  nightmare queueing action ""type"" +0ms
  nightmare queueing action ""click"" +1ms
  nightmare run +0ms
  nightmare .setup() creating phantom instance with options {""timeout"":5000,""interval"":50,""weak"":true,""loadImages"":true,""ignoreSslErrors""                                       :true,""sslProtocol"":""any"",""proxy"":null,""proxyType"":null,""proxyAuth"":null,""cookiesFile"":null,""webSecurity"":true} +0ms
  nightmare .setup() phantom instance created +2s
  nightmare .setup() phantom page created +11ms
  nightmare .goto() url: http://www.mypage.com/login +3ms
  nightmare .goto() page loaded: success +943ms
  nightmare .type() myusername into input[name=""username""] +502ms
  nightmare .type() mypassword into input[name=""password""] +23ms
  nightmare .click() on .pure-button +13ms
  nightmare .wait() for the next page load +24s
  nightmare .wait() detected page unload +5s
  nightmare .wait() detected page load +103ms
  nightmare .screenshot() saved to test3.jpg +0ms
  nightmare .teardownInstance() tearing down +192ms
Done.

According to debug, there is a page unload followed by a page load.
Still, the screenshot is of the login page.

Thank you!
",paulsez,2015-01-26 00:33:55
129,2015-01-26 00:33:55,"i tried adding some actions that cause new pages to load, but the screenshots seem to work for me....

<S_CODE_TOKEN>

29 seconds for the next page load seems really long?
",reinpk,2015-01-26 00:33:55
128,2014-12-03 07:50:47,"Hi,
Iam new to nightmarejs. i have one requirement like reading some data's from browser and put it into file.I really don't know where to run and what are all the tools  needed.can any one help me for the same.please provide the beginners link if any. Thanks
",nighhtmare123,2014-12-03 17:34:54
128,2014-12-03 17:34:54,"Got it, you can combine the node modules `fs` and `nightmare` something like this (untested):

<S_CODE_TOKEN>

http://nodejs.org/api/fs.html#fs_fs_writefilesync_filename_data_options
",reinpk,2014-12-03 17:34:54
127,2014-12-01 11:45:18,"Hi, I have one question. When I use the event handler resourceRequested, I get an error when calling the abort method of the object networkRequest
// Unhandled stream error in pipe.
Object #<Object> has no method 'abort'
Because the object networkRequest contains
{
objectName: "",
'destroyed(QObject*)': [Function],
'destroyed()': [Function],
'deleteLater()': [Function],
'abort()': [Function],
'changeUrl(QString)': [Function]
}

But even calling networkRequest['abort()']() gets the error
Error: cannot call function of deleted QObject

Is there any other way to cancel the load unwanted files?

I use phantomJS v 1.9.8 and 1.9.0, node v 0.10.33 , ubuntu 14.04
",niknickolas,2015-01-25 23:52:59
127,2015-01-25 23:20:10,"hmmmm, yes it looks like onResourceRequested actually has two functions as parameters that execute in different contexts.... https://github.com/sgentle/phantomjs-node#functionality-details and currently the function getting passed is executing in the external context not the phantomjs context.
",reinpk,2015-01-25 23:52:59
127,2015-01-25 23:52:59,"i've split it into two events, one that's triggered when on `resourceRequestStarted` that executes in the phantomjs context, and allows you to abort, change url, or adjust headers. `resourceRequested` will remain the same thing, executed in the external context.
",reinpk,2015-01-25 23:52:59
126,2014-12-01 10:57:39,"As seen with `DEBUG=nightmare`:

<S_CODE_TOKEN>
",kytwb,2015-08-17 06:48:16
126,2014-12-07 23:04:20,"I found that this issue can be fixed by doing direct `sendEvent` calls, not sure why.
",imsky,2015-08-17 06:48:16
126,2014-12-08 17:05:10,"I have the same problem.
It seems that the problem appeared between 1.6.1 and 1.6.2.

Edit : This is the diff which cause the problem https://github.com/segmentio/nightmare/commit/b94ecc5664239ddac731143886f3c413a80034c5#diff-0
Edit 2 : This is verified, when I revert it, it's working
",Quentin01,2015-08-17 06:48:16
126,2014-12-08 18:07:01,"@Quentin01 while that may fix the immediate problem, it doesn't trigger the ""real"" UI event.
",imsky,2015-08-17 06:48:16
126,2015-01-26 00:40:11,"that is super slow. do you have a nightmare script test case for a publicly available site?
",reinpk,2015-08-17 06:48:16
126,2015-01-26 03:36:10,"@reinpk Gist available here: https://gist.github.com/kytwb/de153003ef2c211774b9
",kytwb,2015-08-17 06:48:16
126,2015-02-14 03:09:27,"Fwiw, I observed the same type of slowness on OSX with phantomjs _2.0_ ; back to _1.9.x_ and times were very reasonable again. Maybe the people involved in this issue could confirm/infirm that ?
",jbbarth,2015-08-17 06:48:16
126,2015-02-18 13:15:01,"More experiments:
- I experienced a very slow (> 20s) `type()` (and maybe `wait()`) on Linux as well with _any_ version of Phantomjs (tested 1.9.0, 1.9.2, 1.9.7, 1.9.8, 2.0.1-devel)
- I confirm that reverting back to nightmare 1.6.1 made the performance be acceptable again, and starting from 1.6.2 it starts to be slow as hell (which may confirm @Quentin01's bisect)

Fwiw here's the problematic part of a debug output, don't know if it can help:

<S_CODE_TOKEN>
",jbbarth,2015-08-17 06:48:16
126,2015-02-25 09:14:25,"Going to use @jbbarth fork while waiting for a fix.
",kytwb,2015-08-17 06:48:16
126,2015-02-25 11:23:34,"I believe this issue has the same root cause as this other one:
https://github.com/segmentio/nightmare/issues/123

It's the socket connection between the phantomjs module and it's dependency, shoe.

You can manually edit shoe yourself. Go into `node_modules/phantom/shoe/index.js` and change line 8 to read

<S_CODE_TOKEN>

Can you try that out and see if it helps?
",johntitus,2015-08-17 06:48:16
126,2015-02-26 04:05:02,"@johntitus That fixed it for me. Problem is shoe is a dependence of phantom so would require to fork nightmare, fork phantom, fork shoe, fix, then cascade reference all the patched forks in each package.json. Good find though!
",kytwb,2015-08-17 06:48:16
126,2015-02-26 12:56:52,"I've been looking at this module: https://github.com/baudehlo/node-phantom-simple

Could be a possible replacement for the `phantom` module. `node-phantom-simple` has no dependencies, except PhantomJS. It uses node's `child_process.spawn` instead of socket.io, so it should be a bit more solid.

However, the API is slightly different, so it wouldn't be a drop in replacement. Also, it seems to be intermittently maintained.
",johntitus,2015-08-17 06:48:16
126,2015-02-27 04:47:26,"I've been looking at this module: [johntitus/node-horseman](https://github.com/johntitus/node-horseman).
",kytwb,2015-08-17 06:48:16
126,2015-04-01 22:13:41,"Any update to this? I'm running into the same issue. :+1: 
",sean-hill,2015-08-17 06:48:16
126,2015-04-03 20:54:33,":+1:  can confirm @johntitus's solution worked.
",nickmerwin,2015-08-17 06:48:16
126,2015-04-03 21:08:48,"@johntitus solution did work, but it stinks for us because I'd have to go in manually update all the node_modules on my production server...and then once they refresh with a `npm install` I'd have to do it again :frowning: 
",sean-hill,2015-08-17 06:48:16
126,2015-04-21 21:31:58,"I was having the same problem.  Here's a way to :shit:-patch it from within your own app:

<S_CODE_TOKEN>

I'm not sure if this will still work if, for example, a compatible version of `shoe` is installed at a lower level of the modules tree.  Does anyone know?
",nylen,2015-08-17 06:48:16
126,2015-08-17 06:48:16,"this is somewhat fixed in v2 #200 by switching from phantomjs to electron
",reinpk,2015-08-17 06:48:16
125,2014-11-30 16:44:28,,peterjosling,2015-09-20 21:26:16
125,2015-09-20 21:26:16,"i don't believe electron has this (for `2.x`) but it would be interesting to make a version of `.screenshot()` that just returned the buffer!
",reinpk,2015-09-20 21:26:16
124,2014-11-28 13:56:05,"This might be a basic question, but once all of the steps are queued up, are the arguments that are passed in to `goto` modifiable? Or are they 'locked in' at runtime?

Given the following  stripped-down example:

<S_CODE_TOKEN>

I'm parsing the iframe `src` inside the evaluate, passing it to the callback as `res`, then setting my ""global"" `iframeURL` to the parsed value, but the call to `goto` right afterwards sees it as empty. The log statement inside the `run` callback sees it as the correct value.

Is there a different approach I should be taking to this?
",rosslavery,2014-11-29 03:34:45
124,2014-11-29 03:34:21,"Hey there,

Thanks for checking out Nightmare! Unfortunately the string passed at runtime is going to be evaluated as such, i.e. the `goto(iframeURL)` will tell Nightmare to go to a blank URL.

Is the URL you are getting from the outerHTML of that iframe unique every time? If not, you could hard copy that URL and initiate Nightmare with a `.goto()` to that URL.

Otherwise, you could create two Nightmare instances—one to retrieve the unique URL and another one that will wait until the first finishes and then go to said retrieved URL. Not the best solution, but one nonetheless (may require `setTimeout` or used in conjunction with the async library, etc.).

Hope that helps. Let me know if you have any additional questions or comments!
",lambtron,2014-11-29 03:34:45
123,2014-11-25 13:07:09,"Hi, @reinpk:
    I'm using nightmare do integration tests, but I find out it's really slow to do page navigation, especially when there are muliple ""click and wait"" combinations. for example, this codes here failed sometimes for timeout reason on my computer.
   By using casperjs, the same logic spend less than 15 seonds.
   Maybe it's the internal nodule:phantmjs's problem.
   Hope you can solve this problem.
   Thanks for your great work!

<S_CODE_TOKEN>
",ybak,2015-08-17 06:24:57
123,2014-11-26 19:21:46,"Hi,

Thanks for using Nightmare! We actually built Nightmare with the intention of automating browser tasks, so we want to keep the exposed methods simple and few. However, we noticed that a ton of people are using Nightmare for automating browser tests, so we're considering building out a `nightmare-testing` module that builds on top of Nightmare and provides more testing specific methods. The more data around how we see people use Nightmare will greatly shape its road map.

Feel free to add your comments to this thread:
https://github.com/segmentio/nightmare/issues/117

Or here:
https://github.com/segmentio/nightmare/issues/113

Thanks!
",lambtron,2015-08-17 06:24:57
123,2014-11-29 03:37:19,"Another thing to keep in mind is that the `.wait()` function can take a selector, of which the Nightmare instance will wait until it appears.

You can try this:

<S_CODE_TOKEN>

More info:
https://github.com/segmentio/nightmare#waitselector

Can you try that and see what the performance is like? Thanks!
",lambtron,2015-08-17 06:24:57
123,2014-11-29 16:06:24,"I just tested with  wait(selector),  not good:

<S_CODE_TOKEN>

 I am using protractor(https://github.com/angular/protractor) to do  E2E test now.
",ybak,2015-08-17 06:24:57
123,2014-11-29 17:50:33,"hey @ybak i just tested your script locally and it executes for me in about 4 seconds... since i have two-factor auth enabled i end up on the two-factor auth code page, but it successfully passes the first step of the login process with my own credentials in about 4 seconds.

could you try running it as `DEBUG=* node test.js` so that we see more internal output? and then also add the timeout handler:

<S_CODE_TOKEN>

to get more visibility. 
",reinpk,2015-08-17 06:24:57
123,2014-11-30 15:24:08,"here it is:

<S_CODE_TOKEN>
",ybak,2015-08-17 06:24:57
123,2014-12-03 12:30:27,"Yea I do have the same problem. Everything is fast expect `.click()` and `.wait()`

<S_CODE_TOKEN>

<S_CODE_TOKEN>

I noticed that this is only happening when I'm on my windows machine. On Linux, everything is fast.
",queckezz,2015-08-17 06:24:57
123,2015-02-19 21:12:15,"I'm definitely having the same issues:

<S_CODE_TOKEN>

<S_CODE_TOKEN>

Very odd.
",snellingio,2015-08-17 06:24:57
123,2015-02-23 04:35:42,"similar issue as well

<S_CODE_TOKEN>
",timmyg,2015-08-17 06:24:57
123,2015-02-23 18:26:31,"I was having the same issue with [Horseman](https://github.com/johntitus/node-horseman), so I did some investigating. I believe the cause is either phantomjs-node, or perhaps PhantomJS itself, when more than one page.evaluate is called in the same script.  Both click & wait & type all use phantom's page.evaluate under the hood.

I've opened an [issue](https://github.com/sgentle/phantomjs-node/issues/248) with phantomjs-node, hopefully they can track the actual root cause.
",johntitus,2015-08-17 06:24:57
123,2015-02-23 20:16:18,"The issue turns out to be related to a node module called `shoe`, which wraps socket.js.  Socketjs has a configurable option called heartbleed_delay that shoe does not let you configure.  The default `heartbleed_delay` is 25000 ms. If you manually edit that to something else, like 200 ms, everything gets sped up.

There is an open pull request against shoe to expose this config option in socketjs, but it doesn't look like shoe is actively maintained.  Here's my comment to the phantomjs-node folks. Not sure what they can do about it, except to fork shoe.

https://github.com/sgentle/phantomjs-node/issues/248#issuecomment-75621671

You can manually edit shoe yourself. Go into `node_modules/phantom/shoe/index.js` and change line 8 to read

<S_CODE_TOKEN>
",johntitus,2015-08-17 06:24:57
123,2015-02-26 15:47:47,"I am experiencing the same issues on windows with the slowness. 

@johntitus I tried your suggestion at it worked! much faster now. Hopefully this can be addressed, so this wont be necessary, though.
",bchr02,2015-08-17 06:24:57
123,2015-02-26 16:45:23,"i've also experienced this, and would love to get a fix in place. will try to look into it this coming weekend.
",reinpk,2015-08-17 06:24:57
123,2015-04-21 21:33:35,"Same root cause as #126.  See https://github.com/segmentio/nightmare/issues/126#issuecomment-94948463 for a workaround you can include in your app.
",nylen,2015-08-17 06:24:57
123,2015-08-17 06:24:57,"in v2 #200 we're moving off phantomjs for electron, which has been significantly faster in testing.
",reinpk,2015-08-17 06:24:57
122,2014-11-21 22:20:54,"I figured it would be useful to be able to export certain types of pages in a more printer and e-reader friendly format.
",azurelogic,2014-11-29 04:01:49
122,2014-11-29 04:02:14,"Seems reasonable and aligned with general automation of browser tasks.. :)

Just curious, how are you using Nightmare?
",lambtron,2014-11-29 04:01:49
121,2014-11-20 01:01:23,"This post method is for POSTing data to a url.
",UnclaimedPants,2015-08-17 06:07:54
121,2014-11-21 17:41:46,"Please merge this changeset
",UnclaimedPants,2015-08-17 06:07:54
121,2014-11-29 04:03:41,"Hey @UnclaimedPants,

Thanks for contributing. Just out of curiosity, how did you plan to use `.post()` and Nightmare in general?
",lambtron,2015-08-17 06:07:54
121,2014-11-29 06:34:48,"@lambtron I use `.post()` to use the http post method, for example, when posting data to a server.

At the moment I'm using Nightmare for testing, and validating a web application (that requires posting data).
",UnclaimedPants,2015-08-17 06:07:54
121,2014-12-03 18:52:08,"@lambtron Further, I use it to submit forms, and also post data to web applications. Nightmare is great for integration testing, and also for testing the availability of applications, by scripting login tests, and feature testing.
",UnclaimedPants,2015-08-17 06:07:54
121,2015-01-26 00:55:15,"hey looks awesome except for missing a test? would love to merge with a test though.
",reinpk,2015-08-17 06:07:54
121,2015-08-17 06:07:54,"closing without tests, sorry!
",reinpk,2015-08-17 06:07:54
120,2014-11-15 22:34:40,"I've noticed since changes were merged in last weekend that Nightmare no longer fills out form fields properly.  You can see an example in my repo here

https://github.com/dtothefp/nightmare-timeout-test-example/tree/master

If you run the tests, generated screenshots show that form inputs do not contain the correct information.  If you switch to my branch where I use an older version of Nightmare I previously forked:

https://github.com/dtothefp/nightmare-timeout-test-example/tree/dfoxpowell/nightmare-v1.6.0

<S_CODE_TOKEN>

If you previously `npm i` in the master branch.  Then run the tests again and you will see that form fields are filled out properly.  You will also see in this branch the test timeout failures I submitted previously in

https://github.com/segmentio/nightmare/issues/102 
",dtothefp,2015-08-17 06:34:46
120,2014-11-29 17:59:28,"interesting, looks like a weird problem related to:
https://github.com/segmentio/nightmare/blob/master/History.md#162--2014-11-09
",reinpk,2015-08-17 06:34:46
120,2014-11-29 18:14:14,"thanks for providing such a complete example btw!

from the way the screenshots look, it seems like there's something strange happening with element focus:
![](https://cldup.com/TOxKeRWXJ--3000x3000.jpeg)

unfortunately it's happening a level deeper in phantom
",reinpk,2015-08-17 06:34:46
120,2014-11-29 18:18:12,"when i run with nightmare@1.6.1 i see the expected behavior:

![](https://cldup.com/LlW5n0C0F7-3000x3000.jpeg)
",reinpk,2015-08-17 06:34:46
120,2014-11-29 18:30:38,"hmmmm, so it seems like there's something funky with optimizely's javascript on that form. i added another step to fill out the name field appropriately:

<S_CODE_TOKEN>

and then the most recent nightmare version works fine:

![](https://cldup.com/4NiUPUvSl3-3000x3000.jpeg)

hopefully that solves the immediate issue for you. the underlying problem is that phantomjs isn't maintaining focus on that form, maybe because they're doing some real-time validation...
",reinpk,2015-08-17 06:34:46
120,2014-12-02 16:11:03,"I believe I'm being hit with the same issue, although the form I'm filling out does not have real-time validation on it or anything of that sort.

![login-2](https://cloud.githubusercontent.com/assets/656884/5265857/b01e0d10-7a13-11e4-8df9-2af1a579a0e3.png)

It doesn't happen every time, but when it does, it looks like it's switching focus to the password field before the email field is finished typing. I've tried adding a .wait(500) between typing in the email and typing in the password, but it still seems to occur...
",rosslavery,2015-08-17 06:34:46
120,2015-03-23 03:47:42,"@reinpk Any news on this, or should we file an issue elsewhere? I've had my Nightmare version constrained for far too long, and there have been many updates in `node phantom` module. I'm also working to switch to PhantomJS 2.0.0 which surprising worked fine if I was on Nightmare 1.6.0 but upgraded old Nightmare package.json to 0.7.2 of https://github.com/sgentle/phantomjs-node. Even the simple Optimizely signin form fails (and this has no dynamic validation, only on form submit), as you can see the email and password get entered in the same input:

![screen shot 2015-03-22 at 11 49 50 pm](https://cloud.githubusercontent.com/assets/4656726/6773885/d36c2de8-d0ed-11e4-82c9-a121ef1972af.png)
",dtothefp,2015-08-17 06:34:46
120,2015-03-23 14:32:53,"@reinpk I've actually pinpointed the problem to this PR https://github.com/segmentio/nightmare/pull/100/files that switches the `type` action to implement the `sendEvent` Phantom method. I'm not sure if this is a problem with `phantomjs-node`'s implementation of `sendEvent` or a problem in PhantomJS itself, but for now would you consider reverting as it doesn't seem worthwhile to have such a small change potentially effecting users?

When I get some time later in the week I can put together some tests to pinpoint the problem more acuratelly and determine if I should submit an issue with `phantomjs-node` or PhantomJS

@rosslavery If you are still having this problem revert the `exports.type` method

<S_CODE_TOKEN>

You can pull this from my github if you'd like

<S_CODE_TOKEN>
",dtothefp,2015-08-17 06:34:46
120,2015-03-24 13:47:38,"yeah, that change seems to have made a lot more issues than it solved... the reason we switched it is because some fancier forms didn't respond well to the value setting method... but it was much simpler and more robust :P see #81, maybe there's a hack that sets value and then does a single `sendEvent` or something.

yeah, i'm definitely open to reverting that change and looking for a better solution.
",reinpk,2015-08-17 06:34:46
120,2015-05-27 14:51:29,"@reinpk do I need to contribute something to revert this change, or would you like to do it? I'm tired of pulling from a fork of Nightmare just because of this small issue
",dtothefp,2015-08-17 06:34:46
120,2015-06-01 16:27:17,"yeah makes sense, could you send over a pull request from your fork? happy to merge
",reinpk,2015-08-17 06:34:46
120,2015-06-26 18:00:43,"@reinpk addressed it here https://github.com/segmentio/nightmare/pull/195. Sorry ended up having a bit of a ""gitmare"" and screwed up a couple PR's which I had to close. Would be great to get this merged as soon as you have a change.
",dtothefp,2015-08-17 06:34:46
120,2015-08-17 06:34:46,"in v2 we're using electron instead of phantomjs, and electron doesn't have a native keypress function, so we're going back to the way it worked here originally, which should fix this issue in v2.0 #200 
",reinpk,2015-08-17 06:34:46
120,2015-12-25 20:19:39,"This issue has re-appeared in my tests.  Observe:

<img width=""674"" alt=""screen shot 2015-12-25 at 12 13 19 pm"" src=""https://cloud.githubusercontent.com/assets/1254/12004284/b174fc3a-ab01-11e5-8df7-11b6d3859607.png"">

Can somebody re-open, or shall I create a new issue?
",naturalethic,2015-08-17 06:34:46
119,2014-11-15 07:59:12,"I think the `value` parameter should be removed from `.wait(fn, value, [delay])`, and `fn` should simply be a function that returns a boolean. It's more readable because you can see the condition that determines whether the wait is over.

In other words, changing this:

<S_CODE_TOKEN>

...to this:

<S_CODE_TOKEN>

Also, I cannot see any reason for `delay` to be an _optional_ parameter. If you don't specify a `delay`, the wait will be over after the first timeout, making the return value of `fn` inconsequential...

Furthermore, it would be nice if you could specify an indefinite wait that polls the page every X milliseconds, but _doesn't_ refresh it. For example, there may be a lengthy operation that is running on the page that a refresh would cancel/reset. Perhaps add a `refresh` option?

So in conclusion, `.wait(fn, value, [delay])` → `.wait(fn, delay, [refresh])`.

Happy to send a pull request for any of this you agree with, if you want me to.
",lukehorvat,2015-09-13 04:11:10
119,2014-11-16 21:42:29,"Thanks for the feedback and suggestions!

> Furthermore, it would be nice if you could specify an indefinite wait that polls the page every X milliseconds, but doesn't refresh it. For example, there may be a lengthy operation that is running on the page that a refresh would cancel/reset. Perhaps add a refresh option?

I might not quite be following, but I think that's exactly what the `wait(fn, value)` method does. If you don't pass `delay`, the fn will evaluate over at over at the default interval of 50ms (or whatever you set in your override) until timeout. 

> Also, I cannot see any reason for delay to be an optional parameter. If you don't specify a delay, the wait will be over after the first timeout, making the return value of fn inconsequential...

Adding the refresh delay doesn't actually extend the timeout, it just optionally refreshes the page at [delay] interval in case you're hoping to grab a specific static element value that can change on refresh, [like in the test](https://github.com/segmentio/nightmare/blob/master/test/index.js#L269-L273).

Make sense?
",sperand-io,2015-09-13 04:11:10
119,2014-11-17 08:32:28,"Ah, I glossed over the 50ms thing, thanks for pointing that out! I was under the impression that `wait(fn, value)` would call `fn` only at the end of the timeout (which would be pointless, of course).

Still, as a plugin developer, it's a little unclear as to when I should be respecting the timeout setting of the user. Specifying a `delay` option effectively makes the wait become ""indefinite"" (i.e. it will wait _forever_ until the condition is true), whereas _not_ specifying a `delay` will only wait long enough for a timeout to occur. In the case of the former, I am completely ignoring the user's timeout setting, yet respecting it in the case of the latter. From the perspective of someone using my plugin, there's no way to know to which behaviour to expect (aside from looking at the source code of my plugin).

For instance, say my plugin allows the user to upload a video file via a form (a potentially lengthy operation). Depending on the size of the video and the speed of the Internet connection, it could take a long time to upload, or it could be very quick. Can I trust the user's timeout setting or not? Ideally, I'd like my plugin to ""wait indefinitely"" until the condition (video finishes uploading) is true, but the only way to get that behaviour at the moment is to use `wait(fn, value, delay)`, which refreshes the page (and refreshing would cancel the upload!).

I just don't understand why we're quite happy to let a plugin wait forever in the case of `wait(fn, value, delay)`, yet waiting forever _without_ refreshing the page is not allowed and has to respect the timeout setting? Seems a little arbitrary to me.
",lukehorvat,2015-09-13 04:11:10
119,2014-11-29 18:36:53,"yeah that's a fair point... here was the original thought process:
1. If something is going to change on the current page via ajax (no delay parameter), wait times will be relatively short. the user is probably expected to sit and wait.
2. if something is going to change on refresh (with delay parameter), wait times will be relatively long. the user isn't expected to sit there and refresh the page.... we're taking on a long-running task for the user so that they can do other stuff rather than refreshing this page.

with that in mind, the first scenario has a fast delay of 50ms, whereas the second scenario is typically for delay times >1 minute.

i agree the page refreshing is unexpected, so maybe that should be split into a separate function somehow.
",reinpk,2015-09-13 04:11:10
119,2015-09-13 04:11:10,"in v2 (see #200) we've gone with your original suggestion :) thanks so much! the new function signature is `.wait(fn)` and waits until the function returns true after being evaluated on the page. v2 should be out tomorrow :)
",reinpk,2015-09-13 04:11:10
118,2014-11-14 21:44:44,"Nightmare needs 'less real world', local web pages for testing.
- Current circleci build status is 'failed' because of timeouts.
- It would also make testing environment more consistent across the world. Yahoo serves different pages in different regions.
- Some edge case features are hard to test on 'real world' web pages.
",Hermanya,2015-08-17 06:23:54
118,2014-11-16 14:53:25,"correct.

You can use phantomjs/nightmare to serve content (see webserver module).

Take a look to casperjs test suite for an implementation.
",mickaelandrieu,2015-08-17 06:23:54
118,2014-11-16 21:50:24,"Total agreement from the folks here at [Segment](http://segment.com). @stevenmiller888 and I are going to dive into this starting this week. 
",sperand-io,2015-08-17 06:23:54
118,2014-11-16 22:28:29,"I will be happy to help if needed :)

For informational purposes, see https://github.com/n1k0/casperjs/blob/master/tests/selftest.js#L16
",mickaelandrieu,2015-08-17 06:23:54
118,2015-01-26 01:02:41,"yeah totally agree, this is the next major improvement for nightmare i think
",reinpk,2015-08-17 06:23:54
118,2015-08-17 06:23:54,"fixed a while ago by the indomitable @dominicbarnes 
",reinpk,2015-08-17 06:23:54
117,2014-11-12 15:20:58,"Hi @reinpk,

I'm part of casperjs team and I look at your project since months.
As you may notice, casperjs project is a little bit inactive... we don't have time to realy maitain it for now.

Imo, casperjs has some cons:
- not realy nodejs supported
- testing api / exporter is so coupled to the main/casper api
- a lot of weird behaviors

casperjs have also some pros:
- the best docs ever (realy, I contribute to a lot of projects including big frameworks like Symfony2, and casperjs has the best docs and a lot of samples)
- easy to use, easy to learn
- fast, realy fast / Selenenium
- fully tested, used by major companies
- (subjective) I like it, because I contribute to

I see that nightmare is actively maintained and I have a lot of ideas to suggest, probably to add fonctionnalities which I have on casper to nightmare.

You said the goal of nightmare is to expose only ""few"" methods, is there any chance that you change your mind on that ?

Regards,
",mickaelandrieu,2015-01-26 00:30:15
117,2014-11-26 19:23:50,"Hey @mickaelandrieu, I'm Andy and I'm helping maintain this library.

We built Nightmare with the intention of automating browser tasks, so we aim to keep the exposed methods simple and few. However, it appears that many people are using Nightmare for browser testing. We're considering building a nightmare-testing library that will do just that, while keeping this library simple and for building APIs and plugins.

Let us know what you think of a nightmare-testing library and if you'd like to contribute to it!
",lambtron,2015-01-26 00:30:15
117,2014-11-26 19:47:46,"Hi @lambtron,

I think we don't need to make another testing library (casperjs'one was a mistake from his creator opinion) but maybe we can work on how to ease the use of major testing libraries (mocha/chai/jasmine/jest) with nigthmarejs.

Then specials plugins/helpers dedicated to use cases like REST consuming/testing can be developped (and I will give a hand).

Like you, I don't want a big API but many useful middlewares: if nightmare offer same features as casperjs I think we wont release after the 1.1.x anymore /c @n1k0

What do you think ?
",mickaelandrieu,2015-01-26 00:30:15
117,2014-11-29 00:08:54,"Hey @mickaelandrieu,

Good points. There are many people using Nightmare for user testing and I think there can be more work done in making it easier for them to do so. Targeting the big testing libraries is a great start. Maybe we can spec out the interface of how users would use Nightmare with Mocha or Jasmine and work from there?

Agree to keep Nightmare simple with many useful middlewares that people can pick and choose. Eventually, I'd also like to see an ecosystem of plugins of automated browser tasks, such as https://github.com/segmentio/nightmare-swiftly
",lambtron,2015-01-26 00:30:15
117,2014-11-29 00:14:00,"Found this with a quick Google search, using Nightmare with Mocha, Chai for e2e testing:
http://weblogs.asp.net/mikaelsoderstrom/writing-end-to-end-tests-with-nightmare-js

How did you imagine you want to improve the testing interface?

[edit] i see you commented on its performance :)
",lambtron,2015-01-26 00:30:15
117,2014-12-02 16:57:16,"Hi,

I also (like you) experience this bad performance.

Imo the big cost is the instanciation of phantomjs webpage object. In the example you point, a new phantomjs page is instanciated for each test and the timeout is not a good idea at all in this case.

We need a better control on ""how"" we create, refresh and kill the phantomjs native webpage.

I will present nightmarejs on a (very) little event, so I will experiment it a lot :)
",mickaelandrieu,2015-01-26 00:30:15
117,2015-01-26 00:30:15,"sounds good, we do intend to keep improving nightmare, though we'll keep the API small and push people to develop frameworks around it.
",reinpk,2015-01-26 00:30:15
116,2014-11-12 10:10:27,"Hello !

I have just install the latest Nightmare 1.5.6. When I try to run the ""Yahoo example"", I get this :

<S_CODE_TOKEN>

Seems that works but not really correctly.
",MathRobin,2014-11-29 18:43:54
116,2014-11-12 10:15:09,"When i tried with DEBUG=nightmare prefix, I get this :

<S_CODE_TOKEN>
",MathRobin,2014-11-29 18:43:54
116,2014-11-12 10:16:02,"Maybe _yahoo_ changed something on their site.. ?
",davidlinse,2014-11-29 18:43:54
116,2014-11-12 10:30:30,"Not a bad idea :)
",MathRobin,2014-11-29 18:43:54
116,2014-11-29 18:43:54,"haven't been able to reproduce, but that makes me suspect it's a localization issue with yahoo's site being different in france than in the us, closing for now but i'm about to generate a bunch more examples of different ways to use nightmare.
",reinpk,2014-11-29 18:43:54
116,2016-02-17 09:12:51,"How about a bunch more examples?
The Yahoo example is still broken.
",BerndErnst,2014-11-29 18:43:54
115,2014-11-10 22:19:36,"`./node_modules/.bin/mocha test/ -g ""sequential""`
",pdelanauze,2014-11-11 06:32:16
115,2014-11-11 06:32:10,"good idea, will merge and see what the issue is
",reinpk,2014-11-11 06:32:16
114,2014-11-10 11:13:00,"Hey,

I want to make a screenshot from a website which embeds its fonts via `@font-face`, but they're not loaded. I will set up a demonstration and post it here.

Have a great day and keep up the good work! :octocat: 
",bahlo,2015-09-13 16:10:21
114,2014-11-10 12:16:45,"Okay, so I have this HTML document:

<S_CODE_TOKEN>

This looks like this when viewed in Safari:
![bildschirmfoto 2014-11-10 um 12 19 49](https://cloud.githubusercontent.com/assets/1725839/4975651/bd8f5e48-68db-11e4-9dae-929ef6156de4.png)

And like this when captured with nightmare:
![bildschirmfoto 2014-11-10 um 12 19 47](https://cloud.githubusercontent.com/assets/1725839/4975657/c53bf110-68db-11e4-8112-c1382a907f5a.png)
",bahlo,2015-09-13 16:10:21
114,2014-11-10 12:38:37,"Looks like it's a Phantomjs issue:
https://github.com/ariya/phantomjs/search?q=web+fonts&type=Issues

Maybe give this binary a try:
http://arunoda.me/blog/phantomjs-webfonts-build.html
",johntitus,2015-09-13 16:10:21
114,2015-09-13 16:10:21,"just retested this in `2.x` based on electron, and the font now renders correctly :)

![font-rendering](https://cloud.githubusercontent.com/assets/658545/9837539/3120051c-59f7-11e5-9eb4-ad615a32769f.png)
",reinpk,2015-09-13 16:10:21
114,2015-10-09 15:11:32,"Thanks @reinpk :+1: 
",brunowego,2015-09-13 16:10:21
113,2014-11-10 08:20:02,"We're seeing a wide variety of use-cases, would love to hear what you've been using it for, thanks!
",reinpk,2015-09-13 16:11:34
113,2014-11-14 10:48:28,"Hey!
We're about to start using Nightmare to test our open source web-ide for programming lessons at Hexlet https://github.com/Hexlet/hexlet-ide. We run a virtual machine for each user and give them web-ide with terminal to write code and complete exercises. 

The only issue we might have is phantom js not being very good when it comes to web sockets (which we use to make RPC calls).
",freetonik,2015-09-13 16:11:34
113,2014-11-29 15:20:08,"Actually, we (Rodati.com) are using Nightmare as part of our internal platform of functional/integration testing. In the past, we used casperjs, but the poor integration with nodejs forced us to migrate to another library. 
For now, Nightmare is working OK with our platform, but, we are experimenting some problems with the limited API exposed by the library (compared to casperjs) and the difficulty of debug Nightmare if the browser have a problem with a page (specially using `evaluate`). So, for that, we are thinking test another alternatives like `node-horseman` or our fork of Nightmare.
Anyway, congrats for the great work!
",leandono,2015-09-13 16:11:34
113,2014-11-29 18:47:37,"@dzignus what are the specific parts of the API you're missing?
",reinpk,2015-09-13 16:11:34
113,2014-11-29 20:30:37,"For example:
- The form methods/shortcuts: [fill()](http://casperjs.readthedocs.org/en/latest/modules/casper.html#fill), [fillSelectors()](http://casperjs.readthedocs.org/en/latest/modules/casper.html#fillselectors)
- The getters: [getFormValues()](http://casperjs.readthedocs.org/en/latest/modules/casper.html#getformvalues), [getHTML()](http://casperjs.readthedocs.org/en/latest/modules/casper.html#gethtml), etc
- The [clientutils](http://casperjs.readthedocs.org/en/latest/modules/clientutils.html#clientutils-prototype) module

I know that these methods can be simulated using `evaluate`/chaining low level methods (like click(), type(), etc), but the consecuencies are (in the first case) a overuse of `evaluate`, spending a lot of time debugging if something is not working properly or (in the second case) fragile or unmaintainable code.
",leandono,2015-09-13 16:11:34
113,2014-11-29 22:51:42,"@dzignus if you need all the CasperJS API, the best way will be to use ... CasperJS.

Anyway, I think nightmare can provide more plugins, inspirated by CasperJS API.
",mickaelandrieu,2015-09-13 16:11:34
113,2014-11-29 23:04:47,"Yep, that's the point, my opinion is that many people are using Nightmare as a replace of casperjs, for that many are demanding features like my example of above.
",leandono,2015-09-13 16:11:34
113,2014-12-30 15:56:56,"I started a website crawler to retrieve data from sites that don't have any public api. 
As its depedencies are really limited, there is no problem to use it in web-ide (as cloud9 for exemple)
",oinant,2015-09-13 16:11:34
113,2015-07-13 03:15:57,"I've just started to use Nightmare to write automated browser tests, mainly because the API is a lot nicer to use than Selenium's for node.
I'm not altogether sure of a solution, but I've also run into problems where I'm not getting the data back I expect from the website under test, and have not been able to extract enough information to work out why.  
I need to fiddle with it some more; I'm prepared to persist because it's such a graceful API, but if we're going to get Nightmare.js to excel in this area it needs more complete docs and examples.
",JonForest,2015-09-13 16:11:34
113,2015-07-13 12:09:07,"I've been using it to automate to logging in to vendor sites to grab open order reports and it's been quite nice.
",rclai,2015-09-13 16:11:34
113,2015-09-13 16:11:33,"FYI we just released `2.x` which seems to fix a lot of problems by migrating from phantomjs to electron under the hood
",reinpk,2015-09-13 16:11:34
113,2016-10-12 08:46:08,"We at [fund kis](https://fundkis.com) use it to render high quality pdf documents. we used phantomjs for that but since you switched to electron, we migrated to use nightmare. It also simplified our code. Thanks for that but please keep in mind this rendering usage...
",fundkis,2015-09-13 16:11:34
112,2014-11-10 02:19:35,"in reference to #108
",reinpk,2014-11-10 02:22:19
111,2014-11-09 23:57:02,,reinpk,2014-11-10 00:00:36
110,2014-11-09 23:34:05,"allowing multiple nightmares to run simultaneously, heh
",reinpk,2014-11-09 23:44:47
109,2014-11-09 23:00:15,"@reinpk :)
",sperand-io,2015-01-26 00:58:53
109,2014-11-09 23:00:52,"shoot. passing locally. i'll see whats up with the ""should type and click"" test this evening and see if we can get all those tests passing
",sperand-io,2015-01-26 00:58:53
109,2014-11-09 23:45:35,"hey i think that was a circleci issue, can you rebase to master to pick up a few circleci updates and then those tests should pass
",reinpk,2015-01-26 00:58:53
109,2014-11-10 02:22:49,"rebased but still an issue there :)
",reinpk,2015-01-26 00:58:53
109,2014-11-10 04:46:14,"weird! i'll bug you about it tomorrow.

![](https://cldup.com/vMowro9lHB.png)
",sperand-io,2015-01-26 00:58:53
109,2014-12-01 10:39:47,"Any news on select / check? Temporary solution for that?
",kytwb,2015-01-26 00:58:53
109,2014-12-01 15:06:28,"This branch seems to work fine for me. I think the errors are from other tests in the suite as I get errors on `make test` with the master branch too. Also if you comment out all of the other tests and just leave the check and select test, it passes fine. I'd love to see this get merged soon.
",abstracthat,2015-01-26 00:58:53
109,2014-12-10 05:51:52,"@reinpk @sperand-io ?
",kytwb,2015-01-26 00:58:53
109,2015-01-26 00:58:52,"sorry for the delay! this looks good and just rebased it, merging now
",reinpk,2015-01-26 00:58:53
108,2014-11-09 10:42:00,"<S_CODE_TOKEN>

the result come out with an error:

TypeError: Cannot read property 'should' of null
    at  ****test\test.js:14:24

Did I miss something? 
",ybak,2014-11-10 00:00:37
108,2014-11-10 00:01:30,"ah, the function was failing for non-existent elements, fixed in nightmare@1.6.4 thanks!
",reinpk,2014-11-10 00:00:37
108,2014-11-10 01:57:39,"hi, reinpk, thanks for your great work. 

About this issue, what I mean is the second click not work here:
 ""click('div#submit > button')""

The process should be:
 ""https://www.yahoo.com/"" 
-(click login)-> 
""https://login.yahoo.com"" 
-(login sucess)->
""https://www.yahoo.com/""

But the login form submit not work here,  is there something wrong with my code?
",ybak,2014-11-10 00:00:37
108,2014-11-10 01:59:39,"not sure about the code there specifically for the click not scripting correctly... the fix on 1.6.4 should prevent that TypeError uncaught exception. i don't have a yahoo account to test with, sorry!
",reinpk,2014-11-10 00:00:37
108,2014-11-10 02:13:08,"Yahoo login test case is not the only one failed, 
the login process test case for my website failed too.  
So I think maybe there is a bug in nightmare when navigate through multiple pages by click or submit.
",ybak,2014-11-10 00:00:37
108,2014-11-10 02:21:35,"added a test just to be sure: https://github.com/segmentio/nightmare/pull/112/files hope that example helps but it seems to work for me
",reinpk,2014-11-10 00:00:37
108,2014-11-10 03:33:55,"I just upgrated nightmare  and run mocha tests. 
And the test failed  with a timeout.

And I see the CI build failed too.
https://circleci.com/gh/segmentio/nightmare/168

But the tests work for you, maybe I should upgrade phtomjs and test again.

Thanks.
",ybak,2014-11-10 00:00:37
108,2014-11-10 07:09:32,"yeah, that's a different test failing for some weird timeout issue on CI, unrelated
",reinpk,2014-11-10 00:00:37
107,2014-11-08 16:15:16,"I tried to add the method myself but i was unsuccessful
.This is the code that I tried to implement in the actions.js file:
exports.viewRect = function(clipRect, done){
  this.page.set('clipRect', clipRect , done);
  console.log(this.page)
};
http://phantomjs.org/api/webpage/property/clip-rect.html as reference .
The object that was passed to the method should look like this:
{
    top: clipRect.top,
    left: clipRect.left,
    width: clipRect.width,
    height: clipRect.height
    };

I'm trying to take a screenshot of a dom element in the page.
I don't know how to access the phantomjs instance so I can add other methods that are available in phantomjs.
",MakoMakox,2015-09-13 16:29:52
107,2014-11-10 01:23:20,"two questions to answer here:
- can we set clipRect just before a `.screenshot()` or does it have to be set at the beginning of a sequence?
- this would be equivalent to cropping the screenshow in post-processing, yeah?
",reinpk,2015-09-13 16:29:52
107,2014-11-10 09:23:00,"1. It can be set before a .screenshot() , it's not necessary to have it set at the beginning of a sequence.
2. Yes, exactly. Cropping the image to a certain dom element ""size"" .
   It can be used in many cases. I my case  I want to use this to extract an CAPTCHA dom element (the element doesn't contain an image) in the same browser instance. What I did to work around this problem was to create a macro to resize the screenshot in paint :)) export it in an exe and use node's child_process to execute it. But it adds around 30 sec to the process so it's inconvenient.
   If you could give access to the phantom's 'current' instance too that would be great.
   Thanks for such a fast response to my request.

You can take a look here for inspiration (if needed :+1: ) : https://github.com/smallmultiples/grunt-screenshot-element .
",MakoMakox,2015-09-13 16:29:52
107,2014-11-10 11:08:08,"Hey! 

I needed this too, so I just forked it and built it. I'm planning to create pull request but am still figuring out how to test the `clipRect` method in my spare time. 

If you want to build it yourself, @reinpk, you may find this helpful: https://github.com/bahlo/nightmare/compare/zoom-factor
",bahlo,2015-09-13 16:29:52
107,2014-11-11 01:03:18,"Suggest we modify `.screenshot(path)` to `.screenshot(path, [selector|boundingRectangle])`.

Inside of `.screenshot`, we could use `clipRect` to resize the viewport before actually rendering, then return the viewport size to whatever it was before. I think something like this would be nice:

<S_CODE_TOKEN>

`boundingRectangle` would be the normal js `{top:50, left:200, width:75, height:200}` sort of deal, for when the api user wants to capture something that can't be defined by a simple selector.

I can work on this, if it's the direction desired and no one else wants to.
",johntitus,2015-09-13 16:29:52
107,2014-11-11 09:41:56,"@johntitus The thing is, that we may need to crop again after zooming. So we'd need at least an own option (maybe both?)

As I said, my fork is almost done. I just need to test the `clipRect` method.
",bahlo,2015-09-13 16:29:52
107,2014-11-11 13:33:45,"@bahlo I don't see what's the problem with testing the clipRect method.
use .getBoundingClientRect() to get the rect options from an dom element.
ex: document.querySelector('selector').getBoundingClientRect() .

Or maybe I didn't understood correctly why you can't finish your fork.
Let me know. Thanks.
",MakoMakox,2015-09-13 16:29:52
107,2014-11-11 13:57:56,"There is no problem, I just hadn't had the time yet. I will have time in a few hours though, expect a PR today.
But thanks for the tip.
",bahlo,2015-09-13 16:29:52
107,2014-11-11 14:09:37,"@bahlo Oh great can't wait to use it xoxo. Sorry if I sounded rude and for my impatience . 
",MakoMakox,2015-09-13 16:29:52
107,2014-11-12 00:02:40,"Okay, I didn't have much time but finished the tests. The thing is, they are failing (because Yahoo displays a different title in Germany). I need to fix that first, so if anyone is in a hurry and wants it done asap, feel free to fork my fork and do it themselves.

Another question: How do we check if we zoomed correctly?
",bahlo,2015-09-13 16:29:52
107,2014-11-12 10:27:34,"It didn't work as I wanted too but I made my own version without zoomFactor.

<S_CODE_TOKEN>

Tested like this:

<S_CODE_TOKEN>

The method should be called captureDomElement :) . 
Let me know what you think :+1: 
",MakoMakox,2015-09-13 16:29:52
107,2014-11-12 10:50:29,"I made it even better with clipReact on 'selector' just like you use it on phantomjs.
Code:

<S_CODE_TOKEN>

Tested like this:

<S_CODE_TOKEN>
",MakoMakox,2015-09-13 16:29:52
107,2015-01-07 23:43:05,"... or just take the CasperJS's one ? Why re-invent the wheel ?
[capture()](https://github.com/n1k0/casperjs/blob/master/modules/casper.js#L294) and [captureSelector()](https://github.com/n1k0/casperjs/blob/master/modules/casper.js#L372)
",mickaelandrieu,2015-09-13 16:29:52
107,2015-09-13 16:29:52,"ok, added in `2.0.2` support for the `clip` parameter: https://github.com/segmentio/nightmare#screenshotpath-clip

open to a pull request for supporting taking a screenshot of a specific dom element
",reinpk,2015-09-13 16:29:52
106,2014-11-08 01:28:08,"How do I pass custom accept language headers to Nightmare?
I'm trying to scrape my site X times testing X different locales but need to pass in custom HTTP headers.
",pdehaan,2015-09-13 16:31:21
106,2014-11-10 01:23:49,"can you include a few example headers here? thanks
",reinpk,2015-09-13 16:31:21
106,2014-11-10 01:33:08,"My main use case is that we determine which locale we should serve based on an `Accept-Language` header.

<S_CODE_TOKEN>
",pdehaan,2015-09-13 16:31:21
106,2014-12-03 15:56:19,"I'd also like to pass in a custom user agent, how could I do this?
",sean-hill,2015-09-13 16:31:21
106,2014-12-03 17:02:39,"From the documentation
https://github.com/segmentio/nightmare#useragentuseragent

Here is an untested example

var Nightmare = require('nightmare');
var nightmare = new Nightmare();
nightmare
 .useragent('Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like
Gecko) Chrome/41.0.2228.0 Safari/537.36')
 .goto('http://mywebsite');

Hope this helps,
Tim

On 3 December 2014 at 15:56, sean-hill notifications@github.com wrote:

> I'd also like to pass in a custom user agent, how could I do this?
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/segmentio/nightmare/issues/106#issuecomment-65432644.
",tefla,2015-09-13 16:31:21
106,2014-12-03 17:09:57,"That was perfect thank you!
",sean-hill,2015-09-13 16:31:21
106,2015-09-13 16:31:21,"unfortunately this doesn't appear to be possible upstream in electron https://github.com/atom/electron/blob/master/docs/api/browser-window.md

but if there is a way i'm missing, happy to re-open and implement
",reinpk,2015-09-13 16:31:21
105,2014-11-06 16:05:45,,axelardu,2014-11-09 06:07:44
105,2014-11-06 16:24:29,"haha, what?
",reinpk,2014-11-09 06:07:44
104,2014-11-05 21:22:22,"I'm trying to create multiple instances of Nightmare and finding that only one instance gets to the `run()` method and then the program exits.  Here's a sample file and output: https://gist.github.com/gwintrob/0dda54b7017de7213e68.  Basically, I'm trying to scrape 2 sites ('http://www.nytimes.com/' and 'http://www.gnu.org/') using `nightmare1` and `nightmare2`, but I only see results from `nightmare2`.

Has anyone else seen this problem?  Thanks for your help!

Note: This issue initially came up when using Nightmare 1.6.0 with async 0.9.0 (https://github.com/caolan/async).  There's an example at https://gist.github.com/gwintrob/67e44b851d435509097b, but the underlying issue seems to come from using multiple Nightmare instances.
",gwintrob,2014-11-11 06:44:40
104,2014-11-07 15:54:59,"I also have an problem with `async`, maybe they're somewhat related (if not, I'm happy to create a new issue).

My codes looks basically like this:

<S_CODE_TOKEN>

When I run this code for one url, everything works just fine, but as soon as I have two, I get the following error: `TypeError: Object #<Nightmare> has no method 'onTimeout'`

So I started debugging and logged `self` in the `wait()` function just before the error. I then get two objects, the first has a `onTimeout()` function, the second hasn't and throws an error.

I also noticed, they are using the same port which doesn't make sense to me since I'd imagine we need to create multiple phantom instances.

Using the newest versions `async 0.9.0` and `nightmare 1.6.0` as well.
",bahlo,2014-11-11 06:44:40
104,2014-11-09 01:38:19,"Don't have a stack trace for it , or a proper description ( yet ) , but experiencing the same issue when consuming 2 urls simultaneously. makes me very sad
",pdelanauze,2014-11-11 06:44:40
104,2014-11-09 23:24:02,"thanks guys i think it's a weird globals problem, investigating now.
",reinpk,2014-11-11 06:44:40
104,2014-11-09 23:25:11,"FWIW you can do `DEBUG=* node test.js` to get full debug output of all the internal logging. that shows a port conflict between the two phantomjs instances, which reveals the two are overwriting each others instances... solution on the way
",reinpk,2014-11-11 06:44:40
104,2014-11-09 23:46:55,"fix released with nightmare@1.6.3
",reinpk,2014-11-11 06:44:40
104,2014-11-10 00:18:17,"Thanks @reinpk.  You da boss! :thumbsup:
",gwintrob,2014-11-11 06:44:40
104,2014-11-10 22:03:39,"Hmm , having issues since 1.6.3. With a single Nightmare() instance, i can only do 1 .run() operation, the second .run() will result in EADDRINUSE .. Not sure about why , will hopefully write an isolated test case for this tonight, but it seems it's trying to create a new phantom instance (listening on the port provided in Nightmare constructor options ), but the old instance hasn't been fully discarded yet .. 

I've noticed a new .run() in 1.6.2 and prior actually increments the port, hence why this was not an issue before, no collisions really possible.
",pdelanauze,2014-11-11 06:44:40
104,2014-11-10 22:21:27,"Test here: 
https://github.com/segmentio/nightmare/pull/115 
",pdelanauze,2014-11-11 06:44:40
104,2014-11-11 00:38:39,"Not sure if this is the correct way to use nightmare actually .. Are Nightmare() instances meant to be re-usable ?

On another note , maybe this should go in another ticket since this one is already closed .. 
",pdelanauze,2014-11-11 06:44:40
104,2014-11-11 06:39:01,"yeah looks like there still needs to be a global port, getting a fix ready now
",reinpk,2014-11-11 06:44:40
104,2014-11-11 06:44:40,"fixed that test is passing now :) thanks @pdelanauze shipped with nightmare@1.6.5
",reinpk,2014-11-11 06:44:40
104,2014-11-11 17:58:56,"Awesome , but now if we provide a port in the options when constructing the nightmare instance , that test fails ..
",pdelanauze,2014-11-11 06:44:40
104,2014-11-11 18:09:41,"Also, i think we start at port 13200 , and increment on every `.run()` call . If my understanding is correct, this means we have 65535 - 13200 possible `.run()` calls in a single process .. Would it be worthwhile investigating if we can reuse the same port per Nightmare() instance ?
",pdelanauze,2014-11-11 06:44:40
103,2014-11-05 15:34:42,"Just FYI...
",NegaMorgan,2014-11-09 05:58:18
103,2014-11-09 05:58:18,"woops, thanks! fixed: https://circleci.com/gh/segmentio/nightmare
",reinpk,2014-11-09 05:58:18
102,2014-11-04 23:51:09,"I'm running Nightmare through grunt-mocha-test with Chai assertion library.  This works great part of the time but if a test fails for some reason all subsequent tests will timeout.  Also, if the initial test fails, it seems to fail silently, and finish by timing out, rather than calling the `done` callback.  I know some of this behavior is mostly likely related to Mocha/Chai integration, but is there a teardown issue with the Phantom Instance potentially causing all subsequent tests to a failed test to timeout?

Here is the branch of my repo that I'm observing the problems in

https://github.com/optimizely/marketing-website/tree/dfoxpowell/nightmare-tests/__test__
",dtothefp,2014-11-29 18:48:34
102,2014-11-05 00:02:46,"![screen shot 2014-11-04 at 7 02 56 pm](https://cloud.githubusercontent.com/assets/4656726/4910395/1217d410-647f-11e4-86a4-357a63cc0b11.png)
",dtothefp,2014-11-29 18:48:34
102,2014-11-05 01:21:32,"From testing in the node-inspector I've found that when a chai assertion fails it somehow does not execute the done function below it and moves on.  Somehow this behavior is causing the callback function passed to Nightmare's .run method to not execute.  Without looking more through Nightmares code I don't know what repercussions this has, but it seems to be preventing mocha from executing any of the following async tests, therefore all tests after a failure are timing out.
",dtothefp,2014-11-29 18:48:34
102,2014-11-05 03:25:39,"I've discovered this behavior is that Chai and Should assertions throw errors, so unless those errors are caught, the callback passed to the Nightmare .run method will not execute.  Therefore, all subsequent Nightmare tests will not run.  Seems like alternatives would be to use jasmine-node which catches the exceptions http://www.collidingobjects.com/posts/jasmine_node_failures_explained, using try/catch blocks on all assertions, or somehow handling this within the Nightmare API.
",dtothefp,2014-11-29 18:48:34
102,2014-11-10 01:24:50,"could you include a small example showing how to reproduce this? thanks!
",reinpk,2014-11-29 18:48:34
102,2014-11-15 22:37:28,"@reinpk sorry for the delay.  Here is an example repo.  It actually doesn't demonstrate this behavior because something you have merged in recently has fixed the problem:

https://github.com/dtothefp/nightmare-timeout-test-example/tree/master

If you switch to an older version of Nightmare you will see the behavior I'm talking about:

If you previously ran `npm i` be sure to 

<S_CODE_TOKEN>

https://github.com/dtothefp/nightmare-timeout-test-example/tree/dfoxpowell/nightmare-v1.6.0

This is also referenced here:
https://github.com/segmentio/nightmare/issues/120
",dtothefp,2014-11-29 18:48:34
102,2014-11-29 18:48:34,"appears to be fixed when i run the tests as well, let me know if i should reopen.
",reinpk,2014-11-29 18:48:34
101,2014-11-04 23:01:06,"This PR addresses issue https://github.com/segmentio/nightmare/issues/92 and PR https://github.com/segmentio/nightmare/pull/94.

@kevva @reinpk 

I agree that it would be nice to specify the phantom binary path rather than globally installing Phantom via Homebrew or some other method.  @kevva I tested out your solution and believe I found a problem in that the `path` property in the `options` should actually be `binary`, which corresponds to the same property in the node-phantom module.  

Therefore, you would

`var phantomPath = require('phantomjs').path;`

and instantiate nightmare the same way

`new Nightmare({phantomPath: phantomPath})`

@kevva if I use your solution I will continuously get the ""phantomjs-node: You don't have 'phantomjs' installed"" error message from node-phantom.
",dtothefp,2014-11-09 06:04:44
101,2014-11-04 23:10:42,"The path shouldn't be the full path to the binary, just the dirname. So, `path.dirname(require('phantomjs').path)` should work. https://github.com/sgentle/phantomjs-node/blob/master/phantom.js#L83-L88.

But yeah, I agree. Using the full path might be better.
",kevva,2014-11-09 06:04:44
101,2014-11-05 01:18:41,"@kevva you know what the problem is, when I installed Nightmare, my version of node-phantom was 0.6.6.  Therefore, that line with path isn't in my version, must be a new update.  Think it has to do with Nightmare's package.json having a tilde instead of a carrot, so if we want this PR to work for all users either we should send a PR fixing the package.json or merge this PR http://stackoverflow.com/questions/22343224/difference-between-tilde-and-caret-in-package-json

![screen shot 2014-11-04 at 8 17 14 pm](https://cloud.githubusercontent.com/assets/4656726/4911150/677c2fdc-6489-11e4-9d1b-60aa56fa4929.png)
",dtothefp,2014-11-09 06:04:44
101,2014-11-09 06:06:13,"prefer bumping the phantom version if that fixes the issue :) thanks so much for investigating. the bumped phantom dep shipped with 1.6.1

let me know if you're still seeing issues here
",reinpk,2014-11-09 06:04:44
100,2014-11-03 16:56:50,"Fixes #81.
",johntitus,2014-11-09 06:18:00
100,2014-11-09 06:17:58,"nice this is great! thanks john
",reinpk,2014-11-09 06:18:00
100,2014-11-09 06:22:19,"released with nightmare@1.6.2
",reinpk,2014-11-09 06:18:00
99,2014-11-03 16:04:47,"I added style check.
",Hermanya,2015-09-20 21:24:51
99,2014-11-09 06:27:18,"happy to merge this in if you can include a test as well :) thanks!
",reinpk,2015-09-20 21:24:51
99,2014-11-10 02:02:47,"sorry had to make some other improvements to `.visible()` as well to catch non-existent `elem` --- could you rebase?
",reinpk,2015-09-20 21:24:51
99,2014-11-11 17:01:18,"@reinpk I don't think that wikipedia has transparent or `visibility: hidden;` elements on the page, so I'm not sure how to test these cases. Also, yahoo supports i18n, so when I go to yahoo from Canada I get 'Yahoo Canada' in the title, and because of that some tests fail. 
It would be nice to have less 'real-world' testing environment. Some local page would work. It would also speed up testing (it takes forever with my current internet connection).
",Hermanya,2015-09-20 21:24:51
99,2015-09-20 21:24:51,"potentially interested in pulling this into `2.x` (we have a local testing now), closing but happy to re-open if you want to mirate these changes to local testing + electron!
",reinpk,2015-09-20 21:24:51
98,2014-11-03 10:31:29,"I've got a site where I have to confirm a request. This is done via JavaScript confirm method.

<S_CODE_TOKEN>

I can see the message on the console but I'm stuck on the page with the confirmation and the request is not send properly.
[Phatom API](https://github.com/ariya/phantomjs/wiki/API-Reference-WebPage#webpage-onConfirm) says I just have to return `true`.
",soupdiver,2015-10-25 20:12:31
98,2014-11-10 01:57:06,"filed an issue with sgentle/phantomjs-node since it seems like the callback return value isn't getting passed through to phantomjs
",reinpk,2015-10-25 20:12:31
98,2015-10-25 20:12:31,"closing now that we've moved to electron over phantomjs
",reinpk,2015-10-25 20:12:31
97,2014-11-02 17:26:23,"cleaned up version of #78 
",reinpk,2014-11-02 17:49:34
96,2014-11-02 15:24:34,"I'm creating a NightMare instance and passing in an options object with proxy: '<ip>:<port>' and proxyType: 'http'  . the problem is that no proxy is being used when i run the script.
",Mbosco,2014-11-02 15:56:23
96,2014-11-02 15:56:15,"Sorry, just realised i had an older version, updating fixed this.
",Mbosco,2014-11-02 15:56:23
96,2014-11-02 17:04:24,"no worries glad it's working
",reinpk,2014-11-02 15:56:23
95,2014-11-01 23:51:41,"split out from the other changes in #78, thanks @johntitus
",reinpk,2014-11-02 00:39:22
94,2014-10-31 21:01:35,"Fixes #92.
",kevva,2014-11-02 17:06:47
94,2014-11-02 00:49:58,"cool idea, makes sense to me, but the PR is incomplete no?
",reinpk,2014-11-02 17:06:47
94,2014-11-02 00:52:53,"What's more to be added? This only adds the ability to specify a custom path to PhantomJS in the constructor. [phantom](https://github.com/sgentle/phantomjs-node) accepts a custom path using the `path` option.

We could use the https://github.com/Medium/phantomjs module to provide a binary with this module. That would remove the need for the user to install PhantomJS manually.
",kevva,2014-11-02 17:06:47
94,2014-11-02 01:36:05,"ah, derp, misread the variable name `args`. yep will test this out soon, thanks!
",reinpk,2014-11-02 17:06:47
94,2014-11-02 17:11:10,"released with 1.5.3, thanks!
",reinpk,2014-11-02 17:06:47
93,2014-10-30 17:04:40,"Detect is the page loading failed by function Nightmare.hasError(). Check server status code by Nightmare.getStatusCode()
",seagullua,2014-11-09 06:07:22
93,2014-11-02 17:56:02,"can you use the existing `.on()` method? https://github.com/segmentio/nightmare#onevent-callback
",reinpk,2014-11-09 06:07:22
93,2014-11-09 06:07:22,"closing for now until we have more info on the use case! seems like `.on()` should work
",reinpk,2014-11-09 06:07:22
92,2014-10-30 12:23:19,"I want to use Nightmare on a cloud service however I can't because this module needs Phantomjs binary to already be installed on the system(npm install phantomjs).

This module uses Phantom module which allow to pass a path to a binary file.

So I suggest you implement one of the following:
- Install phantomjs module and use it's binary file 
  
  <pre><code>
  // combine flags, options and callback into args
  var args = flags;
  args.push({
    port: this.options.port,
    dnodeOpts: dnodeOpts,
    binary : require('pantomjs').path
  });
  </code></pre>
- Allow the option from the outside to determine the binary path
  
  <pre><code>
  // combine flags, options and callback into args
  var args = flags;
  args.push({
    port: this.options.port,
    dnodeOpts: dnodeOpts,
    binary : this.options.binary
  });
  </code></pre>
",EDtoro,2014-11-02 17:06:47
92,2014-11-04 23:10:25,"@kevva @reinpk  this doesn't work.  See https://github.com/segmentio/nightmare/pull/101

phantomPath: specify a different custom path to PhantomJS, default not set.
",dtothefp,2014-11-02 17:06:47
92,2014-11-04 23:13:14,"Yes, it does. But not in the way you might think it does. See my answer in your PR.
",kevva,2014-11-02 17:06:47
91,2014-10-30 08:46:18,"This is the code that I used:

code:
var options =  { proxy:'proxyip:proxyport', proxyType:'socks5' };
var Nightmare = require('nightmare');
var nightmare = new Nightmare(options);

nightmare
  .goto('http://www.whatismyip.com/')
  .viewport(500 , 500)
 .screenshot('hasdasda.png')
  .evaluate(function () {
  //  return document;
    return document.getElementsByClassName('the-ip')[0].innerText;
  }, function (res) {
    console.log(res);
  })
  .run(function( err, nightmare){
    console.log(""done"");
  });

output:
phantom stdout: TypeError: 'undefined' is not an object (evaluating 'document.getElementsByClassName('the-ip')[0].innerText')
null
done
phantom stdout:   phantomjs://webpage.evaluate():3
  phantomjs://webpage.evaluate():6
  phantomjs://webpage.evaluate():6

If I don't use the options object it returns my ip perfectly:
output:
phantom stdout: Error: Cannot find a responsive size for a container of width=0p
x and data-ad-format=auto
phantom stdout:   http://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js:
29
  http://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js:25
  http://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js:34
  http://www.whatismyip.com/:376

my.my.ip.0
done

Another Question that i have is : how can I specify the screenshot path into a folder is it .screenshot('/img/hasdasda.png') ? because it doesn't work :(.

Thank you for your time guys and for this awesome wrapper. 
",MakoMakox,2014-10-30 09:08:56
91,2014-10-30 09:08:55,"Yea, apparently the proxy ip's that i used to test it didn't work and that was the problem. #facepalm  
",MakoMakox,2014-10-30 09:08:56
90,2014-10-27 22:23:27,"This issue has to do with the previous one that I made last night, but this problem I'm having is different.

I'm really not sure if this is due to my not understanding loops or some other logic in node/javascript, or maybe from a possible bug.

What I'm trying to do is start a nightmare up, and immediately login.  After the login I need it to iterate through the same code using different values, then finally at the end run the nightmare in that manner.

What happens is it works perfectly until about the 4th, 5th or 6th iteration and just quits unexpectedly with no error or feedback as to why.

Here's my code, which I think is fairly simple considering, but has a lot of lines to it already.

<S_CODE_TOKEN>
",woohoowebs,2014-11-11 03:45:47
90,2014-11-04 08:00:17,"Could you factor your code out into plugins (examples on http://www.nightmarejs.org/) ? 

I think the organization will help with debug, and you can think about smaller chunks of this logic at a time. Specifically, having a single plugin handle one card, and then building on that abstraction with a plugin that handles multiple cards (simply by attaching multiple uses of the first plugin, if preferable). 

Also, to speak a little more to the actual problem -- could you reproduce the verbose log (just the part close to where it fails)? 

Also, I would recommend using sync node functions, just to eliminate that as a point of complexity (I don't think there's anything wrong with the calls you have right now, but just in case...)
",t3hmrman,2014-11-11 03:45:47
90,2014-11-11 03:45:47,"Actually when I went to refactor my code into plugins, I somehow magically solved the problem.  I already had thought this could help before, but was being lazy.  Good enough for me!  Thank you.
",woohoowebs,2014-11-11 03:45:47
90,2014-11-11 17:42:08,"Awesome, glad it was fixed! yeah the plugins are an awesome feature
",t3hmrman,2014-11-11 03:45:47
89,2014-10-27 07:52:55,"I'm struggling with this one because it seems like it should just work.

When I've got things set up like so.... it should pass in arg1 and arg2 into the fn on the evaluate when it calls it right?  Well, it doesn't seem to.  In addition it seems to also throw errors that don't make sense sometimes.

The return statement is where I thought I could return whatever I wanted as a result, but when I have the callback called with res (for the result (what was returned from fn), sometimes it gives me some errors, and sometimes it just does nothing.

[pseudo-code...sort of]

<S_CODE_TOKEN>
",woohoowebs,2014-10-27 21:53:16
89,2014-10-27 07:57:09,"So initially I started this issue because I couldn't get the global variables into the scope of the evaluate's fn.  I found that I can avoid the whole args array and just do it this way:

<S_CODE_TOKEN>

However, there still seems to be some errors sometimes... generally when I try to use the callback and send it something with the return statement from the fn.  Maybe I just don't understand what the callback is expecting?

Any way, it seems like the args array is totally useless and broken if you ask me.
",woohoowebs,2014-10-27 21:53:16
89,2014-10-27 12:42:56,"I think you've just got the syntax wrong for evaluate. It should be:

<S_CODE_TOKEN>

That should log out a 3.
",johntitus,2014-10-27 21:53:16
89,2014-10-27 21:53:16,"OHHH.  That actually explains a lot!

Now I understand so much more about it.  Why it would usually never console.log or console.dir in my node shell within that browser scope...because it was doing it in the headless browser.  Then what I passed back to the cb function is the result of what I returned from that.

The syntax of it all didn't quite come to me this way either based on the API docs and no examples, especially for the passing in of my arguments.  After trying it that makes perfect sense.

However now I have a new problem, I guess it would be appropriate to close this one and start a new issue...
",woohoowebs,2014-10-27 21:53:16
89,2015-02-10 00:51:14,"It's very lucky that this GitHub issue exists, because without this thread I would never have understood that. I suggest we add this explanation to the main documentation.
",jfrumar,2014-10-27 21:53:16
89,2015-02-10 02:13:20,"jfrumar I agree with you.  I actually feel that the documentation while enough to get doing some really cool things is still not what it could be.  I'm glad that I could help by bringing up the issue and then getting johntitus to clear it up.

This is really a great module, and I enjoy using it very much, but there's quite a bit I'm still not getting.  I hope more can be done for the docs and examples.  I find this to be so awesomely useful.
",woohoowebs,2014-10-27 21:53:16
89,2015-02-10 02:20:14,"this is very useful
",hyq1860,2014-10-27 21:53:16
89,2015-02-12 16:38:58,"thanks all, agree those docs were confusing, updated based on this thread:
https://github.com/segmentio/nightmare/blob/master/Readme.md#evaluatefn-cb-arg1-arg2
",reinpk,2014-10-27 21:53:16
89,2015-05-17 08:19:49,"I'm able to pass strings like the example above.  But for some reason it fails on passing in functions.  Can't figure out what I could be doing wrong.  Any advice would be really appreciated.

<S_CODE_TOKEN>
",seethroughtrees,2014-10-27 21:53:16
89,2015-05-17 08:58:44,"Okay, in case anyone else gets stuck wondering why they can't pass functions or objects into the arguments of .evaluate(), its because all the values are serialized before being sent over. 

Great explanation here: https://stackoverflow.com/questions/12222856/passing-arguments-to-anonymous-function-inside-page-includejs-and-page-evaluat
",seethroughtrees,2014-10-27 21:53:16
88,2014-10-27 05:39:08,"I'm just writing to ask if there is a simple way I can accomplish this.

I want to know if I can run a part of a nightmare, then stop and do whatever I like...say start a for loop, and then within that loop start up some more of the nightmare where the nightmare left off.  As in, still logged in that is.  Then I'd run a little more chunk of nightmare code, and then upon the next iteration begin some more nightmare code....all on the same login.

I'll try and write some psuedo-code to help explain it.

<S_CODE_TOKEN>
",woohoowebs,2014-10-27 06:27:18
88,2014-10-27 06:27:18,"I actually figured it out on my own, and I am quite proud if I do say so myself.

Please note that I took no actual elements or selectors from Google's site...it's all sort of just made up, but you should get the idea.

So basically all I did here was eliminate the run()'s until the very end after everything.  I invoked the myScrape nightmare by name within the for loop on the first nightmare command, and then continued as normal again....then ending that line/command with the semi-colon at the end of the trail, then run() at the end afterward.

<S_CODE_TOKEN>
",woohoowebs,2014-10-27 06:27:18
88,2015-07-17 20:42:02,"This helped me. Thanks :+1: 
",shri3k,2014-10-27 06:27:18
87,2014-10-27 02:48:28,"cc @woohoowebs https://developer.mozilla.org/en-US/docs/Web/API/event.initEvent
",reinpk,2014-10-27 02:52:37
86,2014-10-27 01:28:54,"I'm trying to work with nightmare in an ""after-login"" scenario (already had nightmare do the logging in and that part works great).  Only on the page that comes up after the login, it's utilizing some kind of client-side javascript to call back to the server where it checks the submitted form data and then updates the page with the results.

In an actual web browser such as Chrome the page actually does this; however in my nightmare script, the moment I tell it to click the submit button, it just resets the form or something...I end up with nothing but what I started with before entering the data.  My screenshots literally show empty form, then typed-in(filled) form, then empty form again after the click.

Am I going about this all wrong?  Or is there a real problem here?

Thanks.
",woohoowebs,2014-10-27 02:52:38
86,2014-10-27 01:32:45,"hmmm, i'm not entirely sure without seeing the code and running it myself, but one of the issues i've run into is the difference between (1) a human saying ""the page has loaded"" and (2) a computer saying ""the page has loaded""... i'd make sure you're clicking the submit button after the full page is truly loaded, either with an additional `.wait(ms)` or `.wait(selector)` after `.goto(url)`... it's likely that the page is ""done loading"" by html onload standards, but that additional javascript needs to load and then override the native onsubmit handler for the form. hope that helps!
",reinpk,2014-10-27 02:52:38
86,2014-10-27 01:47:48,"I've already tried that...tried it all day long.  Banging my head against this thing.  Here is my code, slightly modified so as to not leak anything private.

<S_CODE_TOKEN>
",woohoowebs,2014-10-27 02:52:38
86,2014-10-27 02:35:01,"hmmm, one strategy would be to look at the outbound requests:

<S_CODE_TOKEN>

this produces a nice stream of what requests are being made. based on that it looks like there may be a javascript validation step on the page, and when the pin is invalid it seems to just clear it... could you post your gift card pin obfuscated but still regex-happy so that i can test a request to the server? don't have any apple gift cards lying around...
",reinpk,2014-10-27 02:52:38
86,2014-10-27 02:37:27,"could be something funky with ssl as well:

![](https://cldup.com/3J3y64hk-0-3000x3000.png)
",reinpk,2014-10-27 02:52:38
86,2014-10-27 02:38:44,"nvm found the client-side regex validator
",reinpk,2014-10-27 02:52:38
86,2014-10-27 02:46:56,"ahhhhh, running the nightmare code in the browser directly:
https://github.com/segmentio/nightmare/blob/master/lib/actions.js#L189-L192

you get the same behavior. turns out that the third parameter to `.initEvent(type, bubbles, cancelable)` is preventing Apple from handling the AJAX form as they want to. so it's submitting the url.

i'll ship this fix with 1.5.1 momentarily
",reinpk,2014-10-27 02:52:38
86,2014-10-27 02:56:21,"released as 1.5.1, thanks so much for bringing this up!
",reinpk,2014-10-27 02:52:38
86,2014-10-27 02:58:17,"Glad I could point out something that needed fixed.  Very happy to contribute, and that it's not just me haha.
",woohoowebs,2014-10-27 02:52:38
86,2014-10-27 03:00:22,"Also, when will the newest version be available for update by npm?
",woohoowebs,2014-10-27 02:52:38
86,2014-10-27 03:01:49,"https://www.npmjs.org/package/nightmare 5 minutes ago :)
",reinpk,2014-10-27 02:52:38
86,2014-10-27 03:09:23,"Thank you SO MUCH by the way.  That did fix my problem.  Absolutely perfect.
",woohoowebs,2014-10-27 02:52:38
86,2014-10-27 03:10:37,"sorry i didn't read the docs carefully the first time! cheers.
",reinpk,2014-10-27 02:52:38
85,2014-10-24 15:40:15,"Could you please add remote-debugger-port and remote-debugger-autorun?

I tried to hack this in myself,

index.js:
  if (this.options.debuggerPort !== null) {
    flags.push('--remote-debugger-port='+this.options.debuggerPort);
    flags.push('--remote-debugger-autorun=yes');
  }

But it didn't work, the console complained with the following:

phantom stdout: TypeError: 'undefined' is not a function (evaluating 'core_require('webpage')')

  about:blank:5433
  about:blank:5642
  about:blank:179
  about:blank:25
  about:blank:5645
  :1
",sneakywombat,2015-09-13 16:14:13
85,2014-11-09 06:14:32,"hmmm, seems like this may be an underlying issue with phantom:
http://stackoverflow.com/questions/13490324/running-phantomjs-node-js-together-on-ubuntu

but i'm seeing the same error with phantomjs 1.9.7.... so maybe this is an issue that just isn't being addressed until 2.0
",reinpk,2015-09-13 16:14:13
85,2014-11-09 06:15:13,"leaving similar code on a branch here until we have more info:
https://github.com/segmentio/nightmare/tree/add/debugger
",reinpk,2015-09-13 16:14:13
85,2015-09-13 16:14:13,"in `2.x` we've moved from phantomjs to electron, which has fixed a bunch of weird issues. among other things, you can now pass in `{ show: true }` as a constructor argument to just show the window as things are happening.

<S_CODE_TOKEN>

hopefully this helps with debugging!
",reinpk,2015-09-13 16:14:13
84,2014-10-24 14:33:53,,Max93,2015-08-17 06:11:14
84,2015-08-17 06:11:14,"thanks @Max93! sorry i never got to this with v1... it looks like an interesting abstraction for other events... what events were you interested in? closing for now but may bring the idea into v2 with more info here. thanks!
",reinpk,2015-08-17 06:11:14
83,2014-10-23 23:30:33,"For example:

<S_CODE_TOKEN>

in evaluate i can access to 'A.my-link' element, but .click() not work.
nightmare.click() - use selector, and not support ...parentNode.querySelector()
",khmelevskii,2014-10-24 09:08:05
83,2014-10-24 09:07:59,"solution

<S_CODE_TOKEN>
",khmelevskii,2014-10-24 09:08:05
82,2014-10-23 19:14:32,"Updates Readme with on error description, and adds a test for it.
",johntitus,2014-11-02 00:40:07
82,2014-10-28 14:13:21,"The key is to add the handler BEFORE `goto()` (the same case as `viewport()`).
Please also add that to README.
",leesei,2014-11-02 00:40:07
82,2014-11-02 00:41:26,"@leesei added :)
",reinpk,2014-11-02 00:40:07
82,2014-11-02 09:00:51,"Thanks :wink:
",leesei,2014-11-02 00:40:07
81,2014-10-23 14:20:48,"Currently type just changes the value property of the element. This doesn't work with libraries that listen for key events. Therefore I suggest to use phantoms `page.sendEvent(""keypress"", keys)` for the implementation of `type()`. I unfortunately can't provide a pull request due to work restrictions.
",timjacobi,2014-11-09 06:18:00
81,2014-10-27 01:10:18,"I think timjacobi might be right.  Is there a workaround that I can use in the meantime?  Maybe something like:

<S_CODE_TOKEN>
",woohoowebs,2014-11-09 06:18:00
81,2014-10-27 10:05:38,"I'm not alone! Ractive/mustache combo does not cope with altered value properties and needs strictly key-events.  Isn't it possible to at least expose phantom's `.page`, as woohoowebs suggests, so it's easier to add on top of it? 
",ghost,2014-11-09 06:18:00
81,2014-10-28 18:26:19,"For now you could write a class that extends nightmare so you can add your own actions.
",timjacobi,2014-11-09 06:18:00
81,2014-10-28 21:33:31,"I've been working on a fork of nightmare, and I've included this. The syntax is slightly different, but if someone wants to nightmare-ize the code, it should be fairly straightforward.

https://github.com/johntitus/node-horseman/blob/master/lib/actions.js#L184
",johntitus,2014-11-09 06:18:00
81,2014-11-09 06:22:21,"released with nightmare@1.6.2
",reinpk,2014-11-09 06:18:00
80,2014-10-23 14:00:33,"I'm trying to hit 'npm install --save nightmare' on a fresh windows install. OS is windows 7 64-bit.

I've installed phantomjs via npm, and I have my PYTHON env variable pointing to python 3.4. 

It looks like the 'weak' dependency is failing maybe?

Command line dump:
## C:\dev\Hackathon\NightmareJS>npm install --save nightmare

> weak@0.3.3 install C:\dev\Hackathon\NightmareJS\node_modules\nightmare\node_modules\phantom\node_modules\dnode\node_modules\weak
> node-gyp rebuild

C:\dev\Hackathon\NightmareJS\node_modules\nightmare\node_modules\phantom\node_modules\dnode\node_modules\weak>node ""C:\Program Files\nodejs\node_modules\npm\bin\node-gyp-bin\....\node_modules\node-gyp\bin\node-gyp.js"" rebuild
gyp ERR! configure error
gyp ERR! stack Error: spawn ENOENT
gyp ERR! stack     at errnoException (child_process.js:1001:11)
gyp ERR! stack     at Process.ChildProcess._handle.onexit (child_process.js:792:34)
gyp ERR! System Windows_NT 6.1.7601
gyp ERR! command ""node"" ""C:\Program Files\nodejs\node_modules\npm\node_modules\node-gyp\bin\node-gyp.js"" ""rebuild""
gyp ERR! cwd C:\dev\Hackathon\NightmareJS\node_modules\nightmare\node_modules\phantom\node_modules\dnode\node_modules\weak
gyp ERR! node -v v0.10.32
gyp ERR! node-gyp -v v1.0.1
gyp ERR! not ok
npm WARN optional dep failed, continuing weak@0.3.3
nightmare@1.5.0 node_modules\nightmare
├── defaults@1.0.0
├── once@1.3.0
├── debug@0.7.4
├── clone@0.1.18
└── phantom@0.6.6 (win-spawn@2.0.0, traverse@0.6.6, shoe@0.0.15, dnode@1.2.0)

Are there any additional dependencies I'm missing perhaps?
",Sodman,2014-10-23 15:54:25
80,2014-10-23 14:16:48,"Node Gyp is failing to build weak, because Node Gyp doesn't support Python 3.x. You'll need 2.7.x

This should help:
https://github.com/TooTallNate/node-gyp/#installation

Just an FYI- though it mentions how to use Node 64 bit on Windows, I only had success with the Node 32-bit version.
",johntitus,2014-10-23 15:54:25
80,2014-10-23 15:44:49,"Uninstalled 64-bit NodeJS, installed 32-bit NodeJS.
Installed Python2.7 and configured npm to point at this version instead of 3.4.
Uninstalled Visual C++ redistributable and reinstalled the latest.

Still seeing the issue, but it does seem to be an issue with the weak module, and not the nightmare module. I'll post back if/when I figure out a fix.
",Sodman,2014-10-23 15:54:25
80,2014-10-23 15:54:25,"The final issue keeping this from working for me was that I had configured (via NPM) Python to point at the python home directory, when in fact I should have had it pointing directly at the .exe file in the home directory. Everything runs now, thanks for the help!
",Sodman,2014-10-23 15:54:25
79,2014-10-23 06:41:39,"I got the following error when loading https://github.com/lgersman/pragmatic-angular:

<S_CODE_TOKEN>

Is it true that we can suppress these errors if we add [`onError`](https://github.com/ariya/phantomjs#onerror) handler on PhantomJS?  
Currently we cannot add it through Nightmare.
",leesei,2014-11-02 00:40:07
79,2014-10-23 19:09:47,"Looks like you can do this

<S_CODE_TOKEN>

to trap the message and handle it however you want.

Full example:

<S_CODE_TOKEN>
",johntitus,2014-11-02 00:40:07
79,2014-10-24 04:15:10,"Thanks a lot.
The key is to add the handler _BEFORE_ `goto()` (the same case as `viewport()`).
Should the README be updated?
",leesei,2014-11-02 00:40:07
78,2014-10-22 15:54:50,"File is verified via `fs.existsSync` before the phantom `uploadFile` method is called.
Passes error to `run` callback. Previously, the run callback `err` attribute was hard coded to null.
Fixed a bug in `untilOnPage`, where it was returning when it shouldn't have been.
",johntitus,2014-11-02 17:51:27
78,2014-10-22 17:31:00,"Good question. I misunderstood what was going on. There is a test, `should wait until specific text is present`, that started failing when I returned any errors in `.run`.  It turns out that `.untilOnPage` was passing `done` directly to `.until`, but `.until` returns either true or false, and `done` in this case is Mocha's done, which is expecting only an Error or null to be passed to it. 

So, I changed `.untilOnPage` to capture the output of `.until`. If `.until` passes true, then it just calls the callback with no parms (since everything went well). If `.until` returns false (because of a timeout), it returns an Error - which is not passed to `.run` correctly.

The test itself was just broken. It was splitting on `.com` when it's calling a `.net` page, and also it's looking for a `10` which obviously only occurs every 10 seconds - but the default timeout is 5 seconds. So I gave the test a new timeout period of 11 seconds and fixed the split method. Seems to be ok now.
",johntitus,2014-11-02 17:51:27
78,2014-10-23 13:37:40,"After looking at how other systems handle this, I changed it so that if a .wait fails to pass before the default timeout period, it calls a new `.onTimeout` callback. The user can explicitly decide how to handle timeouts this way (throw an error, continue, up to them).
",johntitus,2014-11-02 17:51:27
78,2014-10-25 21:27:34,"can we split the uploads file stuff into a separate pull request by itself? it's a good simple fix that we should merge by itself. after that this timeout stuff is also a good direction, but needs some cleanup and merge in a separate pull request.
",reinpk,2014-11-02 17:51:27
78,2014-11-02 17:51:26,"cleaned up separately and released as 1.6.0, thanks!
",reinpk,2014-11-02 17:51:27
77,2014-10-22 12:20:49,"Verify's a file's existence before calling phantom's .uploadFile(). Returns an error if path is invalid. Uses fs.existsSync.
- Modified index.js .run() to detect if the last action has passed back an error, and if so, actually send it to the .run callback. Previously, err was always going to be null.
- Added tests for .upload happy case and unhappy case.
",johntitus,2014-10-22 15:45:55
77,2014-10-22 14:35:40,"nice this is really awesome, just a pile of tiny style nits to keep everything consistent and easy to read
",reinpk,2014-10-22 15:45:55
77,2014-10-22 15:45:55,"Seriously, I suck at git. going to clean this up and re-pull request.
",johntitus,2014-10-22 15:45:55
76,2014-10-22 06:55:16,"@execmd @fbm-static does this take on the same idea solve the use case as #62? i think it will be easier to abstract engines down the road #60, and hides the specifics of phantomjs for people who find nightmare before they ever try to use phantom :)
",reinpk,2014-10-22 14:42:04
76,2014-10-22 07:59:10,"What if you just put the **specific** phantomjs/slimer/trifle options into something like:

<S_CODE_TOKEN>
",fbm-static,2014-10-22 14:42:04
76,2014-10-22 08:17:43,"@fbm-static It is inconvenient when we must pass similar arguments to different engines.
",execmd,2014-10-22 14:42:04
76,2014-10-22 08:39:46,"@execmd Right.
",fbm-static,2014-10-22 14:42:04
76,2014-10-22 11:44:39,"I prefer this approach, but would request that `sslProtocol` default to `any`, unless there's a security issue with that. Also, perhaps add a default for `--web-security`.
",johntitus,2014-10-22 14:42:04
76,2014-10-22 14:39:54,"@fbm-static that wouldn't be a good abstraction though, that just reveals all the underlying complexity

@johntitus that sounds reasonable, updated with both of those added
",reinpk,2014-10-22 14:42:04
76,2014-10-22 14:42:22,"Nice.
",fbm-static,2014-10-22 14:42:04
76,2014-10-22 17:46:23,"Thanks for adding this in. Will suggest my team to use this in production now.
",timjacobi,2014-10-22 14:42:04
76,2014-10-22 22:53:36,"could you please add `remote-debugger-port` and `remote-debugger-autorun`

http://phantomjs.org/troubleshooting.html
",atian25,2014-10-22 14:42:04
75,2014-10-22 05:24:01,"http://phantomjs.org/api/webpage/method/open.html
- `open(url, callback) {void}`
- `open(url, method, callback) {void}`
- `open(url, method, data, callback) {void}`
- `open(url, settings, callback) {void}`
",atian25,2014-11-09 06:16:15
75,2014-10-22 06:00:38,"what's the use case for wanting `POST` requests via `.open()`?
",reinpk,2014-11-09 06:16:15
75,2014-10-22 06:22:11,"- what I care about is `open(url, settings, callback) {void}` to set `headers`
- `POST` I think sometime: 
  - a.html -> post -> b.html
  - when scraping, don't need to visit `a.html` then set some form value then post, for speed.
",atian25,2014-11-09 06:16:15
75,2014-11-09 06:16:15,"i think we want to avoid optimizations for speed that aren't page interactions for the simplicity and consistency of the api
",reinpk,2014-11-09 06:16:15
74,2014-10-22 03:41:50,"Add local test server - use `express` as a `devDependencies`, so tests will be maintainability && run fast.

Signed-off-by: TZ atian25@qq.com
",atian25,2014-11-09 06:28:16
74,2014-11-09 06:28:16,"passing for now since the test suites have been reliable so far, but may be necessary for things like #30 down the road
",reinpk,2014-11-09 06:28:16
73,2014-10-22 03:36:48,"Signed-off-by: TZ atian25@qq.com
",atian25,2014-10-25 21:19:58
72,2014-10-22 03:32:58,"Signed-off-by: TZ atian25@qq.com
",atian25,2015-09-20 21:20:38
72,2015-09-20 21:20:38,"could be potentially interesting, what's the use case? closing for now since it would need a rewrite for `2.x` but happy to re-open with more context
",reinpk,2015-09-20 21:20:38
71,2014-10-22 03:24:04,"can read cookies and modify, but can't add new cookies cause I got problem with `this.page.addCookies`

Signed-off-by: TZ atian25@qq.com
",atian25,2015-09-27 19:05:36
71,2015-03-21 00:06:11,"+1
",matthewmueller,2015-09-27 19:05:36
71,2015-09-20 21:28:08,"would love to see this in `2.x`: https://github.com/atom/electron/blob/master/docs/api/session.md#methods
",reinpk,2015-09-27 19:05:36
71,2015-09-27 19:05:36,"coming through #241 or related
",reinpk,2015-09-27 19:05:36
70,2014-10-22 03:14:57,"I have a fork of phantomjs-node that supports PhantomJS 2, and I am trying to get it accepted upstream.  The changes so far look pretty clean and are backwards compatible with PhantomJS 1.9.7, so hopefully that goes smoothly.  In the meantime, people that want to give Phantom 2 a spin should be able to replace the nightmare version in their package.json with ""https://github.com/bprodoehl/nightmare/archive/phantom2.tar.gz""

The PR for phantomjs-node is here: https://github.com/sgentle/phantomjs-node/pull/209
",bprodoehl,2015-04-27 21:17:57
70,2014-10-22 03:24:37,"sweet, excited for when phantomjs 2 merges upstream :)
",reinpk,2015-04-27 21:17:57
70,2014-10-23 19:14:52,"This landed today in version 0.7.0 of the phantom package.
",bprodoehl,2015-04-27 21:17:57
70,2014-10-23 19:18:30,"Updated nightmare's package.json to phantom 0.7.0 and all tests passed. However, I don't have phantom 2.0 as that thing would take years to build on my box, and pre-built packages aren't available yet.
",johntitus,2015-04-27 21:17:57
70,2014-10-23 19:29:38,"What's your platform?  I posted pre-built packages of the latest still-in-development snapshot of 2.0 for 64-bit OS X and Linux here: https://github.com/bprodoehl/phantomjs/releases

I would only suggest using those if you want to see if 2.0 fixes a problem you're seeing in 1.9, though.  They're two weeks old, but they are so far still up to date with https://github.com/ariya/phantomjs, since the POODLE fix is still just on the 1.9 branch.

The big change I noticed, and why I care, is that 2.0 can actually render D3.js SVG stuff properly, and that was largely a trainwreck with 1.9.7 and earlier.
",bprodoehl,2015-04-27 21:17:57
70,2014-10-23 19:33:21,"Very cool, I'll check those out.
",johntitus,2015-04-27 21:17:57
70,2015-01-21 20:09:54,"Any results with Nightmare + Phantomjs 2?
",samuelmeireles,2015-04-27 21:17:57
70,2015-01-28 03:04:18,"PhantomJS just released 2.0.0-stable https://github.com/ariya/phantomjs/releases/tag/2.0.0
",xzyfer,2015-04-27 21:17:57
70,2015-04-27 20:11:05,"Should this be closed? Nightmare is apparently working without any problems with PhantomJS 2.
",thotypous,2015-04-27 21:17:57
70,2015-04-27 21:17:57,"Yes, please close.  Thanks!
",bprodoehl,2015-04-27 21:17:57
69,2014-10-21 13:43:51,,atian25,2014-10-21 13:50:37
68,2014-10-21 13:42:53,"Fills the fields of a form with given values and optionally submits it. Fields are referenced by their name attribute.

`//TODO: support select/checkbox/radio/file, single/multiple`

Signed-off-by: TZ atian25@qq.com
",atian25,2014-10-21 13:50:46
67,2014-10-21 13:30:01,"new pull request. Still don't understand squash command.
",johntitus,2014-10-22 02:51:52
67,2014-10-22 02:51:50,"thanks!
",reinpk,2014-10-22 02:51:52
67,2014-10-22 03:13:24,"released with 1.4.0
",reinpk,2014-10-22 02:51:52
66,2014-10-21 13:10:52,"Adds a .visible() method.

New pull request because I goofed the last one's git history.
",johntitus,2014-10-22 02:57:40
66,2014-10-22 03:13:30,"released with 1.4.0
",reinpk,2014-10-22 02:57:40
65,2014-10-21 13:05:11,"Added .authentication(user,password). New pull request since I messed up the history of the last one.
",johntitus,2014-10-22 03:07:02
64,2014-10-21 10:18:21,"1. one interface to get received resources
2. one interface to save  special received resources to disk ?
",atian25,2014-10-22 03:24:04
64,2014-10-22 03:24:04,"you should be able to use `.on('resourceRequested', ...)` to get the urls of requested resources and then download them outside nightmare as needed
",reinpk,2014-10-22 03:24:04
63,2014-10-21 05:49:41,"1.Fills the fields of a form with given values and optionally submits it. Fields are referenced by their name attribute.

`//TODO: support select/checkbox/radio/file, single/multiple`

2.Provide `html(selector, parent, callback)`

3.Add local test server - use express as a devDependencies, so tests will be maintainability && run fast.

BTW, github is strange, I only pull request the first commit, then push other to my fork,  but it auto change this pull request with all commits.

update: maybe I should create `feature-branch`? each feature is all fork from master? 

Signed-off-by: TZ atian25@qq.com
",atian25,2014-10-22 03:22:16
63,2014-10-21 05:53:49,"btw, will `nightware`  inject `$` or provide `__utils__` like `casperjs`, so that we don't need to use `document` to do some dirty work, such as `select mutiple value` vs `$.val()`
",atian25,2014-10-22 03:22:16
63,2014-10-22 03:22:16,"i think between these methods we should be covered, thanks though!
- click: https://github.com/segmentio/nightmare#clickselector
- type: https://github.com/segmentio/nightmare#typeselector-text
- upload: https://github.com/segmentio/nightmare#uploadselector-path
- check: https://github.com/segmentio/nightmare/pull/30
- select: https://github.com/segmentio/nightmare/pull/30
",reinpk,2014-10-22 03:22:16
63,2014-10-22 03:28:33,"I love suger method, but you are the boss , so anyway.
",atian25,2014-10-22 03:22:16
62,2014-10-20 14:50:17,"Allows to pass phantomjs arguments via new Nightmare() second argument
Example:

<S_CODE_TOKEN>

The phantomjs will be called with this arguments
",execmd,2014-10-22 14:42:47
62,2014-10-21 18:11:47,"Can we get this merged? It would be really helpful to test HTTPS sites.
",timjacobi,2014-10-22 14:42:47
62,2014-10-22 03:17:13,"can we write this in a way to match the way other options are passed?
",reinpk,2014-10-22 14:42:47
62,2014-10-22 04:31:29,"@reinpk what exactly do you want to happen. I think they look better that way.
",fbm-static,2014-10-22 14:42:47
62,2014-10-22 06:09:06,"@reinpk options and arguments have different purposes. Each arguments element must be passed as string to the phantomjs, but options - as whole object. 
",execmd,2014-10-22 14:42:47
62,2014-10-22 06:18:33,"yeah phantomjs accepts them differently command line vs. options, but would rather have them as fully-fledged options with defaults so that https://github.com/segmentio/nightmare/issues/60 could work better cross-browser down the road, and so that phantomjs's unique option-passing structure is better abstracted.
",reinpk,2014-10-22 14:42:47
62,2014-10-22 06:55:40,"check out #76 to see what i mean as an alternative implementation
",reinpk,2014-10-22 14:42:47
62,2014-10-22 14:42:47,"thanks for the concepts here, but going with the implementation in #76, hope it's helpful!
",reinpk,2014-10-22 14:42:47
62,2014-10-22 14:50:06,"That's ok. Thanks!
",execmd,2014-10-22 14:42:47
61,2014-10-20 09:59:34,"<S_CODE_TOKEN>

`twitter_com.jpg` will become a black image.

Here's a log:

<S_CODE_TOKEN>
",fbm-static,2014-10-22 14:43:37
61,2014-10-20 11:33:23,"Had to temporarily do this at `lib/index.js:114`

<S_CODE_TOKEN>
",fbm-static,2014-10-22 14:43:37
61,2014-10-20 14:55:20,"You can use this https://github.com/segmentio/nightmare/pull/62
",execmd,2014-10-22 14:43:37
61,2014-10-22 03:22:54,"should be merged soon after the options passing is made to match the existing style!
",reinpk,2014-10-22 14:43:37
61,2014-10-22 14:43:37,"#76 fixed it.
",fbm-static,2014-10-22 14:43:37
61,2014-10-22 14:46:29,"released with 1.5.0
",reinpk,2014-10-22 14:43:37
60,2014-10-16 15:38:51,"Any plans to add support for SlimerJS and TrifleJS? I believe it has similar implementation.

Would be nice to see an `engine` method as an option (defaults to phantomjs).

<S_CODE_TOKEN>

Thoughts?

Thanks!
",changalberto,2015-08-17 06:26:16
60,2014-10-20 06:14:50,"that's an intriguing idea, definitely would be cool for some cross-browser stuff. i assume the use case you've got is around cross-browser testing?
",reinpk,2015-08-17 06:26:16
60,2014-10-22 06:24:43,"wrt to #62, all the options appear to have the same names at first glance:
- http://docs.slimerjs.org/current/configuration.html
- https://cloudup.com/c0iFE62qnhx (http://triflejs.org/)
",reinpk,2015-08-17 06:26:16
60,2014-10-28 02:44:06,":+1:  Would love this feature, it's what is missing from other high-level wrappers like CasperJS
",ryanmcdermott,2015-08-17 06:26:16
60,2014-11-12 09:56:32,"Could be the killer feature :)
",MathRobin,2015-08-17 06:26:16
60,2014-11-12 11:04:14,"@ryanmcdermott this is just ""wrong"".
CasperJS is the first and the _only_ testing tool that supports both phantomJS and SlimerJS, and TrifleJS has been developped using the CasperJS testsuite.

So, at this point this is a missing feature of nightmareJS that is already implemented in CasperJS ;)

Then, :+1: nightmareJS is a very promising project !
",mickaelandrieu,2015-08-17 06:26:16
60,2015-01-07 23:24:37,"Let me know if you need a hand with TrifleJS, I'm development mode at the moment.
",sdesalas,2015-08-17 06:26:16
60,2015-08-17 06:26:16,"thanks all, in v2 we decided to go a different direction towards depending on electron. may reconsider down the road.
",reinpk,2015-08-17 06:26:16
59,2014-10-15 20:09:32,"Added an optional boolean to .run that tells Nightmare to not teardown the instance when run is complete, so you can do some conditional control flow. 
Added a larger example, using the no-teardown option & some control flow examples.
",johntitus,2015-08-17 06:08:30
59,2014-10-17 15:18:20,"Nice contribution. Thank you.

However the code you added is inconsistently formatted in regards to itself. Sometimes you put spaces inside parentheses `if ( foo == bar )` and sometimes you don't. When submitting pull requests, you should make an attempt to match the coding style of the project you're contributing to.
",fearphage,2015-08-17 06:08:30
59,2014-10-24 16:01:47,"+1 for this feature
",leandono,2015-08-17 06:08:30
59,2014-11-29 04:06:25,"Seems like a valid use case. @reinpk Thoughts?
",lambtron,2015-08-17 06:08:30
59,2015-02-11 14:39:25,"What is the status of this feature? I find it very, very useful. 
Can we please have a merge to master if there are no objections?
",Oted,2015-08-17 06:08:30
59,2015-03-21 23:35:39,"+1 much wanted!
",samuelmeireles,2015-08-17 06:08:30
59,2015-08-17 06:08:30,"the underlying problem will be solved in v2.0 shortly by moving to generators + an explicit `.end()` method
",reinpk,2015-08-17 06:08:30
58,2014-10-15 17:14:04,"Determines if a selector is visible or not. Used jQuery's check, which is so straightforward I'm worried I missed something:

https://github.com/jquery/jquery/blob/10399ddcf8a239acc27bdec9231b996b178224d3/src/css/hiddenVisibleSelectors.js
",johntitus,2014-10-21 13:09:51
58,2014-10-20 06:12:26,"looks good can you squash and rebase?

https://github.com/edx/edx-platform/wiki/How-to-Rebase-a-Pull-Request
",reinpk,2014-10-21 13:09:51
58,2014-10-21 13:09:51,"Goofed the merge/squash. Going to do a new branch and new pull request.
",johntitus,2014-10-21 13:09:51
57,2014-10-15 15:53:19,,johntitus,2014-10-21 13:18:51
57,2014-10-20 06:11:54,"looks good, can you rebase?
",reinpk,2014-10-21 13:18:51
57,2014-10-20 12:43:44,"Should be ok now.
",johntitus,2014-10-21 13:18:51
57,2014-10-21 13:18:51,"Closing so I can submit a new, cleaned up pull request.
",johntitus,2014-10-21 13:18:51
56,2014-10-15 14:59:20,,johntitus,2014-10-20 06:09:11
56,2014-10-22 03:13:43,"released with 1.4.0
",reinpk,2014-10-20 06:09:11
55,2014-10-15 02:55:01,"I grabbed the example code and modified it:

<S_CODE_TOKEN>

The output in the terminal is:

<S_CODE_TOKEN>
",lumberj,2014-10-15 04:34:05
55,2014-10-15 04:34:05,"the variable `page` is not defined in the closure of the second function. if you change it back to `console.log(res);` it should work
",reinpk,2014-10-15 04:34:05
55,2014-10-15 14:55:15,"My mistake there (I should have gone to sleep at that point). Maybe I'm misunderstanding what `page` is here...

<S_CODE_TOKEN>

<S_CODE_TOKEN>
",lumberj,2014-10-15 04:34:05
55,2014-10-15 15:04:42,"The first method in .evaluate() is a javascript function that is executed inside the browser that nightmare/phantom created.  It doesn't have access to the phantomjs ""page"", so in essence the first function is just returning ""undefined"".  In the second function you call JSON.strintify(undefined), which returns an empty object, which is then console.logged as ""{}"".
What are you trying to accomplish?
",johntitus,2014-10-15 04:34:05
55,2014-10-15 18:28:42,"@johntitus thanks for clearing that up. That's what I thought. I copied that from the example, and I couldn't figure out why ""page"" is being passed into that first function.
",lumberj,2014-10-15 04:34:05
55,2014-10-15 18:33:58,"oh woops, sorry about that! fixed in the readme
",reinpk,2014-10-15 04:34:05
54,2014-10-15 02:08:24,"Let's the user set dnode options. This will allow windows users to avoid issues with the Weak module in phantomjs.  Per this issue https://github.com/segmentio/nightmare/issues/23
",securingsincity,2014-10-20 06:02:23
54,2014-10-15 07:20:44,"as far as i can tell the object is really just `dnode: { weak : true }` right? could we make it a simpler boolean option instead?
",reinpk,2014-10-20 06:02:23
54,2014-10-15 12:48:55,"Yeah i think that makes way more sense. I just pushed up a change
",securingsincity,2014-10-20 06:02:23
54,2014-10-19 13:15:06,"Fixed style issues. 
",securingsincity,2014-10-20 06:02:23
54,2014-10-20 06:02:22,"thanks @securingsincity and @fearphage 
",reinpk,2014-10-20 06:02:23
53,2014-10-14 20:41:50,"Brew is only for mac. You're not alone in this world. Some(lot) of us are on pc or just debian, ubuntu and other great OS. We don't need to know you've a Mac.

Sorry for saying this like this, but it's really annoying to see a lot of people thinking that all of developers are on mac. It's not true.
",MathRobin,2014-10-14 21:27:17
53,2014-10-14 21:27:17,"definitely open to a pull request showing how to install phantomjs on another machine. it's just a convenience to help people get started ;)
",reinpk,2014-10-14 21:27:17
52,2014-10-14 14:56:47,"Added .authentication(userName,password) method for basic http auth. Updated readme & tests.
",johntitus,2014-10-21 12:46:42
52,2014-10-15 07:53:10,"rockin test! naming nit and then if you could rebase to master so that i can merge? thanks man, great additions!
",reinpk,2014-10-21 12:46:42
52,2014-10-20 06:13:00,"can you rebase to master and squash to a single commit?

https://github.com/edx/edx-platform/wiki/How-to-Rebase-a-Pull-Request
",reinpk,2014-10-21 12:46:42
52,2014-10-20 06:15:59,"related to #45
",reinpk,2014-10-21 12:46:42
52,2014-10-20 13:11:44,"Merged, but I've somehow managed to make things worse commit message wise. I'll have to ask a guy with more git-fu for help when he comes in tomorrow.
",johntitus,2014-10-21 12:46:42
52,2014-10-21 12:46:42,"This request's git history is fubar. I'm going to close and reopen with a new pull request.
",johntitus,2014-10-21 12:46:42
51,2014-10-14 13:56:47,"Seems like a lot of questions being received were basic ""How do I run this?"" type, so I expanded the Usage instructions to make it clear 
A) that Nightmare is a Node module
B) how to execute nightmare
C) how to debug it
D) how to run automated tests
",johntitus,2014-10-15 07:42:13
51,2014-10-15 07:42:11,"thanks! i'll touch up the wording locally
",reinpk,2014-10-15 07:42:13
50,2014-10-14 12:59:15,"I believe phantomjs allows to store cookies to an external file
",shebinleo,2016-03-30 02:41:26
50,2014-10-14 23:49:04,"mmm that's cool yeah, can investigate, would be open to a pull request for a `.cookie()` function or something as well
",reinpk,2016-03-30 02:41:26
50,2014-10-21 18:55:35,"+1 for `.cookie()` function
",zachlatta,2016-03-30 02:41:26
50,2014-10-22 00:19:24,"I will pull this later.
- cookie file should be import by phantom art
- add `cookie(callback)`, then merge callback result to cookie.
",atian25,2016-03-30 02:41:26
50,2014-10-22 00:34:16,"Awesome! If you don't end up having time to make the PR, I've
started on implementing this functionality as well and would be
more than happy to turn my changes into a PR.

## 

Zach Latta
http://zachlatta.com
https://github.com/zachlatta
https://twitter.com/zachlatta

On Tue, Oct 21, 2014, at 05:19 PM, TZ | 天猪 wrote:

  I will pull this later.
- cookie file should be import by phantom art
- add cookie(callback), then merge callback result to cookie.
  
  —
  Reply to this email directly or [1]view it on GitHub.

References
1. https://github.com/segmentio/nightmare/issues/50#issuecomment-60019879
",zachlatta,2016-03-30 02:41:26
50,2014-10-22 03:24:53,"had pull #71 ,  can read cookies and modify, but can't add new cookies cause I got problem with `this.page.addCookies`
",atian25,2016-03-30 02:41:26
50,2014-10-22 03:25:57,"`load  an external file` can use this : #62
",atian25,2016-03-30 02:41:26
50,2014-10-22 05:29:29,"Don't quote me on it, but isn't addCookies used on the PhantomJS instance itself?

## 

Zach Latta
http://zachlatta.com
https://github.com/zachlatta
https://twitter.com/zachlatta

> On Oct 21, 2014, at 8:24 PM, TZ | 天猪 notifications@github.com wrote:
> 
> had pull #71 , can read cookies and modify, but can't add new cookies cause I got problem with this.page.addCookies
> 
> —
> Reply to this email directly or view it on GitHub.
",zachlatta,2016-03-30 02:41:26
50,2014-10-22 05:53:35,"`phantom-node` seems only offer `phantom.addCookie: (name, value, domain, cb=->)` , not `page.addCookie`
1. maybe had to modify `index.js` to set `this.ph=instance`
2. `self.ph.addCookie('test', 'testValue', cookies[0].domain, callback)` seems need `async` to iterator

so wait for @reinpk  ~
",atian25,2016-03-30 02:41:26
50,2015-06-23 21:51:47,"Any update on this?
",twistedlogicusc,2016-03-30 02:41:26
50,2015-06-30 20:36:53,"Waiting too =/
",herlon214,2016-03-30 02:41:26
50,2016-03-30 02:41:26,"This issue seems to be fairly old, and I believe was against 1.x.x of Nightmare which was based on Phantom.

For what it's worth, adding cookies should be possible with [`cookies.set()`](https://github.com/segmentio/nightmare#cookiessetname-value) added in 2.0.9.

I'm going to consider this issue resolved.  If it's still an issue, feel free to reopen or file a new issue.
",rosshinkley,2016-03-30 02:41:26
49,2014-10-13 22:55:16,"Is it possible to set the language used by phantom in nightmare?
",tkdan235,2014-10-20 06:15:32
49,2014-10-14 23:44:18,"hmmm, boy i dunno. this doesn't seem super promising:
http://stackoverflow.com/questions/22981929/how-to-set-the-browser-language-of-phantomjs

what exactly do you mean by setting the language though?
",reinpk,2014-10-20 06:15:32
49,2014-10-20 17:34:54,"Apologies for the delayed reply.

Nightmare would be great a simplified version of phantom to quickly check if translations are functioning properly on a web app.  It would be great if I could on the fly set my region to being German, for an example, and make assertions that the right string are being returned.

So far this seems to not be as easy as I would hope.
",tkdan235,2014-10-20 06:15:32
49,2014-10-20 17:40:58,"mmm, yeah got it. sounds awesome! if there's a good lead on how this could be implemented, can definitely reopen!
",reinpk,2014-10-20 06:15:32
49,2014-10-27 01:56:45,"I believe that languages in websites are either static, manually selected (and a cookie set), or auto-chosen based on IP location.  A lot of websites detect the location of the IP first (for example a German IP address from a German pool/block of IPs owned by a German company or the German government).  However, you could go set your language to German in your real web browser and find out if the site set any language cookies.  Then you could manually make that into a persistent cookie in your nightmare project, and theoretically you achieve the result you were after.

I hope that helps.
",woohoowebs,2014-10-20 06:15:32
48,2014-10-13 21:07:29,"I have 
`phantomjs --version` `1.4.0`

When I try out any of the examples in the README, I always only get:
`phantom stdout: XMLHttpRequest cannot load http://localhost:12301/dnode/info. Cannot make any requests from null.`

What can I do? 
",grssnbchr,2014-10-14 21:27:55
48,2014-10-14 21:27:55,"hmmmm, i'm on phantomjs `1.9.7` and don't see this error, could you try updating?
",reinpk,2014-10-14 21:27:55
47,2014-10-13 14:55:45,"Disclaimer: I've never worked with PhantomJS before, only with [nightwatch](http://nightwatchjs.org/).
The README is missing an important line for newcomers-- how to execute the tests?
Also if only `node testname.js` needs to be executed (I don't know if I'm doing it correctly) no output is shown to track progress/debug.
",bfagundez,2014-10-14 23:47:47
47,2014-10-13 21:04:12,"+1
",grssnbchr,2014-10-14 23:47:47
47,2014-10-14 14:42:14,"I've submitted a pull request documenting this, but in short, just run `make test`. It uses Mocha, so you'll see some dots appear and then the number of passing/failing tests.
",johntitus,2014-10-14 23:47:47
47,2014-10-14 16:57:13,"@johntitus if I run `make test` at the directory-- I get a response from my GNU make:
`make: *** No rule to make target 'test'.  Stop.`
I believe I need a Makefile, but again: what command should it run?
",bfagundez,2014-10-14 23:47:47
47,2014-10-14 19:53:20,"There's a Makefile at the root of Nightmare. Make sure you call make from that directory.

https://github.com/segmentio/nightmare/blob/master/Makefile
",johntitus,2014-10-14 23:47:47
47,2014-10-14 20:13:48,"Are we talking about the same? 
I meant the tests I'll write to test my apps, not the functional tests of the library.
",bfagundez,2014-10-14 23:47:47
47,2014-10-14 22:12:13,"Ah, sorry, I did think you were talking about the functional tests.

To execute your own file, you just do `node mytestfile.js`.  Nightmare doesn't spit out any output unless you write some into the process yourself.

You can do that by using the evaluate function's callback.

<S_CODE_TOKEN>
",johntitus,2014-10-14 23:47:47
47,2014-10-14 22:24:46,"Thanks.
Adding exactly what you just posted to the README would be awesome.
EDIT: The example with the .evaluate() function to indicate progress worked fine.

Now when I try to run the first example I got this:

<S_CODE_TOKEN>
",bfagundez,2014-10-14 23:47:47
47,2014-10-14 23:47:47,"yep rolling this into #40 for more examples
",reinpk,2014-10-14 23:47:47
46,2014-10-13 10:22:39,"This is a great little nifty plugin!

I'm wondering if there's any way to get user input while Nightmare is running. I want to be able to pull my bank info automatically, but in order to log in to my bank account I have to:
1. Go to the login page
2. Type in the code generated by the website into my physical device (I can see the code by using .screenshot())
3. My device generates a new code that I type into the website to log in.

The problem is the third step. Is there a way for Nightmare to get some user input AFTER that it has been initiated? Either through stdin, or maybe just by using .wait() so that you have time to edit a textfile that it can later read from?

Thanks!
",t4t5,2014-10-14 23:45:40
46,2014-10-14 23:45:39,"ah, yeah i think this is solved by allowing branching through #36, closing here but will consider this use case as well when solving that issue
",reinpk,2014-10-14 23:45:40
45,2014-10-12 07:23:41,"[PhantomJS allows setting the username and password](http://phantomjs.org/api/webpage/property/settings.html) to use when receiving a WWW-Authenticate request. It'd be very useful if this could be added to supported options pass through of nightmare as well.
",cehoffman,2014-10-22 03:13:09
45,2014-10-20 06:16:37,"should get merged soon after a rebase/squash
",reinpk,2014-10-22 03:13:09
45,2014-10-22 03:13:08,"released with 1.4.0!
",reinpk,2014-10-22 03:13:09
45,2014-10-22 03:36:43,"Thanks!
",cehoffman,2014-10-22 03:13:09
44,2014-10-12 02:47:13,"nightmarejs: command not found.

It must work a little differently than phantomjs on the command line. As far as I know I installed it properly. 
",neatville,2014-10-13 01:08:12
44,2014-10-13 01:08:12,"ah, phantomjs can be used from the command line, yes. nightmare is used from a javascript program. using nightmare from the command won't work/doesn't make sense.
",reinpk,2014-10-13 01:08:12
44,2014-10-14 04:50:51,"I went to the nightmare-master folder, ran ""make"" from the commad-line. It looked like node modules were added to the folder. I then included test/index.js in an HTML file as a script... opened up that file and there weren't any results. 

So it sounds like using the Terminal has nothing to do with using nightmarejs.. I thought it was kind of like using SlimerJS, CasperJS, etc. Is using nightmare like using libraries or frameworks such as AngularJS, jQuery, etc? I use a type of Ubuntu linux. The whole thing might sound like common sense to you, but there isn't a clear indiciation of how you use it. 
",neatville,2014-10-13 01:08:12
44,2014-10-14 23:41:59,"it's a javascript library like jquery or angular yep!
",reinpk,2014-10-13 01:08:12
44,2014-10-14 23:47:35,"In the folder nightmare-master/test/ there is the file index.js. So, I put an HTML file with this in it:  
    script src=""index.js""  /script
(I had to delete the brackets because it wasn't showing up in here)

I then opened that up with a web browser. Since I'm not seeing any results, does this mean I didn't install or configure it properly? I just want to interact with web sites without having to be present for all of it, and it seemed like nightmare would be the perfect fit as I saw the comparison of PhantomJS and Nightmare side by side (the nightmare version was much shorter and simplified.) 
",neatville,2014-10-13 01:08:12
43,2014-10-10 13:04:46,"Allows a user to attach callback to Phantom's page events.
https://github.com/ariya/phantomjs/wiki/API-Reference-WebPage#callbacks-list

Added tests, but for some reason the alert, prompt, and confirm event tests cause phantomjs to crash. However, they all work fine in normal usage. I have no idea what the issue is. Perhaps someone more familiar with phantom can figure it out.
",johntitus,2014-10-15 07:28:25
43,2014-10-13 01:05:21,"missed this part of the api myself, cool! the resource requested events are super interesting, just a few nits before merging :)
",reinpk,2014-10-15 07:28:25
43,2014-10-15 07:28:28,"sweet!
",reinpk,2014-10-15 07:28:25
43,2014-10-15 07:41:35,"published with 1.3.0
",reinpk,2014-10-15 07:28:25
42,2014-10-10 04:51:06,"Running into this when trying to run the examples:

<S_CODE_TOKEN>

This could definitely be an issue with `phantomjs` on 10.10, but any ideas?
",matthewmueller,2014-10-10 04:55:47
42,2014-10-10 04:53:39,"Oh, it could also be because I'm running `2.0.0`:

<S_CODE_TOKEN>
",matthewmueller,2014-10-10 04:55:47
42,2014-10-10 04:55:46,"Yep, that was it. I guess it's a good heads up ;-)

Great project!
",matthewmueller,2014-10-10 04:55:47
42,2014-10-10 05:02:37,"ah, that is a good heads up, thanks!
",reinpk,2014-10-10 04:55:47
42,2014-10-15 06:07:27,"@reinpk What's the outlook on supporting PhantomJS 2.0.0?  Do you have any idea how much effort would be involved, and how much the Phantom devs have actually been changing the interfaces?  1.9.7 does a pretty terrible job of rendering interactive D3.js, and my attempts at bridging the gap in my app between what D3 wants and what 1.9.7 supports haven't worked out so far.  So far interactive D3.js looks great in PhantomJS 2.0.0.
",bprodoehl,2014-10-10 04:55:47
42,2014-10-15 06:23:12,"Sorry, I see the same error just running phantomjs-node examples, so I don't think this has anything to do with nightmare.
",bprodoehl,2014-10-10 04:55:47
42,2014-10-15 07:18:26,"ah, bummer, not sure i haven't had a chance to investigate 2.0.0 at all yet
",reinpk,2014-10-10 04:55:47
42,2014-10-16 18:26:05,"I'm having the same issue but with phantom 1.9.7, but I'm not running the examples

phantom stdout: TypeError: 'undefined' is not an object (evaluating 'x.options')
",fernandopasik,2014-10-10 04:55:47
42,2014-10-20 11:27:52,"My OS is MacOS 10.10,and phantomjs is 2.0.0 (development),has this problem,please fix it
",mariodu,2014-10-10 04:55:47
42,2014-10-20 13:01:00,"@mariodu The problem lies in a package that nightmare depends on.  I have created a ticket under that project here: https://github.com/sgentle/phantomjs-node/issues/208

@fernandopasik are you sure the problem isn't in your code?  I'm not finding ""x.options"" anywhere in nightmare or phantomjs-node.
",bprodoehl,2014-10-10 04:55:47
42,2015-03-23 03:11:54,"I've forked [Node PhantomJS](https://github.com/Medium/phantomjs) and hacked around with it to install the only ""stable"" version for Mac of Phantom 2.0.0 I could find:

Version I'm using: https://github.com/eugene1g/phantomjs/releases/download/2.0.0-bin/phantomjs-2.0.0-macosx.zip
Fork: https://github.com/dtothefp/phantomjs

So, you could just `require` the binary path

<S_CODE_TOKEN>

@bprodoehl it looks like you have shimmed the `phantomjs-node` package and the binary works fine with it. I just tried using the binary with Nightmare and it seems to work fine.

Also, I saw in your PR that the previous `phantom.args` are defined on `system.args`. Is this the syntax moving forward with PhantomJS 2.0.0?
",dtothefp,2014-10-10 04:55:47
41,2014-10-10 03:49:52,,stevenmiller888,2014-10-13 00:57:15
41,2014-10-13 00:57:17,"easy peasy haha thanks!
",reinpk,2014-10-13 00:57:15
41,2014-10-15 07:26:10,"published with 1.2.0
",reinpk,2014-10-13 00:57:15
40,2014-10-09 12:36:32,"Love the tool, definetely better than casperjs.
Can we have more examples such as but not limited to :
--how to open and post to multiple urls
--dynamic loading,lazy-loading 
--javascript injection

Thank you :+1: 
",atorralb,2014-11-29 19:44:47
40,2014-10-11 07:44:54,"--authentification
+1
",grssnbchr,2014-11-29 19:44:47
40,2014-10-13 08:45:56,"+1
",analytically,2014-11-29 19:44:47
40,2014-10-14 23:46:59,"--testing (from #47)
",reinpk,2014-11-29 19:44:47
40,2014-11-29 19:44:47,"the readme is updated to include a basic testing example with mocha (a test that passes even ;) and i've also added a link to the tests, since the tests contain a complete working example of every method.
",reinpk,2014-11-29 19:44:47
39,2014-10-08 17:16:45,"<S_CODE_TOKEN>

results in

<S_CODE_TOKEN>

The selector used doesn't seem to matter - it always throws the error.
",johntitus,2014-10-09 06:50:34
39,2014-10-08 17:24:33,"Exact same problem here.
",noazark,2014-10-09 06:50:34
39,2014-10-09 06:21:13,"thanks for the simple example! investigating now
",reinpk,2014-10-09 06:50:34
39,2014-10-09 07:00:57,"released the fix with 1.1.1, thanks!
",reinpk,2014-10-09 06:50:34
38,2014-10-08 15:02:53,"I was wondering your thoughts on adding a method to break out of the nightmare chain, so that you can execute things in Node's context. I'm thinking of an action like this:

<S_CODE_TOKEN>

which would allow something like this in the nightmare chain:

<S_CODE_TOKEN>

You can accomplish nearly the same thing with .evaluate, but this is more explicit and gives you access to the nightmare instance.
",johntitus,2014-10-09 07:06:14
38,2014-10-09 07:06:14,"i think this is fundamentally the same problem as #36, but definitely agree this is annoying with the current API. i think if there's an option to avoid teardown of the phantom instance in `.run()` then you can just put it in the callback to `.run()` and then could reinitiate nightmare commands again when necessary.

closing here and keeping #36 as the marker for the issue
",reinpk,2014-10-09 07:06:14
37,2014-10-08 06:33:03,"In Chrome on latest Android on a Nexus tablet:
![screenshot_2014-10-07-23-26-46](https://cloud.githubusercontent.com/assets/419884/4554785/4a1051e8-4eb4-11e4-8ad1-0fcdcce39c96.png)

And they're also not scrollable, so it's not possible to view the cut-off parts of the code at all.
",cvrebert,2014-10-09 06:20:20
37,2014-10-08 06:40:12,"mmm dang yeah need to get the media queries right here, will look into it soon thanks
",reinpk,2014-10-09 06:20:20
37,2014-10-09 06:20:16,"fixed in segmentio/nightmarejs.org#a23340b
",reinpk,2014-10-09 06:20:20
37,2014-10-09 07:15:33,"i.e. https://github.com/segmentio/nightmarejs.org/commit/a23340be4da244fb605e4ced44425a217e59a305
",cvrebert,2014-10-09 06:20:20
36,2014-10-08 03:49:15,"Hi. Thanks for the neat tool.

I'm trying it out tonight and have hit a roadblock that I can't seem to make it around. I'm looking to add a conditional branch to my pipeline -- i.e. if a certain element is visible on the page, then click it and fill out some form, if that element is not visible then just proceed to whatever else you were going to do.

I can't seem to figure out a way to do this without dropping down to raw JS for that alternate flow in an `evaluate` -- which kind of defeats the whole purpose of using this abstraction. I thought about adding the control flow in the callback used in `run()`, but it seems that the `nightmare` instance returned as the second argument there has already been deconstructed, meaning I can't queue up any further interactions with it.

Are there any examples of this functionality?
",trestletech,2015-08-17 06:27:07
36,2014-10-09 07:02:57,"yeah this is a great question. maybe `.run()` should have a `keepalive` parameter so that you can do the branching outside the fluent api. definitely agree that branching/looping can be necessary.
",reinpk,2015-08-17 06:27:07
36,2014-10-10 14:38:19,"yes..this enhancement if being implemented would be really helpful..
",arjunnambiartc,2015-08-17 06:27:07
36,2014-10-21 13:51:23,"I pushed a noTeardown pull request, but I was thinking there is an alternative. The noTeardown option, which keeps Nightmare alive after .run() so you can do conditional flow is really just trying to force the chained api to work in a non-chained way, and it's kind of messy. If you're doing a lot of conditional work, you'll end up in a hard-to-manage callback hell.

Alternatively, we could re-architect Nightmare to run through it's chain synchronously, and offer an explicit .close() method to get do the teardown when all work is complete.
An example:

<S_CODE_TOKEN>

It'd be a major change, and I know forcing synchronicity on Node may make some people grab their pitchforks, but I think it would make Nightmare easier to use.
",johntitus,2015-08-17 06:27:07
36,2014-11-02 06:20:55,"+1 to follow on this issue.
What I tried to do is to submit the form for each drop down list option on the page, can't figure out how to do it with current API.
",leesei,2015-08-17 06:27:07
36,2015-02-03 16:09:04,"I've worked around this by using .use(). Inside this function, the queue is ""paused"", so you can control flow. Also, using this plugin interface help to avoid callback hell.
",samuelmeireles,2015-08-17 06:27:07
36,2015-02-10 18:25:08,"I'm struggling with this issue too - I assumed that the 'nightmare' object that's passed into the callback to 'run' would allow further queuing and running.

it looks like I'll have to re-login and initiate my session for each branch in my flow until another option comes along.
",jfrumar,2015-08-17 06:27:07
36,2015-03-07 16:18:11,"I ran into this problem too and found that nightmare doesn't support my needs, so I'm currently working on an alternative called [Phantasma](https://github.com/petecoop/phantasma) which uses Promises to handle the asynchronous methods, rather than queueing. Which means you can change control flow at any point.

It's not ready yet, when I'm sure it's stable I'll release v1.0 however would be nice to have some early feedback either on the API or by beta testing - everything in the API docs is working so far (however before 1.0 release may change at any point).

https://github.com/petecoop/phantasma
",petecoop,2015-08-17 06:27:07
36,2015-03-07 17:00:18,"That looks really compelling Pete! Please let us know when it's ready.

Sent from my Android
On Mar 7, 2015 8:18 AM, ""Pete Cooper"" notifications@github.com wrote:

> I ran into this problem too and found that nightmare doesn't support my
> needs, so I'm currently working on an alternative called Phantasma
> https://github.com/petecoop/phantasma which uses Promises to handle the
> asynchronous methods, rather than queueing. Which means you can change
> control flow at any point.
> 
> It's not ready yet, when I'm sure it's stable I'll release v1.0 however
> would be nice to have some early feedback either on the API or by beta
> testing - everything in the API docs is working so far (however before 1.0
> release may change at any point).
> 
> https://github.com/petecoop/phantasma
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/segmentio/nightmare/issues/36#issuecomment-77696017.
",jfrumar,2015-08-17 06:27:07
36,2015-03-08 10:00:50,"Thanks @jfrumar, will do! I've created a [v1.0 milestone](https://github.com/petecoop/phantasma/milestones/v1.0.0) with the issues I aim to complete before going 1.0
",petecoop,2015-08-17 06:27:07
36,2015-03-12 00:29:26,"Hey @jfrumar, I've just released v1.0 as I've met my original goals - check it out https://github.com/petecoop/phantasma

Open an issue if you've got any feedback 
",petecoop,2015-08-17 06:27:07
36,2015-08-17 06:27:07,"long awaited... but v2 #200 uses generators and an explicit `.end()` method to improve the flow control.
",reinpk,2015-08-17 06:27:07
35,2014-10-07 19:27:38,"Is nightmare seems like it would be a suitable solution for web scraping. Do you think you could write an example?
",jwmarshall,2014-10-09 07:08:41
35,2014-10-09 07:08:41,"potentially, there are probably more efficient ways of doing it than phantomjs though. phantom will execute all the js and load all the images, etc. most likely you just need to look at the raw html of the website, which you could do with just an http request.
",reinpk,2014-10-09 07:08:41
35,2014-10-20 10:35:59,"Actually using PhantomJS is the better solution for webscraping since merely parsing the HTML returned by the server won't work but for the most simple web applications. You want the JS to run and to contribute to building the page. There are many web applications you cannot web scrape without such a solution. I have been using CasperJS to do just that before finding Nightmare (all my code is still in CasperJS at this time). @jwmarshall, I wouldn't call the following a complete web scraping example but it does run a function in phantomJS, accessing jQuery on the page and returning the results for the server side to process: https://gist.github.com/edasque/df1a8f48f3e0528ae3f8
",edasque,2014-10-09 07:08:41
34,2014-10-07 16:40:51,,johntitus,2014-10-15 07:21:06
34,2014-10-09 09:36:23,"Can you maybe change function calls/definitions like

<S_CODE_TOKEN>

to

<S_CODE_TOKEN>

just so it's consistent with the existing code style.

Also, what do you guys think: When there's a option to inject js into the page there should also be an option to inject css easily:

<S_CODE_TOKEN>
",queckezz,2014-10-15 07:21:06
34,2014-10-09 16:01:29,"this is cool! i think `.inject()` is a cleaner method name, and it would be cool to be able to inject css as well. css wouldn't be a direct translation to a phantomjs method but [it looks doable](http://stackoverflow.com/questions/20950013/phantomjs-inline-html-with-external-css-file)
",reinpk,2014-10-15 07:21:06
34,2014-10-09 17:19:47,"Should work for js or css now. It works by getting the page contents and appending either a `<style>` or `<script>` tag. Does not use the phantom.injectJs method, which it did previously, because that seemed to overwrite injected CSS. 

It does require a `'type'` param, of either js or css. I could try and guess the file type based on the string ending in .css or .js, but I wasn't sure if that was a good approach or not.
",johntitus,2014-10-15 07:21:06
34,2014-10-13 01:00:54,"this is looking sweet other than a few nits. could you rebase and squash the commits as well? thanks @johntitus!
",reinpk,2014-10-15 07:21:06
34,2014-10-15 07:21:15,"thanks @johntitus!
",reinpk,2014-10-15 07:21:06
34,2014-10-15 07:26:16,"published with 1.2.0
",reinpk,2014-10-15 07:21:06
33,2014-10-07 05:07:19,"I promise I'm not going to open a billion issues.

I'm tying to set viewport and take a screenshot with:

<S_CODE_TOKEN>

The resulting `yahoo-320.png` and `yahoo-1000.png` have no diff. I tried with viewport params as integers and strings. Same result.
",gotoplanb,2014-10-07 13:01:36
33,2014-10-07 13:01:36,"Set viewport higher and now works. You do have to make sure the site you .screenshot() is responsive.

Example:

<S_CODE_TOKEN>
",gotoplanb,2014-10-07 13:01:36
32,2014-10-07 04:43:44,"Cloned project. cd to project. npm install. created a `google.js` with:

<S_CODE_TOKEN>

tried running `node google.js`

Error:

<S_CODE_TOKEN>
",gotoplanb,2014-10-07 04:53:27
32,2014-10-07 04:50:54,"ah, yeah it's pulled from a bigger example, sorry will update that now. the `fn` function in the code snippet there is not defined. here's the updated snippet with fix that i'll put in the readme shortly:

<S_CODE_TOKEN>

Yahoo seems to have nicer named elements for an example, this works for me locally with 1.1.0
",reinpk,2014-10-07 04:53:27
32,2014-10-07 04:53:27,"fixed in 3e9573358, thanks!
",reinpk,2014-10-07 04:53:27
32,2014-10-07 04:54:38,"Great! Thank you!
",gotoplanb,2014-10-07 04:53:27
31,2014-10-06 18:09:05,,EvanHahn,2014-10-06 18:14:23
31,2014-10-06 18:14:20,"derp, thanks!
",reinpk,2014-10-06 18:14:23
30,2014-10-06 18:01:41,"Trying to add direct checkbox and select dropdown support but can't get the tests to pass. Think it makes sense to break the tests for each of those methods apart...  Was trying to run them against a raw custom jsFiddle but jsfiddle ends up wrapping it in an iframe (even if you use the raw src url) so that you can't reach it with js... will need to use a different test site
",sperand-io,2014-11-09 22:09:35
30,2014-10-13 01:07:11,"super welcome addition once the testing is worked out! if you could rebase and squash actually that would be super nice :)
",reinpk,2014-11-09 22:09:35
30,2014-11-09 06:29:08,"if #74 would be the key piece for getting testing in place, let me know, would love to see this added but it'll need a rebase, squash, etc.
",reinpk,2014-11-09 22:09:35
30,2014-11-09 21:46:17,"nope, for now these methods this could definitely be tested against something existing and reliable like everything else. i'll get something together today then fix up the commit history.

in the future, if you think it's necessary, i'd definitely be happy to help with something like #74 though!
",sperand-io,2014-11-09 22:09:35
30,2014-11-09 22:09:35,"this is a mess -- closing and opening a new pr
",sperand-io,2014-11-09 22:09:35
29,2014-10-06 17:24:58,"In the [simple api](http://www.nightmarejs.org/#simple-api) section of the website, the code formatting(?) is converting the double-quotes to &amp;#x201d; (ironically enough, not 201f for the opening quote) and the apostrophes to &amp;#x2018; and &amp;#x2019; in the code snippets.

This stops users from copy-and-pasting the examples into their terminal or their editor, along with looking out of place with the rest of the fixed-width font.
",mdaniel,2014-10-07 05:01:11
29,2014-10-07 05:01:08,"dang yeah that's mad annoying. thanks for the heads up, fixed in https://github.com/segmentio/nightmarejs.org/commit/3c7b6193467d9b1cc20c0485dac662c6ba5ab998
",reinpk,2014-10-07 05:01:11
28,2014-10-06 00:16:52,"had to handle some weird timing issues around ports already in use, but passes tests with a new way to handle creating/terminating instances. should clean up after itself now.
",reinpk,2014-10-06 00:17:19
28,2014-10-06 00:17:16,"fixes #26 and fixes #22 
",reinpk,2014-10-06 00:17:19
27,2014-10-05 20:53:08,"cc @lambtron 
",reinpk,2014-10-05 20:53:12
26,2014-09-16 17:03:33,"Right now I have to do:

<S_CODE_TOKEN>

So my test runner can exit and the Node process can terminate (I know Mocha does some trickery to close stuff for you but other frameworks do not -- for instance `tap` and `tape`).

Would it makes sense to either expose the `PHANTOM_INSTANCE` or add a method to exit?
",wavded,2014-10-06 00:17:21
25,2014-07-24 18:32:12,,reinpk,2014-07-24 18:32:16
24,2014-07-15 14:19:10,"Why would a wait timeout not result in an error considering it would not be yielding the expected result?
",ZombieHippie,2014-10-14 23:48:29
24,2014-10-05 20:58:03,"i think i did this because of irregular event triggering by phantomjs, where oftentimes a timeout was a false negative (i.e. everything had worked correctly, but phantom was being uncommunicative).

what's the use case or error you're seeing specifically? i'd like to investigate it more deeply and see if there are some improvements to be made there.
",reinpk,2014-10-14 23:48:29
24,2014-10-14 23:48:29,"closing until there's more details, keep me posted!
",reinpk,2014-10-14 23:48:29
23,2014-07-15 13:40:08,"Weak is a module that requires cpp compilation which is a [terrible experience for Windows developers](https://github.com/sgentle/phantomjs-node#use-it-in-windows) and it can be disabled through the `phantom.create` option: `{ dnodeOpts: { weak: false } }`

Since phantom port is already an implemented option, this would be implemented in much of the same way.
",ZombieHippie,2014-10-20 06:08:02
23,2014-10-09 07:09:38,"interesting! definitely open to a pull request here
",reinpk,2014-10-20 06:08:02
23,2014-10-20 06:08:02,"fixed in 1.3.3
",reinpk,2014-10-20 06:08:02
23,2014-10-20 11:37:27,"Nice addition, thanks!

On Mon, Oct 20, 2014 at 1:08 AM, Peter Reinhardt notifications@github.com
wrote:

> Closed #23 https://github.com/segmentio/nightmare/issues/23.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/segmentio/nightmare/issues/23#event-180642932.
",ZombieHippie,2014-10-20 06:08:02
22,2014-07-11 21:45:58,"causing the bloat on hubeau
",tj,2014-10-06 00:17:21
22,2014-07-11 21:49:19,"noooooooo sorry guys
",reinpk,2014-10-06 00:17:21
22,2014-07-11 22:24:53,"s'all good :D 
",tj,2014-10-06 00:17:21
22,2014-07-24 18:32:57,"@visionmedia what processes are still running, phantomjs processes?
",reinpk,2014-10-06 00:17:21
22,2014-07-24 18:50:01,"yup, it seems decent right now, only a few but when I opened this there was a few hundred I think:

<S_CODE_TOKEN>
",tj,2014-10-06 00:17:21
21,2014-06-28 21:39:35,"eg:

<S_CODE_TOKEN>

if you dont care to wait for it to finish (like when running on a loop)
",ianstormtaylor,2014-07-24 18:32:16
21,2014-06-28 21:54:27,"the issue is just that if it's not passed then the callback is undefined but invoked here?
https://github.com/segmentio/nightmare/blob/master/lib/index.js#L56
",reinpk,2014-07-24 18:32:16
21,2014-06-29 00:40:39,"yup, just a convenience thing i ran into while working on something that ran nightmare on an interval
",ianstormtaylor,2014-07-24 18:32:16
20,2014-05-16 17:07:14,"A cool idea might be to add the ability for each plugin to append metadata to the `nightmare` instance. I know that [metalsmith](https://github.com/segmentio/metalsmith) does the exact same thing. It would be incredibly helpful when you try to communicate with those different plugins and easier for testing.

<S_CODE_TOKEN>

won't be too difficult to implement. I can make a PR if this make sense to add in.
",queckezz,2014-11-09 06:26:25
20,2014-05-19 00:54:20,"what's an example use case for nightmare?
",reinpk,2014-11-09 06:26:25
19,2014-05-11 00:36:07,,reinpk,2014-05-11 00:42:10
18,2014-05-11 00:35:54,,reinpk,2014-05-19 00:53:39
18,2014-05-11 08:46:20,"Can we alias these?

<S_CODE_TOKEN>
",queckezz,2014-05-19 00:53:39
18,2014-05-11 10:04:54,"+1
",juliangruber,2014-05-19 00:53:39
18,2014-05-19 00:53:36,"fixed in e649e5717e8
",reinpk,2014-05-19 00:53:39
17,2014-05-03 19:34:36,"otherwise there are some problems with the native `weak` bindings
",queckezz,2014-05-06 06:32:58
17,2014-05-06 06:32:56,"thanks! LGTM
",reinpk,2014-05-06 06:32:58
16,2014-04-28 21:52:51,"Hey guys!

First off thanks for the awesome PhantomJS wrapper. I really enjoy the approach you took to queuing actions upfront, and the plugin architecture.

---

I ran into a scenario where multiple Nightmare instances would be spun up at the same time, but in separate node processes, and found that the ports were colliding between the two processes.

In order to work around this, I added an option to the constructor for specifying port, so that I could eventually randomize the port when the node processes were being created to minimize collision.

I thought I'd post back the contribution, to get your guys feedback on it. I didn't see any specific tests around constructor options, but I'm happy to add some, if you guys want.

Thanks!
",stevenschobert,2014-05-03 23:29:07
16,2014-05-03 23:29:09,"looks good, thanks!
",reinpk,2014-05-03 23:29:07
15,2014-04-20 18:04:24,"I tried to fix https://github.com/segmentio/nightmare/issues/10. Not really sure if this is the right way but it's the simplest I have come up with. Basically we just run each plugin seperate and call the next function in the main queue when the given plugin is done.

<S_CODE_TOKEN>

Would love to hear what you think and if it makes sense to `.run()` each plugin. @reinpk
",queckezz,2014-05-11 00:46:46
15,2014-05-11 00:46:44,"thanks @queckezz! good idea here, going to eliminate the `done` parameter and just internalize that into the `.use()` method.
",reinpk,2014-05-11 00:46:46
15,2014-05-11 08:46:37,"Awesome! I just took a peek at the changes, updated my current version and it works great now!
",queckezz,2014-05-11 00:46:46
15,2014-05-11 18:43:41,"thanks for your help!
",reinpk,2014-05-11 00:46:46
14,2014-04-14 16:45:20,,queckezz,2014-04-14 16:47:53
14,2014-04-14 16:47:56,"nice thanks!
",reinpk,2014-04-14 16:47:53
14,2014-04-14 17:01:22,"published as 0.1.7
",reinpk,2014-04-14 16:47:53
13,2014-04-14 14:35:14,"The debug package at version ^0.7.4 is causing an error upon install. Changing it to ~0.7.4 solved the problem for me.
",fgascon,2014-04-14 15:00:20
13,2014-04-14 14:36:09,"can you update your npm?

<S_CODE_TOKEN>
",juliangruber,2014-04-14 15:00:20
13,2014-04-14 15:00:20,"Thanks! That solved the problem. I didn't realized I had an old version of npm, it works well with version 1.4.6.
",fgascon,2014-04-14 15:00:20
12,2014-04-14 03:51:52,"It's nearly impossible to debug automation scripts without seeing what's going on. So far I've been lamely `scp`-ing screenshots from `.screen()` calls back to my local machine and then inspecting.

The idea here would be to have a singleton server with a simple page showing a list of running Nightmare instances. Clicking an instance would let you observe the instance's behavior in close to real time, with the instance adding a screenshot step in between every action. When the viewer disconnected it would automatically stop screenshotting.
",reinpk,2014-05-11 00:38:13
12,2014-05-11 00:38:13,"out of scope, maybe a separate repo that plugs in some how
",reinpk,2014-05-11 00:38:13
11,2014-04-14 03:40:38,"because none of the lower layers will throw an error apparently :/
",reinpk,2014-11-02 00:39:23
10,2014-04-09 18:26:13,"Let's say I have a simple search task:

<S_CODE_TOKEN>

The return function get's executed immediately after nightmare is instantiated. If `search()` returns some properties that I want to use for `plugin()`, they would be undefined since the function was executed before the plugin.

Not sure if this can be done and if I'm missing something but the `.use()` function could be added to the queue so that all the other tasks before finishes first.
",queckezz,2014-05-11 00:46:46
10,2014-04-09 18:28:49,"interesting, yeah i'm trying to think through how to embed a bit more logic/branching + the same kind of delayed execution for nightmare-swiftly plugin as well. thanks for the suggestion here, hopefully can work it into some more changes today.
",reinpk,2014-05-11 00:46:46
10,2014-04-09 20:06:38,"ok, since normal queued methods just get pushed onto the end, you could have something like this:

<S_CODE_TOKEN>

If .use() just pushes like a normal queued function, then the actual execution order would get messed up where `screen` came before the both `tw` plugins.

So we'd need to insert the plugins ""in place"" where the `use` was queued, rather than pushing them on.
",reinpk,2014-05-11 00:46:46
9,2014-04-08 09:35:32,"Great work on the latest commits, much nicer now :) (Also I noticed some speed improvements since you changed to phantomjs-node)

There is one problem with the `.run()` method though:

<S_CODE_TOKEN>

then the output would be:

<S_CODE_TOKEN>

which doesn't make sense, right? It should first report the `1` and then it should invoke the callback from `.run()`. Right now it's the opposite. Couldn't figure out why though.

Quick fix is to throw a `.wait(500)` in between. But this gets quite hard to guess the time it takes for `.evaluate()` to finish especially if it does not always have the same execution time.
",queckezz,2014-04-08 18:02:25
9,2014-04-08 14:32:35,"interesting, looks like the wrapper could maintain the order there:
https://github.com/segmentio/nightmare/blob/master/lib/index.js#L167-L168

will investigate tonight!
",reinpk,2014-04-08 18:02:25
9,2014-04-08 18:02:53,"thanks! sharp eyes my friend!
",reinpk,2014-04-08 18:02:25
8,2014-04-08 05:22:36,,reinpk,2014-04-08 05:22:46
7,2014-04-08 04:22:02,"Here's an example of how we can abstract out Swiftly methods:

<S_CODE_TOKEN>

<S_CODE_TOKEN>
",reinpk,2014-04-08 05:22:05
7,2014-04-08 04:22:47,"also results in removing `.error()` since that would be handled by `.done(err, self)`
",reinpk,2014-04-08 05:22:05
7,2014-04-08 05:22:05,"good suggestions @ianstormtaylor, just released those changes, thanks!
",reinpk,2014-04-08 05:22:05
6,2014-04-08 00:56:00,,reinpk,2014-04-08 00:57:04
5,2014-04-07 10:19:29,"There are some major problems with node-phantom: 
- https://github.com/alexscheelmeyer/node-phantom/issues/83
- https://github.com/alexscheelmeyer/node-phantom/issues/89

The repository hasn't changed since 6 months ago and he hasn't replied to any of those issues. [phantomjs-node](https://github.com/sgentle/phantomjs-node) is much more active and has the above issue fixed. 

No need for those 

<S_CODE_TOKEN>

hacks.
",queckezz,2014-04-08 00:57:27
5,2014-04-07 16:47:16,"mmm great point, didn't do much diligence on it, but phantomjs-node does look healthier. would definitely accept a pr, otherwise i'll probably hack on it next weekend :D
",reinpk,2014-04-08 00:57:27
5,2014-04-08 00:57:27,"good idea, thanks! just merged the change
",reinpk,2014-04-08 00:57:27
4,2014-04-07 10:12:03,,queckezz,2014-04-08 00:57:05
4,2014-04-07 16:44:14,"thanks @queckezz! just noticed that while i made the changes yesterday i forgot to push (also added `.agent()`) i'll close now that i've pushed/published.
",reinpk,2014-04-08 00:57:05
4,2014-04-07 17:39:11,"sweet, thanks! You should probably test if the viewport changes. Something like this:

<S_CODE_TOKEN>
",queckezz,2014-04-08 00:57:05
4,2014-04-07 17:41:39,"good idea :)
",reinpk,2014-04-08 00:57:05
4,2014-04-07 17:42:56,"Also, are you sure changing the agent works? I tried the same thing and it didn't work properly. when I tried to check for `navigator.userAgent` in the browser, they wouldn't match up. There are bugs in node-phantom involving this:
alexscheelmeyer/node-phantom#83
",queckezz,2014-04-08 00:57:05
4,2014-04-07 18:40:12,"dang, yeah i definitely need to fix up the tests. hopefully next weekend as part of the switch to the other phantomjs-node lib
",reinpk,2014-04-08 00:57:05
3,2014-04-07 06:54:15,"looks like there is no way of getting out of `run` method and continue the chain, see the code below..

<S_CODE_TOKEN>
",anasnakawa,2014-04-08 00:57:05
3,2014-04-07 07:20:40,"the problem is throwing the error in the callback or an error happening in evaluating `fn` on the page?
",reinpk,2014-04-08 00:57:05
3,2014-04-07 07:39:49,"the error is not thrown ( `err = null` ),
assuming the happy path in the example above, the code does not seem to move on to the `done` method.
",anasnakawa,2014-04-08 00:57:05
3,2014-04-07 08:43:00,"it also hangs for me. As soon as you `.run()` it won't go to the next chained fn:

<S_CODE_TOKEN>

The process never exits. There is also never an error thrown into `noop(err, res)`
",queckezz,2014-04-08 00:57:05
2,2014-04-06 19:54:19,"Would be awesome if we could add an option to change the userAgent. 

Maybe we could add it as an optional parameter to the `.goto` function.

<S_CODE_TOKEN>

But it might be better to set something like this global and add it to the options object for `nightmare`

<S_CODE_TOKEN>

you can modify the user agent in phantomjs from `page.settings.userAgent`.

btw, great libary! So much easier to work with, especially without the callback hell and those unnecessary complex function names :p
",queckezz,2014-04-08 00:57:39
2,2014-04-06 20:07:10,"You might want to change the agent to see how a site reacts, so maybe more like this:

<S_CODE_TOKEN>
",juliangruber,2014-04-08 00:57:39
2,2014-04-06 23:50:57,"setting the `viewport` seems similar. at the moment that's an option to the constructor, but i see julian's point and could imagine wanting to change the viewport to check for responsive changes as well.

thinking of adding both as methods:

<S_CODE_TOKEN>
",reinpk,2014-04-08 00:57:39
2,2014-04-07 20:26:48,"reopening until the tests are fixed
",reinpk,2014-04-08 00:57:39
2,2014-04-08 00:57:39,"works in the proper tests now :)
",reinpk,2014-04-08 00:57:39
1,2014-04-06 14:01:34,"is there an easy way to access the `window` object ?
",anasnakawa,2014-04-06 18:01:33
1,2014-04-06 16:40:45,"i am planning to add a `.run(fn, cb, [args])` method that lets you execute javascript on the page and get back results in a callback, is that the gist of what you're thinking?
",reinpk,2014-04-06 18:01:33
1,2014-04-06 17:54:56,"perfect.
",anasnakawa,2014-04-06 18:01:33
1,2014-04-06 18:02:12,"fixed in 0.0.10, cheers!
",reinpk,2014-04-06 18:01:33
